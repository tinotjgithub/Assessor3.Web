webpackJsonp([15],{

/***/ 1216:
/* no static exports found */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/components/worklist/markerinformation/examinerstatechangeoption.tsx ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/**\r\n * examinerStateChangeOption contains the available state for the examiner.\r\n * @param props\r\n */\r\nvar examinerStateChangeOption = function (props) {\r\n    return (React.createElement(\"div\", { className: 'approval-options' },\r\n        React.createElement(\"input\", { type: 'radio', value: 'selected', onChange: function () { props.onSelectionChange(); }, id: props.id, name: 'changeStatus', checked: props.isChecked ? true : false }),\r\n        React.createElement(\"label\", { htmlFor: props.id },\r\n            React.createElement(\"span\", { className: 'radio-ui' }),\r\n            React.createElement(\"span\", { className: 'label-text' }, props.stateText))));\r\n};\r\nmodule.exports = examinerStateChangeOption;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L21hcmtlcmluZm9ybWF0aW9uL2V4YW1pbmVyc3RhdGVjaGFuZ2VvcHRpb24udHN4PzgwZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5cclxuaW50ZXJmYWNlIENoYW5nZUV4YW1pbmVyU3RhdGVPcHRpb25Qcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcbiAgICBvblNlbGVjdGlvbkNoYW5nZT86IEZ1bmN0aW9uO1xyXG4gICAgaXNDaGVja2VkOiBib29sZWFuO1xyXG4gICAgc3RhdGVUZXh0OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBleGFtaW5lclN0YXRlQ2hhbmdlT3B0aW9uIGNvbnRhaW5zIHRoZSBhdmFpbGFibGUgc3RhdGUgZm9yIHRoZSBleGFtaW5lci5cclxuICogQHBhcmFtIHByb3BzXHJcbiAqL1xyXG5jb25zdCBleGFtaW5lclN0YXRlQ2hhbmdlT3B0aW9uOiBSZWFjdC5TdGF0ZWxlc3NDb21wb25lbnQ8Q2hhbmdlRXhhbWluZXJTdGF0ZU9wdGlvblByb3BzPiA9IChwcm9wczogQ2hhbmdlRXhhbWluZXJTdGF0ZU9wdGlvblByb3BzKSA9PiB7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYXBwcm92YWwtb3B0aW9ucyc+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdyYWRpbycgdmFsdWU9J3NlbGVjdGVkJyBvbkNoYW5nZT17KCkgPT4geyBwcm9wcy5vblNlbGVjdGlvbkNoYW5nZSgpOyB9IH0gaWQ9e3Byb3BzLmlkfSBuYW1lPSdjaGFuZ2VTdGF0dXMnXHJcbiAgICAgICAgICAgICAgICBjaGVja2VkPXtwcm9wcy5pc0NoZWNrZWQgPyB0cnVlIDogZmFsc2V9IC8+XHJcbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPXtwcm9wcy5pZH0+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3JhZGlvLXVpJz48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2xhYmVsLXRleHQnPntwcm9wcy5zdGF0ZVRleHR9PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCA9IGV4YW1pbmVyU3RhdGVDaGFuZ2VPcHRpb247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L21hcmtlcmluZm9ybWF0aW9uL2V4YW1pbmVyc3RhdGVjaGFuZ2VvcHRpb24udHN4Il0sIm1hcHBpbmdzIjoiO0FBQUE7QUFTQTs7O0FBR0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFJQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 486:
/* no static exports found */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/utility/teammanagement/helpers/helpexaminersdatahelper.ts ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar teamManagementStore = __webpack_require__(/*! ../../../stores/teammanagement/teammanagementstore */ 245);\r\nvar enums = __webpack_require__(/*! ../../../components/utility/enums */ 225);\r\n/**\r\n * Helper class for help examiner data\r\n */\r\nvar HelpExaminerDataHelper = /** @class */ (function () {\r\n    function HelpExaminerDataHelper() {\r\n        var _this = this;\r\n        /**\r\n         * Get SEP Actions.\r\n         */\r\n        this.getSEPActions = function (examinerRoleId) {\r\n            if (teamManagementStore && teamManagementStore.instance.examinersForHelpExaminers) {\r\n                _this.sepActions = new Array();\r\n                var examinersForHelpExaminers = teamManagementStore.instance.examinersForHelpExaminers.toArray();\r\n                examinersForHelpExaminers.forEach(function (examiner) {\r\n                    if (examiner.examinerRoleId === examinerRoleId) {\r\n                        var actions = examiner.actions;\r\n                        actions.forEach(function (item) {\r\n                            if (item === enums.SEPAction.ProvideSecondStandardisation\r\n                                || item === enums.SEPAction.Approve\r\n                                || item === enums.SEPAction.Re_approve\r\n                                || item === enums.SEPAction.SendMessage) {\r\n                                _this.sepActions.push(item);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            return _this.sepActions;\r\n        };\r\n    }\r\n    return HelpExaminerDataHelper;\r\n}());\r\nmodule.exports = HelpExaminerDataHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvdGVhbW1hbmFnZW1lbnQvaGVscGVycy9oZWxwZXhhbWluZXJzZGF0YWhlbHBlci50cz83MWNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZWFtTWFuYWdlbWVudFN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL3RlYW1tYW5hZ2VtZW50L3RlYW1tYW5hZ2VtZW50c3RvcmUnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2VudW1zJyk7XHJcblxyXG4vKipcclxuICogSGVscGVyIGNsYXNzIGZvciBoZWxwIGV4YW1pbmVyIGRhdGFcclxuICovXHJcbmNsYXNzIEhlbHBFeGFtaW5lckRhdGFIZWxwZXIge1xyXG5cclxuICAgIHByaXZhdGUgc2VwQWN0aW9uczogQXJyYXk8bnVtYmVyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBTRVAgQWN0aW9ucy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFNFUEFjdGlvbnMgPSAoZXhhbWluZXJSb2xlSWQgOiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAodGVhbU1hbmFnZW1lbnRTdG9yZSAmJiB0ZWFtTWFuYWdlbWVudFN0b3JlLmluc3RhbmNlLmV4YW1pbmVyc0ZvckhlbHBFeGFtaW5lcnMpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXBBY3Rpb25zID0gbmV3IEFycmF5PG51bWJlcj4oKTtcclxuICAgICAgICAgICAgbGV0IGV4YW1pbmVyc0ZvckhlbHBFeGFtaW5lcnMgPSB0ZWFtTWFuYWdlbWVudFN0b3JlLmluc3RhbmNlLmV4YW1pbmVyc0ZvckhlbHBFeGFtaW5lcnMudG9BcnJheSgpO1xyXG4gICAgICAgICAgICBleGFtaW5lcnNGb3JIZWxwRXhhbWluZXJzLmZvckVhY2goKGV4YW1pbmVyOiBFeGFtaW5lckRhdGFGb3JIZWxwRXhhbWluZXIpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChleGFtaW5lci5leGFtaW5lclJvbGVJZCA9PT0gZXhhbWluZXJSb2xlSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYWN0aW9ucyA9IGV4YW1pbmVyLmFjdGlvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucy5mb3JFYWNoKChpdGVtOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT09IGVudW1zLlNFUEFjdGlvbi5Qcm92aWRlU2Vjb25kU3RhbmRhcmRpc2F0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBpdGVtID09PSBlbnVtcy5TRVBBY3Rpb24uQXBwcm92ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgaXRlbSA9PT0gZW51bXMuU0VQQWN0aW9uLlJlX2FwcHJvdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGl0ZW0gPT09IGVudW1zLlNFUEFjdGlvbi5TZW5kTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXBBY3Rpb25zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5zZXBBY3Rpb25zO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBIZWxwRXhhbWluZXJEYXRhSGVscGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS90ZWFtbWFuYWdlbWVudC9oZWxwZXJzL2hlbHBleGFtaW5lcnNkYXRhaGVscGVyLnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBSUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 587:
/* no static exports found */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/components/worklist/markerinformation/examinerstatechangepopup.tsx ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar GenericButton = __webpack_require__(/*! ../../utility/genericbutton */ 290);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar ExaminerStateChangeOption = __webpack_require__(/*! ./examinerstatechangeoption */ 1216);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar operationModeHelper = __webpack_require__(/*! ../../utility/userdetails/userinfo/operationmodehelper */ 289);\r\nvar helpExaminersDataHelper = __webpack_require__(/*! ../../../utility/teammanagement/helpers/helpexaminersdatahelper */ 486);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar stringHelper = __webpack_require__(/*! ../../../utility/generic/stringhelper */ 254);\r\nvar constants = __webpack_require__(/*! ../../utility/constants */ 241);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar applicationStore = __webpack_require__(/*! ../../../stores/applicationoffline/applicationstore */ 247);\r\nvar applicationActionCreator = __webpack_require__(/*! ../../../actions/applicationoffline/applicationactioncreator */ 256);\r\nvar teamManagementActionCreator;\r\nvar examinerStatuseArguments;\r\nvar teamManagementStore;\r\nvar secondStandardisationArguments;\r\nvar qigActionCreator;\r\nvar worklistActionCreator;\r\n/**\r\n * ExaminerStateChangePopup contain team change status options, ok and cancel buttons.\r\n * @param props\r\n * @param state\r\n */\r\nvar ExaminerStateChangePopup = /** @class */ (function (_super) {\r\n    __extends(ExaminerStateChangePopup, _super);\r\n    /**\r\n     * Constructor Messagepopup\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function ExaminerStateChangePopup(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.defaultSelectedOption = enums.ChangeStatusOptions.None;\r\n        /**\r\n         * Save examiner state change selection in to data base.\r\n         */\r\n        _this.saveChangeExaminerStateSelection = function () {\r\n            _this.isShowPopup = false;\r\n            _this.setState({ renderedOn: Date.now() });\r\n            //On clicking OK button in change examiner status popup\r\n            // Please check whether application is online.\r\n            // If yes, proceed with saving the examiner status otherwise interrupt action.\r\n            if (applicationStore.instance.isOnline) {\r\n                // Save examiner status only if the selected approval status not equal to current status.\r\n                // do save only if some other option is being selected\r\n                if (_this.selectedExaminerStatus !== _this.defaultSelectedOption) {\r\n                    teamManagementActionCreator.setExaminerChangeStatusButtonBusy();\r\n                    if (_this.sepActions && _this.sepActions.length > 0) {\r\n                        // SEP Action Execution\r\n                        _this.executeSEPApprovalManagementAction();\r\n                    }\r\n                    else {\r\n                        if (_this.selectedExaminerStatus === enums.ChangeStatusOptions.SendForSecondStandardisation) {\r\n                            // Non SEP Send For Second STD\r\n                            _this.provideSecondStandardisation();\r\n                        }\r\n                        else {\r\n                            // Non SEP Status Change\r\n                            _this.changeExaminerStatus();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                applicationActionCreator.checkActionInterrupted();\r\n            }\r\n        };\r\n        /**\r\n         * Save examiner state change selection in to data base.\r\n         */\r\n        _this.onSelectionChange = function (changeStateOption) {\r\n            _this.isApprovedChecked = false;\r\n            _this.iscurrentStateChecked = false;\r\n            _this.isSecondStandardisationAvailableChecked = false;\r\n            _this.isReApprovedChecked = false;\r\n            _this.isSuspendedOptionChecked = false;\r\n            _this.isApprovedPendingReviewChecked = false;\r\n            switch (changeStateOption) {\r\n                case _this.defaultSelectedOption:\r\n                    _this.iscurrentStateChecked = true;\r\n                    break;\r\n                case enums.ChangeStatusOptions.Approved:\r\n                    _this.isApprovedChecked = true;\r\n                    break;\r\n                case enums.ChangeStatusOptions.Suspended:\r\n                    _this.isSuspendedOptionChecked = true;\r\n                    break;\r\n                case enums.ChangeStatusOptions.SendForSecondStandardisation:\r\n                    _this.isSecondStandardisationAvailableChecked = true;\r\n                    break;\r\n                case enums.ChangeStatusOptions.Re_approve:\r\n                    _this.isReApprovedChecked = true;\r\n                    break;\r\n                case enums.ChangeStatusOptions.AprovedPendingReview:\r\n                    _this.isApprovedPendingReviewChecked = true;\r\n                    break;\r\n            }\r\n            _this.selectedExaminerStatus = changeStateOption;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Cancel the examiner state change selection.\r\n         */\r\n        _this.cancelExaminerStateChangeSelection = function () {\r\n            _this.isShowPopup = false;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Handles the action event for showing change status popup.\r\n         */\r\n        _this.toggleExaminerChangeStatusPopup = function (isPopupVisible) {\r\n            _this.bindChangeStatusOption();\r\n            _this.isShowPopup = isPopupVisible;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        // Set the default states\r\n        _this.state = {\r\n            renderedOn: 0\r\n        };\r\n        _this.saveChangeExaminerStateSelection = _this.saveChangeExaminerStateSelection.bind(_this);\r\n        _this.cancelExaminerStateChangeSelection = _this.cancelExaminerStateChangeSelection.bind(_this);\r\n        _this.isSecondStandardisationOptionAvailable = false;\r\n        _this.isShowPopup = false;\r\n        _this.toggleExaminerChangeStatusPopup = _this.toggleExaminerChangeStatusPopup.bind(_this);\r\n        _this.helpExaminersDataHelper = new helpExaminersDataHelper();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    ExaminerStateChangePopup.prototype.render = function () {\r\n        var _this = this;\r\n        var approvedState;\r\n        var secondStandardisationState;\r\n        var aprovedPendingReviewState;\r\n        var currentSelectedState = null;\r\n        var reapprovedState;\r\n        var suspendedState;\r\n        var formattedString;\r\n        if (this.sepActions && this.sepActions.length > 0) {\r\n            // SEP OPTIONS\r\n            this.sepActions.forEach(function (sepaction) {\r\n                if (sepaction === enums.SEPAction.ProvideSecondStandardisation) {\r\n                    secondStandardisationState = (React.createElement(ExaminerStateChangeOption, { id: 'changeStatusStnd', key: 'changeStatusStnd', isChecked: _this.isSecondStandardisationAvailableChecked, stateText: localeStore.instance.\r\n                            TranslateText('team-management.examiner-worklist.change-status-sep.' +\r\n                            enums.SEPAction[sepaction]), onSelectionChange: _this.onSelectionChange.bind(_this, enums.ChangeStatusOptions.SendForSecondStandardisation), selectedLanguage: _this.props.selectedLanguage }));\r\n                }\r\n                if (sepaction === enums.SEPAction.Approve) {\r\n                    approvedState = (React.createElement(ExaminerStateChangeOption, { id: 'changeStatusApprove', key: 'changeStatusApprove', isChecked: _this.isApprovedChecked, stateText: localeStore.instance.\r\n                            TranslateText('team-management.examiner-worklist.change-status-sep.' +\r\n                            enums.SEPAction[sepaction]), onSelectionChange: _this.onSelectionChange.bind(_this, enums.ChangeStatusOptions.Approved), selectedLanguage: _this.props.selectedLanguage }));\r\n                }\r\n                if (sepaction === enums.SEPAction.Re_approve) {\r\n                    reapprovedState = (React.createElement(ExaminerStateChangeOption, { id: 'changeStatusReApprove', key: 'changeStatusReApprove', isChecked: _this.isReApprovedChecked, stateText: stringHelper.format(localeStore.instance.\r\n                            TranslateText('team-management.examiner-worklist.change-status-sep.' +\r\n                            enums.SEPAction[sepaction]), [constants.NONBREAKING_HYPHEN_UNICODE]), onSelectionChange: _this.onSelectionChange.bind(_this, enums.ChangeStatusOptions.Re_approve), selectedLanguage: _this.props.selectedLanguage }));\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // NON SEP Options\r\n            currentSelectedState = (React.createElement(ExaminerStateChangeOption, { id: 'defaultSelectedState', key: 'defaultSelectedState', isChecked: this.iscurrentStateChecked, stateText: localeStore.instance.TranslateText('generic.approval-statuses.' +\r\n                    enums.ExaminerApproval[this.props.currentState]), onSelectionChange: this.onSelectionChange.bind(this, this.defaultSelectedOption), selectedLanguage: this.props.selectedLanguage }));\r\n            if (this.props.currentState === enums.ExaminerApproval.Approved) {\r\n                suspendedState = (React.createElement(ExaminerStateChangeOption, { id: 'changeStatusSuspend', key: 'changeStatusSuspend', isChecked: this.isSuspendedOptionChecked, stateText: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.suspend'), onSelectionChange: this.onSelectionChange.bind(this, enums.ChangeStatusOptions.Suspended), selectedLanguage: this.props.selectedLanguage }));\r\n            }\r\n            if (this.props.currentState === enums.ExaminerApproval.Suspended ||\r\n                this.props.currentState === enums.ExaminerApproval.NotApproved) {\r\n                approvedState = (React.createElement(ExaminerStateChangeOption, { id: 'changeStatusApprove', key: 'changeStatusApprove', isChecked: this.isApprovedChecked, stateText: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.approve'), onSelectionChange: this.onSelectionChange.bind(this, enums.ChangeStatusOptions.Approved), selectedLanguage: this.props.selectedLanguage }));\r\n                aprovedPendingReviewState = (React.createElement(ExaminerStateChangeOption, { id: 'changeStatusApprovePendingReview', key: 'changeStatusaprovedPendingReview', isChecked: this.isApprovedPendingReviewChecked, stateText: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.approve-pending-review'), onSelectionChange: this.onSelectionChange.bind(this, enums.ChangeStatusOptions.AprovedPendingReview), selectedLanguage: this.props.selectedLanguage }));\r\n            }\r\n            if (this.props.currentState === enums.ExaminerApproval.NotApproved) {\r\n                secondStandardisationState = (this.isSecondStandardisationOptionAvailable ? React.createElement(ExaminerStateChangeOption, { id: 'changeStatusStnd', key: 'changeStatusStnd', isChecked: this.isSecondStandardisationAvailableChecked, stateText: localeStore.instance.\r\n                        TranslateText('team-management.examiner-worklist.change-status.send-second-standardisation'), onSelectionChange: this.onSelectionChange.bind(this, enums.ChangeStatusOptions.SendForSecondStandardisation), selectedLanguage: this.props.selectedLanguage }) : null);\r\n            }\r\n            if (this.props.currentState === enums.ExaminerApproval.ApprovedReview) {\r\n                approvedState = (React.createElement(ExaminerStateChangeOption, { id: 'changeStatusApprove', key: 'changeStatusApprove', isChecked: this.isApprovedChecked, stateText: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.approve'), onSelectionChange: this.onSelectionChange.bind(this, enums.ChangeStatusOptions.Approved), selectedLanguage: this.props.selectedLanguage }));\r\n                suspendedState = (React.createElement(ExaminerStateChangeOption, { id: 'changeStatusSuspend', key: 'changeStatusSuspend', isChecked: this.isSuspendedOptionChecked, stateText: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.suspend'), onSelectionChange: this.onSelectionChange.bind(this, enums.ChangeStatusOptions.Suspended), selectedLanguage: this.props.selectedLanguage }));\r\n            }\r\n        }\r\n        return (React.createElement(\"div\", { className: classNames('popup small change-status popup-overlay ', { 'open': this.isShowPopup }), id: 'changeStatus', role: 'dialog', \"aria-labelledby\": 'popup1Title', \"aria-describedby\": 'popup1Desc' },\r\n            React.createElement(\"div\", { className: 'popup-wrap' },\r\n                React.createElement(\"div\", { className: 'popup-content', id: 'popup1Desc' },\r\n                    currentSelectedState,\r\n                    approvedState,\r\n                    aprovedPendingReviewState,\r\n                    reapprovedState,\r\n                    secondStandardisationState,\r\n                    suspendedState),\r\n                React.createElement(\"div\", { className: 'popup-footer text-right' },\r\n                    React.createElement(GenericButton, { id: 'button-rounded-close-button', key: 'key_button rounded close-button', className: 'button rounded close-button', title: localeStore.instance.TranslateText('generic.user-menu.profile-section.cancel-email-button'), content: localeStore.instance.TranslateText('generic.user-menu.profile-section.cancel-email-button'), disabled: false, onClick: this.cancelExaminerStateChangeSelection, selectedLanguage: this.props.selectedLanguage }),\r\n                    React.createElement(GenericButton, { id: 'button-primary-rounded-button', key: 'key_button primary rounded-button', className: 'button primary rounded', title: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.ok-button'), content: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.ok-button'), disabled: false, onClick: this.saveChangeExaminerStateSelection, selectedLanguage: this.props.selectedLanguage })))));\r\n    };\r\n    /**\r\n     * Component did mount\r\n     */\r\n    ExaminerStateChangePopup.prototype.componentDidMount = function () {\r\n        this.loadDependencies();\r\n    };\r\n    /**\r\n     * Component will unmount\r\n     */\r\n    ExaminerStateChangePopup.prototype.componentWillUnmount = function () {\r\n        this.removeEventListeners();\r\n    };\r\n    /**\r\n     *  This will load the dependencies for team management dynamically during component mount.\r\n     */\r\n    ExaminerStateChangePopup.prototype.loadDependencies = function () {\r\n        __webpack_require__.e/* require.ensure */(16).then((function () {\r\n            teamManagementActionCreator = __webpack_require__(/*! ../../../actions/teammanagement/teammanagementactioncreator */ 263);\r\n            examinerStatuseArguments = __webpack_require__(/*! ../../../dataservices/teammanagement/typings/setexaminerstatusearguments */ 603);\r\n            teamManagementStore = __webpack_require__(/*! ../../../stores/teammanagement/teammanagementstore */ 245);\r\n            secondStandardisationArguments = __webpack_require__(/*! ../../../dataservices/teammanagement/typings/setsecondStandardisationarguments */ 604);\r\n            qigActionCreator = __webpack_require__(/*! ../../../actions/qigselector/qigselectoractioncreator */ 253);\r\n            worklistActionCreator = __webpack_require__(/*! ../../../actions/worklist/worklistactioncreator */ 261);\r\n            this.addEventListeners();\r\n        }.bind(this)).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\r\n    };\r\n    /**\r\n     * Hook all event listeners for team management here, It will be called after loading depencies\r\n     * We required this type of implementation for the initial routing page like worklist, responsecontainer etc.\r\n     */\r\n    ExaminerStateChangePopup.prototype.addEventListeners = function () {\r\n        if (markerOperationModeFactory && markerOperationModeFactory.operationMode.isTeamManagementMode) {\r\n            teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.CHANGE_STATUS_POPUP_VISIBILITY_UPDATED, this.toggleExaminerChangeStatusPopup);\r\n        }\r\n    };\r\n    /**\r\n     * Remove all event listeners for team management here.\r\n     */\r\n    ExaminerStateChangePopup.prototype.removeEventListeners = function () {\r\n        if (markerOperationModeFactory && markerOperationModeFactory.operationMode.isTeamManagementMode) {\r\n            teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.CHANGE_STATUS_POPUP_VISIBILITY_UPDATED, this.toggleExaminerChangeStatusPopup);\r\n        }\r\n    };\r\n    /**\r\n     * Verify second standardisation available or not.\r\n     */\r\n    ExaminerStateChangePopup.prototype.verifySecondStandardisationOptionAvailable = function () {\r\n        if (qigStore && qigStore.instance.selectedQIGForMarkerOperation) {\r\n            if (qigStore.instance.selectedQIGForMarkerOperation.hasSecondStandardisationResponseClassified) {\r\n                if (!qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember) {\r\n                    if (qigStore.instance.selectedQIGForMarkerOperation.markingTargets) {\r\n                        this.isSecondStandardisationOptionAvailable = !this.isSecondStandardisationTargetAvailable();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Verify second standardisation target available or not.\r\n     */\r\n    ExaminerStateChangePopup.prototype.isSecondStandardisationTargetAvailable = function () {\r\n        return qigStore.instance.selectedQIGForMarkerOperation.markingTargets.some(function (target) {\r\n            return target.markingMode === enums.MarkingMode.ES_TeamApproval;\r\n        });\r\n    };\r\n    /**\r\n     * Bind change status option.\r\n     */\r\n    ExaminerStateChangePopup.prototype.bindChangeStatusOption = function () {\r\n        var _this = this;\r\n        if (qigStore && qigStore.instance.selectedQIGForMarkerOperation) {\r\n            this.sepActions = this.helpExaminersDataHelper.\r\n                getSEPActions(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId);\r\n        }\r\n        this.iscurrentStateChecked = false;\r\n        this.isApprovedChecked = false;\r\n        this.isSecondStandardisationAvailableChecked = false;\r\n        this.isReApprovedChecked = false;\r\n        this.isSuspendedOptionChecked = false;\r\n        this.isApprovedPendingReviewChecked = false;\r\n        if (this.sepActions && this.sepActions.length > 0) {\r\n            // For SEP Actions, the defaultSelectedOption is none as it should be.\r\n            // New set of SEP actions will be displayed and\r\n            // the first one in the list will be set as selected.\r\n            this.sepActions.forEach(function (sepaction) {\r\n                switch (sepaction) {\r\n                    case enums.SEPAction.Approve:\r\n                        _this.isApprovedChecked = true;\r\n                        _this.selectedExaminerStatus = enums.ChangeStatusOptions.Approved;\r\n                        return;\r\n                    case enums.SEPAction.Re_approve:\r\n                        _this.isReApprovedChecked = true;\r\n                        _this.selectedExaminerStatus = enums.ChangeStatusOptions.Re_approve;\r\n                        return;\r\n                    case enums.SEPAction.ProvideSecondStandardisation:\r\n                        _this.isSecondStandardisationAvailableChecked = true;\r\n                        _this.selectedExaminerStatus = enums.ChangeStatusOptions.SendForSecondStandardisation;\r\n                        return;\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // For Non SEP, when the popup is loaded,\r\n            // Selected Option and the Default Option must be the examiner approval status.\r\n            switch (this.props.currentState) {\r\n                case enums.ExaminerApproval.NotApproved:\r\n                    this.defaultSelectedOption = enums.ChangeStatusOptions.NotApproved;\r\n                    break;\r\n                case enums.ExaminerApproval.Suspended:\r\n                    this.defaultSelectedOption = enums.ChangeStatusOptions.Suspended;\r\n                    break;\r\n                case enums.ExaminerApproval.Approved:\r\n                    this.defaultSelectedOption = enums.ChangeStatusOptions.Approved;\r\n                    break;\r\n                case enums.ExaminerApproval.ApprovedReview:\r\n                    this.defaultSelectedOption = enums.ChangeStatusOptions.AprovedPendingReview;\r\n                    break;\r\n                default:\r\n                    this.defaultSelectedOption = enums.ChangeStatusOptions.None;\r\n                    break;\r\n            }\r\n            this.iscurrentStateChecked = true;\r\n            this.selectedExaminerStatus = this.defaultSelectedOption;\r\n            this.verifySecondStandardisationOptionAvailable();\r\n        }\r\n    };\r\n    /**\r\n     * Method to change the examiner status in Non SEP.\r\n     */\r\n    ExaminerStateChangePopup.prototype.changeExaminerStatus = function () {\r\n        var newStatus;\r\n        switch (this.selectedExaminerStatus) {\r\n            case enums.ChangeStatusOptions.Approved:\r\n                newStatus = enums.ExaminerApproval.Approved;\r\n                break;\r\n            case enums.ChangeStatusOptions.NotApproved:\r\n                newStatus = enums.ExaminerApproval.NotApproved;\r\n                break;\r\n            case enums.ChangeStatusOptions.Suspended:\r\n                newStatus = enums.ExaminerApproval.Suspended;\r\n                break;\r\n            case enums.ChangeStatusOptions.AprovedPendingReview:\r\n                newStatus = enums.ExaminerApproval.ApprovedReview;\r\n                break;\r\n        }\r\n        examinerStatuseArguments = {\r\n            examinerRoleId: qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId,\r\n            markSchemeGroupId: qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId,\r\n            examinerStatus: newStatus,\r\n            questionPaperPartId: qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId,\r\n            previousExaminerStatus: this.props.currentState,\r\n            loggedInExaminerRoleId: operationModeHelper.authorisedExaminerRoleId,\r\n            subordinateExaminerId: teamManagementStore.instance.examinerDrillDownData ?\r\n                teamManagementStore.instance.examinerDrillDownData.examinerId : 0\r\n        };\r\n        teamManagementActionCreator.changeExaminerStatus(examinerStatuseArguments);\r\n    };\r\n    /**\r\n     * Method to provide second standardisation for an examiner.\r\n     */\r\n    ExaminerStateChangePopup.prototype.provideSecondStandardisation = function () {\r\n        secondStandardisationArguments = {\r\n            examinerRoleId: qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId,\r\n            markSchemeGroupId: qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId,\r\n            markingModeId: enums.MarkingMode.Approval,\r\n            loggedInExaminerRoleId: operationModeHelper.authorisedExaminerRoleId,\r\n            subordinateExaminerId: teamManagementStore.instance.examinerDrillDownData ?\r\n                teamManagementStore.instance.examinerDrillDownData.examinerId : 0\r\n        };\r\n        teamManagementActionCreator.provideSecondStandardisation(secondStandardisationArguments);\r\n    };\r\n    /**\r\n     * Method to execute SEP approval management action.\r\n     */\r\n    ExaminerStateChangePopup.prototype.executeSEPApprovalManagementAction = function () {\r\n        var actionIdentifier;\r\n        if (this.isApprovedChecked) {\r\n            actionIdentifier = enums.SEPAction.Approve;\r\n        }\r\n        else if (this.isSecondStandardisationAvailableChecked) {\r\n            actionIdentifier = enums.SEPAction.ProvideSecondStandardisation;\r\n        }\r\n        else if (this.isReApprovedChecked) {\r\n            actionIdentifier = enums.SEPAction.Re_approve;\r\n        }\r\n        var dataCollection = new Array();\r\n        var examinerSEPAction = {\r\n            examinerRoleId: qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId,\r\n            markSchemeGroupId: qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId,\r\n            requestedByExaminerRoleId: operationModeHelper.authorisedExaminerRoleId\r\n        };\r\n        dataCollection.push(examinerSEPAction);\r\n        var examinerSEPActions = Immutable.List(dataCollection);\r\n        var doSEPApprovalManagementActionArgument = {\r\n            actionIdentifier: actionIdentifier,\r\n            examiners: examinerSEPActions\r\n        };\r\n        teamManagementActionCreator.ExecuteApprovalManagementAction(doSEPApprovalManagementActionArgument);\r\n    };\r\n    return ExaminerStateChangePopup;\r\n}(pureRenderComponent));\r\nmodule.exports = ExaminerStateChangePopup;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })

});