webpackJsonp([14],{

/***/ 281:
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./src/utility/locale/localehelper.ts ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * helper class with utilty methods for localisation of date, time and number\r\n */\r\nvar LocaleHelper = /** @class */ (function () {\r\n    function LocaleHelper() {\r\n    }\r\n    /**\r\n     * returns the localised string based on the local time zone (machine's locale).\r\n     * @param object - date/time/number to be localised.\r\n     */\r\n    LocaleHelper.toLocaleString = function (object) {\r\n        if (object == null || object === undefined) {\r\n            return '';\r\n        }\r\n        return object.toLocaleString();\r\n    };\r\n    /**\r\n     * returns the localised date string based on the local time zone (machine's locale).\r\n     * @param object - date to be localised.\r\n     */\r\n    LocaleHelper.toLocaleDateString = function (object) {\r\n        if (object == null || object === undefined) {\r\n            return '';\r\n        }\r\n        return object.toLocaleDateString(navigator.language);\r\n    };\r\n    /**\r\n     * returns the localised time string based on the local time zone (machine's locale).\r\n     * @param object - time to be localised.\r\n     */\r\n    LocaleHelper.toLocaleTimeString = function (object) {\r\n        if (object == null || object === undefined) {\r\n            return '';\r\n        }\r\n        // Remove seconds from time.\r\n        return object.toLocaleTimeString(navigator.language);\r\n    };\r\n    /**\r\n     * returns the localised date time string based on the local time zone (machine's locale).\r\n     * @param object - Date and time to be localised.\r\n     */\r\n    LocaleHelper.toLocaleDateTimeString = function (object) {\r\n        if (object == null || object === undefined) {\r\n            return '';\r\n        }\r\n        return object.toLocaleDateString(navigator.language) + ' ' +\r\n            object.toLocaleTimeString(navigator.language);\r\n    };\r\n    /**\r\n     * get the awarding body\r\n     * @param locale\r\n     */\r\n    LocaleHelper.getAwardingBodyLocale = function (locale) {\r\n        //Checking wether browser language exist in languageJson\r\n        var langExist;\r\n        langExist = false;\r\n        languageList.languages.language.map(function (lang) {\r\n            if (lang.code === locale) {\r\n                langExist = true;\r\n            }\r\n        });\r\n        var awardingBody = languageList.languages['awarding-body'];\r\n        if (!langExist) {\r\n            // If the customer doesnt support the browser language select the default language\r\n            locale = languageList.languages['default-culture'];\r\n        }\r\n        /**\r\n         * Splitting the locale to take the langauge code only.The locale conatin both language and country code,\r\n         * the corresponding locale json name contain only language code.\r\n         */\r\n        var localeCode = locale.split('-')[0];\r\n        /**\r\n         * The locale JSON file name should be in a format of awardingbody-locale.json.\r\n         * Populating the url based on te awarding body and locale selected.\r\n         */\r\n        return awardingBody.toLowerCase() + '-' + localeCode;\r\n    };\r\n    return LocaleHelper;\r\n}());\r\nmodule.exports = LocaleHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvbG9jYWxlL2xvY2FsZWhlbHBlci50cz8yOGE1Il0sInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgbGV0IGxhbmd1YWdlTGlzdDogYW55O1xyXG5cclxuLyoqXHJcbiAqIGhlbHBlciBjbGFzcyB3aXRoIHV0aWx0eSBtZXRob2RzIGZvciBsb2NhbGlzYXRpb24gb2YgZGF0ZSwgdGltZSBhbmQgbnVtYmVyXHJcbiAqL1xyXG5jbGFzcyBMb2NhbGVIZWxwZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBsb2NhbGlzZWQgc3RyaW5nIGJhc2VkIG9uIHRoZSBsb2NhbCB0aW1lIHpvbmUgKG1hY2hpbmUncyBsb2NhbGUpLlxyXG4gICAgICogQHBhcmFtIG9iamVjdCAtIGRhdGUvdGltZS9udW1iZXIgdG8gYmUgbG9jYWxpc2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHRvTG9jYWxlU3RyaW5nKG9iamVjdDogYW55KSB7XHJcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsIHx8IG9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iamVjdC50b0xvY2FsZVN0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyB0aGUgbG9jYWxpc2VkIGRhdGUgc3RyaW5nIGJhc2VkIG9uIHRoZSBsb2NhbCB0aW1lIHpvbmUgKG1hY2hpbmUncyBsb2NhbGUpLlxyXG4gICAgICogQHBhcmFtIG9iamVjdCAtIGRhdGUgdG8gYmUgbG9jYWxpc2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHRvTG9jYWxlRGF0ZVN0cmluZyhvYmplY3Q6IERhdGUpIHtcclxuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwgfHwgb2JqZWN0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqZWN0LnRvTG9jYWxlRGF0ZVN0cmluZyhuYXZpZ2F0b3IubGFuZ3VhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyB0aGUgbG9jYWxpc2VkIHRpbWUgc3RyaW5nIGJhc2VkIG9uIHRoZSBsb2NhbCB0aW1lIHpvbmUgKG1hY2hpbmUncyBsb2NhbGUpLlxyXG4gICAgICogQHBhcmFtIG9iamVjdCAtIHRpbWUgdG8gYmUgbG9jYWxpc2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHRvTG9jYWxlVGltZVN0cmluZyhvYmplY3Q6IERhdGUpIHtcclxuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwgfHwgb2JqZWN0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIHNlY29uZHMgZnJvbSB0aW1lLlxyXG4gICAgICAgIHJldHVybiBvYmplY3QudG9Mb2NhbGVUaW1lU3RyaW5nKG5hdmlnYXRvci5sYW5ndWFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBsb2NhbGlzZWQgZGF0ZSB0aW1lIHN0cmluZyBiYXNlZCBvbiB0aGUgbG9jYWwgdGltZSB6b25lIChtYWNoaW5lJ3MgbG9jYWxlKS5cclxuICAgICAqIEBwYXJhbSBvYmplY3QgLSBEYXRlIGFuZCB0aW1lIHRvIGJlIGxvY2FsaXNlZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyB0b0xvY2FsZURhdGVUaW1lU3RyaW5nKG9iamVjdDogRGF0ZSkge1xyXG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCB8fCBvYmplY3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb2JqZWN0LnRvTG9jYWxlRGF0ZVN0cmluZyhuYXZpZ2F0b3IubGFuZ3VhZ2UpICsgJyAnICtcclxuICAgICAgICAgICAgICAgb2JqZWN0LnRvTG9jYWxlVGltZVN0cmluZyhuYXZpZ2F0b3IubGFuZ3VhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2V0IHRoZSBhd2FyZGluZyBib2R5XHJcbiAgICAgKiBAcGFyYW0gbG9jYWxlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0QXdhcmRpbmdCb2R5TG9jYWxlKGxvY2FsZTogc3RyaW5nKTogc3RyaW5nIHtcclxuXHJcbiAgICAgICAgLy9DaGVja2luZyB3ZXRoZXIgYnJvd3NlciBsYW5ndWFnZSBleGlzdCBpbiBsYW5ndWFnZUpzb25cclxuICAgICAgICBsZXQgbGFuZ0V4aXN0OiBib29sZWFuO1xyXG4gICAgICAgIGxhbmdFeGlzdCA9IGZhbHNlO1xyXG4gICAgICAgIGxhbmd1YWdlTGlzdC5sYW5ndWFnZXMubGFuZ3VhZ2UubWFwKGZ1bmN0aW9uIChsYW5nOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKGxhbmcuY29kZSA9PT0gbG9jYWxlKSB7XHJcbiAgICAgICAgICAgICAgICBsYW5nRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBhd2FyZGluZ0JvZHkgPSBsYW5ndWFnZUxpc3QubGFuZ3VhZ2VzWydhd2FyZGluZy1ib2R5J107XHJcbiAgICAgICAgaWYgKCFsYW5nRXhpc3QpIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGN1c3RvbWVyIGRvZXNudCBzdXBwb3J0IHRoZSBicm93c2VyIGxhbmd1YWdlIHNlbGVjdCB0aGUgZGVmYXVsdCBsYW5ndWFnZVxyXG4gICAgICAgICAgICBsb2NhbGUgPSBsYW5ndWFnZUxpc3QubGFuZ3VhZ2VzWydkZWZhdWx0LWN1bHR1cmUnXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwbGl0dGluZyB0aGUgbG9jYWxlIHRvIHRha2UgdGhlIGxhbmdhdWdlIGNvZGUgb25seS5UaGUgbG9jYWxlIGNvbmF0aW4gYm90aCBsYW5ndWFnZSBhbmQgY291bnRyeSBjb2RlLFxyXG4gICAgICAgICAqIHRoZSBjb3JyZXNwb25kaW5nIGxvY2FsZSBqc29uIG5hbWUgY29udGFpbiBvbmx5IGxhbmd1YWdlIGNvZGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGV0IGxvY2FsZUNvZGUgPSBsb2NhbGUuc3BsaXQoJy0nKVswXTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxvY2FsZSBKU09OIGZpbGUgbmFtZSBzaG91bGQgYmUgaW4gYSBmb3JtYXQgb2YgYXdhcmRpbmdib2R5LWxvY2FsZS5qc29uLlxyXG4gICAgICAgICAqIFBvcHVsYXRpbmcgdGhlIHVybCBiYXNlZCBvbiB0ZSBhd2FyZGluZyBib2R5IGFuZCBsb2NhbGUgc2VsZWN0ZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuIGF3YXJkaW5nQm9keS50b0xvd2VyQ2FzZSgpICsgJy0nICsgbG9jYWxlQ29kZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gTG9jYWxlSGVscGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS9sb2NhbGUvbG9jYWxlaGVscGVyLnRzIl0sIm1hcHBpbmdzIjoiO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBa0ZBO0FBakZBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 283:
/* no static exports found */
/* all exports used */
/*!*********************************************************!*\
  !*** ./src/components/utility/message/messagehelper.ts ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\r\nvar messagestore = __webpack_require__(/*! ../../../stores/message/messagestore */ 240);\r\nvar groupHelper = __webpack_require__(/*! ../../../utility/grouping/grouphelper */ 430);\r\nvar grouperList = __webpack_require__(/*! ../../../utility/grouping/groupingbase/grouperlist */ 427);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\nvar localehelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\nvar stringFormatHelper = __webpack_require__(/*! ../../../utility/stringformat/stringformathelper */ 250);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar messageEditorConstants = __webpack_require__(/*! ../messageeditorconstants */ 325);\r\nvar stringHelper = __webpack_require__(/*! ../../../utility/generic/stringhelper */ 254);\r\nvar htmlUtilities = __webpack_require__(/*! ../../../utility/generic/htmlutilities */ 243);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../markeroperationmode/markeroperationmodefactory */ 232);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar MessageHelper = /** @class */ (function () {\r\n    function MessageHelper() {\r\n    }\r\n    /**\r\n     * Get the Header to display and the related messges\r\n     * @param messages\r\n     */\r\n    MessageHelper.getGroupedMessageObject = function (messages, expandOrCollapseDetails) {\r\n        var _this = this;\r\n        // To store the messages after the grouping and sorting\r\n        var messageList = Immutable.List();\r\n        // Get the messages grouped by QIG\r\n        var groupedMessages = groupHelper.group(messages, grouperList.MessageQigGrouper, enums.GroupByField.qig);\r\n        // Get the key seq\r\n        var groupedKeys = groupedMessages.keySeq();\r\n        // Create the return object\r\n        var returnObj = [];\r\n        // Loop through the keys and find the list of messages for the group.\r\n        groupedKeys.forEach(function (qigId) {\r\n            // Get the messages for the group.\r\n            var currentMessageGroup = groupedMessages.get(qigId);\r\n            // Clear the collection, In each group.\r\n            var messages = [];\r\n            // Get the each messages for the group.\r\n            currentMessageGroup.map(function (message) {\r\n                if (message.status === enums.MessageReadStatus.New && messagestore.instance.isMessageRead(message.examinerMessageId)) {\r\n                    message.status = enums.MessageReadStatus.Read;\r\n                }\r\n                messages.push(message);\r\n            });\r\n            // Get the awarding body name format\r\n            var nameToDisplay = MessageHelper.getDisplayText(messages[0]);\r\n            var messageFolderType = messages[0].messageFolderType;\r\n            // Create an object to store messages\r\n            var groupedObj = {\r\n                qigId: parseInt(qigId),\r\n                isOpen: _this.isQigOpen(parseInt(qigId), messageFolderType, expandOrCollapseDetails),\r\n                textToDisplay: nameToDisplay,\r\n                messages: messages,\r\n                unReadMessages: messages.filter(function (x) {\r\n                    return x.status === enums.MessageReadStatus.New && !messagestore.instance.isMessageRead(x.examinerMessageId);\r\n                }).length\r\n            };\r\n            returnObj.push(groupedObj);\r\n        });\r\n        // Sort the objects based on the display header.\r\n        var getGroupedMessageObject = returnObj.sort(function (obj1, obj2) {\r\n            return obj1.textToDisplay.localeCompare(obj2.textToDisplay);\r\n        });\r\n        // Get the messages as in the order of displaying in the UI\r\n        getGroupedMessageObject.forEach(function (messageObject) {\r\n            messageList = Immutable.List(messageList.concat(messageObject.messages));\r\n        });\r\n        var messageGroupDetails = {\r\n            // Stores the Grouped Object along with those messages\r\n            MessageGroupObjects: getGroupedMessageObject,\r\n            // Store all messages for the UI\r\n            messages: messageList\r\n        };\r\n        return messageGroupDetails;\r\n    };\r\n    /**\r\n     * Returns whether a particular qig is open or not\r\n     * @param expandOrCollapseDetails\r\n     */\r\n    MessageHelper.isQigOpen = function (qigId, messageFolderType, expandOrCollapseDetails) {\r\n        return expandOrCollapseDetails ? expandOrCollapseDetails.get(qigId, true) : true;\r\n    };\r\n    /**\r\n     * Get the time style for the Date\r\n     * @param timeToDisplay\r\n     * @param todayTextConversionRequired : for deciding Today text conversion\r\n     */\r\n    MessageHelper.getDateToDisplay = function (timeToDisplay, todayTextConversionRequired) {\r\n        if (todayTextConversionRequired === void 0) { todayTextConversionRequired = true; }\r\n        var timeToDisplayDate = new Date(timeToDisplay);\r\n        var todaysDate = new Date();\r\n        var time = localehelper.toLocaleTimeString(new Date(timeToDisplay.toString()));\r\n        // call setHours to take the time out of the comparison\r\n        if ((timeToDisplayDate.setHours(0, 0, 0, 0) === todaysDate.setHours(0, 0, 0, 0)) && todayTextConversionRequired) {\r\n            // Date equals today's date. Display date feild as Today.\r\n            return localeStore.instance.TranslateText('messaging.message-lists.message-detail.date-today') + ' ' + time;\r\n        }\r\n        else {\r\n            return localehelper.toLocaleDateString(new Date(timeToDisplay)) + ' ' + time;\r\n        }\r\n    };\r\n    /**\r\n     * Get the Display Header for the Group Header.\r\n     * @param message\r\n     */\r\n    MessageHelper.getDisplayText = function (message) {\r\n        var msg = messagestore.instance.messagesMarkSchemes;\r\n        if (msg) {\r\n            var messageList = msg.filter(function (messages) { return messages.markSchemeGroupId === message.markSchemeGroupId; });\r\n            {\r\n                return stringFormatHelper.formatAwardingBodyQIG(messageList.first().markSchemeGroupName, messageList.first().assessmentCode, messageList.first().sessionName, messageList.first().componentId, messageList.first().questionPaperName, messageList.first().assessmentName, messageList.first().componentName, stringFormatHelper.getOverviewQIGNameFormat());\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Return the Mark Scheme Group Name\r\n     * @param message\r\n     */\r\n    MessageHelper.getMarkSchemeGroupName = function (message) {\r\n        var msg = messagestore.instance.messagesMarkSchemes;\r\n        if (msg) {\r\n            return msg.filter(function (messages) { return messages.markSchemeGroupId === message.markSchemeGroupId; }).\r\n                first().markSchemeGroupName;\r\n        }\r\n    };\r\n    /**\r\n     * Used to create the MessageOrExceptionLinkedItems based on the messages\r\n     * @param messages\r\n     */\r\n    MessageHelper.getMessageLinkedItems = function (messages) {\r\n        var messageOrExceptionLinkedItems = [];\r\n        var items = messages.forEach(function (message) {\r\n            messageOrExceptionLinkedItems.push({\r\n                itemId: message.examinerMessageId,\r\n                senderOrItem: message.toTeam ?\r\n                    localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.entire-team') :\r\n                    MessageHelper.appendExaminer(message),\r\n                priorityOrStatus: message.priorityName,\r\n                subjectOrType: message.subject,\r\n                timeToDisplay: message.displayDate,\r\n                isUnreadOrUnactioned: message.status === enums.MessageReadStatus.New &&\r\n                    !messagestore.instance.isMessageRead(message.examinerMessageId)\r\n            });\r\n        });\r\n        return Immutable.List(messageOrExceptionLinkedItems);\r\n    };\r\n    /**\r\n     * append examiners\r\n     */\r\n    MessageHelper.appendExaminer = function (message) {\r\n        var examiners = '';\r\n        if (message && message.toExaminerDetails != null) {\r\n            message.toExaminerDetails.map(function (item) {\r\n                examiners += item.fullName + ';';\r\n            });\r\n            // removing last item semicolon\r\n            return examiners.replace(/;$/, '');\r\n        }\r\n        else {\r\n            examiners = message.examinerDetails.fullName;\r\n        }\r\n        return examiners;\r\n    };\r\n    /**\r\n     * This method will returns the message content based on the template name\r\n     * @param templateName - template name\r\n     * @param messageBody - message content\r\n     */\r\n    MessageHelper.getMessageContent = function (templateName, messageFrom, date, messageBody) {\r\n        var template;\r\n        switch (templateName) {\r\n            case enums.MessageType.InboxReply:\r\n            case enums.MessageType.ResponseReply:\r\n                template = stringHelper.format(localeStore.instance.TranslateText('messaging.compose-message.new-message-templates.reply'), [messageEditorConstants.TINYMCE_DEFAULT_FONT, messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE,\r\n                    this.getDateToDisplay(date, false), messageFrom, messageBody]);\r\n                break;\r\n            case enums.MessageType.InboxForward:\r\n            case enums.MessageType.ResponseForward:\r\n                template = stringHelper.format(localeStore.instance.TranslateText('messaging.compose-message.new-message-templates.forward'), [messageEditorConstants.TINYMCE_DEFAULT_FONT, messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE,\r\n                    this.getDateToDisplay(date, false), messageFrom, messageBody]);\r\n                break;\r\n            case enums.MessageType.ResponseCompose:\r\n            case enums.MessageType.WorklistCompose:\r\n            case enums.MessageType.InboxCompose:\r\n            case enums.MessageType.TeamCompose:\r\n                template = stringHelper.format(localeStore.instance.TranslateText('messaging.compose-message.new-message-templates.new'), [messageEditorConstants.TINYMCE_DEFAULT_FONT, messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE]);\r\n                break;\r\n        }\r\n        return template;\r\n    };\r\n    /**\r\n     * This method will return the Menu Action items needed based on the folder type\r\n     * @param folderType\r\n     * @param messageActions: an array of message actions\r\n     */\r\n    MessageHelper.getMessageMenuActionItems = function (folderType, messageActions) {\r\n        var _this = this;\r\n        var messageMenuActionItems = [];\r\n        switch (folderType) {\r\n            case enums.MessageFolderType.Inbox:\r\n                if (messageActions && messageActions.length > 0) {\r\n                    messageActions.map(function (x) {\r\n                        var actionItems = _this.messageActionItems(x);\r\n                        if (actionItems) {\r\n                            messageMenuActionItems.push(actionItems);\r\n                        }\r\n                    });\r\n                }\r\n        }\r\n        return messageMenuActionItems;\r\n    };\r\n    /**\r\n     * This method will return the localised message string based on message type\r\n     */\r\n    MessageHelper.getMessageHeader = function (messageType) {\r\n        var messageHeader;\r\n        switch (messageType) {\r\n            case enums.MessageType.InboxCompose:\r\n            case enums.MessageType.WorklistCompose:\r\n            case enums.MessageType.ResponseCompose:\r\n            case enums.MessageType.TeamCompose:\r\n                messageHeader = localeStore.instance.TranslateText('messaging.compose-message.new-message-header');\r\n                break;\r\n            case enums.MessageType.InboxForward:\r\n            case enums.MessageType.ResponseForward:\r\n                messageHeader = localeStore.instance.TranslateText('messaging.compose-message.forward-header');\r\n                break;\r\n            case enums.MessageType.InboxReply:\r\n            case enums.MessageType.ResponseReply:\r\n                messageHeader = localeStore.instance.TranslateText('messaging.compose-message.reply-header');\r\n                break;\r\n            case enums.MessageType.ResponseDetails:\r\n                messageHeader = localeStore.instance.TranslateText('marking.response.message-panel.header');\r\n        }\r\n        return messageHeader;\r\n    };\r\n    /**\r\n     * This method will returns the subject string\r\n     * @param messageType\r\n     * @param subject\r\n     */\r\n    MessageHelper.getSubjectContent = function (messageType, subject) {\r\n        var subjectText;\r\n        var subjectPrefix;\r\n        switch (messageType) {\r\n            case enums.MessageType.InboxCompose:\r\n                subjectText = subject;\r\n                break;\r\n            case enums.MessageType.InboxForward:\r\n            case enums.MessageType.ResponseForward:\r\n                subjectPrefix = localeStore.instance.TranslateText('messaging.compose-message.forward-prefix');\r\n                subjectText = subject.indexOf(subjectPrefix) === -1 ? subjectPrefix + ' ' + subject : subject;\r\n                break;\r\n            case enums.MessageType.InboxReply:\r\n            case enums.MessageType.ResponseReply:\r\n                subjectPrefix = localeStore.instance.TranslateText('messaging.compose-message.reply-prefix');\r\n                subjectText = subject.indexOf(subjectPrefix) === -1 ? subjectPrefix + ' ' + subject : subject;\r\n                break;\r\n        }\r\n        return subjectText;\r\n    };\r\n    Object.defineProperty(MessageHelper, \"getCreateNewMessageText\", {\r\n        /**\r\n         * Get the Create new text for the component.\r\n         */\r\n        get: function () {\r\n            return localeStore.instance.TranslateText('marking.response.message-list-panel.create-new-message');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * This method will return the Menu Action item based on the action parameter\r\n     * @param messageAction\r\n     */\r\n    MessageHelper.messageActionItems = function (messageAction) {\r\n        switch (messageAction) {\r\n            case enums.MessageAction.Reply:\r\n                return ({\r\n                    id: enums.MessageAction.Reply,\r\n                    icon: 'reply-icon',\r\n                    name: localeStore.instance.TranslateText('messaging.message-lists.message-detail.reply-button')\r\n                });\r\n            case enums.MessageAction.Forward:\r\n                if (!markerOperationModeFactory.operationMode.isForwardButtonHidden) {\r\n                    return ({\r\n                        id: enums.MessageAction.Forward,\r\n                        icon: 'forward-icon',\r\n                        name: localeStore.instance.TranslateText('messaging.message-lists.message-detail.forward-button')\r\n                    });\r\n                }\r\n                break;\r\n            case enums.MessageAction.Delete:\r\n                return ({\r\n                    id: enums.MessageAction.Delete,\r\n                    icon: 'delete-icon-small',\r\n                    name: localeStore.instance.TranslateText('messaging.message-lists.message-detail.delete-button')\r\n                });\r\n        }\r\n    };\r\n    /**\r\n     * This method will update the IFrame content with message details\r\n     * @param o\r\n     * @param e\r\n     */\r\n    MessageHelper.addIFrameForMessageDetails = function (o, e) {\r\n        var timeout = 0;\r\n        // add script to init mouse click event in parent window for any 'click' in current window\r\n        var scriptBlock = 'window.addEventListener(\\'click\\', function() { parent.initMouseClickEvent(); });';\r\n        var headTagContent = '<style type=\"text/css\"> p,body{margin:0;padding:0;}</style>';\r\n        if (htmlUtilities.isIPadDevice && htmlUtilities.getUserDevice().browser === 'Safari') {\r\n            //include script to block double tap and pinch zoom in iPad safari\r\n            scriptBlock +=\r\n                'window.addEventListener(\\'touchend\\', blockDoubleTapZoom);' +\r\n                    'window.addEventListener(\\'touchstart\\', blockPinchToZoom);' +\r\n                    //block double tap zoom\r\n                    'let lastTap = 0;' +\r\n                    'function blockDoubleTapZoom ( e ) {' +\r\n                    'let currentTime = new Date().getTime();' +\r\n                    'let tapLength = currentTime - lastTap;' +\r\n                    'if (tapLength < 500 && tapLength > 0) {' +\r\n                    'e.preventDefault();}' +\r\n                    'lastTap = currentTime;' +\r\n                    //init mouse click event\r\n                    'parent.initMouseClickEvent(); }' +\r\n                    //block pinch zoom\r\n                    'function blockPinchToZoom ( e ) {' +\r\n                    'if (e.touches.length > 1) {' +\r\n                    'e.preventDefault();}' +\r\n                    '}';\r\n        }\r\n        else {\r\n            //incluse script to init mouse click event in parent window for any 'touch' in current window\r\n            scriptBlock +=\r\n                'window.addEventListener(\\'touchend\\', function() { parent.initMouseClickEvent(); });';\r\n        }\r\n        var content = e.getContent().trim() +\r\n            '<script>' + scriptBlock + '</script >';\r\n        // put a timeout of 0, otherwise message details are not rendering on first message item click\r\n        if (!htmlUtilities.isTabletOrMobileDevice && htmlUtilities.getUserDevice().browser === 'Firefox') {\r\n            timeout = 50;\r\n        }\r\n        setTimeout(function () {\r\n            $('#msg-iframe_ifr').contents().find('head').html(headTagContent);\r\n            $('#msg-iframe_ifr').contents().find('body').html(content);\r\n        }, timeout);\r\n    };\r\n    /**\r\n     * Returns a boolean indicating whether the message panel is edited.\r\n     */\r\n    MessageHelper.isMessagePanelEdited = function (messageType, messageToFieldValues, messageToFieldIds) {\r\n        if (messagestore.instance.isMessagePanelActive) {\r\n            var currentActiveEditorId = tinymce.activeEditor.id;\r\n            var activeEditor = tinymce.get(MessageHelper.messageEditorId);\r\n            if (messageType === enums.MessageType.InboxCompose || messageType === enums.MessageType.InboxForward ||\r\n                messageType === enums.MessageType.InboxReply) {\r\n                return MessageHelper.messageSubject && MessageHelper.messageSubject.trim().length > 0 ||\r\n                    activeEditor.getContent({ format: 'text' }).trim().length > 0 ||\r\n                    ((messageToFieldValues && messageToFieldValues.length > 0) &&\r\n                        (messageToFieldIds && messageToFieldIds.length > 0));\r\n            }\r\n            else if (messageType === enums.MessageType.ResponseCompose\r\n                || messageType === enums.MessageType.WorklistCompose || messageType === enums.MessageType.ResponseReply\r\n                || messageType === enums.MessageType.ResponseForward || messageType === enums.MessageType.TeamCompose) {\r\n                return MessageHelper.messageSubject && MessageHelper.messageSubject.trim().length > 0 ||\r\n                    activeEditor.getContent({ format: 'text' }).trim().length > 0;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This method revamps the marking mode naming for display in message\r\n     * @param markingMode\r\n     * @param isElectronicStandardisationTeamMember\r\n     */\r\n    MessageHelper.getMarkingModeText = function (markingMode, isElectronicStandardisationTeamMember) {\r\n        if (markingMode === enums.MarkingMode.ES_TeamApproval) {\r\n            if (isElectronicStandardisationTeamMember) {\r\n                return ((localeStore.instance.TranslateText('marking.worklist.response-data.stm-standardisation-response-title')) + ' ');\r\n            }\r\n            else {\r\n                return ((localeStore.instance.TranslateText('marking.worklist.response-data.second-standardisation-response-title')) + ' ');\r\n            }\r\n        }\r\n        else if (markingMode === enums.MarkingMode.Practice) {\r\n            return ((localeStore.instance.TranslateText('marking.worklist.response-data.practice-response-title')) + ' ');\r\n        }\r\n        else if (markingMode === enums.MarkingMode.Approval) {\r\n            return ((localeStore.instance.TranslateText('marking.worklist.response-data.standardisation-response-title')) + ' ');\r\n        }\r\n        else if (markingMode === enums.MarkingMode.ES_TeamApproval) {\r\n            return ((localeStore.instance.TranslateText('marking.worklist.response-data.second-standardisation-response-title')) + ' ');\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    };\r\n    MessageHelper._isPasteEnabled = false;\r\n    MessageHelper.messageEditorId = 'msg-tinymce-editor';\r\n    /**\r\n     * This method will return the selected item for priority dropdown based on priority name\r\n     */\r\n    MessageHelper.getPriorityDropDownSelectedItem = function (priorityName) {\r\n        if (priorityName === enums.getEnumString(enums.MessagePriority, enums.MessagePriority.Standard)) {\r\n            return enums.MessagePriority.Standard;\r\n        }\r\n        else if (priorityName === enums.getEnumString(enums.MessagePriority, enums.MessagePriority.Important)) {\r\n            return enums.MessagePriority.Important;\r\n        }\r\n        else if (priorityName === enums.getEnumString(enums.MessagePriority, enums.MessagePriority.Mandatory)) {\r\n            // When replying and forwarding a  mandatory message,priority need to be reset to standard.\r\n            return enums.MessagePriority.Standard;\r\n        }\r\n    };\r\n    /**\r\n     * returns the navigate to default options for different message types.\r\n     */\r\n    MessageHelper.getNavigateAwayType = function (messageType) {\r\n        var navigateTo = enums.SaveAndNavigate.none;\r\n        switch (messageType) {\r\n            case enums.MessageType.ResponseReply:\r\n            case enums.MessageType.ResponseForward:\r\n            case enums.MessageType.ResponseCompose:\r\n                navigateTo = enums.SaveAndNavigate.toNewResponseMessageCompose;\r\n                break;\r\n        }\r\n        return navigateTo;\r\n    };\r\n    /**\r\n     * Returns true if focus needs to be set in tinymce editor else return false\r\n     */\r\n    MessageHelper.hasFocus = function (messageType) {\r\n        return (messageType === enums.MessageType.InboxForward || messageType === enums.MessageType.InboxReply\r\n            || messageType === enums.MessageType.ResponseReply || messageType === enums.MessageType.ResponseForward);\r\n    };\r\n    MessageHelper.addInitMouseClickEventScriptBlock = function () {\r\n        // we have to close opened priority drop down and user options (logout options) while clicking on outside that. iframe was\r\n        // preventing the click event to propagate outside so closing of those things are not happening while clicking on iframe.\r\n        // dynamically add script to create mouse event\r\n        var scriptElement = document.getElementById('init_mouse_click_event_script_block');\r\n        var isScriptElementPresent = false;\r\n        if (scriptElement != null) {\r\n            isScriptElementPresent = true;\r\n        }\r\n        else {\r\n            scriptElement = document.createElement('script');\r\n            scriptElement.id = 'init_mouse_click_event_script_block';\r\n            scriptElement.innerText =\r\n                'function initMouseClickEvent() {' +\r\n                    'let event = document.createEvent(\\'MouseEvents\\');' +\r\n                    'event.initMouseEvent(\\'click\\', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);' +\r\n                    'window.dispatchEvent(event); }';\r\n        }\r\n        if (!isScriptElementPresent) {\r\n            document.body.appendChild(scriptElement);\r\n        }\r\n    };\r\n    MessageHelper.removeInitMouseClickEventScriptBlock = function () {\r\n        var scriptElement = document.getElementById('init_mouse_click_event_script_block');\r\n        if (htmlUtilities.getUserDevice().browser !== 'IE') {\r\n            document.body.removeChild(scriptElement);\r\n        }\r\n    };\r\n    MessageHelper.setPasteEnabledAction = function (isPasteEnabled) {\r\n        MessageHelper._isPasteEnabled = isPasteEnabled;\r\n    };\r\n    /**\r\n     * Method which gets the selected QIG's name based on the Awarding Body specific QIG Naming format\r\n     */\r\n    MessageHelper.getCurrentQIGName = function () {\r\n        // Calling the helper method to format the QIG Name\r\n        if (qigStore.instance.selectedQIGForMarkerOperation !== undefined) {\r\n            var selectedQig = qigStore.instance.selectedQIGForMarkerOperation;\r\n            return stringFormatHelper.formatAwardingBodyQIG(selectedQig.markSchemeGroupName, selectedQig.assessmentCode, selectedQig.sessionName, selectedQig.componentId, selectedQig.questionPaperName, selectedQig.assessmentName, selectedQig.componentName, stringFormatHelper.getOverviewQIGNameFormat());\r\n        }\r\n        // If a QIG is not selected, return the default text to be shown on the drop down\r\n        return localeStore.instance.TranslateText('messaging.compose-message.please-select-qig-placeholder');\r\n    };\r\n    /**\r\n     * Handles changes in the message panel subject section.\r\n     * @param e\r\n     */\r\n    MessageHelper.handleSubjectChange = function (subject) {\r\n        MessageHelper.messageSubject = subject;\r\n    };\r\n    return MessageHelper;\r\n}());\r\nmodule.exports = MessageHelper;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 42)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 290:
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/components/utility/genericbutton.tsx ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for Generic button.\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar applicationStore = __webpack_require__(/*! ../../stores/applicationoffline/applicationstore */ 247);\r\n/**\r\n * React component class for Generic button implementation.\r\n */\r\nvar GenericButton = /** @class */ (function (_super) {\r\n    __extends(GenericButton, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function GenericButton(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.onClick = _this.onClick.bind(_this);\r\n        _this.onDoubleClick = _this.onDoubleClick.bind(_this);\r\n        _this.onMouseEnter = _this.onMouseEnter.bind(_this);\r\n        _this.onMouseLeave = _this.onMouseLeave.bind(_this);\r\n        _this.onMouseOver = _this.onMouseOver.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render method\r\n     */\r\n    GenericButton.prototype.render = function () {\r\n        var buttonElement;\r\n        buttonElement = (React.createElement(\"button\", { id: this.props.id, title: this.props.title, className: this.props.className, onClick: this.onClick, disabled: this.props.disabled, onDoubleClick: this.onDoubleClick, onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave, onMouseOver: this.onMouseOver },\r\n            this.props.content,\r\n            this.props.childrens != null ? this.props.childrens : null));\r\n        return buttonElement;\r\n    };\r\n    /**\r\n     * Component did mount\r\n     */\r\n    GenericButton.prototype.componentDidMount = function () {\r\n        applicationStore.instance.setMaxListeners(0);\r\n    };\r\n    /**\r\n     * Handles the single click event.\r\n     * @param evnt\r\n     */\r\n    GenericButton.prototype.onClick = function (evnt) {\r\n        if (this.props.onClick != null) {\r\n            this.props.onClick(evnt);\r\n        }\r\n    };\r\n    /**\r\n     * Handles the double click event.\r\n     * @param evnt\r\n     */\r\n    GenericButton.prototype.onDoubleClick = function (evnt) {\r\n        if (this.props.onDoubleClick != null) {\r\n            this.props.onDoubleClick();\r\n        }\r\n    };\r\n    /**\r\n     * Handles the mouse enter event.\r\n     * @param evnt\r\n     */\r\n    GenericButton.prototype.onMouseEnter = function (evnt) {\r\n        if (this.props.onMouseEnter != null) {\r\n            this.props.onMouseEnter();\r\n        }\r\n    };\r\n    /**\r\n     * Handles the mouse leave event.\r\n     * @param evnt\r\n     */\r\n    GenericButton.prototype.onMouseLeave = function (evnt) {\r\n        if (this.props.onMouseLeave != null) {\r\n            this.props.onMouseLeave();\r\n        }\r\n    };\r\n    /**\r\n     * Handles the mouse over event.\r\n     * @param evnt\r\n     */\r\n    GenericButton.prototype.onMouseOver = function (evnt) {\r\n        if (this.props.onMouseOver != null) {\r\n            this.props.onMouseOver();\r\n        }\r\n    };\r\n    return GenericButton;\r\n}(pureRenderComponent));\r\nmodule.exports = GenericButton;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9nZW5lcmljYnV0dG9uLnRzeD9kNzJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgUmVhY3QgY29tcG9uZW50IGZvciBHZW5lcmljIGJ1dHRvbi5cclxuKi9cclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgYXBwbGljYXRpb25TdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy9hcHBsaWNhdGlvbm9mZmxpbmUvYXBwbGljYXRpb25zdG9yZScpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuL2VudW1zJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcbiAgICB0aXRsZT86IHN0cmluZztcclxuICAgIGNvbnRlbnQ/OiBzdHJpbmc7XHJcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgICB0YWJJbmRleD86IG51bWJlcjtcclxuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcclxuICAgIGNoaWxkcmVucz86IEFycmF5PEpTWC5FbGVtZW50PjtcclxuICAgIG9uQ2xpY2s/OiBGdW5jdGlvbjtcclxuICAgIG9uRG91YmxlQ2xpY2s/OiBGdW5jdGlvbjtcclxuICAgIG9uTW91c2VFbnRlcj86IEZ1bmN0aW9uO1xyXG4gICAgb25Nb3VzZUxlYXZlPzogRnVuY3Rpb247XHJcbiAgICBvbk1vdXNlT3Zlcj86IEZ1bmN0aW9uO1xyXG4gICAgYnV0dG9uVHlwZT86IGVudW1zLkJ1dHRvblR5cGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWFjdCBjb21wb25lbnQgY2xhc3MgZm9yIEdlbmVyaWMgYnV0dG9uIGltcGxlbWVudGF0aW9uLlxyXG4gKi9cclxuY2xhc3MgR2VuZXJpY0J1dHRvbiBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcywgc3RhdGU6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBzdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vbkRvdWJsZUNsaWNrID0gdGhpcy5vbkRvdWJsZUNsaWNrLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5vbk1vdXNlRW50ZXIgPSB0aGlzLm9uTW91c2VFbnRlci5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub25Nb3VzZUxlYXZlID0gdGhpcy5vbk1vdXNlTGVhdmUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm9uTW91c2VPdmVyID0gdGhpcy5vbk1vdXNlT3Zlci5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIG1ldGhvZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBidXR0b25FbGVtZW50OiBKU1guRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQgPSAoPGJ1dHRvbiBpZD17dGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy50aXRsZX1cclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DbGlja31cclxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH1cclxuICAgICAgICAgICAgICAgICAgICBvbkRvdWJsZUNsaWNrPXt0aGlzLm9uRG91YmxlQ2xpY2t9XHJcbiAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyPXt0aGlzLm9uTW91c2VFbnRlcn1cclxuICAgICAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmU9e3RoaXMub25Nb3VzZUxlYXZlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uTW91c2VPdmVyPXt0aGlzLm9uTW91c2VPdmVyfT5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jb250ZW50fVxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVucyAhPSBudWxsID8gdGhpcy5wcm9wcy5jaGlsZHJlbnMgOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+KTtcclxuICAgICAgICByZXR1cm4gYnV0dG9uRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbXBvbmVudCBkaWQgbW91bnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIGFwcGxpY2F0aW9uU3RvcmUuaW5zdGFuY2Uuc2V0TWF4TGlzdGVuZXJzKDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB0aGUgc2luZ2xlIGNsaWNrIGV2ZW50LlxyXG4gICAgICogQHBhcmFtIGV2bnRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkNsaWNrKGV2bnQ6IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2sgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2soZXZudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB0aGUgZG91YmxlIGNsaWNrIGV2ZW50LlxyXG4gICAgICogQHBhcmFtIGV2bnRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkRvdWJsZUNsaWNrKGV2bnQ6IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uRG91YmxlQ2xpY2sgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uRG91YmxlQ2xpY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHRoZSBtb3VzZSBlbnRlciBldmVudC5cclxuICAgICAqIEBwYXJhbSBldm50XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25Nb3VzZUVudGVyKGV2bnQ6IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VFbnRlciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25Nb3VzZUVudGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB0aGUgbW91c2UgbGVhdmUgZXZlbnQuXHJcbiAgICAgKiBAcGFyYW0gZXZudFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uTW91c2VMZWF2ZShldm50OiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uTW91c2VMZWF2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgdGhlIG1vdXNlIG92ZXIgZXZlbnQuXHJcbiAgICAgKiBAcGFyYW0gZXZudFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uTW91c2VPdmVyKGV2bnQ6IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uTW91c2VPdmVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbk1vdXNlT3ZlcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gR2VuZXJpY0J1dHRvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9nZW5lcmljYnV0dG9uLnRzeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFtQkE7O0FBRUE7QUFDQTtBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFTQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 325:
/* no static exports found */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/components/utility/messageeditorconstants.ts ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar MessageEditorConstants;\r\n(function (MessageEditorConstants) {\r\n    MessageEditorConstants.TINYMCE_THEME = 'advanced';\r\n    MessageEditorConstants.TINYMCE_PLUGINS = 'link textcolor advlist';\r\n    MessageEditorConstants.TINYMCE_TOOLBAR = 'bold italic underline | fontselect fontsizeselect | alignleft aligncenter alignright | bullist numlist | link';\r\n    MessageEditorConstants.TINYMCE_FONTSIZES = '8px 10px 12px 14px 18px 24px 36px';\r\n    MessageEditorConstants.TINYMCE_FONTS = 'Andale Mono=andale mono,times;'\r\n        + 'Arial=arial,helvetica,sans-serif;'\r\n        + 'Arial Black=arial black,avant garde;'\r\n        + 'Book Antiqua=book antiqua,palatino;'\r\n        + 'Comic Sans MS=comic sans ms,sans-serif;'\r\n        + 'Courier New=courier new,courier;'\r\n        + 'Georgia=georgia,palatino;'\r\n        + 'Helvetica=helvetica;'\r\n        + 'Impact=impact,chicago;'\r\n        + 'Tahoma=tahoma,arial,helvetica,sans-serif;'\r\n        + 'Terminal=terminal,monaco;'\r\n        + 'Times New Roman=times new roman,times;'\r\n        + 'Trebuchet MS=trebuchet ms,geneva;'\r\n        + 'Verdana=verdana,geneva;';\r\n    MessageEditorConstants.TINYMCE_TEXTCOLOR_PALETTE = [\r\n        '000000', '',\r\n        '993300', '',\r\n        '333300', '',\r\n        '003300', '',\r\n        '003366', '',\r\n        '000080', '',\r\n        '333399', '',\r\n        '333333', '',\r\n        '800000', '',\r\n        '808000', '',\r\n        '008000', '',\r\n        '008080', '',\r\n        '0000FF', '',\r\n        '666699', '',\r\n        '808080', '',\r\n        'FF0000', '',\r\n        '99CC00', '',\r\n        '339966', '',\r\n        '33CCCC', '',\r\n        '3366FF', '',\r\n        '800080', '',\r\n        '999999', '',\r\n        'FF00FF', '',\r\n        '00FF00', '',\r\n        '00FFFF', '',\r\n        '00CCFF', '',\r\n        '993366', '',\r\n        'FFFFFF', '',\r\n        '99CCFF', '',\r\n    ];\r\n    MessageEditorConstants.TINYMCE_FONTNAME_CMD = 'FontName';\r\n    MessageEditorConstants.TINYMCE_FONTSIZE_CMD = 'FontSize';\r\n    MessageEditorConstants.TINYMCE_DEFAULT_FONT = 'arial,helvetica,sans-serif';\r\n    MessageEditorConstants.TINYMCE_DEFAULT_FONTSIZE = '12px';\r\n})(MessageEditorConstants || (MessageEditorConstants = {}));\r\nmodule.exports = MessageEditorConstants;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9tZXNzYWdlZWRpdG9yY29uc3RhbnRzLnRzP2NkZmYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIE1lc3NhZ2VFZGl0b3JDb25zdGFudHMge1xyXG4gICAgZXhwb3J0IGNvbnN0IFRJTllNQ0VfVEhFTUUgPSAnYWR2YW5jZWQnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFRJTllNQ0VfUExVR0lOUyA9ICdsaW5rIHRleHRjb2xvciBhZHZsaXN0JztcclxuICAgIGV4cG9ydCBjb25zdCBUSU5ZTUNFX1RPT0xCQVIgPVxyXG4gICAgICAgICdib2xkIGl0YWxpYyB1bmRlcmxpbmUgfCBmb250c2VsZWN0IGZvbnRzaXplc2VsZWN0IHwgYWxpZ25sZWZ0IGFsaWduY2VudGVyIGFsaWducmlnaHQgfCBidWxsaXN0IG51bWxpc3QgfCBsaW5rJztcclxuICAgIGV4cG9ydCBjb25zdCBUSU5ZTUNFX0ZPTlRTSVpFUyA9ICc4cHggMTBweCAxMnB4IDE0cHggMThweCAyNHB4IDM2cHgnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFRJTllNQ0VfRk9OVFMgPSAnQW5kYWxlIE1vbm89YW5kYWxlIG1vbm8sdGltZXM7J1xyXG4gICAgICAgICsgJ0FyaWFsPWFyaWFsLGhlbHZldGljYSxzYW5zLXNlcmlmOydcclxuICAgICAgICArICdBcmlhbCBCbGFjaz1hcmlhbCBibGFjayxhdmFudCBnYXJkZTsnXHJcbiAgICAgICAgKyAnQm9vayBBbnRpcXVhPWJvb2sgYW50aXF1YSxwYWxhdGlubzsnXHJcbiAgICAgICAgKyAnQ29taWMgU2FucyBNUz1jb21pYyBzYW5zIG1zLHNhbnMtc2VyaWY7J1xyXG4gICAgICAgICsgJ0NvdXJpZXIgTmV3PWNvdXJpZXIgbmV3LGNvdXJpZXI7J1xyXG4gICAgICAgICsgJ0dlb3JnaWE9Z2VvcmdpYSxwYWxhdGlubzsnXHJcbiAgICAgICAgKyAnSGVsdmV0aWNhPWhlbHZldGljYTsnXHJcbiAgICAgICAgKyAnSW1wYWN0PWltcGFjdCxjaGljYWdvOydcclxuICAgICAgICArICdUYWhvbWE9dGFob21hLGFyaWFsLGhlbHZldGljYSxzYW5zLXNlcmlmOydcclxuICAgICAgICArICdUZXJtaW5hbD10ZXJtaW5hbCxtb25hY287J1xyXG4gICAgICAgICsgJ1RpbWVzIE5ldyBSb21hbj10aW1lcyBuZXcgcm9tYW4sdGltZXM7J1xyXG4gICAgICAgICsgJ1RyZWJ1Y2hldCBNUz10cmVidWNoZXQgbXMsZ2VuZXZhOydcclxuICAgICAgICArICdWZXJkYW5hPXZlcmRhbmEsZ2VuZXZhOyc7XHJcbiAgICBleHBvcnQgY29uc3QgVElOWU1DRV9URVhUQ09MT1JfUEFMRVRURSA9IFtcclxuICAgICAgICAnMDAwMDAwJywgJycsXHJcbiAgICAgICAgJzk5MzMwMCcsICcnLFxyXG4gICAgICAgICczMzMzMDAnLCAnJyxcclxuICAgICAgICAnMDAzMzAwJywgJycsXHJcbiAgICAgICAgJzAwMzM2NicsICcnLFxyXG4gICAgICAgICcwMDAwODAnLCAnJyxcclxuICAgICAgICAnMzMzMzk5JywgJycsXHJcbiAgICAgICAgJzMzMzMzMycsICcnLFxyXG4gICAgICAgICc4MDAwMDAnLCAnJyxcclxuICAgICAgICAnODA4MDAwJywgJycsXHJcbiAgICAgICAgJzAwODAwMCcsICcnLFxyXG4gICAgICAgICcwMDgwODAnLCAnJyxcclxuICAgICAgICAnMDAwMEZGJywgJycsXHJcbiAgICAgICAgJzY2NjY5OScsICcnLFxyXG4gICAgICAgICc4MDgwODAnLCAnJyxcclxuICAgICAgICAnRkYwMDAwJywgJycsXHJcbiAgICAgICAgJzk5Q0MwMCcsICcnLFxyXG4gICAgICAgICczMzk5NjYnLCAnJyxcclxuICAgICAgICAnMzNDQ0NDJywgJycsXHJcbiAgICAgICAgJzMzNjZGRicsICcnLFxyXG4gICAgICAgICc4MDAwODAnLCAnJyxcclxuICAgICAgICAnOTk5OTk5JywgJycsXHJcbiAgICAgICAgJ0ZGMDBGRicsICcnLFxyXG4gICAgICAgICcwMEZGMDAnLCAnJyxcclxuICAgICAgICAnMDBGRkZGJywgJycsXHJcbiAgICAgICAgJzAwQ0NGRicsICcnLFxyXG4gICAgICAgICc5OTMzNjYnLCAnJyxcclxuICAgICAgICAnRkZGRkZGJywgJycsXHJcbiAgICAgICAgJzk5Q0NGRicsICcnLFxyXG4gICAgXTtcclxuICAgIGV4cG9ydCBjb25zdCBUSU5ZTUNFX0ZPTlROQU1FX0NNRCA9ICdGb250TmFtZSc7XHJcbiAgICBleHBvcnQgY29uc3QgVElOWU1DRV9GT05UU0laRV9DTUQgPSAnRm9udFNpemUnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFRJTllNQ0VfREVGQVVMVF9GT05UID0gJ2FyaWFsLGhlbHZldGljYSxzYW5zLXNlcmlmJztcclxuICAgIGV4cG9ydCBjb25zdCBUSU5ZTUNFX0RFRkFVTFRfRk9OVFNJWkUgPSAnMTJweCc7XHJcbn1cclxuZXhwb3J0ID0gTWVzc2FnZUVkaXRvckNvbnN0YW50cztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9tZXNzYWdlZWRpdG9yY29uc3RhbnRzLnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 457:
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/components/message/messagepopup.tsx ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar MessagePriorityDropDown = __webpack_require__(/*! ./messageprioritydropdown */ 464);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar GenericButton = __webpack_require__(/*! ../utility/genericbutton */ 290);\r\nvar messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar MessageBase = __webpack_require__(/*! ./messagebase */ 462);\r\nvar MessageEditor = __webpack_require__(/*! ./messageeditor */ 463);\r\nvar Subject = __webpack_require__(/*! ./subject */ 466);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../actions/messaging/messagingactioncreator */ 268);\r\nvar popupHelper = __webpack_require__(/*! ../utility/popup/popuphelper */ 288);\r\nvar QigDropDown = __webpack_require__(/*! ../utility/dropdown */ 467);\r\nvar messageHelper = __webpack_require__(/*! ../utility/message/messagehelper */ 283);\r\nvar keyDownHelper = __webpack_require__(/*! ../../utility/generic/keydownhelper */ 258);\r\nvar htmlUtilities = __webpack_require__(/*! ../../utility/generic/htmlutilities */ 243);\r\nvar TeamListPopup = __webpack_require__(/*! ./teamlistpopup */ 478);\r\nvar configurablecharacteristicshelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurablecharacteristicsnames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar teamManagementStore = __webpack_require__(/*! ../../stores/teammanagement/teammanagementstore */ 245);\r\nvar applicationStore = __webpack_require__(/*! ../../stores/applicationoffline/applicationstore */ 247);\r\nvar MessagePopup = /** @class */ (function (_super) {\r\n    __extends(MessagePopup, _super);\r\n    /**\r\n     * Constructor Messagepopup\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function MessagePopup(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.isShowTeamListPopup = false;\r\n        _this._isEntireTeamSelected = false;\r\n        _this._mandatoryMessagesFromMarkingToolCC = false;\r\n        _this.doTriggerMessageOpenEvent = false;\r\n        /**\r\n         * This method will render QIG section for Compose, Reply and Forward message types\r\n         */\r\n        _this.renderQigSection = function () {\r\n            switch (_this.props.messageType) {\r\n                case enums.MessageType.InboxCompose:\r\n                    return (React.createElement(\"div\", { className: 'message-qig' },\r\n                        React.createElement(\"span\", { className: 'dim-text msg-qig-label', id: 'qig-dropdown-label' }, localeStore.instance.TranslateText('messaging.compose-message.question-group') + ':'),\r\n                        React.createElement(QigDropDown, { dropDownType: enums.DropDownType.QIG, id: 'select_qig', style: _this.state.qigDropDownStyle, className: 'dropdown-wrap message-qig-name', selectedItem: _this.selectedQig, isOpen: _this.clickedDropDown === enums.DropDownType.QIG ? _this.isQigDropDownOpen : undefined, items: _this.props.qigItemsList, onClick: _this.onQigDropDownClick, onSelect: _this.onQigItemSelected, title: localeStore.instance.TranslateText('messaging.compose-message.question-group-tooltip') })));\r\n                case enums.MessageType.InboxForward:\r\n                case enums.MessageType.InboxReply:\r\n                case enums.MessageType.WorklistCompose:\r\n                case enums.MessageType.TeamCompose:\r\n                    return (React.createElement(\"div\", { className: 'message-qig' },\r\n                        React.createElement(\"span\", { className: 'dim-text msg-qig-label', id: 'question-group-text' }, localeStore.instance.TranslateText('messaging.compose-message.question-group') + ':'),\r\n                        React.createElement(\"div\", { className: 'message-qig-name', id: 'selected-qig-name' }, _this.selectedQig)));\r\n            }\r\n        };\r\n        /**\r\n         * This method will return associtated response section for Forward and Reply message types\r\n         */\r\n        _this.renderAssociatedResponseSection = function () {\r\n            if ((_this.props.messageType === enums.MessageType.InboxForward || _this.props.messageType === enums.MessageType.InboxReply)\r\n                && (_this.props.responseId != null && _this.props.responseId !== '' && _this.props.responseId !== undefined)) {\r\n                return (React.createElement(\"div\", { className: 'clearfix padding-bottom-10' },\r\n                    React.createElement(\"div\", { className: 'comp-resp-id shift-left' },\r\n                        React.createElement(\"span\", { className: 'dim-text', id: 'associated-response-text' }, localeStore.instance.TranslateText('messaging.compose-message.associated-response') + ':'),\r\n                        React.createElement(\"div\", { className: 'message-resonse-id', id: 'associated-response-id' }, messageHelper.getMarkingModeText(_this.props.selectedMsgDetails.markingModeId, _this.props.selectedMsgDetails.isElectronicStandardisationTeamMember) + _this.props.responseId))));\r\n            }\r\n        };\r\n        /**\r\n         * This method will call on qig dropdown select\r\n         */\r\n        _this.onQigItemSelected = function (selectedItem) {\r\n            // resetting to standard message priority while qig selected\r\n            _this.priorityDropDownSelectedItem = enums.MessagePriority.Standard;\r\n            _this.props.onQigItemSelected(selectedItem);\r\n            var selectedQigItem = _this.props.qigItemsList.filter(function (x) { return x.id === selectedItem; });\r\n            var qigId = selectedItem;\r\n            var examinerRoleId = selectedQigItem[0].examinerRoleId;\r\n            var args = {\r\n                examinerRoleId: examinerRoleId,\r\n                qigId: qigId\r\n            };\r\n            messagingActionCreator.getTeamDetails(args);\r\n        };\r\n        /**\r\n         * On navigate away from inbox\r\n         */\r\n        _this.onNavigateAwayFromInbox = function (navigateTo) {\r\n            if ((navigateTo === enums.SaveAndNavigate.toReplyMessage || navigateTo === enums.SaveAndNavigate.toForwardMessage ||\r\n                navigateTo === enums.SaveAndNavigate.newMessageButtonClick)\r\n                && !messageHelper.isMessagePanelEdited(_this.props.messageType, _this.toFieldValues, _this.toFieldIds)) {\r\n                _this.props.onResetPopupCallback(navigateTo);\r\n            }\r\n            else {\r\n                _this.onNavigateAwayFromResponse(navigateTo);\r\n            }\r\n        };\r\n        /**\r\n         *  This will set the required variables\r\n         */\r\n        _this.onOpen = function (messageType) {\r\n            // if tinymce is not loaded we need to skip this method and retrigger this after editor is loaded\r\n            if (!_this.state.isTinyMCELoaded) {\r\n                _this.doTriggerMessageOpenEvent = true;\r\n                _this.msgType = messageType;\r\n                return;\r\n            }\r\n            // if message type is inbox compose or worklist compose then set the default content for setting default fonts\r\n            if (messageType === enums.MessageType.InboxCompose || messageType === enums.MessageType.WorklistCompose ||\r\n                messageType === enums.MessageType.TeamCompose) {\r\n                _this.messageBody = messageHelper.getMessageContent(messageType);\r\n                if (_this.isMessagePopupMinimized === true) {\r\n                    _this.onMaximizeMessagePanel();\r\n                }\r\n            }\r\n            // if message type is work list compose then set supervisior details in to address fields.\r\n            if (messageType === enums.MessageType.WorklistCompose || messageType === enums.MessageType.TeamCompose) {\r\n                _this._selectedTeamList = new Array();\r\n                _this.toFieldIds = new Array();\r\n                _this.toFieldValues = new Array();\r\n                _this.toFieldIds.push(_this.props.supervisorId);\r\n                _this.toFieldValues.push(_this.props.supervisorName);\r\n                _this._selectedTeamList.push(_this.props.supervisorName);\r\n            }\r\n            // Fix for defect 54276. Reply forward message details has to be set only once. \r\n            if (messageType === enums.MessageType.InboxReply || messageType === enums.MessageType.InboxForward) {\r\n                _this.setInboxForwardReplyMessageDetails();\r\n            }\r\n            // Fix for defect 54276. Reply forward message details has to be set only once. \r\n            if (messageType === enums.MessageType.InboxReply || messageType === enums.MessageType.InboxForward) {\r\n                _this.setInboxForwardReplyMessageDetails();\r\n            }\r\n            // Fix for defect 54276. Reply forward message details has to be set only once. \r\n            if (messageType === enums.MessageType.InboxReply || messageType === enums.MessageType.InboxForward) {\r\n                _this.setInboxForwardReplyMessageDetails();\r\n            }\r\n            _this.setState({ renderedOn: Date.now() });\r\n            // enable send button\r\n            _this.enableDisableSendButton();\r\n        };\r\n        /**\r\n         * Method fired to minimize the message panel.\r\n         */\r\n        _this.onMinimizeMessagePanel = function () {\r\n            // added as part of defect #29269\r\n            if (htmlUtilities.isIPadDevice) {\r\n                htmlUtilities.setFocusToElement('message-subject');\r\n                htmlUtilities.blurElement('message-subject');\r\n            }\r\n            _this.isMessagePopupMinimized = true;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Method fired to maximize the message panel.\r\n         */\r\n        _this.onMaximizeMessagePanel = function () {\r\n            _this.isMessagePopupMinimized = false;\r\n            _this.setState({ renderedOn: Date.now() });\r\n            // enable send button\r\n            _this.enableDisableSendButton();\r\n        };\r\n        /**\r\n         * Method fired to close the message panel.\r\n         */\r\n        _this.onMessagePanelClose = function () {\r\n            keyDownHelper.instance.Activate(enums.MarkEntryDeactivator.Messaging);\r\n            _this.isMessagePopupMinimized = false;\r\n            _this.messageSubject = '';\r\n            if (_this.selectedQigItemId && _this.selectedQigItemId !== 0) {\r\n                var selectedQigItem = _this.props.qigItemsList.filter(function (x) { return x.id === _this.selectedQigItemId; });\r\n                if (selectedQigItem && selectedQigItem.length > 0) {\r\n                    var qigId = _this.selectedQigItemId;\r\n                    var examinerRoleId = selectedQigItem[0].examinerRoleId;\r\n                    messagingActionCreator.clearTeamSelection(examinerRoleId);\r\n                }\r\n            }\r\n            _this._selectedTeamList = new Array();\r\n            _this._isEntireTeamSelected = false;\r\n            /**\r\n             * Defect 64542 fix: setting isShowTeamListPopup to false to prevent TeamList Popup from persisting\r\n             * when closing and opening a new message with only 1 QIG item\r\n             */\r\n            _this.isShowTeamListPopup = false;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * This method is handling the letious popup events.\r\n         */\r\n        _this.onPopUpDisplayEvent = function (popUpType, popUpActionType) {\r\n            switch (popUpType) {\r\n                case enums.PopUpType.DiscardMessage:\r\n                case enums.PopUpType.DiscardMessageNavigateAway:\r\n                    switch (popUpActionType) {\r\n                        case enums.PopUpActionType.Yes:\r\n                            popupHelper.handlePopUpEvents(popUpType, popUpActionType, _this.onDiscardMessageConfirmed);\r\n                            break;\r\n                        case enums.PopUpActionType.No:\r\n                            popupHelper.handlePopUpEvents(popUpType, popUpActionType, _this.onDiscardMessageCancelled);\r\n                            break;\r\n                    }\r\n                    break;\r\n                case enums.PopUpType.DiscardOnNewMessageButtonClick:\r\n                    switch (popUpActionType) {\r\n                        case enums.PopUpActionType.Show:\r\n                            _this.isMessagePopupMinimized = false;\r\n                            _this.setState({ renderedOn: Date.now() });\r\n                            break;\r\n                        case enums.PopUpActionType.Yes:\r\n                            popupHelper.handlePopUpEvents(popUpType, popUpActionType, _this.onDiscardNewPopupConfirmed);\r\n                            break;\r\n                        case enums.PopUpActionType.No:\r\n                            //Reset the navigate to variable when the user chooses to stay on the message panel\r\n                            _this.navigateTo = enums.SaveAndNavigate.none;\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n        _this.onDiscardNewPopupConfirmed = function () {\r\n            if (_this.navigateTo === enums.SaveAndNavigate.newMessageButtonClick) {\r\n                _this.priorityDropDownSelectedItem = enums.MessagePriority.Standard;\r\n                _this.messageSubject = '';\r\n                _this.messageBody = '';\r\n                _this.isDropDownOpen = undefined;\r\n                _this.isQigDropDownOpen = undefined;\r\n                _this.toFieldValues = null;\r\n                _this.toFieldIds = null;\r\n                _this._selectedTeamList = new Array();\r\n                _this._isEntireTeamSelected = false;\r\n                tinymce.activeEditor.setContent('');\r\n                _this.enableDisableSendButton();\r\n                _this.props.onResetPopupCallback(_this.navigateTo);\r\n            }\r\n            else {\r\n                _this.props.onResetPopupCallback(_this.navigateTo);\r\n            }\r\n            _this.navigateTo = enums.SaveAndNavigate.none;\r\n        };\r\n        /**\r\n         *  Callback function for dropdown click\r\n         */\r\n        _this.onQigDropDownClick = function (dropDown, width) {\r\n            if (width) {\r\n                var style = {};\r\n                style.minWidth = width;\r\n                _this.setState({\r\n                    qigDropDownStyle: style\r\n                });\r\n            }\r\n            _this.onDropDownClick(dropDown);\r\n        };\r\n        _this.showToAddressList = function () {\r\n            _this.isShowTeamListPopup = true;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        _this.hideToAddressList = function () {\r\n            _this.setState({ isshowToAddressList: false });\r\n        };\r\n        _this.saveToAddressList = function () {\r\n            _this.setState({ isshowToAddressList: false });\r\n        };\r\n        /**\r\n         * Handles the action event on team list Received.\r\n         */\r\n        _this.updatedTeamListReceived = function (isSaved) {\r\n            if (isSaved === void 0) { isSaved = false; }\r\n            _this.toFieldValues = new Array();\r\n            _this.toFieldIds = new Array();\r\n            _this._selectedTeamList = new Array();\r\n            _this._isEntireTeamSelected = false;\r\n            _this.isSubordinateSelected = false;\r\n            var teams = messageStore.instance.teamDetails;\r\n            if (teams && teams.team) {\r\n                if (teams.team.toTeam) {\r\n                    _this._isEntireTeamSelected = true;\r\n                    _this.isSubordinateSelected = true;\r\n                }\r\n                else {\r\n                    if (teams.team.parent && teams.team.parent.isChecked) {\r\n                        _this._selectedTeamList.push(teams.team.parent.fullName + ';');\r\n                    }\r\n                    if (teams.team.subordinates.length > 0) {\r\n                        _this.getSelectedSubordinateList(teams.team.subordinates);\r\n                    }\r\n                }\r\n                // the logged in user has subordinates, check the store for new TO list\r\n                // if there are no subordinates, the the supervisor details (if any) will be populated via props\r\n                if (messageStore.instance.teamDetails.team.subordinates &&\r\n                    messageStore.instance.teamDetails.team.subordinates.length > 0) {\r\n                    _this.populateToField(teams.team);\r\n                }\r\n                _this.isShowTeamListPopup = false;\r\n                if (isSaved && _this.priorityDropDownSelectedItem === enums.MessagePriority.Mandatory &&\r\n                    !_this.isSubordinateSelected) {\r\n                    messagingActionCreator.displayMandatoryValidationPopup(true);\r\n                }\r\n                _this.setState({ renderedOn: Date.now() });\r\n            }\r\n        };\r\n        /**\r\n         * Populates the To Fields based on the values in the store\r\n         */\r\n        _this.populateToField = function (team) {\r\n            if (team) {\r\n                // Add Parent Examiner of the current examiner if the parent is selected\r\n                if (team.isCurrentExaminer && team.parent && team.parent.isChecked) {\r\n                    _this.toFieldIds.push(team.parent.examinerId);\r\n                    _this.toFieldValues.push(team.parent.fullName);\r\n                }\r\n                if (!team.isCurrentExaminer && team.isChecked) {\r\n                    _this.toFieldIds.push(team.examinerId);\r\n                    _this.toFieldValues.push(team.fullName);\r\n                }\r\n                for (var _i = 0, _a = team.subordinates; _i < _a.length; _i++) {\r\n                    var subTeam = _a[_i];\r\n                    _this.populateToField(subTeam);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Handles the action event on To address list Received.\r\n         */\r\n        _this.teamListReceived = function () {\r\n            var teams = messageStore.instance.teamDetails;\r\n            var qigId = _this.props.selectedQigItemId;\r\n            _this._disableToButtonForStandardisationQig = false;\r\n            //Flag to identify whether the qig is in standardisation setup progress\r\n            var selectedQig = _this.props.qigItemsList.filter(function (x) { return x.id === _this.selectedQigItemId; });\r\n            var coordinationComplete = selectedQig[0].coordinationComplete;\r\n            if (teams && teams.team.subordinates) {\r\n                _this._isEntireTeamSelected = teams.team.toTeam;\r\n                _this.toFieldValues = new Array();\r\n                _this.toFieldIds = new Array();\r\n                _this._selectedTeamList = new Array();\r\n                if (_this.props.messageType === enums.MessageType.InboxReply) {\r\n                    _this.toFieldIds.push(_this.props.selectedMessage.fromExaminerId);\r\n                    _this.toFieldValues.push(_this.props.selectedMessage.examinerDetails.fullName);\r\n                    _this._selectedTeamList.push(_this.props.selectedMessage.examinerDetails.fullName);\r\n                    _this.isSubordinateSelected = _this.isReplyToSubordinate(teams.team.subordinates);\r\n                }\r\n                else if (!coordinationComplete) {\r\n                    // If the message is against standardisationsetup qig or response the receiver \r\n                    // should be stm parent else all work as existing\r\n                    if (teams.team.stmParent) {\r\n                        _this.toFieldIds.push(teams.team.stmParent.examinerId);\r\n                        _this.toFieldValues.push(teams.team.stmParent.fullName);\r\n                        _this._selectedTeamList.push(teams.team.stmParent.fullName);\r\n                        _this.isShowTeamListPopup = false;\r\n                        _this.isSubordinateSelected = false;\r\n                        // Disabling button if the user sends message against standardisation response or Qig\r\n                        _this._disableToButtonForStandardisationQig = true;\r\n                    }\r\n                }\r\n                else if (teams.team.subordinates.length === 0) {\r\n                    if (teams.team.parent) {\r\n                        _this.setMessagePanelToTabForParent(teams.team.parent);\r\n                    }\r\n                }\r\n            }\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * Handles the action event on To address list Received.\r\n         */\r\n        _this.messagePriorityUpdate = function () {\r\n            _this.priorityDropDownSelectedItem = enums.MessagePriority.Standard;\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * Set the selected language state upon successfull confirmation from locale store.\r\n         */\r\n        _this.languageChanged = function () {\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * Handles the action event on To address list Received.\r\n         */\r\n        _this.isTinyMCELoaded = function (isLoaded) {\r\n            _this.setState({\r\n                isTinyMCELoaded: isLoaded\r\n            });\r\n        };\r\n        // Set the default states\r\n        _this.state = {\r\n            renderedOn: 0,\r\n            qigDropDownStyle: {},\r\n            isTinyMCELoaded: false\r\n        };\r\n        _this._selectedTeamList = new Array();\r\n        _this.teamListReceived = _this.teamListReceived.bind(_this);\r\n        _this._mandatoryMessagesFromMarkingToolCC = configurablecharacteristicshelper.getCharacteristicValue(configurablecharacteristicsnames.MandatoryMessagesFromMarkingTool).toLowerCase() === 'true' ? true : false;\r\n        _this.doShowMandatoryMessagePriority = _this.doShowMandatoryMessagePriority.bind(_this);\r\n        _this.doHideToButton = _this.doHideToButton.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    MessagePopup.prototype.render = function () {\r\n        var _this = this;\r\n        var addressListPopup = this.isShowTeamListPopup ? (React.createElement(TeamListPopup, { isShowTeamListPopup: this.isShowTeamListPopup, id: 'teamlist-popup', key: 'teamlist-popup', selectedLanguage: this.props.selectedLanguage })) : null;\r\n        var toAddressListPopup = (React.createElement(\"div\", null,\r\n            React.createElement(\"button\", { className: 'secondary rounded popup-nav to-address-btn', \"aria-haspopup\": 'true', \"data-popup\": 'addressListPopUp', onClick: this.showToAddressList, id: 'messageToButton', key: 'messageToButton_key', disabled: this.doDisableToButton() }, localeStore.instance.TranslateText('messaging.compose-message.to-button')),\r\n            addressListPopup));\r\n        var _showMandatoryMessagePriority = this.doShowMandatoryMessagePriority();\r\n        var _doHideToButton = this.doHideToButton();\r\n        return (React.createElement(\"div\", { className: classNames('popup full-width popup-overlay  messaging', { 'open': this.props.isOpen }, { 'minimized': this.isMessagePopupMinimized }), id: 'composeMessage', role: 'dialog', \"aria-labelledby\": 'popup2Title', \"aria-describedby\": 'popup2Desc' },\r\n            React.createElement(\"div\", { className: 'popup-wrap compose-new-msg' },\r\n                React.createElement(\"div\", { className: 'popup-content', id: 'popup2Desc' },\r\n                    React.createElement(\"div\", { className: 'comp-msg-top' },\r\n                        React.createElement(\"div\", { className: 'qig-menu-holder' },\r\n                            this.renderQigSection(),\r\n                            React.createElement(\"div\", { className: 'set-priority' },\r\n                                React.createElement(MessagePriorityDropDown, { id: 'select_priority', dropDownType: enums.DropDownType.Priority, className: 'dropdown-wrap align-right', selectedItem: this.getPriorityDropDownItem(this.priorityDropDownSelectedItem), isOpen: this.clickedDropDown === enums.DropDownType.Priority ? this.isDropDownOpen : undefined, items: [{\r\n                                            id: enums.MessagePriority.Standard,\r\n                                            name: this.getPriorityDropDownItem(enums.MessagePriority.Standard)\r\n                                        },\r\n                                        {\r\n                                            id: enums.MessagePriority.Important,\r\n                                            name: this.getPriorityDropDownItem(enums.MessagePriority.Important)\r\n                                        },\r\n                                        _showMandatoryMessagePriority ? {\r\n                                            id: enums.MessagePriority.Mandatory,\r\n                                            name: this.getPriorityDropDownItem(enums.MessagePriority.Mandatory)\r\n                                        } : null], onClick: this.onDropDownClick, onSelect: this.onSelect }))),\r\n                        this.renderAssociatedResponseSection(),\r\n                        React.createElement(\"div\", { className: 'msg-recipient-wrap' },\r\n                            React.createElement(\"div\", { className: 'rec-address-label', id: 'message-popup-to-label' }, _doHideToButton ?\r\n                                localeStore.instance.TranslateText('messaging.compose-message.to-button') + ':' :\r\n                                toAddressListPopup),\r\n                            React.createElement(\"div\", { className: 'recipiants-list-wrap' }, this._isEntireTeamSelected ?\r\n                                React.createElement(\"span\", { className: 'recipiant-name', id: 'message-recipiant-name' }, localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.entire-team') + ';') :\r\n                                this._selectedTeamList.map(function (item, index) {\r\n                                    return React.createElement(\"span\", { className: 'recipiant-name', key: 'recipiant-name' + index.toString() }, item);\r\n                                }))),\r\n                        React.createElement(\"div\", { className: 'comp-subject-wrap' },\r\n                            React.createElement(\"label\", { htmlFor: 'message-subject', id: 'subject-label-popup', className: 'comp-subject-label' }, localeStore.instance.TranslateText('messaging.compose-message.subject') + ':'),\r\n                            React.createElement(Subject, { id: 'message-subject', key: 'key-message-subject', outerClass: 'subject-input-wrap', refName: 'subjectInput', hasFocus: (this.props.messageType === enums.MessageType.InboxCompose ||\r\n                                    this.props.messageType === enums.MessageType.WorklistCompose ||\r\n                                    this.props.messageType === enums.MessageType.TeamCompose), className: 'subject-input', onChange: this.handleSubjectChange, maxLength: 120, isVisible: this.props.isOpen, value: this.messageSubject }))),\r\n                    React.createElement(\"div\", { className: 'comp-msg-bottom', ref: 'msgEditor' },\r\n                        React.createElement(\"div\", { className: 'msg-editor' },\r\n                            React.createElement(MessageEditor, { htmlContent: this.messageBody, id: this.msgEditorId, key: 'key-' + this.msgEditorId, hasFocus: messageHelper.hasFocus(this.props.messageType), \"aria-label\": this.msgEditorId, toggleSaveButtonState: this.toggleSaveButtonState, selectedLanguage: this.props.selectedLanguage, isTinyMCELoaded: this.isTinyMCELoaded })))),\r\n                React.createElement(\"div\", { className: 'popup-header compose-msg-header' },\r\n                    React.createElement(\"h3\", { id: 'popup2Title', className: 'shift-left comp-msg-title' }, messageHelper.getMessageHeader(this.props.messageType)),\r\n                    React.createElement(\"div\", { className: 'shift-left comp-msg-butons' },\r\n                        React.createElement(GenericButton, { id: 'message_send_btn', key: 'key_message_send_btn', className: 'button primary rounded', title: localeStore.instance.TranslateText('messaging.compose-message.send-button-tooltip'), content: localeStore.instance.TranslateText('messaging.compose-message.send-button'), disabled: this.isSendButtonDisabled || this.isShowTeamListPopup, onClick: function () { _this.messageSendValidationCheck(_this.props.messageType); } })),\r\n                    React.createElement(\"div\", { className: 'shift-right minimize-message' },\r\n                        React.createElement(\"a\", { href: 'javascript:void(0)', className: 'minimize-message-link', id: 'message-minimize', title: localeStore.instance.TranslateText('messaging.compose-message.minimise-icon-tooltip'), onClick: this.onMinimize },\r\n                            React.createElement(\"span\", { className: 'minimize-icon lite' }, localeStore.instance.TranslateText('messaging.compose-message.minimise-icon-tooltip'))),\r\n                        React.createElement(\"a\", { href: 'javascript:void(0)', className: 'maximize-message-link', id: 'message-maximize', title: localeStore.instance.TranslateText('messaging.compose-message.maximise-icon-tooltip'), onClick: this.onMaximize },\r\n                            React.createElement(\"span\", { className: 'maxmize-icon lite' }, localeStore.instance.TranslateText('messaging.compose-message.maximise-icon-tooltip'))),\r\n                        React.createElement(\"a\", { href: 'javascript:void(0)', className: 'close-message-link', title: localeStore.instance.TranslateText('messaging.compose-message.close-icon-tooltip'), id: 'message-close', onClick: this.onMessageClose },\r\n                            React.createElement(\"span\", { className: 'close-icon lite' }, localeStore.instance.TranslateText('messaging.compose-message.close-icon-tooltip'))))))));\r\n    };\r\n    /**\r\n     * Component did mount\r\n     */\r\n    MessagePopup.prototype.componentDidMount = function () {\r\n        messageStore.instance.addListener(messageStore.MessageStore.SEND_MESSAGE_SUCCESS_EVENT, this.resetAndCloseMessagePanel);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_OPEN_EVENT, this.onOpen);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_NAVIGATE_EVENT, this.onNavigateAwayFromInbox);\r\n        messageStore.instance.addListener(messageStore.MessageStore.POPUP_DISPLAY_EVENT, this.onPopUpDisplayEvent);\r\n        window.addEventListener('click', this._boundHandleOnClick);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_MINIMIZE_EVENT, this.onMinimizeMessagePanel);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_MAXIMIZE_EVENT, this.onMaximizeMessagePanel);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_CLOSE_EVENT, this.onMessagePanelClose);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_NAVIGATION_EVENT, this.onNavigateFromMessagePanel);\r\n        messageStore.instance.addListener(messageStore.MessageStore.UPDATE_TEAM_LIST_RECEIVED, this.updatedTeamListReceived);\r\n        messageStore.instance.addListener(messageStore.MessageStore.TEAM_LIST_RECEIVED, this.teamListReceived);\r\n        messageStore.instance.addListener(messageStore.MessageStore.UPDATE_MESSAGE_PRIORITY_EVENT, this.messagePriorityUpdate);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.APPROVAL_MANAGEMENT_ACTION_EXECUTED, this.examinerValidation);\r\n        applicationStore.instance.addListener(applicationStore.ApplicationStore.ONLINE_STATUS_UPDATED_EVENT, this.onOnlineStatusChanged);\r\n        localeStore.instance.addListener(localeStore.LocaleStore.LOCALE_CHANGE_EVENT, this.languageChanged);\r\n        // Set the variables from props.\r\n        if (this.props.messageType === enums.MessageType.TeamCompose) {\r\n            this.selectedQig = this.props.selectedQigItem;\r\n            this.selectedQigItemId = this.props.selectedQigItemId;\r\n            this.questionPaperPartId = this.props.questionPaperPartId;\r\n            this.onOpen(enums.MessageType.TeamCompose);\r\n        }\r\n    };\r\n    /**\r\n     * Component will unmount\r\n     */\r\n    MessagePopup.prototype.componentWillUnmount = function () {\r\n        messageStore.instance.removeListener(messageStore.MessageStore.SEND_MESSAGE_SUCCESS_EVENT, this.resetAndCloseMessagePanel);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_OPEN_EVENT, this.onOpen);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_NAVIGATE_EVENT, this.onNavigateAwayFromInbox);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.POPUP_DISPLAY_EVENT, this.onPopUpDisplayEvent);\r\n        window.removeEventListener('click', this._boundHandleOnClick);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_MINIMIZE_EVENT, this.onMinimizeMessagePanel);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_MAXIMIZE_EVENT, this.onMaximizeMessagePanel);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_CLOSE_EVENT, this.onMessagePanelClose);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_NAVIGATION_EVENT, this.onNavigateFromMessagePanel);\r\n        keyDownHelper.instance.Activate(enums.MarkEntryDeactivator.Messaging);\r\n        if (messageStore.instance.messageViewAction !== enums.MessageViewAction.None) {\r\n            messagingActionCreator.messageAction(enums.MessageViewAction.None);\r\n        }\r\n        messageStore.instance.removeListener(messageStore.MessageStore.UPDATE_TEAM_LIST_RECEIVED, this.updatedTeamListReceived);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.TEAM_LIST_RECEIVED, this.teamListReceived);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.UPDATE_MESSAGE_PRIORITY_EVENT, this.messagePriorityUpdate);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.APPROVAL_MANAGEMENT_ACTION_EXECUTED, this.examinerValidation);\r\n        applicationStore.instance.removeListener(applicationStore.ApplicationStore.ONLINE_STATUS_UPDATED_EVENT, this.onOnlineStatusChanged);\r\n        localeStore.instance.removeListener(localeStore.LocaleStore.LOCALE_CHANGE_EVENT, this.languageChanged);\r\n    };\r\n    /**\r\n     * Component will receive props\r\n     * @param {Props} nextProps\r\n     */\r\n    MessagePopup.prototype.componentWillReceiveProps = function (nextProps) {\r\n        // Defect 44392 fix - select a qig text in message area is not getting localized upon changing language \r\n        if (nextProps.selectedQigItemId > 0) {\r\n            this.selectedQig = nextProps.selectedQigItem;\r\n        }\r\n        else {\r\n            this.selectedQig = localeStore.instance.TranslateText('messaging.compose-message.select-qig-placeholder');\r\n        }\r\n        this.selectedQigItemId = nextProps.selectedQigItemId;\r\n        this.questionPaperPartId = nextProps.questionPaperPartId;\r\n        // to close teamlist popup while opening new message\r\n        if (this.selectedQigItemId === 0) {\r\n            this.isShowTeamListPopup = false;\r\n        }\r\n    };\r\n    /**\r\n     * Set Inbox Forward and Replay Message details\r\n     */\r\n    MessagePopup.prototype.setInboxForwardReplyMessageDetails = function () {\r\n        keyDownHelper.instance.DeActivate(enums.MarkEntryDeactivator.Messaging);\r\n        // set messageSubject for reply and forward messages\r\n        if ((this.props.messageType === enums.MessageType.InboxForward || this.props.messageType === enums.MessageType.InboxReply)\r\n            && this.props.isReplyOrForwardClicked && this.props.selectedMessage) {\r\n            // reset isMessagePopupMinimized variable\r\n            this.isMessagePopupMinimized = false;\r\n            this.messageSubject = messageHelper.getSubjectContent(this.props.messageType, this.props.subject);\r\n            this.priorityDropDownSelectedItem = this.props.priorityDropDownSelectedItem;\r\n            this.messageBody = this.props.messageBody;\r\n            var qigId_1 = this.props.selectedQigItemId;\r\n            var examinerRoleId = this.props.qigItemsList.filter(function (x) { return x.id === qigId_1; })[0].examinerRoleId;\r\n            var args = {\r\n                examinerRoleId: examinerRoleId,\r\n                qigId: qigId_1\r\n            };\r\n            // get the teamdetails to find whether atleast one subordinate is\r\n            // selected(for displaying mandatory priority options)\r\n            messagingActionCreator.getTeamDetails(args);\r\n        }\r\n    };\r\n    /**\r\n     * Component did update\r\n     */\r\n    MessagePopup.prototype.componentDidUpdate = function () {\r\n        // enable or disable send button while changing QIG dropdown\r\n        if (this.props.isOpen) {\r\n            this.enableDisableSendButton();\r\n        }\r\n        if (this.doTriggerMessageOpenEvent) {\r\n            this.doTriggerMessageOpenEvent = false;\r\n            this.onOpen(this.msgType);\r\n        }\r\n    };\r\n    /**\r\n     * To avoid the qigs in which the selected examiner has no supervisor\r\n     * @param {Array<Item>} qigItemsList\r\n     * @returns\r\n     */\r\n    MessagePopup.prototype.filterQigItems = function (qigItemsList) {\r\n        return qigItemsList.filter(function (x) { return x.parentExaminerId !== 0; });\r\n    };\r\n    /**\r\n     * To show madatory message priority option in dropdown\r\n     */\r\n    MessagePopup.prototype.doShowMandatoryMessagePriority = function () {\r\n        var _this = this;\r\n        var isMandatoryPriorityAvailable = false;\r\n        // Mandatory Message Priority is availability only if :\r\n        // 1. It is a TeamCompose as TeamCompose is always to subordinates. OR\r\n        // 2. If not WorklistCompose as WorklistCompose will be always to Supervisor. AND\r\n        //      (i).[QIG is not selected.] OR\r\n        //      (ii).[If QIG is selected AND there are no selected examiners.] OR\r\n        //      (iii).[If QIG is selected AND there are selected examiners AND atleast one subordinate is selected.]\r\n        // PS : ResponseCompose Scenarios are handled in message.tsx\r\n        if (this.props.messageType === enums.MessageType.TeamCompose ||\r\n            (this.props.messageType !== enums.MessageType.WorklistCompose &&\r\n                (this.selectedQigItemId === 0 ||\r\n                    (this.selectedQigItemId > 0 && this._selectedTeamList && this._selectedTeamList.length === 0) ||\r\n                    (this.selectedQigItemId > 0 && this._selectedTeamList && this._selectedTeamList.length > 0 && this.isSubordinateSelected)))) {\r\n            isMandatoryPriorityAvailable = true;\r\n        }\r\n        if (this.props.qigItemsList.length > 0 && this.selectedQigItemId > 0) {\r\n            var selectedQig = this.props.qigItemsList.filter(function (x) { return x.id === _this.selectedQigItemId; });\r\n            var currentExaminerApprovalStatus = selectedQig[0].approvalStatusId;\r\n            if (currentExaminerApprovalStatus === enums.ExaminerApproval.NotApproved ||\r\n                currentExaminerApprovalStatus === enums.ExaminerApproval.Suspended) {\r\n                isMandatoryPriorityAvailable = false;\r\n            }\r\n        }\r\n        return this._mandatoryMessagesFromMarkingToolCC && isMandatoryPriorityAvailable;\r\n    };\r\n    /**\r\n     * show or hide 'To' button\r\n     */\r\n    MessagePopup.prototype.doHideToButton = function () {\r\n        var _subordinates = null;\r\n        if (messageStore.instance.teamDetails &&\r\n            messageStore.instance.teamDetails.team &&\r\n            messageStore.instance.teamDetails.team.subordinates) {\r\n            _subordinates = messageStore.instance.teamDetails.team.subordinates;\r\n        }\r\n        return ((_subordinates && _subordinates.length) === 0 ||\r\n            this.props.messageType === enums.MessageType.InboxReply ||\r\n            this.props.messageType === enums.MessageType.WorklistCompose ||\r\n            this.props.messageType === enums.MessageType.TeamCompose);\r\n    };\r\n    /**\r\n     * Get selected subordinated list.\r\n     */\r\n    MessagePopup.prototype.getSelectedSubordinateList = function (teamList) {\r\n        var that = this;\r\n        teamList.map(function (examinerInfo) {\r\n            if (examinerInfo.isChecked) {\r\n                that.isSubordinateSelected = true;\r\n                that._selectedTeamList.push(examinerInfo.fullName + ';');\r\n            }\r\n            if (examinerInfo.subordinates.length > 0) {\r\n                that.getSelectedSubordinateList(examinerInfo.subordinates);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Ensure Reply is done to a subordinate.\r\n     */\r\n    MessagePopup.prototype.isReplyToSubordinate = function (teamList) {\r\n        // Suboridinates of the current examiner will be passed here\r\n        // If the selectedMessage.fromExaminerId is one among them, set isSubordinate as true.\r\n        var that = this;\r\n        var isSubordinate = false;\r\n        teamList.map(function (examinerInfo) {\r\n            if (examinerInfo.examinerId === that.props.selectedMessage.fromExaminerId) {\r\n                isSubordinate = true;\r\n            }\r\n            if (examinerInfo.subordinates.length > 0) {\r\n                that.isReplyToSubordinate(examinerInfo.subordinates);\r\n            }\r\n        });\r\n        return isSubordinate;\r\n    };\r\n    /**\r\n     * This method will set message panel property for sending message to the parent\r\n     */\r\n    MessagePopup.prototype.setMessagePanelToTabForParent = function (parent) {\r\n        this.toFieldIds.push(parent.examinerId);\r\n        this.toFieldValues.push(parent.fullName);\r\n        this._selectedTeamList.push(parent.fullName);\r\n        this.isSubordinateSelected = false;\r\n    };\r\n    /**\r\n     * check to enable to button\r\n     */\r\n    MessagePopup.prototype.doDisableToButton = function () {\r\n        if (this.selectedQigItemId === 0 ||\r\n            !messageStore.instance.teamDetails ||\r\n            messageStore.instance.teamDetails.team.subordinates.length === 0 || this._disableToButtonForStandardisationQig) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    return MessagePopup;\r\n}(MessageBase));\r\nmodule.exports = MessagePopup;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 462:
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./src/components/message/messagebase.ts ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../actions/messaging/messagingactioncreator */ 268);\r\nvar popupHelper = __webpack_require__(/*! ../utility/popup/popuphelper */ 288);\r\nvar popUpDisplayActionCreator = __webpack_require__(/*! ../../actions/popupdisplay/popupdisplayactioncreator */ 328);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar qualityfeedbackHelper = __webpack_require__(/*! ../../utility/qualityfeedback/qualityfeedbackhelper */ 309);\r\nvar messageHelper = __webpack_require__(/*! ../utility/message/messagehelper */ 283);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar teamManagementActionCreator = __webpack_require__(/*! ../../actions/teammanagement/teammanagementactioncreator */ 263);\r\nvar applicationStore = __webpack_require__(/*! ../../stores/applicationoffline/applicationstore */ 247);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar MessageBase = /** @class */ (function (_super) {\r\n    __extends(MessageBase, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function MessageBase(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.isSelectedItemClicked = false;\r\n        _this.navigateTo = enums.SaveAndNavigate.none;\r\n        _this.msgEditorId = 'msg-tinymce-editor';\r\n        _this._boundHandleOnClick = null;\r\n        _this.isSubordinateSelected = false;\r\n        _this.sendMessageActionInProgress = false;\r\n        _this.messageType = enums.MessageType.None;\r\n        /**\r\n         * Callback function for dropdown select\r\n         */\r\n        _this.onSelect = function (selectedItem, event) {\r\n            _this.priorityDropDownSelectedItem = selectedItem;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         *  Callback function for dropdown click\r\n         */\r\n        _this.onDropDownClick = function (dropDown) {\r\n            _this.clickedDropDown = dropDown;\r\n            _this.isSelectedItemClicked = true;\r\n            if (_this.clickedDropDown === enums.DropDownType.Priority) {\r\n                _this.isQigDropDownOpen = undefined;\r\n                _this.isDropDownOpen = _this.isDropDownOpen === undefined ? true : !_this.isDropDownOpen;\r\n            }\r\n            else if (_this.clickedDropDown === enums.DropDownType.QIG) {\r\n                _this.isDropDownOpen = undefined;\r\n                _this.isQigDropDownOpen = _this.isQigDropDownOpen === undefined ? true : !_this.isQigDropDownOpen;\r\n            }\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Handle click events on the window and collapse priority selection dropdown\r\n         * @param {any} source - The source element\r\n         */\r\n        _this.handleOnClick = function () {\r\n            if (!_this.isSelectedItemClicked && ((_this.isDropDownOpen !== undefined && _this.isDropDownOpen)\r\n                || (_this.isQigDropDownOpen !== undefined && _this.isQigDropDownOpen))) {\r\n                // collapse the priority dropdown\r\n                _this.isDropDownOpen = false;\r\n                _this.isQigDropDownOpen = false;\r\n                _this.setState({ renderedOn: Date.now() });\r\n            }\r\n            else {\r\n                _this.isSelectedItemClicked = false;\r\n            }\r\n        };\r\n        /**\r\n         *  This will return the localised string for message priority dropdown\r\n         */\r\n        _this.getPriorityDropDownItem = function (dropDownItem) {\r\n            var localisedDropDownItem;\r\n            switch (dropDownItem) {\r\n                case enums.MessagePriority.Important:\r\n                    localisedDropDownItem = localeStore.instance.TranslateText('messaging.compose-message.priority.important');\r\n                    break;\r\n                case enums.MessagePriority.Mandatory:\r\n                    localisedDropDownItem = localeStore.instance.TranslateText('messaging.compose-message.priority.mandatory');\r\n                    break;\r\n                default:\r\n                    localisedDropDownItem = localeStore.instance.TranslateText('messaging.compose-message.priority.standard');\r\n                    break;\r\n            }\r\n            return localisedDropDownItem;\r\n        };\r\n        /**\r\n         * Method fired when the message is closed.\r\n         */\r\n        _this.onMessageClose = function () {\r\n            // Show discard message if content edited; or just close the panel.\r\n            if (_this.isMessagePanelEdited) {\r\n                messagingActionCreator.messageAction(enums.MessageViewAction.Maximize);\r\n                if (_this.navigateTo === enums.SaveAndNavigate.newMessageButtonClick\r\n                    || _this.navigateTo === enums.SaveAndNavigate.toReplyMessage\r\n                    || _this.navigateTo === enums.SaveAndNavigate.toForwardMessage) {\r\n                    popUpDisplayActionCreator.popUpDisplay(enums.PopUpType.DiscardOnNewMessageButtonClick, enums.PopUpActionType.Show, enums.SaveAndNavigate.none, {\r\n                        popupContent: localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.body-start-new-message-while-composing')\r\n                    });\r\n                }\r\n                else if (_this.navigateTo === enums.SaveAndNavigate.toNewResponseMessageCompose) {\r\n                    popUpDisplayActionCreator.popUpDisplay(enums.PopUpType.DiscardOnNewMessageButtonClick, enums.PopUpActionType.Show, enums.SaveAndNavigate.none, {\r\n                        popupContent: localeStore.instance.TranslateText('marking.response.discard-message-or-exception-dialog.body')\r\n                    });\r\n                }\r\n                else {\r\n                    var messageType = _this.navigateTo !== enums.SaveAndNavigate.none\r\n                        ? enums.PopUpType.DiscardMessageNavigateAway : enums.PopUpType.DiscardMessage;\r\n                    popUpDisplayActionCreator.popUpDisplay(messageType, enums.PopUpActionType.Show, messageStore.instance.navigateFrom, {\r\n                        popupContent: (_this.navigateTo === enums.SaveAndNavigate.messageWithInResponse ?\r\n                            localeStore.instance.TranslateText('marking.response.discard-message-or-exception-dialog.body') : undefined)\r\n                    });\r\n                }\r\n            }\r\n            else if (_this.navigateTo !== enums.SaveAndNavigate.none && _this.navigateTo !== enums.SaveAndNavigate.messageWithInResponse\r\n                && _this.navigateTo !== enums.SaveAndNavigate.newMessageButtonClick) {\r\n                // hide the message panel and navigate away\r\n                _this.onDiscardMessageConfirmed();\r\n            }\r\n            else if (_this.navigateTo === enums.SaveAndNavigate.newMessageButtonClick) {\r\n                _this.navigateTo = enums.SaveAndNavigate.none;\r\n                _this.isMessagePopupMinimized = false;\r\n                _this.setState({ renderedOn: Date.now() });\r\n            }\r\n            else {\r\n                // Close the Message Panel.\r\n                _this.resetAndCloseMessagePanel();\r\n                _this.navigateTo = enums.SaveAndNavigate.none;\r\n            }\r\n        };\r\n        /**\r\n         * Navigate away from current response.\r\n         */\r\n        _this.onNavigateAwayFromResponse = function (navigateTo) {\r\n            _this.navigateTo = navigateTo;\r\n            _this.onMessageClose();\r\n        };\r\n        /**\r\n         * Reset message panel and close\r\n         */\r\n        _this.resetAndCloseMessagePanel = function () {\r\n            _this.priorityDropDownSelectedItem = enums.MessagePriority.Standard;\r\n            _this.toFieldValues = null;\r\n            _this.toFieldIds = null;\r\n            _this.messageSubject = '';\r\n            _this.messageBody = '';\r\n            _this.isDropDownOpen = undefined;\r\n            _this.isQigDropDownOpen = undefined;\r\n            _this.props.closeMessagePanel(_this.navigateTo);\r\n            _this.selectedQigItemId = undefined;\r\n            _this.questionPaperPartId = undefined;\r\n            messageHelper.handleSubjectChange(_this.messageSubject);\r\n            _this.sendMessageActionInProgress = false;\r\n            // updating message component with default values\r\n            // this enable or Disable send button will call setState\r\n            _this.enableDisableSendButton();\r\n            // Need to Update the UI (Subject box in the message, after closing the message : Bug 28224\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Method fired when discard message is confirmed.\r\n         */\r\n        _this.onDiscardMessageConfirmed = function (actionFromCombinedPopup, navigateTo) {\r\n            if (actionFromCombinedPopup === void 0) { actionFromCombinedPopup = false; }\r\n            if (navigateTo === void 0) { navigateTo = enums.SaveAndNavigate.none; }\r\n            // If message panel is not edited, no need to change the UI while logout\r\n            if (_this.isMessagePanelEdited) {\r\n                // Close the Message Panel.\r\n                _this.resetAndCloseMessagePanel();\r\n            }\r\n            else if (!_this.isMessagePanelEdited && _this.navigateTo === enums.SaveAndNavigate.newMessageButtonClick) {\r\n                messagingActionCreator.messageAction(enums.MessageViewAction.Open);\r\n            }\r\n            else {\r\n                _this.resetAndCloseMessagePanel();\r\n            }\r\n            // on message close navigate away from response scenario\r\n            if (_this.navigateTo !== enums.SaveAndNavigate.none && _this.navigateTo !== enums.SaveAndNavigate.messageWithInResponse\r\n                && _this.navigateTo !== enums.SaveAndNavigate.toNewResponseMessageCompose &&\r\n                !(_this.navigateTo === enums.SaveAndNavigate.toResponse && qualityfeedbackHelper.isResponseNavigationBlocked())) {\r\n                if (_this.navigateTo === enums.SaveAndNavigate.toSupervisorRemark) {\r\n                    // Response Going from readonly mode to marking. Reset the message related values from response screen.\r\n                    _this.resetAndCloseMessagePanel();\r\n                }\r\n                // if navigate away from Resposne then close the response and move to worklist.\r\n                popupHelper.navigateAway(_this.navigateTo);\r\n            }\r\n            else if (actionFromCombinedPopup) {\r\n                popupHelper.navigateAway(navigateTo);\r\n            }\r\n            _this.navigateTo = enums.SaveAndNavigate.none;\r\n        };\r\n        /**\r\n         * Method fired when discard message is cancelled.\r\n         */\r\n        _this.onDiscardMessageCancelled = function () {\r\n            // reset navigate away from response\r\n            _this.navigateTo = enums.SaveAndNavigate.none;\r\n            messageHelper.handleSubjectChange(_this.messageSubject);\r\n        };\r\n        /**\r\n         * Handles changes in the message panel subject section.\r\n         * @param e\r\n         */\r\n        _this.handleSubjectChange = function (subject) {\r\n            _this.messageSubject = subject;\r\n            _this.enableDisableSendButton();\r\n            messageHelper.handleSubjectChange(subject);\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Enable and disable send button on tinyMCE editor change.\r\n         */\r\n        _this.toggleSaveButtonState = function () {\r\n            _this.enableDisableSendButton();\r\n        };\r\n        /**\r\n         * Method fired when the message panel is minimized.\r\n         */\r\n        _this.onMinimize = function () {\r\n            messagingActionCreator.messageAction(enums.MessageViewAction.Minimize);\r\n        };\r\n        /**\r\n         * Method fired when the message panel is maximized.\r\n         */\r\n        _this.onMaximize = function () {\r\n            messagingActionCreator.messageAction(enums.MessageViewAction.Maximize);\r\n        };\r\n        /**\r\n         * This method will call on message send button click\r\n         */\r\n        _this.onMessageSend = function (messageType) {\r\n            _this.enableDisableSendButton();\r\n            var candidateScriptId = undefined;\r\n            var markGroupId = undefined;\r\n            var esMarkGroupId = undefined;\r\n            _this.messageBody = tinymce.get(_this.msgEditorId).getContent();\r\n            switch (messageType) {\r\n                case enums.MessageType.ResponseCompose:\r\n                case enums.MessageType.ResponseReply:\r\n                case enums.MessageType.ResponseForward:\r\n                    // selected Qig id for compose message in response screen\r\n                    _this.selectedQigItemId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n                    _this.questionPaperPartId = qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId;\r\n                    var openedResponseDetails = _this.props.responseId ?\r\n                        markerOperationModeFactory.operationMode.openedResponseDetails(_this.props.responseId.toString()) : null;\r\n                    var isEsResponse = (worklistStore.instance.currentWorklistType === enums.WorklistType.standardisation\r\n                        || worklistStore.instance.currentWorklistType === enums.WorklistType.practice ||\r\n                        worklistStore.instance.currentWorklistType === enums.WorklistType.secondstandardisation\r\n                        || markerOperationModeFactory.operationMode.isStandardisationSetupMode) ? true : false;\r\n                    if (openedResponseDetails) {\r\n                        candidateScriptId = openedResponseDetails.candidateScriptId;\r\n                        if (markerOperationModeFactory.operationMode.isStandardisationSetupMode) {\r\n                            esMarkGroupId = openedResponseDetails.esMarkGroupId;\r\n                        }\r\n                        else {\r\n                            markGroupId = isEsResponse ? undefined : openedResponseDetails.markGroupId;\r\n                            esMarkGroupId = isEsResponse ? openedResponseDetails.markGroupId : undefined;\r\n                        }\r\n                    }\r\n                    break;\r\n                // Not setting candidateScriptId, markGroupId, esMarkGroupId if composing message from response and worklist\r\n                // since not associated with any particular response.\r\n                case enums.MessageType.InboxCompose:\r\n                case enums.MessageType.WorklistCompose:\r\n                    break;\r\n                default:\r\n                    var currentMessageDetails = _this.props.selectedMsgDetails;\r\n                    if (currentMessageDetails !== undefined && currentMessageDetails !== null) {\r\n                        candidateScriptId = currentMessageDetails.candidateScriptId;\r\n                        markGroupId = currentMessageDetails.markGroupId;\r\n                        esMarkGroupId = currentMessageDetails.esMarkGroupId;\r\n                    }\r\n                    break;\r\n            }\r\n            // fetching currently selected qig's examiner roleId\r\n            var examinerRoleId = 0;\r\n            var msg = messageStore.instance.messagesMarkSchemes;\r\n            if (msg) {\r\n                msg.forEach(function (message) {\r\n                    if (message.markSchemeGroupId === _this.selectedQigItemId) {\r\n                        examinerRoleId = message.examinerRoleId;\r\n                    }\r\n                });\r\n            }\r\n            var toTeam = messageStore.instance.teamDetails ? messageStore.instance.teamDetails.team.toTeam : false;\r\n            messagingActionCreator.sendExaminerMessage(_this.toFieldIds, _this.messageBody, _this.messageSubject, _this.questionPaperPartId, _this.props.responseId, _this.priorityDropDownSelectedItem, _this.selectedQigItemId, candidateScriptId, markGroupId, esMarkGroupId, toTeam, examinerRoleId);\r\n        };\r\n        /**\r\n         * Navigating away from message panel when the pop up is opened\r\n         */\r\n        _this.onNavigateFromMessagePanel = function (messageNavigationArguments) {\r\n            if (messageNavigationArguments.hasMessageContainsDirtyValue === undefined) {\r\n                // Should be possible to open the response, If the message composed from Team management\r\n                if (_this.isMessagePanelEdited) {\r\n                    messagingActionCreator.messageAction(enums.MessageViewAction.Maximize);\r\n                    // To maximise the message panel when the discard popup is shown\r\n                    _this.isMessagePopupMinimized = false;\r\n                    _this.setState({ renderedOn: Date.now() });\r\n                    messageNavigationArguments.hasMessageContainsDirtyValue = true;\r\n                    messagingActionCreator.canMessageNavigate(messageNavigationArguments);\r\n                }\r\n                else if (!messageNavigationArguments.canNavigate) {\r\n                    messagingActionCreator.messageAction(enums.MessageViewAction.Close);\r\n                    messageNavigationArguments.hasMessageContainsDirtyValue = false;\r\n                    if (messageNavigationArguments.navigateTo === enums.MessageNavigation.newException) {\r\n                        _this.navigateTo = enums.SaveAndNavigate.newExceptionButtonClick;\r\n                    }\r\n                    else if (messageNavigationArguments.navigateTo === enums.MessageNavigation.exceptionWithInResponse) {\r\n                        _this.navigateTo = enums.SaveAndNavigate.exceptionWithInResponse;\r\n                    }\r\n                    else if (messageNavigationArguments.navigateTo === enums.MessageNavigation.newExceptionFromMediaErrorDialog) {\r\n                        _this.navigateTo = enums.SaveAndNavigate.newExceptionFromMediaErrorDialog;\r\n                    }\r\n                    _this.resetAndCloseMessagePanel();\r\n                    messageNavigationArguments.canNavigate = true;\r\n                    messagingActionCreator.canMessageNavigate(messageNavigationArguments);\r\n                }\r\n            }\r\n            else if (messageNavigationArguments.hasMessageContainsDirtyValue && messageNavigationArguments.canNavigate) {\r\n                _this.isMessagePopupMinimized = false;\r\n                if (messageNavigationArguments.navigateTo === enums.MessageNavigation.newException) {\r\n                    _this.navigateTo = enums.SaveAndNavigate.newExceptionButtonClick;\r\n                }\r\n                else if (messageNavigationArguments.navigateTo === enums.MessageNavigation.exceptionWithInResponse) {\r\n                    _this.navigateTo = enums.SaveAndNavigate.exceptionWithInResponse;\r\n                }\r\n                else if (messageNavigationArguments.navigateTo === enums.MessageNavigation.newExceptionFromMediaErrorDialog) {\r\n                    _this.navigateTo = enums.SaveAndNavigate.newExceptionFromMediaErrorDialog;\r\n                }\r\n                _this.resetAndCloseMessagePanel();\r\n            }\r\n        };\r\n        /**\r\n         * checks whether the supervisor examiner is valid to send a message or not\r\n         */\r\n        _this.messageSendValidationCheck = function (messageType) {\r\n            _this.sendMessageActionInProgress = true;\r\n            _this.messageType = messageType;\r\n            // While in SEP view we need to check whether the supervisor examiner is valid to send a message to subordinate examiner\r\n            if (markerOperationModeFactory.operationMode.isHelpExaminersView) {\r\n                _this.enableDisableSendButton();\r\n                var dataCollection = new Array();\r\n                var examinerSEPAction = {\r\n                    examinerRoleId: qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId,\r\n                    markSchemeGroupId: qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId,\r\n                    requestedByExaminerRoleId: qigStore.instance.getSelectedQIGForTheLoggedInUser.examinerRoleId\r\n                };\r\n                dataCollection.push(examinerSEPAction);\r\n                var examinerSEPActions = Immutable.List(dataCollection);\r\n                var doSEPApprovalManagementActionArgument = {\r\n                    actionIdentifier: enums.SEPAction.SendMessage,\r\n                    examiners: examinerSEPActions\r\n                };\r\n                teamManagementActionCreator.ExecuteApprovalManagementAction(doSEPApprovalManagementActionArgument);\r\n            }\r\n            else {\r\n                _this.onMessageSend(_this.messageType);\r\n            }\r\n        };\r\n        /**\r\n         * To check whether the examiner is valid to send a message\r\n         */\r\n        _this.examinerValidation = function (actionIdentifier) {\r\n            // No need to handle, If user clicks help examiners and immidietly navigated to inbox\r\n            if (_this.props.messageType === enums.MessageType.InboxCompose) {\r\n                return;\r\n            }\r\n            // If there is no failure code then the supervisor examiner is valid to send a message\r\n            if (actionIdentifier === enums.SEPAction.SendMessage) {\r\n                _this.onMessageSend(_this.messageType);\r\n            }\r\n        };\r\n        /**\r\n         * enable send button state on offline\r\n         */\r\n        _this.onOnlineStatusChanged = function () {\r\n            if (!applicationStore.instance.isOnline) {\r\n                _this.toggleSaveButtonState();\r\n            }\r\n        };\r\n        _this.priorityDropDownSelectedItem = enums.MessagePriority.Standard;\r\n        _this.isSendButtonDisabled = true;\r\n        _this.messageSubject = '';\r\n        _this.messageBody = '';\r\n        _this._boundHandleOnClick = _this.handleOnClick.bind(_this);\r\n        _this.isSubordinateSelected = false;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MessageBase.prototype, \"isMessagePanelEdited\", {\r\n        /**\r\n         * Returns a boolean indicating whether the message panel is edited.\r\n         */\r\n        get: function () {\r\n            return messageHelper.isMessagePanelEdited(this.props.messageType, this.toFieldValues, this.toFieldIds);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets the enable/disable status of send button.\r\n     */\r\n    MessageBase.prototype.enableDisableSendButton = function () {\r\n        var currentSendButtonStatusAfterChange = true;\r\n        var activeEditorgetContentLength = 0;\r\n        // if sending message is in progress no need to execute logic to enabling/ disabling button\r\n        if (!this.sendMessageActionInProgress) {\r\n            var activeEditor = tinymce.get(this.msgEditorId);\r\n            //Defect Id:48277 First time active Editor does not contains 'Body' Then throws exception 'Body Undefined'\r\n            if (activeEditor && activeEditor.contentDocument != null) {\r\n                activeEditorgetContentLength = activeEditor.getContent({ format: 'text' }).trim().length;\r\n            }\r\n            if (this.props.messageType === enums.MessageType.InboxCompose ||\r\n                this.props.messageType === enums.MessageType.ResponseCompose\r\n                || this.props.messageType === enums.MessageType.WorklistCompose ||\r\n                this.props.messageType === enums.MessageType.ResponseReply\r\n                || this.props.messageType === enums.MessageType.ResponseForward ||\r\n                this.props.messageType === enums.MessageType.TeamCompose) {\r\n                currentSendButtonStatusAfterChange = !(this.messageSubject.trim().length > 0 &&\r\n                    (this.toFieldIds && this.toFieldIds.length > 0)\r\n                    && (this.toFieldValues && this.toFieldValues.length > 0)\r\n                    && (activeEditorgetContentLength > 0 ||\r\n                        messageHelper._isPasteEnabled));\r\n            }\r\n            else if (this.props.messageType === enums.MessageType.InboxForward ||\r\n                this.props.messageType === enums.MessageType.InboxReply) {\r\n                currentSendButtonStatusAfterChange = !(this.messageSubject.trim().length > 0\r\n                    && (this.toFieldIds && this.toFieldIds.length > 0)\r\n                    && (this.toFieldValues && this.toFieldValues.length > 0)\r\n                    && this.selectedQigItemId > 1\r\n                    && (activeEditorgetContentLength > 0\r\n                        || messageHelper._isPasteEnabled));\r\n            }\r\n        }\r\n        else {\r\n            // disable send button when send message action is in progress if the application is online\r\n            currentSendButtonStatusAfterChange = applicationStore.instance.isOnline;\r\n        }\r\n        if (this.isSendButtonDisabled !== currentSendButtonStatusAfterChange) {\r\n            this.isSendButtonDisabled = currentSendButtonStatusAfterChange;\r\n            // It is noticed due to render in same time, state change not happening. Add some extra time for rendering.\r\n            this.setState({ renderedOn: Date.now() + 10 });\r\n        }\r\n        // Reset setPasteEnabledAction as false after the paste action fired.\r\n        messageHelper.setPasteEnabledAction(false);\r\n    };\r\n    return MessageBase;\r\n}(pureRenderComponent));\r\nmodule.exports = MessageBase;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 463:
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/components/message/messageeditor.tsx ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar TINYMCE = __webpack_require__(/*! react-tinymce */ 45);\r\nvar messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\nvar htmlUtilities = __webpack_require__(/*! ../../utility/generic/htmlutilities */ 243);\r\nvar urls = __webpack_require__(/*! ../../dataservices/base/urls */ 266);\r\nvar messageEditorConstants = __webpack_require__(/*! ../utility/messageeditorconstants */ 325);\r\nvar localeHelper = __webpack_require__(/*! ../../utility/locale/localehelper */ 281);\r\nvar messageHelper = __webpack_require__(/*! ../utility/message/messagehelper */ 283);\r\nvar MessageEditor = /** @class */ (function (_super) {\r\n    __extends(MessageEditor, _super);\r\n    /**\r\n     * Constructor messageeditor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function MessageEditor(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.isEditorInitialised = false;\r\n        _this.lastTap = 0;\r\n        _this.contentStyle = htmlUtilities.isIPadDevice ?\r\n            '.mce-content-body{word-break: break-word;font-family:' + messageEditorConstants.TINYMCE_DEFAULT_FONT +\r\n                '; font-size:' + messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE + '; list-style-position: inside;}' + 'p{ margin:0; padding:0;}'\r\n            : htmlUtilities.isIE ? '.mce-content-body{font-family:' + messageEditorConstants.TINYMCE_DEFAULT_FONT +\r\n                '; font-size:' + messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE + ';} p{ margin:0; padding:0;}' :\r\n                '.mce-content-body{font-family:' + messageEditorConstants.TINYMCE_DEFAULT_FONT +\r\n                    '; font-size:' + messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE + '; list-style-position: inside; } p{ margin:0; padding:0;}';\r\n        /**\r\n         * This will block the double-tap zoom in ipad\r\n         */\r\n        _this.blockDoubleTapZoom = function (e) {\r\n            var currentTime = new Date().getTime();\r\n            var tapLength = currentTime - _this.lastTap;\r\n            if (tapLength < 500 && tapLength > 0) {\r\n                e.preventDefault();\r\n            }\r\n            _this.lastTap = currentTime;\r\n        };\r\n        /**\r\n         * This will block the pinch-to-zoom in ipad\r\n         */\r\n        _this.blockPinchToZoom = function (e) {\r\n            if (e.touches.length > 1) {\r\n                e.preventDefault();\r\n            }\r\n        };\r\n        _this.onKeyup = function (o, e) {\r\n            _this.props.toggleSaveButtonState();\r\n        };\r\n        _this.onEditorInit = function (o, e) {\r\n            _this.activeEditor.on('SetContent', _this.onSetContent);\r\n            // Set the height of the iFrame section in the tiny mce as 100% for supporting the height calculation in css.\r\n            document.getElementById('msg-tinymce-editor_ifr').style.height = '100%';\r\n            if (htmlUtilities.isIPadDevice) {\r\n                document.getElementById('msg-tinymce-editor_ifr').setAttribute('scrolling', 'no');\r\n            }\r\n            _this.isEditorInitialised = true;\r\n            if (htmlUtilities.isIPadDevice && htmlUtilities.getUserDevice().browser === 'Safari') {\r\n                e.getWin().document.documentElement.addEventListener('touchend', _this.blockDoubleTapZoom);\r\n                e.getWin().document.documentElement.addEventListener('touchstart', _this.blockPinchToZoom);\r\n            }\r\n        };\r\n        _this.onRemove = function (o, e) {\r\n            if (htmlUtilities.isIPadDevice && htmlUtilities.getUserDevice().browser === 'Safari') {\r\n                e.getWin().document.documentElement.removeEventListener('touchend', _this.blockDoubleTapZoom);\r\n                e.getWin().document.documentElement.removeEventListener('touchstart', _this.blockPinchToZoom);\r\n            }\r\n        };\r\n        /**\r\n         * Simulate window click while clicking on tinyMCE editor to close opened priority drop down and user option panel.\r\n         */\r\n        _this.onClick = function (o, e) {\r\n            // we have to close opened priority drop down and user options (logout options) while clicking on outside that. TinyMCE editor was\r\n            // preventing the click event to propagate outside so closing of those things are not happening while clicking on TinyMCE editor.\r\n            var event = document.createEvent('MouseEvents');\r\n            event.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);\r\n            window.dispatchEvent(event);\r\n        };\r\n        _this.onPaste = function (o, e) {\r\n            // find the clipboard data from any possible (window.clipboarddata is for ie)\r\n            var clipBoardData = (o.clipboardData || window.clipboardData ||\r\n                (o.originalEvent && o.originalEvent.clipboardData));\r\n            // set getdata argument - 'text' is only for ie11 and other device/browsers need 'text/plain'\r\n            var getDataArgument = htmlUtilities.isIE11 ? 'text' : 'text/plain';\r\n            // If you paste text into the editor with mouse by right- click\r\n            // TinyMCE's onPaste event is fired, but text is not available via .getContent().\r\n            // So that checking the clipboard data item when the user pasting the text via mouse by right- click.\r\n            if (clipBoardData && clipBoardData.getData(getDataArgument).trim() !== '') {\r\n                messageHelper.setPasteEnabledAction(true);\r\n            }\r\n            _this.props.toggleSaveButtonState();\r\n        };\r\n        /**\r\n         * This method will enable the send button when hyperlink is added.\r\n         */\r\n        _this.onSetContent = function (e) {\r\n            _this.props.toggleSaveButtonState();\r\n        };\r\n        /**\r\n         * This method will clear tinyMCE content\r\n         */\r\n        _this.onMessagePanelClose = function () {\r\n            _this.activeEditor.setContent('');\r\n        };\r\n        /**\r\n         * This method will set focus to tinyMCE editor\r\n         */\r\n        _this.setFocus = function () {\r\n            if (_this.state.scriptLoaded) {\r\n                if (_this.activeEditor && _this.isEditorInitialised && _this.props.hasFocus) {\r\n                    // this will set dom focus to tinymce editor\r\n                    _this.activeEditor.focus();\r\n                }\r\n            }\r\n        };\r\n        //initialize state\r\n        _this.state = {\r\n            scriptLoaded: false,\r\n            renderedOn: 0\r\n        };\r\n        _this.onRemove = _this.onRemove.bind(_this);\r\n        _this.onEditorInit = _this.onEditorInit.bind(_this);\r\n        _this.onSetContent = _this.onSetContent.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Component did mount\r\n     */\r\n    MessageEditor.prototype.componentDidMount = function () {\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_CLOSE_EVENT, this.onMessagePanelClose);\r\n        this.setFocus();\r\n    };\r\n    /**\r\n     * Component will mount\r\n     */\r\n    MessageEditor.prototype.componentWillMount = function () {\r\n        var url = htmlUtilities.getFullUrl(urls.TINYMCE_URL);\r\n        // If tinyMCE script is not loaded then load that\r\n        if (!htmlUtilities.isScriptLoaded(url)) {\r\n            var script = document.createElement('script');\r\n            script.src = url;\r\n            script.async = true;\r\n            script.onload = (this.dependenciesLoaded.bind(this));\r\n            document.body.appendChild(script);\r\n        }\r\n        else {\r\n            this.dependenciesLoaded();\r\n        }\r\n    };\r\n    /**\r\n     * component will unmount\r\n     */\r\n    MessageEditor.prototype.componentWillUnmount = function () {\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_CLOSE_EVENT, this.onMessagePanelClose);\r\n        if (tinymce.get(this.props.id)) {\r\n            tinymce.remove('#' + this.props.id);\r\n        }\r\n    };\r\n    /**\r\n     * Component did update\r\n     */\r\n    MessageEditor.prototype.componentDidUpdate = function () {\r\n        this.setFocus();\r\n    };\r\n    /**\r\n     * Render component\r\n     */\r\n    MessageEditor.prototype.render = function () {\r\n        if (this.state.scriptLoaded) {\r\n            var selectedLang = localeHelper.getAwardingBodyLocale(this.props.selectedLanguage);\r\n            var editorConfig = {\r\n                menubar: false,\r\n                statusbar: false,\r\n                renderedOn: Date.now(),\r\n                plugins: messageEditorConstants.TINYMCE_PLUGINS,\r\n                toolbar: messageEditorConstants.TINYMCE_TOOLBAR,\r\n                fontsize_formats: messageEditorConstants.TINYMCE_FONTSIZES,\r\n                font_formats: messageEditorConstants.TINYMCE_FONTS,\r\n                language: selectedLang,\r\n                browser_spellcheck: true,\r\n                content_style: this.contentStyle,\r\n                default_link_target: '_blank',\r\n                target_list: false,\r\n                invalid_elements: 'embed'\r\n            };\r\n            return (React.createElement(TINYMCE, { content: this.props.htmlContent, id: this.props.id, theme: messageEditorConstants.TINYMCE_THEME, config: editorConfig, onKeyup: this.onKeyup, onPaste: this.onPaste, onInit: this.onEditorInit, onClick: this.onClick, onRemove: this.onRemove }));\r\n        }\r\n        else {\r\n            //show loading icon if script is not loaded\r\n            return (React.createElement(\"div\", null));\r\n        }\r\n    };\r\n    /**\r\n     * Method to load dependencies\r\n     */\r\n    MessageEditor.prototype.dependenciesLoaded = function () {\r\n        if (this.props.isTinyMCELoaded) {\r\n            this.props.isTinyMCELoaded(true);\r\n        }\r\n        this.setState({ scriptLoaded: true });\r\n    };\r\n    Object.defineProperty(MessageEditor.prototype, \"activeEditor\", {\r\n        /**\r\n         * This method will return the active editor\r\n         */\r\n        get: function () {\r\n            return tinymce.get(this.props.id);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return MessageEditor;\r\n}(pureRenderComponent));\r\nmodule.exports = MessageEditor;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 464:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/message/messageprioritydropdown.tsx ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\n/* tslint:disable:variable-name */\r\nvar ListItem = function (props) {\r\n    return React.createElement(\"li\", { role: 'menuitem' },\r\n        React.createElement(\"a\", { href: 'javascript:void(0)', onClick: function () { props.onSelect(props.item.id); } }, props.item.name));\r\n};\r\nvar List = function (props) { return (React.createElement(\"ul\", { id: props.id + '_drop-down-items', className: 'menu', role: 'menu', title: localeStore.instance.TranslateText('messaging.compose-message.priority.priority-tooltip'), \"aria-hidden\": 'true' }, props.items.map(function (item) { return (item !== null) ?\r\n    (React.createElement(ListItem, { key: 'key_drop_down_' + item.id, onSelect: props.onSelect, item: item })) :\r\n    null; }))); };\r\nvar DropDown = function (props) {\r\n    return (React.createElement(\"div\", { id: props.id + '_dropdown', className: classNames(props.className, { 'open': props.isOpen }, { 'close': props.isOpen === undefined ? false : !props.isOpen }), onClick: function () { props.onClick(props.dropDownType); } },\r\n        React.createElement(\"a\", { href: 'javascript:void(0)', id: props.id + '_component', className: 'menu-button' },\r\n            React.createElement(\"span\", { id: props.id + '_items' },\r\n                \" \",\r\n                props.selectedItem,\r\n                \" \"),\r\n            React.createElement(\"span\", { className: 'sprite-icon menu-arrow-icon' })),\r\n        React.createElement(List, { id: props.id, key: 'key_drop_down_items', onSelect: props.onSelect, items: props.items })));\r\n};\r\nmodule.exports = DropDown;\r\n/* tslint:enable */ \r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWVzc2FnZS9tZXNzYWdlcHJpb3JpdHlkcm9wZG93bi50c3g/YTU0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmxldCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xyXG5sZXQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcblxyXG5pbnRlcmZhY2UgSXRlbSB7XHJcbiAgICBpZDogZW51bXMuTWVzc2FnZVByaW9yaXR5O1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgRHJvcERvd25JdGVtcyB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgZHJvcERvd25UeXBlOiBlbnVtcy5Ecm9wRG93blR5cGU7XHJcbiAgICBjbGFzc05hbWU6IHN0cmluZztcclxuICAgIGlzT3BlbjogYm9vbGVhbjtcclxuICAgIG9uQ2xpY2s6IEZ1bmN0aW9uO1xyXG4gICAgb25TZWxlY3Q6IEZ1bmN0aW9uO1xyXG4gICAgc2VsZWN0ZWRJdGVtOiBzdHJpbmc7XHJcbiAgICBpdGVtczogQXJyYXk8SXRlbT47XHJcbn1cclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuXHJcbmNvbnN0IExpc3RJdGVtID0gKHByb3BzOiB7IG9uU2VsZWN0OiBGdW5jdGlvbiwgaXRlbTogSXRlbX0pID0+XHJcbiAgICA8bGkgcm9sZT0nbWVudWl0ZW0nPjxhIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKScgb25DbGljayA9IHsoKSA9PiB7IHByb3BzLm9uU2VsZWN0KHByb3BzLml0ZW0uaWQpOyB9IH0+eyBwcm9wcy5pdGVtLm5hbWUgfTwvYT48L2xpPjtcclxuY29uc3QgTGlzdCA9IChwcm9wczogeyBvblNlbGVjdDogRnVuY3Rpb24sIGl0ZW1zOiBBcnJheTxJdGVtPiwgaWQ6IHN0cmluZyB9KSA9PiAoXHJcbiAgICA8dWwgaWQ9e3Byb3BzLmlkICsgJ19kcm9wLWRvd24taXRlbXMnfSBjbGFzc05hbWU9J21lbnUnIHJvbGU9J21lbnUnXHJcbiAgICAgICAgdGl0bGU9e2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21lc3NhZ2luZy5jb21wb3NlLW1lc3NhZ2UucHJpb3JpdHkucHJpb3JpdHktdG9vbHRpcCcpfSBhcmlhLWhpZGRlbj0ndHJ1ZScgPlxyXG4gICAgICAgIHsgcHJvcHMuaXRlbXMubWFwKChpdGVtOiBJdGVtKSA9PiAoaXRlbSAhPT0gbnVsbCkgP1xyXG4gICAgICAgICAgICAoPExpc3RJdGVtIGtleT0geydrZXlfZHJvcF9kb3duXycgKyBpdGVtLmlkfSBvblNlbGVjdD0ge3Byb3BzLm9uU2VsZWN0fSBpdGVtPXsgaXRlbSB9IC8+KSA6XHJcbiAgICAgICAgICAgIG51bGwpIH1cclxuICAgIDwvdWw+XHJcbik7XHJcblxyXG5jb25zdCBEcm9wRG93biA9IChwcm9wczogRHJvcERvd25JdGVtcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGlkPXtwcm9wcy5pZCArICdfZHJvcGRvd24nfSBjbGFzc05hbWU9e2NsYXNzTmFtZXMocHJvcHMuY2xhc3NOYW1lLCB7ICdvcGVuJzogcHJvcHMuaXNPcGVuIH0sXHJcbiAgICAgICAgICAgIHsgJ2Nsb3NlJzogcHJvcHMuaXNPcGVuID09PSB1bmRlZmluZWQgPyBmYWxzZSA6ICFwcm9wcy5pc09wZW4gfSkgfSBvbkNsaWNrID0geyAoKSA9PiB7IHByb3BzLm9uQ2xpY2socHJvcHMuZHJvcERvd25UeXBlKTsgfSB9PlxyXG4gICAgICAgICAgICA8YSBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknIGlkPXtwcm9wcy5pZCArICdfY29tcG9uZW50J30gY2xhc3NOYW1lPSdtZW51LWJ1dHRvbic+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBpZCA9IHtwcm9wcy5pZCArICdfaXRlbXMnfSA+IHsgcHJvcHMuc2VsZWN0ZWRJdGVtIH0gPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdzcHJpdGUtaWNvbiBtZW51LWFycm93LWljb24nPjwvc3Bhbj5cclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICA8TGlzdCBpZD17cHJvcHMuaWR9IGtleT17J2tleV9kcm9wX2Rvd25faXRlbXMnfSAgb25TZWxlY3Q9IHtwcm9wcy5vblNlbGVjdH0gaXRlbXMgPSB7IHByb3BzLml0ZW1zIH0vPlxyXG4gICAgICAgIDwvZGl2Pik7XHJcbn07XHJcblxyXG5leHBvcnQgPSBEcm9wRG93bjtcclxuXHJcbi8qIHRzbGludDplbmFibGUgKi9cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvbWVzc2FnZS9tZXNzYWdlcHJpb3JpdHlkcm9wZG93bi50c3giXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFrQkE7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBSUE7QUFDQTtBQUlBO0FBQ0E7QUFHQTtBQUNBOztBQUFBO0FBQUE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 466:
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./src/components/message/subject.tsx ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\nvar htmlUtilities = __webpack_require__(/*! ../../utility/generic/htmlutilities */ 243);\r\nvar Subject = /** @class */ (function (_super) {\r\n    __extends(Subject, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function Subject(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * seting focus back to subject on message close for fixing cursor and onscreen keyboard displaying issue in ipad\r\n         * Defect: 24608\r\n         */\r\n        _this.closeMessage = function () {\r\n            if (_this.props.hasFocus && htmlUtilities.isIPadDevice) {\r\n                _this.setFocusOnSubject();\r\n                (_this.refs[_this.props.refName]).blur();\r\n            }\r\n            // close message callback function called\r\n            if (_this.props.callback) {\r\n                _this.props.callback();\r\n            }\r\n        };\r\n        /**\r\n         * This method will call on subject onChange event\r\n         */\r\n        _this.onChange = function (event) {\r\n            _this.props.onChange(event.target.value);\r\n        };\r\n        /**\r\n         * Set Focus to the input field if necessary\r\n         */\r\n        _this.setFocusOnSubject = function () {\r\n            if (_this.props.hasFocus) {\r\n                (_this.refs[_this.props.refName]).blur();\r\n                (_this.refs[_this.props.refName]).focus();\r\n            }\r\n        };\r\n        _this.onAnimationEnd = _this.onAnimationEnd.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Event on animation end\r\n     * @param event\r\n     */\r\n    Subject.prototype.onAnimationEnd = function (event) {\r\n        // If any child element has triggered the transion-end ignore it\r\n        var element = event.srcElement || event.target;\r\n        if (element.id !== 'messaging-panel') {\r\n            return;\r\n        }\r\n        // setting scroll top - fix for ipad issue #49587\r\n        if (htmlUtilities.isIPadDevice) {\r\n            window.scrollTo(0, 0);\r\n            document.body.scrollTop = 0;\r\n        }\r\n        this.setFocusOnSubject();\r\n    };\r\n    /**\r\n     * Render method\r\n     */\r\n    Subject.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: this.props.outerClass },\r\n            React.createElement(\"input\", { type: 'text', ref: this.props.refName, id: this.props.id, \"aria-label\": 'Subject', placeholder: this.props.placeHolder, className: this.props.className, maxLength: this.props.maxLength, value: this.props.value, onInput: this.onChange })));\r\n    };\r\n    /**\r\n     * This function gets invoked when the component is about to be mounted\r\n     */\r\n    Subject.prototype.componentDidMount = function () {\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_CLOSE_EVENT, this.closeMessage);\r\n        // While creating a message from worklist and Inbox, set the focus to subject\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_OPEN_EVENT, this.setFocusOnSubject);\r\n        this.messagingPanel = document.getElementsByClassName('messaging-panel').item(0);\r\n        if (this.messagingPanel) {\r\n            // While creating a message inside the response, set the focus to subject\r\n            this.messagingPanel.addEventListener('transitionend', this.onAnimationEnd);\r\n        }\r\n        // While composing a message from Team management. Set focus to subject\r\n        this.setFocusOnSubject();\r\n    };\r\n    /**\r\n     * This function gets invoked when the component is about to be mounted\r\n     */\r\n    Subject.prototype.componentWillUnmount = function () {\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_CLOSE_EVENT, this.closeMessage);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_OPEN_EVENT, this.setFocusOnSubject);\r\n        if (this.messagingPanel) {\r\n            this.messagingPanel.removeEventListener('transitionend', this.onAnimationEnd);\r\n        }\r\n    };\r\n    return Subject;\r\n}(pureRenderComponent));\r\nmodule.exports = Subject;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWVzc2FnZS9zdWJqZWN0LnRzeD9hNzFhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBSZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBtZXNzYWdlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbWVzc2FnZS9tZXNzYWdlc3RvcmUnKTtcclxuaW1wb3J0IGh0bWxVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2dlbmVyaWMvaHRtbHV0aWxpdGllcycpO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgUHJvcHNCYXNlLCBMb2NhbGVTZWxlY3Rpb25CYXNlIHtcclxuICAgIG91dGVyQ2xhc3M6IHN0cmluZztcclxuICAgIHJlZk5hbWU6IHN0cmluZztcclxuICAgIGhhc0ZvY3VzOiBib29sZWFuO1xyXG4gICAgY2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgICBwbGFjZUhvbGRlcj86IHN0cmluZztcclxuICAgIG1heExlbmd0aDogbnVtYmVyO1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIG9uQ2hhbmdlOiBGdW5jdGlvbjtcclxuICAgIGNhbGxiYWNrPzogRnVuY3Rpb247XHJcbiAgICBpc1Zpc2libGU6IGJvb2xlYW47XHJcbn1cclxuXHJcbmNsYXNzIFN1YmplY3QgZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcclxuICAgIC8qIHByaXZhdGUgdmFyaWFibGUgdG8gbWFuYWdlIGV2ZW50IGxpc3RlbmVycyBmb3IgbWVzc2FnaW5nIHBhbmVsKi9cclxuICAgIHByaXZhdGUgbWVzc2FnaW5nUGFuZWw6IEVsZW1lbnQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjb25zdHJ1Y3RvclxyXG4gICAgICogQHBhcmFtIHByb3BzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzLCBzdGF0ZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIHN0YXRlKTtcclxuICAgICAgICB0aGlzLm9uQW5pbWF0aW9uRW5kID0gdGhpcy5vbkFuaW1hdGlvbkVuZC5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgb24gYW5pbWF0aW9uIGVuZFxyXG4gICAgICogQHBhcmFtIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25BbmltYXRpb25FbmQoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICAgICAgLy8gSWYgYW55IGNoaWxkIGVsZW1lbnQgaGFzIHRyaWdnZXJlZCB0aGUgdHJhbnNpb24tZW5kIGlnbm9yZSBpdFxyXG4gICAgICAgIGxldCBlbGVtZW50OiBhbnkgPSBldmVudC5zcmNFbGVtZW50IHx8IGV2ZW50LnRhcmdldDtcclxuICAgICAgICBpZiAoZWxlbWVudC5pZCAhPT0gJ21lc3NhZ2luZy1wYW5lbCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2V0dGluZyBzY3JvbGwgdG9wIC0gZml4IGZvciBpcGFkIGlzc3VlICM0OTU4N1xyXG4gICAgICAgIGlmIChodG1sVXRpbGl0aWVzLmlzSVBhZERldmljZSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRGb2N1c09uU3ViamVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIG1ldGhvZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5vdXRlckNsYXNzfT5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyByZWY9e3RoaXMucHJvcHMucmVmTmFtZX0gaWQ9e3RoaXMucHJvcHMuaWR9IGFyaWEtbGFiZWw9J1N1YmplY3QnXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMucGxhY2VIb2xkZXJ9IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoPXt0aGlzLnByb3BzLm1heExlbmd0aH0gdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9IG9uSW5wdXQ9e3RoaXMub25DaGFuZ2V9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2Pik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGdldHMgaW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgbW91bnRlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgbWVzc2FnZVN0b3JlLmluc3RhbmNlLmFkZExpc3RlbmVyKG1lc3NhZ2VTdG9yZS5NZXNzYWdlU3RvcmUuTUVTU0FHRV9DTE9TRV9FVkVOVCwgdGhpcy5jbG9zZU1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAvLyBXaGlsZSBjcmVhdGluZyBhIG1lc3NhZ2UgZnJvbSB3b3JrbGlzdCBhbmQgSW5ib3gsIHNldCB0aGUgZm9jdXMgdG8gc3ViamVjdFxyXG4gICAgICAgIG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS5hZGRMaXN0ZW5lcihtZXNzYWdlU3RvcmUuTWVzc2FnZVN0b3JlLk1FU1NBR0VfT1BFTl9FVkVOVCwgdGhpcy5zZXRGb2N1c09uU3ViamVjdCk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdpbmdQYW5lbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21lc3NhZ2luZy1wYW5lbCcpLml0ZW0oMCk7XHJcbiAgICAgICAgaWYgKHRoaXMubWVzc2FnaW5nUGFuZWwpIHtcclxuICAgICAgICAgICAgLy8gV2hpbGUgY3JlYXRpbmcgYSBtZXNzYWdlIGluc2lkZSB0aGUgcmVzcG9uc2UsIHNldCB0aGUgZm9jdXMgdG8gc3ViamVjdFxyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2luZ1BhbmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCB0aGlzLm9uQW5pbWF0aW9uRW5kKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFdoaWxlIGNvbXBvc2luZyBhIG1lc3NhZ2UgZnJvbSBUZWFtIG1hbmFnZW1lbnQuIFNldCBmb2N1cyB0byBzdWJqZWN0XHJcbiAgICAgICAgdGhpcy5zZXRGb2N1c09uU3ViamVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiBnZXRzIGludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFib3V0IHRvIGJlIG1vdW50ZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgICAgIG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS5yZW1vdmVMaXN0ZW5lcihtZXNzYWdlU3RvcmUuTWVzc2FnZVN0b3JlLk1FU1NBR0VfQ0xPU0VfRVZFTlQsIHRoaXMuY2xvc2VNZXNzYWdlKTtcclxuICAgICAgICBtZXNzYWdlU3RvcmUuaW5zdGFuY2UucmVtb3ZlTGlzdGVuZXIobWVzc2FnZVN0b3JlLk1lc3NhZ2VTdG9yZS5NRVNTQUdFX09QRU5fRVZFTlQsIHRoaXMuc2V0Rm9jdXNPblN1YmplY3QpO1xyXG4gICAgICAgIGlmICh0aGlzLm1lc3NhZ2luZ1BhbmVsKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnaW5nUGFuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMub25BbmltYXRpb25FbmQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldGluZyBmb2N1cyBiYWNrIHRvIHN1YmplY3Qgb24gbWVzc2FnZSBjbG9zZSBmb3IgZml4aW5nIGN1cnNvciBhbmQgb25zY3JlZW4ga2V5Ym9hcmQgZGlzcGxheWluZyBpc3N1ZSBpbiBpcGFkXHJcbiAgICAgKiBEZWZlY3Q6IDI0NjA4XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2xvc2VNZXNzYWdlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmhhc0ZvY3VzICYmIGh0bWxVdGlsaXRpZXMuaXNJUGFkRGV2aWNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Rm9jdXNPblN1YmplY3QoKTtcclxuICAgICAgICAgICAgKCh0aGlzLnJlZnNbdGhpcy5wcm9wcy5yZWZOYW1lXSkgYXMgSFRNTElucHV0RWxlbWVudCkuYmx1cigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY2xvc2UgbWVzc2FnZSBjYWxsYmFjayBmdW5jdGlvbiBjYWxsZWRcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgY2FsbCBvbiBzdWJqZWN0IG9uQ2hhbmdlIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25DaGFuZ2UgPSAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgRm9jdXMgdG8gdGhlIGlucHV0IGZpZWxkIGlmIG5lY2Vzc2FyeVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNldEZvY3VzT25TdWJqZWN0ID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmhhc0ZvY3VzKSB7XHJcbiAgICAgICAgICAgICgodGhpcy5yZWZzW3RoaXMucHJvcHMucmVmTmFtZV0pIGFzIEhUTUxJbnB1dEVsZW1lbnQpLmJsdXIoKTtcclxuICAgICAgICAgICAgKCh0aGlzLnJlZnNbdGhpcy5wcm9wcy5yZWZOYW1lXSkgYXMgSFRNTElucHV0RWxlbWVudCkuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFN1YmplY3Q7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9tZXNzYWdlL3N1YmplY3QudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFFQTtBQUNBO0FBZUE7QUFBQTtBQUlBOzs7O0FBSUE7QUFDQTtBQUFBO0FBaUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTlGQTs7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFJQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWtDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 467:
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./src/components/utility/dropdown.tsx ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\n/* tslint:disable:variable-name */\r\nvar ListItem = function (props) {\r\n    return React.createElement(\"li\", { role: 'menuitem' },\r\n        React.createElement(\"a\", { href: 'javascript:void(0)', onClick: function () { props.onSelect(props.item.id); } }, props.item.name));\r\n};\r\nvar List = function (props) { return (React.createElement(\"ul\", { id: 'drop-down-items', className: 'menu', role: 'menu', title: '', \"aria-hidden\": 'true', style: props.style }, props.items.map(function (item) { return React.createElement(ListItem, { key: 'key_drop_down_' + item.id, onSelect: props.onSelect, item: item }); }))); };\r\n/* tslint:enable */\r\nvar DropDown = /** @class */ (function (_super) {\r\n    __extends(DropDown, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function DropDown(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * This will find the width of the anchor tag and pass to parent for applying width style of menu ul\r\n         */\r\n        _this.onDropDownClick = function (dropdownType) {\r\n            var width = _this.refs.qigDropDown.getBoundingClientRect().width;\r\n            _this.props.onClick(dropdownType, width);\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    DropDown.prototype.render = function () {\r\n        var _this = this;\r\n        return (React.createElement(\"div\", { id: this.props.id + '_dropdown', title: this.props.title, className: classNames(this.props.className, { 'open': this.props.isOpen }, { 'close': this.props.isOpen === undefined ? false : !this.props.isOpen }), onClick: function () { _this.onDropDownClick(_this.props.dropDownType); } },\r\n            React.createElement(\"a\", { ref: 'qigDropDown', href: 'javascript:void(0)', id: this.props.id + '_component', className: 'menu-button' },\r\n                React.createElement(\"span\", { id: this.props.id + '_items' },\r\n                    \" \",\r\n                    this.props.selectedItem,\r\n                    \" \"),\r\n                React.createElement(\"span\", { className: 'sprite-icon menu-arrow-icon' })),\r\n            React.createElement(List, { key: 'key_drop_down_items', onSelect: this.props.onSelect, items: this.props.items, style: this.props.style })));\r\n    };\r\n    return DropDown;\r\n}(pureRenderComponent));\r\nmodule.exports = DropDown;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9kcm9wZG93bi50c3g/ZTY2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmxldCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcblxyXG5pbnRlcmZhY2UgSXRlbSB7XHJcbiAgICBpZDogZW51bXMuTWVzc2FnZVByaW9yaXR5O1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGRyb3BEb3duVHlwZTogZW51bXMuRHJvcERvd25UeXBlO1xyXG4gICAgY2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgICBzdHlsZTogUmVhY3QuQ1NTUHJvcGVydGllcztcclxuICAgIGlzT3BlbjogYm9vbGVhbjtcclxuICAgIG9uQ2xpY2s6IEZ1bmN0aW9uO1xyXG4gICAgb25TZWxlY3Q6IEZ1bmN0aW9uO1xyXG4gICAgc2VsZWN0ZWRJdGVtOiBzdHJpbmc7XHJcbiAgICBpdGVtczogQXJyYXk8SXRlbT47XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG59XHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcblxyXG5jb25zdCBMaXN0SXRlbSA9IChwcm9wczogeyBvblNlbGVjdDogRnVuY3Rpb24sIGl0ZW06IEl0ZW0gfSkgPT5cclxuICAgIDxsaSByb2xlPSdtZW51aXRlbSc+PGEgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJyBvbkNsaWNrPXsoKSA9PiB7IHByb3BzLm9uU2VsZWN0KHByb3BzLml0ZW0uaWQpOyB9fT57cHJvcHMuaXRlbS5uYW1lfTwvYT48L2xpPjtcclxuY29uc3QgTGlzdCA9IChwcm9wczogeyBvblNlbGVjdDogRnVuY3Rpb24sIHN0eWxlOiBSZWFjdC5DU1NQcm9wZXJ0aWVzLCBpdGVtczogQXJyYXk8SXRlbT4gfSkgPT4gKFxyXG4gICAgPHVsIGlkPSdkcm9wLWRvd24taXRlbXMnIGNsYXNzTmFtZT0nbWVudScgcm9sZT0nbWVudScgdGl0bGU9JycgYXJpYS1oaWRkZW49J3RydWUnIHN0eWxlPXtwcm9wcy5zdHlsZX0+XHJcbiAgICAgICAge3Byb3BzLml0ZW1zLm1hcCgoaXRlbTogSXRlbSkgPT4gPExpc3RJdGVtIGtleT17J2tleV9kcm9wX2Rvd25fJyArIGl0ZW0uaWR9IG9uU2VsZWN0PXtwcm9wcy5vblNlbGVjdH0gaXRlbT17aXRlbX0gLz4pfVxyXG4gICAgPC91bD5cclxuKTtcclxuXHJcbi8qIHRzbGludDplbmFibGUgKi9cclxuXHJcbmNsYXNzIERyb3BEb3duIGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcblxyXG4gICAgcHJpdmF0ZSBzdHlsZTogUmVhY3QuQ1NTUHJvcGVydGllcztcclxuXHJcbiAgICAvKiogcmVmcyAqL1xyXG4gICAgcHVibGljIHJlZnM6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiAoRWxlbWVudCk7XHJcbiAgICAgICAgcWlnRHJvcERvd246IChIVE1MQW5jaG9yRWxlbWVudCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcywgc3RhdGU6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBzdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgY29tcG9uZW50XHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGlkPXt0aGlzLnByb3BzLmlkICsgJ19kcm9wZG93bid9XHJcbiAgICAgICAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy50aXRsZX1cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyh0aGlzLnByb3BzLmNsYXNzTmFtZSwgeyAnb3Blbic6IHRoaXMucHJvcHMuaXNPcGVuIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyAnY2xvc2UnOiB0aGlzLnByb3BzLmlzT3BlbiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAhdGhpcy5wcm9wcy5pc09wZW4gfSl9IG9uQ2xpY2s9XHJcbiAgICAgICAgICAgICAgICB7KCkgPT4geyB0aGlzLm9uRHJvcERvd25DbGljayh0aGlzLnByb3BzLmRyb3BEb3duVHlwZSk7IH19PlxyXG4gICAgICAgICAgICAgICAgPGEgcmVmPSdxaWdEcm9wRG93bicgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJyBpZD17dGhpcy5wcm9wcy5pZCArICdfY29tcG9uZW50J30gY2xhc3NOYW1lPSdtZW51LWJ1dHRvbic+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9e3RoaXMucHJvcHMuaWQgKyAnX2l0ZW1zJ30gPiB7dGhpcy5wcm9wcy5zZWxlY3RlZEl0ZW19IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3Nwcml0ZS1pY29uIG1lbnUtYXJyb3ctaWNvbic+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgPExpc3Qga2V5PXsna2V5X2Ryb3BfZG93bl9pdGVtcyd9IG9uU2VsZWN0PXt0aGlzLnByb3BzLm9uU2VsZWN0fSBpdGVtcz17dGhpcy5wcm9wcy5pdGVtc31cclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17dGhpcy5wcm9wcy5zdHlsZX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgd2lsbCBmaW5kIHRoZSB3aWR0aCBvZiB0aGUgYW5jaG9yIHRhZyBhbmQgcGFzcyB0byBwYXJlbnQgZm9yIGFwcGx5aW5nIHdpZHRoIHN0eWxlIG9mIG1lbnUgdWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkRyb3BEb3duQ2xpY2sgPSAoZHJvcGRvd25UeXBlOiBlbnVtcy5Ecm9wRG93blR5cGUpID0+IHtcclxuICAgICAgICBsZXQgd2lkdGg6IG51bWJlciA9IHRoaXMucmVmcy5xaWdEcm9wRG93bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2soZHJvcGRvd25UeXBlLCB3aWR0aCk7XHJcbiAgICB9O1xyXG5cclxufVxyXG5cclxuZXhwb3J0ID0gRHJvcERvd247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZHJvcGRvd24udHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQXFCQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFNQTtBQUVBO0FBQUE7QUFVQTs7OztBQUlBO0FBQ0E7QUFBQTtBQXdCQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQTVCQTtBQUVBOzs7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQU1BO0FBQ0E7O0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFHQTtBQVVBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 478:
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/components/message/teamlistpopup.tsx ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar GenericButton = __webpack_require__(/*! ../utility/genericbutton */ 290);\r\nvar messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../actions/messaging/messagingactioncreator */ 268);\r\nvar TeamListTreeview = __webpack_require__(/*! ./teamlisttreeview */ 479);\r\nvar htmlUtilities = __webpack_require__(/*! ../../utility/generic/htmlutilities */ 243);\r\n/**\r\n * TeamListPopup section contain team list\r\n * @param props\r\n * @param state\r\n */\r\nvar TeamListPopup = /** @class */ (function (_super) {\r\n    __extends(TeamListPopup, _super);\r\n    /**\r\n     * Constructor Messagepopup\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function TeamListPopup(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.isShowAddressPopup = false;\r\n        _this.isToTeamChecked = false;\r\n        _this.prevPageY = 0;\r\n        _this.allowUp = false;\r\n        _this.allowDown = false;\r\n        /**\r\n         * event handler for touch start\r\n         */\r\n        _this.onTouchStart = function (event) {\r\n            _this.prevPageY = (event.changedTouches) ? event.changedTouches[0].pageY : 0;\r\n            var content = _this.teamListRef;\r\n            _this.allowUp = (content.scrollTop > 0);\r\n            _this.allowDown = (content.scrollTop <= content.scrollHeight - content.clientHeight);\r\n        };\r\n        /**\r\n         * event handler for touch move\r\n         */\r\n        _this.onTouchMove = function (event) {\r\n            setTimeout(function () {\r\n                event.preventDefault();\r\n                var content = _this.teamListRef;\r\n                var pageY = event.changedTouches[0].pageY;\r\n                var up = (pageY > _this.prevPageY);\r\n                var down = (pageY < _this.prevPageY);\r\n                var diff = Math.abs(_this.prevPageY - event.pageY);\r\n                _this.prevPageY = event.pageY;\r\n                if ((up && _this.allowUp)) {\r\n                    content.scrollTop = (content.scrollTop - diff);\r\n                }\r\n                else if (down && _this.allowDown) {\r\n                    content.scrollTop = (content.scrollTop + diff);\r\n                }\r\n            }, 0);\r\n        };\r\n        /**\r\n         * event handler for touch end\r\n         */\r\n        _this.onTouchEnd = function (event) {\r\n            _this.prevPageY = 0;\r\n        };\r\n        /**\r\n         * Method to cancel team selection.\r\n         */\r\n        _this.cancelTeamSelection = function () {\r\n            messagingActionCreator.updateSelectedTeamList(false);\r\n        };\r\n        /**\r\n         * Method to save selected team list in the message store.\r\n         */\r\n        _this.saveSelectedTeamList = function () {\r\n            messagingActionCreator.updateSelectedTeamList(true);\r\n        };\r\n        /**\r\n         * Method for handling entire team click.\r\n         */\r\n        _this.entireTeamClick = function () {\r\n            messagingActionCreator.entireTeamChecked(!_this.teamList.team.toTeam);\r\n        };\r\n        /**\r\n         * Method for update team list.\r\n         */\r\n        _this.teamListUpdated = function (isToTeamClick, isExpand) {\r\n            // avoid EntireTeam's checked-status change while clicking Expand/Collapse button\r\n            if (isExpand === undefined || !isExpand) {\r\n                _this.isToTeamChecked = isToTeamClick && messageStore.instance.teamDetails.team.toTeam ? true : false;\r\n            }\r\n            _this.teamList = messageStore.instance.teamDetails;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /*\r\n         * event handler for team list panel scroll.\r\n         */\r\n        _this.onScroll = function () {\r\n            _this.setState({\r\n                renderedOn: _this.state.renderedOn,\r\n                teamListScrollHeight: _this.getTeamListScrollHeight()\r\n            });\r\n        };\r\n        /**\r\n         * Clicking on check/uncheck of superviser\r\n         */\r\n        _this.updateTeamListStatus = function (uniqueId, isExpand) {\r\n            messagingActionCreator.updateTeamListStatus(uniqueId, isExpand);\r\n        };\r\n        // Set the default states\r\n        _this.state = {\r\n            renderedOn: 0,\r\n        };\r\n        _this.isShowAddressPopup = false;\r\n        if (messageStore.instance.teamDetails && messageStore.instance.teamDetails.team.subordinates) {\r\n            _this.isShowAddressPopup = messageStore.instance.teamDetails.team.subordinates.length > 0 ? true : false;\r\n        }\r\n        _this.teamList = messageStore.instance.teamDetails;\r\n        _this.isToTeamChecked = false;\r\n        if (_this.teamList) {\r\n            _this.isToTeamChecked = _this.teamList.team.toTeam;\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    TeamListPopup.prototype.render = function () {\r\n        var _this = this;\r\n        this.teamList = messageStore.instance.teamDetails;\r\n        var toTeamListPopup = this.teamList ? (React.createElement(\"div\", null,\r\n            React.createElement(\"div\", { className: classNames('popup small msg-address-list-popup in-page-popout', this.isShowAddressPopup ? 'popup-overlay open' : 'popup-overlay close'), id: 'addressListPopUp', role: 'dialog', \"aria-describedby\": 'addressList' },\r\n                React.createElement(\"div\", { className: 'popup-wrap' },\r\n                    React.createElement(\"div\", { className: 'popup-content', id: 'popup1Desc', ref: function (ele) { _this.teamListRef = ele; } },\r\n                        React.createElement(\"div\", { className: 'tree-view' },\r\n                            React.createElement(\"ul\", { role: 'tree', id: 'addressList', onScroll: this.onScroll },\r\n                                React.createElement(\"li\", { className: 'node highlighted', role: 'treeitem', \"aria-expanded\": 'false', id: 'id_entire_team' },\r\n                                    React.createElement(\"input\", { type: 'checkbox', className: 'text-middle checkbox', id: 'item1', checked: this.isToTeamChecked, onChange: this.entireTeamClick }),\r\n                                    React.createElement(\"label\", { htmlFor: 'item1', id: 'id_entire_team_label' }, localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.entire-team'))),\r\n                                React.createElement(\"li\", { className: 'node expanded', role: 'treeitem', \"aria-expanded\": 'true' },\r\n                                    React.createElement(\"input\", { type: 'checkbox', className: 'text-middle checkbox', id: 'item2', checked: this.teamList && this.teamList.team.parent ?\r\n                                            this.teamList.team.parent.isChecked : false }),\r\n                                    this.teamList && this.teamList.team.parent ?\r\n                                        React.createElement(\"label\", { htmlFor: 'item2', onClick: this.updateTeamListStatus.bind(this, this.teamList.team.parent.examinerRoleId, false) }, this.teamList.team.parent.fullName) : null,\r\n                                    React.createElement(\"ul\", { role: 'group', id: this.props.id + '_TeamList' },\r\n                                        React.createElement(\"li\", { className: 'node expanded', role: 'treeitem', \"aria-expanded\": 'true', id: 'li_' + this.teamList.team.examinerRoleId },\r\n                                            React.createElement(\"span\", { className: 'sprite-icon user-icon-medium tree-icon' }),\r\n                                            React.createElement(\"label\", { className: 'text-middle', id: 'current_login_user' }, this.teamList.team.fullName),\r\n                                            React.createElement(TeamListTreeview, { id: 'teamList', key: 'teamList_key', addressList: this.teamList.team.subordinates, renderedOn: this.state.renderedOn }))))))),\r\n                    React.createElement(\"div\", { className: 'popup-footer text-right' },\r\n                        React.createElement(GenericButton, { id: 'button-rounded-close-button', key: 'key_button rounded close-button', className: 'button rounded close-button', title: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.cancel-button'), content: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.cancel-button'), disabled: false, onClick: this.cancelTeamSelection }),\r\n                        React.createElement(GenericButton, { id: 'button-primary-rounded-button', key: 'key_button primary rounded-button', className: 'button primary rounded', title: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.ok-button'), content: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.ok-button'), disabled: false, onClick: this.saveSelectedTeamList })))))) : null;\r\n        return (toTeamListPopup);\r\n    };\r\n    /**\r\n     * Component did mount\r\n     */\r\n    TeamListPopup.prototype.componentDidMount = function () {\r\n        /* these events are used to implement custom\r\n           scrolling logic to handle the elastic scroll behavior of ipad */\r\n        if (this.teamListRef && (htmlUtilities.isIPadDevice)) {\r\n            this.teamListRef.addEventListener('touchstart', this.onTouchStart);\r\n            this.teamListRef.addEventListener('touchmove', this.onTouchMove);\r\n            this.teamListRef.addEventListener('touchend', this.onTouchEnd);\r\n        }\r\n        messageStore.instance.addListener(messageStore.MessageStore.TEAM_LIST_UPDATED, this.teamListUpdated);\r\n    };\r\n    /**\r\n     * Component will unmount\r\n     */\r\n    TeamListPopup.prototype.componentWillUnmount = function () {\r\n        messageStore.instance.removeListener(messageStore.MessageStore.TEAM_LIST_UPDATED, this.teamListUpdated);\r\n        this.teamListRef.removeEventListener('touchstart', this.onTouchStart);\r\n        this.teamListRef.removeEventListener('touchmove', this.onTouchMove);\r\n        this.teamListRef.removeEventListener('touchend', this.onTouchEnd);\r\n    };\r\n    /**\r\n     * componentWillReceiveProps\r\n     * @param nextProps\r\n     */\r\n    TeamListPopup.prototype.componentWillReceiveProps = function (nextProps) {\r\n        this.isShowAddressPopup = false;\r\n        if (messageStore.instance.teamDetails && messageStore.instance.teamDetails.team.subordinates) {\r\n            this.isShowAddressPopup = messageStore.instance.teamDetails.team.subordinates.length > 0 ? true : false;\r\n        }\r\n    };\r\n    /**\r\n     * returns the team list scroll height\r\n     */\r\n    TeamListPopup.prototype.getTeamListScrollHeight = function () {\r\n        return (this.teamListRef) ? (this.teamListRef.clientHeight + this.teamListRef.scrollTop) : undefined;\r\n    };\r\n    return TeamListPopup;\r\n}(pureRenderComponent));\r\nmodule.exports = TeamListPopup;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWVzc2FnZS90ZWFtbGlzdHBvcHVwLnRzeD82ZmU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBSZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBHZW5lcmljQnV0dG9uID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9nZW5lcmljYnV0dG9uJyk7XHJcbmltcG9ydCBtZXNzYWdlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbWVzc2FnZS9tZXNzYWdlc3RvcmUnKTtcclxuaW1wb3J0IE1lc3NhZ2VCYXNlID0gcmVxdWlyZSgnLi9tZXNzYWdlYmFzZScpO1xyXG5sZXQgY2xhc3NOYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcclxuaW1wb3J0IG1lc3NhZ2luZ0FjdGlvbkNyZWF0b3IgPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL21lc3NhZ2luZy9tZXNzYWdpbmdhY3Rpb25jcmVhdG9yJyk7XHJcbmltcG9ydCBUZWFtTGlzdFRyZWV2aWV3ID0gcmVxdWlyZSgnLi90ZWFtbGlzdHRyZWV2aWV3Jyk7XHJcbmltcG9ydCB0ZWFtUmV0dXJuID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL21lc3NhZ2UvdHlwaW5ncy90ZWFtcmV0dXJuJyk7XHJcbmltcG9ydCBodG1sVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9nZW5lcmljL2h0bWx1dGlsaXRpZXMnKTtcclxuXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIFByb3BzQmFzZSwgTG9jYWxlU2VsZWN0aW9uQmFzZSB7XHJcbiAgICBpc1Nob3dUZWFtTGlzdFBvcHVwOiBib29sZWFuO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gICAgcmVuZGVyZWRPbj86IG51bWJlcjtcclxuICAgIHRlYW1MaXN0U2Nyb2xsSGVpZ2h0PzogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogVGVhbUxpc3RQb3B1cCBzZWN0aW9uIGNvbnRhaW4gdGVhbSBsaXN0XHJcbiAqIEBwYXJhbSBwcm9wc1xyXG4gKiBAcGFyYW0gc3RhdGVcclxuICovXHJcbmNsYXNzIFRlYW1MaXN0UG9wdXAgZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xyXG5cclxuICAgIHByaXZhdGUgaXNTaG93QWRkcmVzc1BvcHVwOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIHRlYW1MaXN0OiB0ZWFtUmV0dXJuO1xyXG4gICAgcHJpdmF0ZSBpc1RvVGVhbUNoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByaXZhdGUgcHJldlBhZ2VZOiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBhbGxvd1VwOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGFsbG93RG93bjogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSB0ZWFtTGlzdFJlZjogSFRNTERpdkVsZW1lbnQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBNZXNzYWdlcG9wdXBcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcywgc3RhdGU6IFN0YXRlKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIHN0YXRlKTtcclxuXHJcbiAgICAgICAgLy8gU2V0IHRoZSBkZWZhdWx0IHN0YXRlc1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHJlbmRlcmVkT246IDAsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5pc1Nob3dBZGRyZXNzUG9wdXAgPSBmYWxzZTtcclxuICAgICAgICBpZiAobWVzc2FnZVN0b3JlLmluc3RhbmNlLnRlYW1EZXRhaWxzICYmIG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS50ZWFtRGV0YWlscy50ZWFtLnN1Ym9yZGluYXRlcykge1xyXG4gICAgICAgICAgICB0aGlzLmlzU2hvd0FkZHJlc3NQb3B1cCA9IG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS50ZWFtRGV0YWlscy50ZWFtLnN1Ym9yZGluYXRlcy5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50ZWFtTGlzdCA9IG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS50ZWFtRGV0YWlscztcclxuICAgICAgICB0aGlzLmlzVG9UZWFtQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLnRlYW1MaXN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNUb1RlYW1DaGVja2VkID0gdGhpcy50ZWFtTGlzdC50ZWFtLnRvVGVhbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgY29tcG9uZW50XHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcclxuICAgICAgICB0aGlzLnRlYW1MaXN0ID0gbWVzc2FnZVN0b3JlLmluc3RhbmNlLnRlYW1EZXRhaWxzO1xyXG4gICAgICAgIGxldCB0b1RlYW1MaXN0UG9wdXAgPSB0aGlzLnRlYW1MaXN0ID8gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ3BvcHVwIHNtYWxsIG1zZy1hZGRyZXNzLWxpc3QtcG9wdXAgaW4tcGFnZS1wb3BvdXQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTaG93QWRkcmVzc1BvcHVwID8gJ3BvcHVwLW92ZXJsYXkgb3BlbicgOiAncG9wdXAtb3ZlcmxheSBjbG9zZScpIH1cclxuICAgICAgICAgICAgICAgICAgICBpZD0nYWRkcmVzc0xpc3RQb3BVcCcgcm9sZT0nZGlhbG9nJyBhcmlhLWRlc2NyaWJlZGJ5PSdhZGRyZXNzTGlzdCc+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3BvcHVwLXdyYXAnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncG9wdXAtY29udGVudCcgaWQ9J3BvcHVwMURlc2MnIHJlZj17KGVsZSkgPT4geyB0aGlzLnRlYW1MaXN0UmVmID0gZWxlOyB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0cmVlLXZpZXcnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCByb2xlPSd0cmVlJyBpZD0nYWRkcmVzc0xpc3QnIG9uU2Nyb2xsPXt0aGlzLm9uU2Nyb2xsfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT0nbm9kZSBoaWdobGlnaHRlZCcgcm9sZT0ndHJlZWl0ZW0nIGFyaWEtZXhwYW5kZWQ9J2ZhbHNlJyBpZCA9ICdpZF9lbnRpcmVfdGVhbSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0nY2hlY2tib3gnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSd0ZXh0LW1pZGRsZSBjaGVja2JveCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD0naXRlbTEnIGNoZWNrZWQ9e3RoaXMuaXNUb1RlYW1DaGVja2VkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlID17dGhpcy5lbnRpcmVUZWFtQ2xpY2t9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0naXRlbTEnIGlkID0gJ2lkX2VudGlyZV90ZWFtX2xhYmVsJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJ21lc3NhZ2luZy5jb21wb3NlLW1lc3NhZ2UucmVjaXBpZW50LXNlbGVjdG9yLmVudGlyZS10ZWFtJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPSdub2RlIGV4cGFuZGVkJyByb2xlPSd0cmVlaXRlbScgYXJpYS1leHBhbmRlZD0ndHJ1ZSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0nY2hlY2tib3gnIGNsYXNzTmFtZT0ndGV4dC1taWRkbGUgY2hlY2tib3gnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9J2l0ZW0yJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3RoaXMudGVhbUxpc3QgJiYgdGhpcy50ZWFtTGlzdC50ZWFtLnBhcmVudCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVhbUxpc3QudGVhbS5wYXJlbnQuaXNDaGVja2VkIDogZmFsc2V9Lz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnRlYW1MaXN0ICYmIHRoaXMudGVhbUxpc3QudGVhbS5wYXJlbnQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdpdGVtMidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy51cGRhdGVUZWFtTGlzdFN0YXR1cy5iaW5kKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVhbUxpc3QudGVhbS5wYXJlbnQuZXhhbWluZXJSb2xlSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSkgfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMudGVhbUxpc3QudGVhbS5wYXJlbnQuZnVsbE5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD4gOiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgcm9sZT0nZ3JvdXAnIGlkID17dGhpcy5wcm9wcy5pZCArICdfVGVhbUxpc3QnfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPSdub2RlIGV4cGFuZGVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlPSd0cmVlaXRlbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0ndHJ1ZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9eydsaV8nICsgdGhpcy50ZWFtTGlzdC50ZWFtLmV4YW1pbmVyUm9sZUlkfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdzcHJpdGUtaWNvbiB1c2VyLWljb24tbWVkaXVtIHRyZWUtaWNvbic+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPSd0ZXh0LW1pZGRsZScgaWQ9J2N1cnJlbnRfbG9naW5fdXNlcic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy50ZWFtTGlzdC50ZWFtLmZ1bGxOYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGVhbUxpc3RUcmVldmlldyBpZD17J3RlYW1MaXN0J30ga2V5PXsndGVhbUxpc3Rfa2V5J31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3NMaXN0ID17dGhpcy50ZWFtTGlzdC50ZWFtLnN1Ym9yZGluYXRlc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkT24gPSB7dGhpcy5zdGF0ZS5yZW5kZXJlZE9ufSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdwb3B1cC1mb290ZXIgdGV4dC1yaWdodCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8R2VuZXJpY0J1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXsgJ2J1dHRvbi1yb3VuZGVkLWNsb3NlLWJ1dHRvbicgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17J2tleV9idXR0b24gcm91bmRlZCBjbG9zZS1idXR0b24nIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9eydidXR0b24gcm91bmRlZCBjbG9zZS1idXR0b24nfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtZXNzYWdpbmcuY29tcG9zZS1tZXNzYWdlLnJlY2lwaWVudC1zZWxlY3Rvci5jYW5jZWwtYnV0dG9uJykgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ9e2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21lc3NhZ2luZy5jb21wb3NlLW1lc3NhZ2UucmVjaXBpZW50LXNlbGVjdG9yLmNhbmNlbC1idXR0b24nKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuY2FuY2VsVGVhbVNlbGVjdGlvbn0vPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEdlbmVyaWNCdXR0b25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD17ICdidXR0b24tcHJpbWFyeS1yb3VuZGVkLWJ1dHRvbicgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17J2tleV9idXR0b24gcHJpbWFyeSByb3VuZGVkLWJ1dHRvbicgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17J2J1dHRvbiBwcmltYXJ5IHJvdW5kZWQnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtZXNzYWdpbmcuY29tcG9zZS1tZXNzYWdlLnJlY2lwaWVudC1zZWxlY3Rvci5vay1idXR0b24nKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudD17bG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWVzc2FnaW5nLmNvbXBvc2UtbWVzc2FnZS5yZWNpcGllbnQtc2VsZWN0b3Iub2stYnV0dG9uJykgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtmYWxzZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnNhdmVTZWxlY3RlZFRlYW1MaXN0fS8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApIDogbnVsbDtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICB0b1RlYW1MaXN0UG9wdXBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tcG9uZW50IGRpZCBtb3VudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcblxyXG4gICAgICAgIC8qIHRoZXNlIGV2ZW50cyBhcmUgdXNlZCB0byBpbXBsZW1lbnQgY3VzdG9tIFxyXG4gICAgICAgICAgIHNjcm9sbGluZyBsb2dpYyB0byBoYW5kbGUgdGhlIGVsYXN0aWMgc2Nyb2xsIGJlaGF2aW9yIG9mIGlwYWQgKi9cclxuICAgICAgICBpZiAodGhpcy50ZWFtTGlzdFJlZiAmJiAoaHRtbFV0aWxpdGllcy5pc0lQYWREZXZpY2UpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGVhbUxpc3RSZWYuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Ub3VjaFN0YXJ0KTtcclxuICAgICAgICAgICAgdGhpcy50ZWFtTGlzdFJlZi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlKTtcclxuICAgICAgICAgICAgdGhpcy50ZWFtTGlzdFJlZi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25Ub3VjaEVuZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtZXNzYWdlU3RvcmUuaW5zdGFuY2UuYWRkTGlzdGVuZXIobWVzc2FnZVN0b3JlLk1lc3NhZ2VTdG9yZS5URUFNX0xJU1RfVVBEQVRFRCwgdGhpcy50ZWFtTGlzdFVwZGF0ZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZXZlbnQgaGFuZGxlciBmb3IgdG91Y2ggc3RhcnRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvblRvdWNoU3RhcnQgPSAoZXZlbnQ6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICB0aGlzLnByZXZQYWdlWSA9IChldmVudC5jaGFuZ2VkVG91Y2hlcykgPyBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IDA7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQgPSAodGhpcy50ZWFtTGlzdFJlZiBhcyBIVE1MRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5hbGxvd1VwID0gKGNvbnRlbnQuc2Nyb2xsVG9wID4gMCk7XHJcbiAgICAgICAgdGhpcy5hbGxvd0Rvd24gPSAoY29udGVudC5zY3JvbGxUb3AgPD0gY29udGVudC5zY3JvbGxIZWlnaHQgLSBjb250ZW50LmNsaWVudEhlaWdodCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZXZlbnQgaGFuZGxlciBmb3IgdG91Y2ggbW92ZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uVG91Y2hNb3ZlID0gKGV2ZW50OiBhbnkpID0+IHtcclxuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBsZXQgY29udGVudCA9ICh0aGlzLnRlYW1MaXN0UmVmIGFzIEhUTUxFbGVtZW50KTtcclxuICAgICAgICBsZXQgcGFnZVkgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWTtcclxuICAgICAgICB2YXIgdXAgPSAocGFnZVkgPiB0aGlzLnByZXZQYWdlWSk7XHJcbiAgICAgICAgdmFyIGRvd24gPSAocGFnZVkgPCB0aGlzLnByZXZQYWdlWSk7XHJcbiAgICAgICAgbGV0IGRpZmYgPSBNYXRoLmFicyh0aGlzLnByZXZQYWdlWSAtIGV2ZW50LnBhZ2VZKTtcclxuXHJcbiAgICAgICAgdGhpcy5wcmV2UGFnZVkgPSBldmVudC5wYWdlWTtcclxuXHJcbiAgICAgICAgaWYgKCh1cCAmJiB0aGlzLmFsbG93VXApKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuc2Nyb2xsVG9wID0gKGNvbnRlbnQuc2Nyb2xsVG9wIC0gZGlmZik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkb3duICYmIHRoaXMuYWxsb3dEb3duKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQuc2Nyb2xsVG9wID0gKGNvbnRlbnQuc2Nyb2xsVG9wICsgZGlmZik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIH0sIDApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGV2ZW50IGhhbmRsZXIgZm9yIHRvdWNoIGVuZFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uVG91Y2hFbmQgPSAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMucHJldlBhZ2VZID0gMDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wb25lbnQgd2lsbCB1bm1vdW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICBtZXNzYWdlU3RvcmUuaW5zdGFuY2UucmVtb3ZlTGlzdGVuZXIobWVzc2FnZVN0b3JlLk1lc3NhZ2VTdG9yZS5URUFNX0xJU1RfVVBEQVRFRCwgdGhpcy50ZWFtTGlzdFVwZGF0ZWQpO1xyXG4gICAgICAgIHRoaXMudGVhbUxpc3RSZWYucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Ub3VjaFN0YXJ0KTtcclxuICAgICAgICB0aGlzLnRlYW1MaXN0UmVmLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHRoaXMub25Ub3VjaE1vdmUpO1xyXG4gICAgICAgIHRoaXMudGVhbUxpc3RSZWYucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hFbmQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1xyXG4gICAgICogQHBhcmFtIG5leHRQcm9wc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHM6IFByb3BzKSB7XHJcbiAgICAgICAgdGhpcy5pc1Nob3dBZGRyZXNzUG9wdXAgPSBmYWxzZTtcclxuICAgICAgICBpZiAobWVzc2FnZVN0b3JlLmluc3RhbmNlLnRlYW1EZXRhaWxzICYmIG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS50ZWFtRGV0YWlscy50ZWFtLnN1Ym9yZGluYXRlcykge1xyXG4gICAgICAgICAgICB0aGlzLmlzU2hvd0FkZHJlc3NQb3B1cCA9IG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS50ZWFtRGV0YWlscy50ZWFtLnN1Ym9yZGluYXRlcy5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCB0byBjYW5jZWwgdGVhbSBzZWxlY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2FuY2VsVGVhbVNlbGVjdGlvbiA9ICgpID0+IHtcclxuICAgICAgICBtZXNzYWdpbmdBY3Rpb25DcmVhdG9yLnVwZGF0ZVNlbGVjdGVkVGVhbUxpc3QoZmFsc2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCB0byBzYXZlIHNlbGVjdGVkIHRlYW0gbGlzdCBpbiB0aGUgbWVzc2FnZSBzdG9yZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzYXZlU2VsZWN0ZWRUZWFtTGlzdCA9ICgpID0+IHtcclxuICAgICAgICBtZXNzYWdpbmdBY3Rpb25DcmVhdG9yLnVwZGF0ZVNlbGVjdGVkVGVhbUxpc3QodHJ1ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWV0aG9kIGZvciBoYW5kbGluZyBlbnRpcmUgdGVhbSBjbGljay5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBlbnRpcmVUZWFtQ2xpY2sgPSAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgbWVzc2FnaW5nQWN0aW9uQ3JlYXRvci5lbnRpcmVUZWFtQ2hlY2tlZCghdGhpcy50ZWFtTGlzdC50ZWFtLnRvVGVhbSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWV0aG9kIGZvciB1cGRhdGUgdGVhbSBsaXN0LlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgdGVhbUxpc3RVcGRhdGVkID0gKGlzVG9UZWFtQ2xpY2s6IGJvb2xlYW4sIGlzRXhwYW5kOiBib29sZWFuKTogdm9pZCA9PiB7XHJcbiAgICAvLyBhdm9pZCBFbnRpcmVUZWFtJ3MgY2hlY2tlZC1zdGF0dXMgY2hhbmdlIHdoaWxlIGNsaWNraW5nIEV4cGFuZC9Db2xsYXBzZSBidXR0b25cclxuICAgICAgICBpZiAoaXNFeHBhbmQgPT09IHVuZGVmaW5lZCB8fCAhaXNFeHBhbmQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1RvVGVhbUNoZWNrZWQgPSBpc1RvVGVhbUNsaWNrICYmIG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS50ZWFtRGV0YWlscy50ZWFtLnRvVGVhbSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50ZWFtTGlzdCA9IG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS50ZWFtRGV0YWlscztcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVuZGVyZWRPbjogRGF0ZS5ub3coKSB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLypcclxuICAgICAqIGV2ZW50IGhhbmRsZXIgZm9yIHRlYW0gbGlzdCBwYW5lbCBzY3JvbGwuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25TY3JvbGwgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHJlbmRlcmVkT246IHRoaXMuc3RhdGUucmVuZGVyZWRPbixcclxuICAgICAgICAgICAgdGVhbUxpc3RTY3JvbGxIZWlnaHQ6IHRoaXMuZ2V0VGVhbUxpc3RTY3JvbGxIZWlnaHQoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIHRlYW0gbGlzdCBzY3JvbGwgaGVpZ2h0XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0VGVhbUxpc3RTY3JvbGxIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMudGVhbUxpc3RSZWYpID8gKHRoaXMudGVhbUxpc3RSZWYuY2xpZW50SGVpZ2h0ICsgdGhpcy50ZWFtTGlzdFJlZi5zY3JvbGxUb3ApIDogdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xpY2tpbmcgb24gY2hlY2svdW5jaGVjayBvZiBzdXBlcnZpc2VyXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgdXBkYXRlVGVhbUxpc3RTdGF0dXMgPSAodW5pcXVlSWQ6IG51bWJlciwgaXNFeHBhbmQ6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBtZXNzYWdpbmdBY3Rpb25DcmVhdG9yLnVwZGF0ZVRlYW1MaXN0U3RhdHVzKHVuaXF1ZUlkLCBpc0V4cGFuZCk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgPSBUZWFtTGlzdFBvcHVwO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9tZXNzYWdlL3RlYW1saXN0cG9wdXAudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQVdBOzs7O0FBSUE7QUFDQTtBQUFBO0FBVUE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFiQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBZ0lBOztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUF1QkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQTFPQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUtBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFRQTtBQUNBO0FBSUE7QUFDQTtBQUdBO0FBU0E7QUFDQTtBQVFBO0FBYUE7QUFHQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUEyQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE2Q0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFRQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 479:
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/components/message/teamlisttreeview.tsx ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../actions/messaging/messagingactioncreator */ 268);\r\nvar TeamListTreeview = /** @class */ (function (_super) {\r\n    __extends(TeamListTreeview, _super);\r\n    /**\r\n     * Constructor Messagepopup\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function TeamListTreeview(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.isInitialLoad = true;\r\n        /**\r\n         * Clicking on expand/collapse or check/uncheck\r\n         */\r\n        _this.updateTeamListStatus = function (uniqueId, isExpand) {\r\n            messagingActionCreator.updateTeamListStatus(uniqueId, isExpand);\r\n        };\r\n        _this._className = _this.props.addressList.length > 0 ? 'sub-items has-expandables' : null;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    TeamListTreeview.prototype.render = function () {\r\n        var that = this;\r\n        var nodes;\r\n        var teamListTreeView;\r\n        if (that.props.addressList !== undefined) {\r\n            nodes = that.props.addressList.map(function (nodeItem, index) {\r\n                return that.getNodeItem(nodeItem, index);\r\n            });\r\n        }\r\n        return (React.createElement(\"ul\", { role: 'group', className: this._className, id: this.props.id, key: this.props.id }, nodes));\r\n    };\r\n    /**\r\n     * getting node items\r\n     */\r\n    TeamListTreeview.prototype.getNodeItem = function (nodeItem, index) {\r\n        var checkBoxId = 'cbx_' + nodeItem.examinerRoleId;\r\n        if (nodeItem.subordinates.length > 0) {\r\n            var teamListTreeview = nodeItem.isOpen ? (React.createElement(TeamListTreeview, { id: 'nodeItem_' + nodeItem.examinerRoleId, key: 'nodeItem_' + index.toString() + '_key_' + nodeItem.examinerRoleId, addressList: nodeItem.subordinates, renderedOn: Date.now() })) : null;\r\n            var classNameForExpand = nodeItem.isOpen ? 'node has-sub expanded' : 'node has-sub collapsed';\r\n            return (React.createElement(\"li\", { id: 'li_' + nodeItem.examinerRoleId, key: 'li_' + index.toString() + '_' + nodeItem.examinerRoleId, className: classNameForExpand, role: 'treeitem', \"aria-expanded\": 'true' },\r\n                React.createElement(\"a\", { id: 'a_' + nodeItem.examinerRoleId, onClick: this.updateTeamListStatus.bind(this, nodeItem.examinerRoleId, true), href: 'javascript:void(0);', className: 'parent-node' }),\r\n                React.createElement(\"input\", { type: 'checkbox', className: 'text-middle checkbox', id: checkBoxId, checked: nodeItem.isChecked, onChange: this.updateTeamListStatus.bind(this, nodeItem.examinerRoleId, false) }),\r\n                React.createElement(\"label\", { htmlFor: checkBoxId }, nodeItem.fullName),\r\n                teamListTreeview));\r\n        }\r\n        else {\r\n            return (React.createElement(\"li\", { id: 'li_' + nodeItem.examinerRoleId, key: 'li_' + index.toString() + '_' + nodeItem.examinerRoleId, className: 'node', role: 'treeitem' },\r\n                React.createElement(\"input\", { type: 'checkbox', className: 'text-middle checkbox', id: checkBoxId, checked: nodeItem.isChecked, onChange: this.updateTeamListStatus.bind(this, nodeItem.examinerRoleId, false) }),\r\n                React.createElement(\"label\", { htmlFor: checkBoxId }, nodeItem.fullName)));\r\n        }\r\n    };\r\n    return TeamListTreeview;\r\n}(pureRenderComponent));\r\nmodule.exports = TeamListTreeview;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWVzc2FnZS90ZWFtbGlzdHRyZWV2aWV3LnRzeD84MjIxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBSZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBHZW5lcmljQnV0dG9uID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9nZW5lcmljYnV0dG9uJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IHRvQWRkcmVzc0xpc3QgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbWVzc2FnZS90eXBpbmdzL3RlYW1yZXR1cm4nKTtcclxuaW1wb3J0IG1lc3NhZ2luZ0FjdGlvbkNyZWF0b3IgPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL21lc3NhZ2luZy9tZXNzYWdpbmdhY3Rpb25jcmVhdG9yJyk7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBQcm9wc0Jhc2UsIExvY2FsZVNlbGVjdGlvbkJhc2Uge1xyXG4gICAgYWRkcmVzc0xpc3Q6IEFycmF5PEV4YW1pbmVySW5mbz47XHJcbiAgICByZW5kZXJlZE9uPzogbnVtYmVyO1xyXG59XHJcblxyXG5jbGFzcyBUZWFtTGlzdFRyZWV2aWV3IGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcblxyXG4gICAgcHJpdmF0ZSBfY2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGlzSW5pdGlhbExvYWQ6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3IgTWVzc2FnZXBvcHVwXHJcbiAgICAgKiBAcGFyYW0gcHJvcHNcclxuICAgICAqIEBwYXJhbSBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xyXG5cclxuICAgICAgICB0aGlzLl9jbGFzc05hbWUgPSB0aGlzLnByb3BzLmFkZHJlc3NMaXN0Lmxlbmd0aCA+IDAgPyAnc3ViLWl0ZW1zIGhhcy1leHBhbmRhYmxlcycgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIGNvbXBvbmVudFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIGxldCBub2RlczogYW55O1xyXG5cclxuICAgICAgICBsZXQgdGVhbUxpc3RUcmVlVmlldzogYW55O1xyXG5cclxuICAgICAgICBpZiAodGhhdC5wcm9wcy5hZGRyZXNzTGlzdCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgICAgICAgICBub2RlcyA9IHRoYXQucHJvcHMuYWRkcmVzc0xpc3QubWFwKGZ1bmN0aW9uIChub2RlSXRlbTogRXhhbWluZXJJbmZvLCBpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5nZXROb2RlSXRlbShub2RlSXRlbSwgaW5kZXgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx1bCByb2xlPSdncm91cCcgY2xhc3NOYW1lPXt0aGlzLl9jbGFzc05hbWV9IGlkPXt0aGlzLnByb3BzLmlkfSBrZXk9e3RoaXMucHJvcHMuaWR9PlxyXG4gICAgICAgICAgICAgICAge25vZGVzfVxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2V0dGluZyBub2RlIGl0ZW1zXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0Tm9kZUl0ZW0obm9kZUl0ZW06IEV4YW1pbmVySW5mbywgaW5kZXg6IG51bWJlcik6IGFueSB7XHJcbiAgICAgICAgbGV0IGNoZWNrQm94SWQ6IHN0cmluZyA9ICdjYnhfJyArIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkO1xyXG5cclxuICAgICAgICBpZiAobm9kZUl0ZW0uc3Vib3JkaW5hdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IHRlYW1MaXN0VHJlZXZpZXcgPSBub2RlSXRlbS5pc09wZW4gPyAoPFRlYW1MaXN0VHJlZXZpZXdcclxuICAgICAgICAgICAgICAgIGlkPXsnbm9kZUl0ZW1fJyArIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkfVxyXG4gICAgICAgICAgICAgICAga2V5PXsnbm9kZUl0ZW1fJyArIGluZGV4LnRvU3RyaW5nKCkgKyAnX2tleV8nICsgbm9kZUl0ZW0uZXhhbWluZXJSb2xlSWQgfVxyXG4gICAgICAgICAgICAgICAgYWRkcmVzc0xpc3QgPXtub2RlSXRlbS5zdWJvcmRpbmF0ZXN9XHJcbiAgICAgICAgICAgICAgICByZW5kZXJlZE9uID0ge0RhdGUubm93KCl9Lz4pIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGxldCBjbGFzc05hbWVGb3JFeHBhbmQgPSBub2RlSXRlbS5pc09wZW4gPyAnbm9kZSBoYXMtc3ViIGV4cGFuZGVkJyA6ICdub2RlIGhhcy1zdWIgY29sbGFwc2VkJztcclxuICAgICAgICAgICAgcmV0dXJuICg8bGkgaWQ9eydsaV8nICsgbm9kZUl0ZW0uZXhhbWluZXJSb2xlSWR9IGtleT17J2xpXycgKyBpbmRleC50b1N0cmluZygpICsgJ18nICsgbm9kZUl0ZW0uZXhhbWluZXJSb2xlSWR9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZUZvckV4cGFuZH0gcm9sZT0ndHJlZWl0ZW0nIGFyaWEtZXhwYW5kZWQ9J3RydWUnPlxyXG4gICAgICAgICAgICAgICAgPGFcclxuICAgICAgICAgICAgICAgICAgICBpZD17J2FfJyArIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2sgPSB7dGhpcy51cGRhdGVUZWFtTGlzdFN0YXR1cy5iaW5kKHRoaXMsIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkLCB0cnVlKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApOycgY2xhc3NOYW1lPSdwYXJlbnQtbm9kZSc+PC9hPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT0nY2hlY2tib3gnXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSd0ZXh0LW1pZGRsZSBjaGVja2JveCdcclxuICAgICAgICAgICAgICAgICAgICBpZD17Y2hlY2tCb3hJZH1cclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkID0ge25vZGVJdGVtLmlzQ2hlY2tlZH1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy51cGRhdGVUZWFtTGlzdFN0YXR1cy5iaW5kKHRoaXMsIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkLCBmYWxzZSkgfVxyXG4gICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxsYWJlbFxyXG4gICAgICAgICAgICAgICAgICAgIGh0bWxGb3I9e2NoZWNrQm94SWR9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtub2RlSXRlbS5mdWxsTmFtZX1cclxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgIHt0ZWFtTGlzdFRyZWV2aWV3fVxyXG4gICAgICAgICAgICA8L2xpPik7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoPGxpIGlkPXsnbGlfJyArIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkfSBrZXk9eydsaV8nICsgaW5kZXgudG9TdHJpbmcoKSArICdfJyArIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkfVxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdub2RlJyByb2xlPSd0cmVlaXRlbSc+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICB0eXBlPSdjaGVja2JveCdcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3RleHQtbWlkZGxlIGNoZWNrYm94J1xyXG4gICAgICAgICAgICAgICAgICAgIGlkPXtjaGVja0JveElkfVxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQgPSB7bm9kZUl0ZW0uaXNDaGVja2VkfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZVRlYW1MaXN0U3RhdHVzLmJpbmQodGhpcywgbm9kZUl0ZW0uZXhhbWluZXJSb2xlSWQsIGZhbHNlKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxsYWJlbFxyXG4gICAgICAgICAgICAgICAgICAgIGh0bWxGb3I9e2NoZWNrQm94SWR9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtub2RlSXRlbS5mdWxsTmFtZX08L2xhYmVsPlxyXG4gICAgICAgICAgICA8L2xpPik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsaWNraW5nIG9uIGV4cGFuZC9jb2xsYXBzZSBvciBjaGVjay91bmNoZWNrXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgdXBkYXRlVGVhbUxpc3RTdGF0dXMgPSAodW5pcXVlSWQ6IG51bWJlciwgaXNFeHBhbmQ6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBtZXNzYWdpbmdBY3Rpb25DcmVhdG9yLnVwZGF0ZVRlYW1MaXN0U3RhdHVzKHVuaXF1ZUlkLCBpc0V4cGFuZCk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgPSBUZWFtTGlzdFRyZWV2aWV3O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9tZXNzYWdlL3RlYW1saXN0dHJlZXZpZXcudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFLQTtBQU9BO0FBQUE7QUFLQTs7OztBQUlBO0FBQ0E7QUFBQTtBQVBBO0FBeUZBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBcEZBOztBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFNQTtBQUNBO0FBRUE7QUFJQTtBQU9BO0FBSUE7QUFHQTtBQUFBO0FBQ0E7QUFFQTtBQU9BO0FBSUE7QUFDQTtBQVNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ })

});