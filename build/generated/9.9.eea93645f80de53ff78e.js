webpackJsonp([9],{

/***/ 273:
/* no static exports found */
/* all exports used */
/*!**************************************************************************!*\
  !*** ./src/components/utility/grid/standardisationsetupgridcolumns.json ***!
  \**************************************************************************/
/***/ (function(module, exports) {

eval("module.exports = {\"definitions\":{\"Marks\":{\"$id\":\"13\",\"GridColumn\":\"MarksColumn\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.marks\",\"ComparerName\":\"markComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-mark-obt\"},\"LastMarker\":{\"$id\":\"14\",\"GridColumn\":\"LastMarkerColumn\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.last-marker\",\"ComparerName\":\"stdLastMarkerComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-last-marker\"},\"Note\":{\"$id\":\"15\",\"GridColumn\":\"NoteColumn\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.note\",\"ComparerName\":\"stdNoteComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-note\"},\"TagIndicator\":{\"$id\":\"16\",\"GridColumn\":\"TagIndicator\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.tag\",\"CssClass\":\"col-tag\",\"ComparerName\":\"tagComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"selectedTagId\":\"selectedTagId\",\"tagList\":\"tagList\",\"markGroupId\":\"markGroupId\"}},\"LastUpdated\":{\"$id\":\"17\",\"GridColumn\":\"LastUpdatedColumn\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.last-updated\",\"ComparerName\":\"updatedDateComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-modified\",\"ComponentProps\":{\"updatedDate\":\"updatedDate\"}},\"ResponseId\":{\"$id\":\"18\",\"GridColumn\":\"ResponseIdColumn\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.response-id\",\"ComparerName\":\"responseIdComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-response header-col\"},\"LinkedMessageIndicator\":{\"$id\":\"19\",\"GridColumn\":\"LinkedMessageIndicator\",\"ColumnHeader\":\"\",\"CssClass\":\"col-message\",\"ComponentProps\":{\"hasMessages\":\"hasMessages\",\"unreadMessagesCount\":\"unreadMessagesCount\",\"displayId\":\"displayId\",\"isTeamManagementMode\":\"isTeamManagementMode\"}},\"RIGOrder\":{\"$id\":\"20\",\"GridColumn\":\"RigOrderColumn\",\"ColumnHeader\":\"\",\"Sortable\":\"false\"},\"Centre\":{\"$id\":\"31\",\"GridColumn\":\"Centre\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.centre\",\"CssClass\":\"col-centre header-col\",\"ComparerName\":\"centreComparer\",\"Sortable\":\"true\"},\"Scripts\":{\"$id\":\"32\",\"GridColumn\":\"Scripts\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.scripts\",\"CssClass\":\"col-scripts\",\"ComparerName\":\"stdScriptComparer\",\"Sortable\":\"true\"},\"Available\":{\"$id\":\"33\",\"GridColumn\":\"ScriptsAvailable\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.available-scripts\",\"CssClass\":\"col-scripts-available\",\"ComparerName\":\"stdScriptAvailableComparer\",\"Sortable\":\"true\"},\"FirstScanned\":{\"$id\":\"34\",\"GridColumn\":\"FirstScanned\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.first-scanned\",\"CssClass\":\"col-first-scanned\",\"ComparerName\":\"stdFirstScannedComparer\",\"Sortable\":\"true\"},\"ScriptId\":{\"$id\":\"35\",\"GridColumn\":\"ScriptId\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.script-id\",\"ComparerName\":\"stdScriptIdComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-script-id header-col\",\"ComponentProps\":{\"ScriptId\":\"candidateScriptId\"}},\"Candidate\":{\"$id\":\"36\",\"GridColumn\":\"CentreCandidateNum\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.candidate\",\"ComparerName\":\"candidateComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-candidate\",\"ComponentProps\":{\"Candidate\":\"CentreCandidateNum\"}},\"Status\":{\"$id\":\"37\",\"GridColumn\":\"Status\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.status\",\"ComparerName\":\"stdStatusComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-available-status\",\"ComponentProps\":{\"Status\":\"Status\"}},\"SLAOIndicator\":{\"$id\":\"38\",\"GridColumn\":\"SLAOIndicator\",\"ColumnHeader\":\"\",\"CssClass\":\"col-slao\",\"ComponentProps\":{\"hasAdditionalObjects\":\"hasAdditionalObjects\",\"hasAllPagesAnnotated\":\"hasAllPagesAnnotated\",\"markingProgress\":\"markingProgress\"}},\"MarkingProgress\":{\"$id\":\"39\",\"GridColumn\":\"Status\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.status\",\"ComparerName\":\"progressComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-status\",\"ComponentProps\":{\"markingProgress\":\"markingProgress\",\"esmarkGroupId\":\"esmarkGroupId\"}},\"ModifiedDate\":{\"$id\":\"40\",\"GridColumn\":\"Status\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.status\",\"ComparerName\":\"updatedDateComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-status\",\"ComponentProps\":{\"Status\":\"Status\"}},\"AllPageAnnotedIndicator\":{\"$id\":\"41\",\"GridColumn\":\"AllPageAnnotedIndicator\",\"CssClass\":\"col-slao\",\"ColumnHeader\":\"\",\"ComponentProps\":{\"hasAllPagesAnnotated\":\"hasAllPagesAnnotated\",\"markingProgress\":\"markingProgress\"}},\"AllFilesNotViewedIndicator\":{\"$id\":\"42\",\"GridColumn\":\"AllFilesNotViewedIndicator\",\"CssClass\":\"col-slao\",\"ColumnHeader\":\"\",\"ComponentProps\":{\"allFilesViewed\":\"allFilesViewed\",\"markingProgress\":\"markingProgress\",\"isECourseworkComponent\":\"isECourseworkComponent\"}},\"DeClassify\":{\"$id\":\"44\",\"GridColumn\":\"DeClassifyColumn\",\"ColumnHeader\":\"\",\"CssClass\":\"last-cell col-declassify\"},\"QuestionItems\":{\"$id\":\"43\",\"GridColumn\":\"QuestionItems\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.question-items\",\"CssClass\":\"col-question-item\",\"ComponentProps\":{\"QuestionItems\":\"QuestionItems\"}},\"OrginalSession\":{\"$id\":\"45\",\"GridColumn\":\"OrginalSession\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.original-session\",\"ComparerName\":\"stdOrginalSessionComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-org-session\",\"ComponentProps\":{\"Status\":\"OrginalSession\"}},\"OrginalClassification\":{\"$id\":\"46\",\"GridColumn\":\"OrginalClassification\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.original-classification\",\"ComparerName\":\"stdOrginalClassificationComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-org-classification\"},\"Mark\":{\"$id\":\"47\",\"GridColumn\":\"Mark\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.original-mark\",\"ComparerName\":\"marksComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-mark-obt\"},\"OrginalMarksUpdated\":{\"$id\":\"48\",\"GridColumn\":\"OrginalMarksUpdated\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.original-marks-updated\",\"ComparerName\":\"orginalMarksUpdatedComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-updated-mark\"},\"HideResponse\":{\"$id\":\"49\",\"GridColumn\":\"HideResponse\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.hide-response\",\"Sortable\":\"false\",\"CssClass\":\"col-hide-response\"},\"TotalTimeReused\":{\"$id\":\"50\",\"GridColumn\":\"Totaltimereused\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.total-times-reused\",\"ComparerName\":\"totalTimesReusedComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-time-reused text-center\"},\"LastUsed\":{\"$id\":\"51\",\"GridColumn\":\"LastUsed\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.last-used\",\"ComparerName\":\"lastUsedComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-last-used\"},\"TimesReusedInThisSession\":{\"$id\":\"52\",\"GridColumn\":\"TimesReusedInThisSession\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.times-reused-in-this-session\",\"ComparerName\":\"totalTimesReusedSessionComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-time-reused-in-session text-center\"},\"UpdatePending\":{\"$id\":\"53\",\"GridColumn\":\"UpdatePending\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.update-pending\",\"ComparerName\":\"updatePendingComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-update-pending\"},\"IsReused\":{\"$id\":\"54\",\"GridColumn\":\"Status\",\"Sortable\":\"false\",\"CssClass\":\"col-re-use\"},\"IsReusedInThisQIG\":{\"$id\":\"55\",\"GridColumn\":\"IsReusedInThisQIG\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.re-used-inthis-qig\",\"ComparerName\":\"stdIsReusedInQigComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-re-use\"},\"ReuseCentre\":{\"$id\":\"56\",\"GridColumn\":\"Centre\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.centre\",\"CssClass\":\"col-centre header-col\",\"ComparerName\":\"stdCentreComparer\",\"Sortable\":\"true\"},\"ReuseCandidate\":{\"$id\":\"57\",\"GridColumn\":\"CentreCandidateNum\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.candidate\",\"ComparerName\":\"stdCandidateComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-candidate\",\"ComponentProps\":{\"Candidate\":\"CentreCandidateNum\"}},\"unclassifiedMarkingProgress\":{\"$id\":\"58\",\"GridColumn\":\"Status\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.status\",\"ComparerName\":\"unclassifiedprogressComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-status\",\"ComponentProps\":{\"markingProgress\":\"markingProgress\",\"esmarkGroupId\":\"esmarkGroupId\"}}},\"IsSharedProvisional\":{\"$id\":\"59\",\"GridColumn\":\"IsSharedProvisional\",\"CssClass\":\"col-share header-col\",\"ColumnHeader\":\"\"},\"standardisationsetup\":{\"SelectResponse\":{\"Centre\":{\"GridColumns\":[{\"$ref\":\"31\"},{\"$ref\":\"32\"},{\"$ref\":\"33\"},{\"$ref\":\"34\"}]},\"Script\":{\"GridColumns\":[{\"$ref\":\"36\"},{\"$ref\":\"37\"},{\"$ref\":\"38\"},{\"$ref\":\"43\"}]},\"FrozenRows\":{\"GridColumns\":[{\"$ref\":\"35\"}]}},\"PreviousSession\":{\"ReusableResponse\":{\"GridColumns\":[{\"$ref\":\"56\"},{\"$ref\":\"57\"},{\"$ref\":\"47\"},{\"$ref\":\"48\"},{\"$ref\":\"49\"},{\"$ref\":\"50\"},{\"$ref\":\"52\"},{\"$ref\":\"51\"},{\"$ref\":\"55\"},{\"$ref\":\"53\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"35\"},{\"$ref\":\"54\"},{\"$ref\":\"45\"},{\"$ref\":\"46\"}]}},\"ProvisionalResponse\":{\"totalmarksview\":{\"GridColumns\":[{\"$ref\":\"35\"},{\"$ref\":\"39\"},{\"$ref\":\"31\"},{\"$ref\":\"36\"},{\"$ref\":\"13\"},{\"$ref\":\"15\"},{\"$ref\":\"38\"},{\"$ref\":\"41\"},{\"$ref\":\"42\"},{\"$ref\":\"19\"},{\"$ref\":\"16\"},{\"$ref\":\"17\"}]},\"marksbyquestionview\":{\"GridColumns\":[{\"$ref\":\"13\"},{\"$ref\":\"39\"},{\"$ref\":\"15\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"59\"},{\"$ref\":\"18\"}]}},\"UnClassifiedResponse\":{\"totalmarksview\":{\"GridColumns\":[{\"$ref\":\"35\"},{\"$ref\":\"31\"},{\"$ref\":\"58\"},{\"$ref\":\"36\"},{\"$ref\":\"13\"},{\"$ref\":\"14\"},{\"$ref\":\"15\"},{\"$ref\":\"38\"},{\"$ref\":\"41\"},{\"$ref\":\"19\"},{\"$ref\":\"16\"},{\"$ref\":\"17\"}]},\"marksbyquestionview\":{\"GridColumns\":[{\"$ref\":\"13\"},{\"$ref\":\"58\"},{\"$ref\":\"15\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"18\"}]}},\"ClassifiedResponse\":{\"totalmarksview\":{\"GridColumns\":[{\"$ref\":\"35\"},{\"$ref\":\"31\"},{\"$ref\":\"36\"},{\"$ref\":\"13\"},{\"$ref\":\"14\"},{\"$ref\":\"15\"},{\"$ref\":\"19\"},{\"$ref\":\"16\"},{\"$ref\":\"17\"},{\"$ref\":\"44\"}]},\"marksbyquestionview\":{\"GridColumns\":[{\"$ref\":\"13\"},{\"$ref\":\"14\"},{\"$ref\":\"15\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"20\"},{\"$ref\":\"18\"}]}}}}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 274:
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/components/utility/grid/gridcell.ts ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Cell for GridControl Compoent\r\n */\r\nvar GridCell = /** @class */ (function () {\r\n    function GridCell() {\r\n        this.comparerName = undefined;\r\n        this.sortDirection = undefined;\r\n        this.isSortable = true;\r\n    }\r\n    /**\r\n     * returns the cell style\r\n     */\r\n    GridCell.prototype.getCellStyle = function () {\r\n        return this.cellStyle;\r\n    };\r\n    /**\r\n     * set the cell style\r\n     * @param {string} _cellStyle\r\n     */\r\n    GridCell.prototype.setCellStyle = function (_cellStyle) {\r\n        this.cellStyle = _cellStyle;\r\n    };\r\n    /**\r\n     * returns the additional cell Element\r\n     */\r\n    GridCell.prototype.getAdditionalElement = function () {\r\n        return this.additionalElement;\r\n    };\r\n    /**\r\n     * sets the additional cell Element\r\n     * @param _additionalElement\r\n     */\r\n    GridCell.prototype.setAdditionalElement = function (_additionalElement) {\r\n        this.additionalElement = _additionalElement;\r\n    };\r\n    return GridCell;\r\n}());\r\nmodule.exports = GridCell;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL2dyaWRjZWxsLnRzPzBjNjciXSwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD0ndHlwaW5ncy9jZWxsLnRzJyAvPlxyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi9lbnVtcycpO1xyXG5cclxuLyoqXHJcbiAqIENlbGwgZm9yIEdyaWRDb250cm9sIENvbXBvZW50XHJcbiAqL1xyXG5jbGFzcyBHcmlkQ2VsbCBpbXBsZW1lbnRzIENlbGwge1xyXG5cclxuICAgIHByaXZhdGUgY2VsbFN0eWxlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGFkZGl0aW9uYWxFbGVtZW50OiBKU1guRWxlbWVudDtcclxuXHJcbiAgICAvKipcclxuICAgICAqICBHcmlkIGNlbGwncyBFbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb2x1bW5FbGVtZW50OiBKU1guRWxlbWVudDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIGNlbGwgc3R5bGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENlbGxTdHlsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jZWxsU3R5bGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFxyXG4gICAgICogc2V0IHRoZSBjZWxsIHN0eWxlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gX2NlbGxTdHlsZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0Q2VsbFN0eWxlKF9jZWxsU3R5bGU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuY2VsbFN0eWxlID0gX2NlbGxTdHlsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIGFkZGl0aW9uYWwgY2VsbCBFbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRBZGRpdGlvbmFsRWxlbWVudCgpOiBKU1guRWxlbWVudCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkaXRpb25hbEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXRzIHRoZSBhZGRpdGlvbmFsIGNlbGwgRWxlbWVudFxyXG4gICAgICogQHBhcmFtIF9hZGRpdGlvbmFsRWxlbWVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0QWRkaXRpb25hbEVsZW1lbnQoX2FkZGl0aW9uYWxFbGVtZW50OiBKU1guRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuYWRkaXRpb25hbEVsZW1lbnQgPSBfYWRkaXRpb25hbEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIHJldHVybnMgd2hldGhlciB0aGUgY2VsbCBpcyBoaWRkZW4gKi9cclxuICAgIHB1YmxpYyBpc0hpZGRlbjogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgY29tcGFyZXJOYW1lOiBzdHJpbmcgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgcHVibGljIHNvcnREaXJlY3Rpb246IGVudW1zLlNvcnREaXJlY3Rpb24gPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgcHVibGljIGlzU29ydGFibGU6IGJvb2xlYW4gPSB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgPSBHcmlkQ2VsbDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL2dyaWRjZWxsLnRzIl0sIm1hcHBpbmdzIjoiO0FBR0E7O0FBRUE7QUFDQTtBQUFBO0FBMkNBO0FBRUE7QUFFQTtBQUNBO0FBdENBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 281:
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./src/utility/locale/localehelper.ts ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * helper class with utilty methods for localisation of date, time and number\r\n */\r\nvar LocaleHelper = /** @class */ (function () {\r\n    function LocaleHelper() {\r\n    }\r\n    /**\r\n     * returns the localised string based on the local time zone (machine's locale).\r\n     * @param object - date/time/number to be localised.\r\n     */\r\n    LocaleHelper.toLocaleString = function (object) {\r\n        if (object == null || object === undefined) {\r\n            return '';\r\n        }\r\n        return object.toLocaleString();\r\n    };\r\n    /**\r\n     * returns the localised date string based on the local time zone (machine's locale).\r\n     * @param object - date to be localised.\r\n     */\r\n    LocaleHelper.toLocaleDateString = function (object) {\r\n        if (object == null || object === undefined) {\r\n            return '';\r\n        }\r\n        return object.toLocaleDateString(navigator.language);\r\n    };\r\n    /**\r\n     * returns the localised time string based on the local time zone (machine's locale).\r\n     * @param object - time to be localised.\r\n     */\r\n    LocaleHelper.toLocaleTimeString = function (object) {\r\n        if (object == null || object === undefined) {\r\n            return '';\r\n        }\r\n        // Remove seconds from time.\r\n        return object.toLocaleTimeString(navigator.language);\r\n    };\r\n    /**\r\n     * returns the localised date time string based on the local time zone (machine's locale).\r\n     * @param object - Date and time to be localised.\r\n     */\r\n    LocaleHelper.toLocaleDateTimeString = function (object) {\r\n        if (object == null || object === undefined) {\r\n            return '';\r\n        }\r\n        return object.toLocaleDateString(navigator.language) + ' ' +\r\n            object.toLocaleTimeString(navigator.language);\r\n    };\r\n    /**\r\n     * get the awarding body\r\n     * @param locale\r\n     */\r\n    LocaleHelper.getAwardingBodyLocale = function (locale) {\r\n        //Checking wether browser language exist in languageJson\r\n        var langExist;\r\n        langExist = false;\r\n        languageList.languages.language.map(function (lang) {\r\n            if (lang.code === locale) {\r\n                langExist = true;\r\n            }\r\n        });\r\n        var awardingBody = languageList.languages['awarding-body'];\r\n        if (!langExist) {\r\n            // If the customer doesnt support the browser language select the default language\r\n            locale = languageList.languages['default-culture'];\r\n        }\r\n        /**\r\n         * Splitting the locale to take the langauge code only.The locale conatin both language and country code,\r\n         * the corresponding locale json name contain only language code.\r\n         */\r\n        var localeCode = locale.split('-')[0];\r\n        /**\r\n         * The locale JSON file name should be in a format of awardingbody-locale.json.\r\n         * Populating the url based on te awarding body and locale selected.\r\n         */\r\n        return awardingBody.toLowerCase() + '-' + localeCode;\r\n    };\r\n    return LocaleHelper;\r\n}());\r\nmodule.exports = LocaleHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvbG9jYWxlL2xvY2FsZWhlbHBlci50cz8yOGE1Il0sInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgbGV0IGxhbmd1YWdlTGlzdDogYW55O1xyXG5cclxuLyoqXHJcbiAqIGhlbHBlciBjbGFzcyB3aXRoIHV0aWx0eSBtZXRob2RzIGZvciBsb2NhbGlzYXRpb24gb2YgZGF0ZSwgdGltZSBhbmQgbnVtYmVyXHJcbiAqL1xyXG5jbGFzcyBMb2NhbGVIZWxwZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBsb2NhbGlzZWQgc3RyaW5nIGJhc2VkIG9uIHRoZSBsb2NhbCB0aW1lIHpvbmUgKG1hY2hpbmUncyBsb2NhbGUpLlxyXG4gICAgICogQHBhcmFtIG9iamVjdCAtIGRhdGUvdGltZS9udW1iZXIgdG8gYmUgbG9jYWxpc2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHRvTG9jYWxlU3RyaW5nKG9iamVjdDogYW55KSB7XHJcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsIHx8IG9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iamVjdC50b0xvY2FsZVN0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyB0aGUgbG9jYWxpc2VkIGRhdGUgc3RyaW5nIGJhc2VkIG9uIHRoZSBsb2NhbCB0aW1lIHpvbmUgKG1hY2hpbmUncyBsb2NhbGUpLlxyXG4gICAgICogQHBhcmFtIG9iamVjdCAtIGRhdGUgdG8gYmUgbG9jYWxpc2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHRvTG9jYWxlRGF0ZVN0cmluZyhvYmplY3Q6IERhdGUpIHtcclxuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwgfHwgb2JqZWN0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqZWN0LnRvTG9jYWxlRGF0ZVN0cmluZyhuYXZpZ2F0b3IubGFuZ3VhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyB0aGUgbG9jYWxpc2VkIHRpbWUgc3RyaW5nIGJhc2VkIG9uIHRoZSBsb2NhbCB0aW1lIHpvbmUgKG1hY2hpbmUncyBsb2NhbGUpLlxyXG4gICAgICogQHBhcmFtIG9iamVjdCAtIHRpbWUgdG8gYmUgbG9jYWxpc2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHRvTG9jYWxlVGltZVN0cmluZyhvYmplY3Q6IERhdGUpIHtcclxuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwgfHwgb2JqZWN0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIHNlY29uZHMgZnJvbSB0aW1lLlxyXG4gICAgICAgIHJldHVybiBvYmplY3QudG9Mb2NhbGVUaW1lU3RyaW5nKG5hdmlnYXRvci5sYW5ndWFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBsb2NhbGlzZWQgZGF0ZSB0aW1lIHN0cmluZyBiYXNlZCBvbiB0aGUgbG9jYWwgdGltZSB6b25lIChtYWNoaW5lJ3MgbG9jYWxlKS5cclxuICAgICAqIEBwYXJhbSBvYmplY3QgLSBEYXRlIGFuZCB0aW1lIHRvIGJlIGxvY2FsaXNlZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyB0b0xvY2FsZURhdGVUaW1lU3RyaW5nKG9iamVjdDogRGF0ZSkge1xyXG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCB8fCBvYmplY3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb2JqZWN0LnRvTG9jYWxlRGF0ZVN0cmluZyhuYXZpZ2F0b3IubGFuZ3VhZ2UpICsgJyAnICtcclxuICAgICAgICAgICAgICAgb2JqZWN0LnRvTG9jYWxlVGltZVN0cmluZyhuYXZpZ2F0b3IubGFuZ3VhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2V0IHRoZSBhd2FyZGluZyBib2R5XHJcbiAgICAgKiBAcGFyYW0gbG9jYWxlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0QXdhcmRpbmdCb2R5TG9jYWxlKGxvY2FsZTogc3RyaW5nKTogc3RyaW5nIHtcclxuXHJcbiAgICAgICAgLy9DaGVja2luZyB3ZXRoZXIgYnJvd3NlciBsYW5ndWFnZSBleGlzdCBpbiBsYW5ndWFnZUpzb25cclxuICAgICAgICBsZXQgbGFuZ0V4aXN0OiBib29sZWFuO1xyXG4gICAgICAgIGxhbmdFeGlzdCA9IGZhbHNlO1xyXG4gICAgICAgIGxhbmd1YWdlTGlzdC5sYW5ndWFnZXMubGFuZ3VhZ2UubWFwKGZ1bmN0aW9uIChsYW5nOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKGxhbmcuY29kZSA9PT0gbG9jYWxlKSB7XHJcbiAgICAgICAgICAgICAgICBsYW5nRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBhd2FyZGluZ0JvZHkgPSBsYW5ndWFnZUxpc3QubGFuZ3VhZ2VzWydhd2FyZGluZy1ib2R5J107XHJcbiAgICAgICAgaWYgKCFsYW5nRXhpc3QpIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGN1c3RvbWVyIGRvZXNudCBzdXBwb3J0IHRoZSBicm93c2VyIGxhbmd1YWdlIHNlbGVjdCB0aGUgZGVmYXVsdCBsYW5ndWFnZVxyXG4gICAgICAgICAgICBsb2NhbGUgPSBsYW5ndWFnZUxpc3QubGFuZ3VhZ2VzWydkZWZhdWx0LWN1bHR1cmUnXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwbGl0dGluZyB0aGUgbG9jYWxlIHRvIHRha2UgdGhlIGxhbmdhdWdlIGNvZGUgb25seS5UaGUgbG9jYWxlIGNvbmF0aW4gYm90aCBsYW5ndWFnZSBhbmQgY291bnRyeSBjb2RlLFxyXG4gICAgICAgICAqIHRoZSBjb3JyZXNwb25kaW5nIGxvY2FsZSBqc29uIG5hbWUgY29udGFpbiBvbmx5IGxhbmd1YWdlIGNvZGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGV0IGxvY2FsZUNvZGUgPSBsb2NhbGUuc3BsaXQoJy0nKVswXTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxvY2FsZSBKU09OIGZpbGUgbmFtZSBzaG91bGQgYmUgaW4gYSBmb3JtYXQgb2YgYXdhcmRpbmdib2R5LWxvY2FsZS5qc29uLlxyXG4gICAgICAgICAqIFBvcHVsYXRpbmcgdGhlIHVybCBiYXNlZCBvbiB0ZSBhd2FyZGluZyBib2R5IGFuZCBsb2NhbGUgc2VsZWN0ZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuIGF3YXJkaW5nQm9keS50b0xvd2VyQ2FzZSgpICsgJy0nICsgbG9jYWxlQ29kZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gTG9jYWxlSGVscGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS9sb2NhbGUvbG9jYWxlaGVscGVyLnRzIl0sIm1hcHBpbmdzIjoiO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBa0ZBO0FBakZBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 282:
/* no static exports found */
/* all exports used */
/*!*******************************************************!*\
  !*** ./src/components/utility/submit/submithelper.ts ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar examinerStore = __webpack_require__(/*! ../../../stores/markerinformation/examinerstore */ 259);\r\nvar markingHelper = __webpack_require__(/*! ../../../utility/markscheme/markinghelper */ 267);\r\nvar targetHelper = __webpack_require__(/*! ../../../utility/target/targethelper */ 300);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar submitActionCreator = __webpack_require__(/*! ../../../actions/submit/submitactioncreator */ 297);\r\nvar responseActionCreator = __webpack_require__(/*! ../../../actions/response/responseactioncreator */ 257);\r\nvar marksandannotationsSaveHelper = __webpack_require__(/*! ../../../utility/marking/marksandannotationssavehelper */ 295);\r\nvar loginStore = __webpack_require__(/*! ../../../stores/login/loginstore */ 286);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../markeroperationmode/markeroperationmodefactory */ 232);\r\nvar submitStore = __webpack_require__(/*! ../../../stores/submit/submitstore */ 293);\r\nvar responseStore = __webpack_require__(/*! ../../../stores/response/responsestore */ 235);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../ecoursework/ecourseworkhelper */ 238);\r\nvar eCourseWorkFileStore = __webpack_require__(/*! ../../../stores/response/digital/ecourseworkfilestore */ 278);\r\nvar navigationStore = __webpack_require__(/*! ../../../stores/navigation/navigationstore */ 275);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\n/**\r\n * Submit helper for submitting the response from Response and worklist\r\n */\r\nvar SubmitHelper = /** @class */ (function () {\r\n    function SubmitHelper() {\r\n        this.calculateAllpagesAnnotatedLogic = false;\r\n    }\r\n    /**\r\n     * Validate submit button\r\n     * @param response\r\n     * @param markingProgress\r\n     * @param calculateAllpagesAnnotatedLogic\r\n     */\r\n    SubmitHelper.prototype.submitButtonValidate = function (response, markingProgress, calculateAllpagesAnnotatedLogic, hasBlockingExceptions) {\r\n        this.markingProgress = markingProgress;\r\n        this.calculateAllpagesAnnotatedLogic = calculateAllpagesAnnotatedLogic;\r\n        this.responseStatuses = Immutable.List();\r\n        this.responseStatuses.clear();\r\n        if (worklistStore.instance.getResponseMode === enums.ResponseMode.open) {\r\n            this.responseStatuses = this.openResponseValidation(response, hasBlockingExceptions);\r\n        }\r\n        else if (markerOperationModeFactory.operationMode.isStandardisationSetupMode) {\r\n            if (standardisationSetupStore.instance.selectedStandardisationSetupWorkList ===\r\n                enums.StandardisationSetup.ProvisionalResponse ||\r\n                standardisationSetupStore.instance.selectedStandardisationSetupWorkList ===\r\n                    enums.StandardisationSetup.UnClassifiedResponse) {\r\n                this.responseStatuses = this.openResponseValidation(response, hasBlockingExceptions);\r\n            }\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    /**\r\n     * Open live worklist validation for marking progress/submit button\r\n     * @param response\r\n     */\r\n    SubmitHelper.prototype.openResponseValidation = function (response, hasBlockingExceptions) {\r\n        response.isSubmitEnabled = false;\r\n        /** if the marking has started */\r\n        if (this.markingProgress > 0) {\r\n            /** if the marking is completed */\r\n            if (this.markingProgress === 100) {\r\n                /** taking the cc from cc helper */\r\n                // Avoid ForceAnnotationOnEachPage CC while opening single response in multiQig\r\n                // Apply ForceAnnotationOnEachPage CC for all QIGs in the whole response when it turned on for at least one QIG\r\n                var markSchemeGroupId = 0;\r\n                var markGroupId = (standardisationSetupStore.instance.selectedStandardisationSetupWorkList === enums.StandardisationSetup.None) ?\r\n                    response.markGroupId : response.esMarkGroupId;\r\n                var isAllFilesViewed = true;\r\n                if (navigationStore.instance.containerPage === enums.PageContainers.Response) {\r\n                    isAllFilesViewed = eCourseWorkFileStore.instance.checkIfAllFilesViewed(markGroupId);\r\n                }\r\n                else {\r\n                    isAllFilesViewed = response.allFilesViewed;\r\n                }\r\n                if (!responseStore.instance.isWholeResponse) {\r\n                    markSchemeGroupId = qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                }\r\n                var isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                var isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                /** if slao annotated cc is on and all pages are not annotated OR all pages annotated cc is on\r\n                 *  and all pages are not annotated if both CCs are on, all pages annotated cc has\r\n                 *  the higher priority.\r\n                 */\r\n                if (this.calculateAllpagesAnnotatedLogic === true && (isAllPagesAnnotatedCC || isAllSLAOAnnotatedCC)) {\r\n                    response.hasAllPagesAnnotated = markingHelper.isAllPageAnnotated();\r\n                }\r\n                if (standardisationSetupStore.instance.selectedStandardisationSetupWorkList ===\r\n                    enums.StandardisationSetup.UnClassifiedResponse &&\r\n                    !standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.viewDefinitives) {\r\n                    // STD UnClassified Response with No View Definitive Permission\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.NoViewDefinitivesPermisssion);\r\n                }\r\n                else if (standardisationSetupStore.instance.selectedStandardisationSetupWorkList ===\r\n                    enums.StandardisationSetup.UnClassifiedResponse && response.hasDefinitiveMark === false) {\r\n                    // STD UnClassified Response with Definitive Marking Not Started\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.definitiveMarkingNotStarted);\r\n                }\r\n                else if (standardisationSetupStore.instance.selectedStandardisationSetupWorkList ===\r\n                    enums.StandardisationSetup.UnClassifiedResponse &&\r\n                    !standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.classify) {\r\n                    // STD UnClassified Response with No permission to Classify\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.NoPermissionToClassify);\r\n                }\r\n                else if ((!isAllPagesAnnotatedCC && isAllSLAOAnnotatedCC && response.hasAllPagesAnnotated === false)\r\n                    || (isAllPagesAnnotatedCC && response.hasAllPagesAnnotated === false)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllPagesAnnotated);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    if (hasBlockingExceptions) {\r\n                        this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    }\r\n                }\r\n                else if (eCourseworkHelper.isECourseworkComponent && !isAllFilesViewed) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllFilesViewed);\r\n                    if (hasBlockingExceptions) {\r\n                        this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    }\r\n                }\r\n                else if (hasBlockingExceptions) {\r\n                    /**\r\n                     * if the marking is completed and blocking exceptions are there, show both.\r\n                     */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if (response.hasZoningExceptions) {\r\n                    /** if the marking is completed and zoning exceptions are there, show both. */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasZoningException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else {\r\n                    /**\r\n                     * if all pages annotated cc is off and if no blocking exceptions are there, show ready to submit button\r\n                     */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.readyToSubmit);\r\n                    response.isSubmitEnabled = true;\r\n                }\r\n            }\r\n            else if (hasBlockingExceptions) {\r\n                /**\r\n                 * if the marking is in progress and blocking exceptions are there, show both.\r\n                 */\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n            else if (standardisationSetupStore.instance.selectedStandardisationSetupWorkList ===\r\n                enums.StandardisationSetup.UnClassifiedResponse &&\r\n                !standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.viewDefinitives) {\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.NoViewDefinitivesPermisssion);\r\n            }\r\n            else {\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n        }\r\n        else {\r\n            //If StandardisationSetup UnClassifiedResponse and defenitive marking percentage iz Zero then show status as 0%\r\n            if (standardisationSetupStore.instance.selectedStandardisationSetupWorkList ===\r\n                enums.StandardisationSetup.UnClassifiedResponse) {\r\n                // If the logged in user has 'No View Definitive' Permission, then show status as 'Provisional'.\r\n                if (!standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.viewDefinitives) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.NoViewDefinitivesPermisssion);\r\n                }\r\n                else {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n            }\r\n            else {\r\n                // if marking not started show the same\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingNotStarted);\r\n            }\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    /**\r\n     * Save and submit response for the markgroupid\r\n     * @param markGroupId\r\n     */\r\n    SubmitHelper.saveAndSubmitResponse = function (markGroupId) {\r\n        marksandannotationsSaveHelper.triggerMarksAndAnnotationsQueueProcessing(enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Submit, function () {\r\n            SubmitHelper.submitreponse(markGroupId);\r\n        });\r\n    };\r\n    /**\r\n     * Save and classify response\r\n     * @param esMarkGroupId\r\n     * @param responseDetails\r\n     */\r\n    SubmitHelper.saveAndClassifyResponse = function (esMarkGroupId, responseDetails) {\r\n        marksandannotationsSaveHelper.triggerMarksAndAnnotationsQueueProcessing(enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Classify, function () {\r\n            standardisationActionCreator.classifyResponse(responseDetails, navigationStore.instance.containerPage);\r\n        });\r\n    };\r\n    /**\r\n     * Save and classify response\r\n     * @param esMarkGroupId\r\n     * @param responseDetails\r\n     */\r\n    SubmitHelper.saveAndShareAndClassifyResponse = function (submitResponseArgument, sharedFromMarkScheme, selectedDisplayId) {\r\n        if (sharedFromMarkScheme === void 0) { sharedFromMarkScheme = false; }\r\n        if (selectedDisplayId === void 0) { selectedDisplayId = undefined; }\r\n        marksandannotationsSaveHelper.triggerMarksAndAnnotationsQueueProcessing(enums.SaveMarksAndAnnotationsProcessingTriggerPoint.ShareAndClassify, function () {\r\n            submitActionCreator.shareAndClassifyResponse(submitResponseArgument, sharedFromMarkScheme, selectedDisplayId);\r\n        });\r\n    };\r\n    /**\r\n     *  Verify if marks and annotations can be cleared or not\r\n     *\r\n     *  In Case of Blind Practice Marking, standardisation marking, isQualityFeedbackOutstanding of seed,\r\n     *  the definitive marks are not retrieved from gateway for open responses\r\n     *  So after submission of a practice response we need to clear the existing marks and annotation so that the\r\n     *  Marks and annotations will be retrieved from gateway. The same logic is done in worklist as well\r\n     *  @param markGroupId\r\n     */\r\n    SubmitHelper.isClearMarksAndAnnotations = function (markGroupId) {\r\n        // check isBlindPracticeMarkingOn CC is turned On \r\n        var isBlindPracticeMarkingOn = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.BlindPracticeMarking).toLowerCase() === 'true';\r\n        // check isShowStandardisationDefinitiveMarks CC is turned On\r\n        var isShowStandardisationDefinitiveMarks = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ShowStandardisationDefinitiveMarks, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId).toLowerCase() === 'true';\r\n        // check AutomaticQualityFeedback CC is turned ON\r\n        var isAutomaticQualityFeedback = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.AutomaticQualityFeedback, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId).toLowerCase() === 'true';\r\n        // check whether the current response type is standardisation/secondstandardisation marking \r\n        // and corresponding cc is ON for showing  previous definitive mark after submitting.\r\n        var isStandardisation = (worklistStore.instance.currentWorklistType === enums.WorklistType.standardisation\r\n            || worklistStore.instance.currentWorklistType === enums.WorklistType.secondstandardisation)\r\n            && isShowStandardisationDefinitiveMarks ? true : false;\r\n        // check whether the current response type is Practice and corresponding cc is ON for showing\r\n        // previous definitive mark after submitting.\r\n        var isPractice = worklistStore.instance.currentWorklistType === enums.WorklistType.practice\r\n            && isBlindPracticeMarkingOn ? true : false;\r\n        var isSeed = false;\r\n        var seedCollection = submitStore.instance.getSubmitResponseReturn.seedCollection[markGroupId];\r\n        if (seedCollection) {\r\n            // check whether the submitted response is seed or not and if Quality feedback CC is ON or not\r\n            isSeed = isAutomaticQualityFeedback && seedCollection.seedType !== enums.SeedType.None;\r\n        }\r\n        return isStandardisation || isPractice || isSeed;\r\n    };\r\n    /**\r\n     * Submit response\r\n     * @param markGroupId\r\n     */\r\n    SubmitHelper.submitreponse = function (markGroupId) {\r\n        var submitResponseArgument;\r\n        var currentWorklistType;\r\n        var getRemarkRequestType;\r\n        var isStdSetupMode;\r\n        /* Submitting  responses initiated */\r\n        /* Select the mark group list based on the current response mode */\r\n        var markGroupIdList = new Array();\r\n        markGroupIdList.push(markGroupId);\r\n        if (responseStore.instance.isWholeResponse) {\r\n            // If a whole response, retrieve all the related markGroupIds\r\n            var relatedMarkGroupIds = worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(markGroupId);\r\n            // Update related markGroupIds for whole response submission from mark scheme panel\r\n            // For Atypical, the isWholeResponse flag is true always, so also checking the retrieved list length\r\n            if (relatedMarkGroupIds.length > 0) {\r\n                relatedMarkGroupIds.map(function (relatedMarkGroupId) {\r\n                    markGroupIdList.push(relatedMarkGroupId);\r\n                });\r\n            }\r\n        }\r\n        /* mapping values on submit argument*/\r\n        submitResponseArgument = {\r\n            markGroupIds: standardisationSetupStore.instance.selectedStandardisationSetupWorkList ===\r\n                enums.StandardisationSetup.ProvisionalResponse ? [markGroupId] : markGroupIdList,\r\n            markingMode: standardisationSetupStore.instance.selectedStandardisationSetupWorkList ===\r\n                enums.StandardisationSetup.ProvisionalResponse ? enums.MarkingMode.PreStandardisation\r\n                : targetHelper.getSelectedQigMarkingMode(),\r\n            examinerRoleId: qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId,\r\n            markSchemeGroupId: qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId,\r\n            examinerApproval: examinerStore.instance.getMarkerInformation.approvalStatus,\r\n            isAdminRemarker: loginStore.instance.isAdminRemarker\r\n        };\r\n        if (standardisationSetupStore.instance.selectedStandardisationSetupWorkList ===\r\n            enums.StandardisationSetup.ProvisionalResponse) {\r\n            currentWorklistType = enums.WorklistType.none;\r\n            getRemarkRequestType = enums.RemarkRequestType.Unknown;\r\n            isStdSetupMode = true;\r\n        }\r\n        else {\r\n            currentWorklistType = worklistStore.instance.currentWorklistType;\r\n            getRemarkRequestType = worklistStore.instance.getRemarkRequestType;\r\n            isStdSetupMode = false;\r\n        }\r\n        //let remarkRequestType: enums.RemarkRequestType = this.getRemarkRequestType(.worklistType);\r\n        /* calling to send data to server */\r\n        submitActionCreator.submitResponse(submitResponseArgument, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, currentWorklistType, getRemarkRequestType, true, responseStore.instance.selectedDisplayId.toString(), null, null, isStdSetupMode);\r\n    };\r\n    /**\r\n     * Clear the marks and Annotation for responses so that the marks will be reloaded\r\n     * @param submittedMarkGroupIds\r\n     */\r\n    SubmitHelper.clearMarksAndAnnotations = function (submittedMarkGroupIds) {\r\n        // check whether we need to clear marks and annoatation for pracice and standazation response.\r\n        if (submittedMarkGroupIds !== undefined) {\r\n            for (var _i = 0, submittedMarkGroupIds_1 = submittedMarkGroupIds; _i < submittedMarkGroupIds_1.length; _i++) {\r\n                var markGroupId = submittedMarkGroupIds_1[_i];\r\n                // Verify if marks and annotations of the submitted response can be cleared\r\n                if (SubmitHelper.isClearMarksAndAnnotations(markGroupId)) {\r\n                    // Calling the action creator to clear the marks and annotations\r\n                    responseActionCreator.clearMarksAndAnnotations(markGroupId);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return SubmitHelper;\r\n}());\r\nmodule.exports = SubmitHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 283:
/* no static exports found */
/* all exports used */
/*!*********************************************************!*\
  !*** ./src/components/utility/message/messagehelper.ts ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\r\nvar messagestore = __webpack_require__(/*! ../../../stores/message/messagestore */ 240);\r\nvar groupHelper = __webpack_require__(/*! ../../../utility/grouping/grouphelper */ 430);\r\nvar grouperList = __webpack_require__(/*! ../../../utility/grouping/groupingbase/grouperlist */ 427);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\nvar localehelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\nvar stringFormatHelper = __webpack_require__(/*! ../../../utility/stringformat/stringformathelper */ 250);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar messageEditorConstants = __webpack_require__(/*! ../messageeditorconstants */ 325);\r\nvar stringHelper = __webpack_require__(/*! ../../../utility/generic/stringhelper */ 254);\r\nvar htmlUtilities = __webpack_require__(/*! ../../../utility/generic/htmlutilities */ 243);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../markeroperationmode/markeroperationmodefactory */ 232);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar MessageHelper = /** @class */ (function () {\r\n    function MessageHelper() {\r\n    }\r\n    /**\r\n     * Get the Header to display and the related messges\r\n     * @param messages\r\n     */\r\n    MessageHelper.getGroupedMessageObject = function (messages, expandOrCollapseDetails) {\r\n        var _this = this;\r\n        // To store the messages after the grouping and sorting\r\n        var messageList = Immutable.List();\r\n        // Get the messages grouped by QIG\r\n        var groupedMessages = groupHelper.group(messages, grouperList.MessageQigGrouper, enums.GroupByField.qig);\r\n        // Get the key seq\r\n        var groupedKeys = groupedMessages.keySeq();\r\n        // Create the return object\r\n        var returnObj = [];\r\n        // Loop through the keys and find the list of messages for the group.\r\n        groupedKeys.forEach(function (qigId) {\r\n            // Get the messages for the group.\r\n            var currentMessageGroup = groupedMessages.get(qigId);\r\n            // Clear the collection, In each group.\r\n            var messages = [];\r\n            // Get the each messages for the group.\r\n            currentMessageGroup.map(function (message) {\r\n                if (message.status === enums.MessageReadStatus.New && messagestore.instance.isMessageRead(message.examinerMessageId)) {\r\n                    message.status = enums.MessageReadStatus.Read;\r\n                }\r\n                messages.push(message);\r\n            });\r\n            // Get the awarding body name format\r\n            var nameToDisplay = MessageHelper.getDisplayText(messages[0]);\r\n            var messageFolderType = messages[0].messageFolderType;\r\n            // Create an object to store messages\r\n            var groupedObj = {\r\n                qigId: parseInt(qigId),\r\n                isOpen: _this.isQigOpen(parseInt(qigId), messageFolderType, expandOrCollapseDetails),\r\n                textToDisplay: nameToDisplay,\r\n                messages: messages,\r\n                unReadMessages: messages.filter(function (x) {\r\n                    return x.status === enums.MessageReadStatus.New && !messagestore.instance.isMessageRead(x.examinerMessageId);\r\n                }).length\r\n            };\r\n            returnObj.push(groupedObj);\r\n        });\r\n        // Sort the objects based on the display header.\r\n        var getGroupedMessageObject = returnObj.sort(function (obj1, obj2) {\r\n            return obj1.textToDisplay.localeCompare(obj2.textToDisplay);\r\n        });\r\n        // Get the messages as in the order of displaying in the UI\r\n        getGroupedMessageObject.forEach(function (messageObject) {\r\n            messageList = Immutable.List(messageList.concat(messageObject.messages));\r\n        });\r\n        var messageGroupDetails = {\r\n            // Stores the Grouped Object along with those messages\r\n            MessageGroupObjects: getGroupedMessageObject,\r\n            // Store all messages for the UI\r\n            messages: messageList\r\n        };\r\n        return messageGroupDetails;\r\n    };\r\n    /**\r\n     * Returns whether a particular qig is open or not\r\n     * @param expandOrCollapseDetails\r\n     */\r\n    MessageHelper.isQigOpen = function (qigId, messageFolderType, expandOrCollapseDetails) {\r\n        return expandOrCollapseDetails ? expandOrCollapseDetails.get(qigId, true) : true;\r\n    };\r\n    /**\r\n     * Get the time style for the Date\r\n     * @param timeToDisplay\r\n     * @param todayTextConversionRequired : for deciding Today text conversion\r\n     */\r\n    MessageHelper.getDateToDisplay = function (timeToDisplay, todayTextConversionRequired) {\r\n        if (todayTextConversionRequired === void 0) { todayTextConversionRequired = true; }\r\n        var timeToDisplayDate = new Date(timeToDisplay);\r\n        var todaysDate = new Date();\r\n        var time = localehelper.toLocaleTimeString(new Date(timeToDisplay.toString()));\r\n        // call setHours to take the time out of the comparison\r\n        if ((timeToDisplayDate.setHours(0, 0, 0, 0) === todaysDate.setHours(0, 0, 0, 0)) && todayTextConversionRequired) {\r\n            // Date equals today's date. Display date feild as Today.\r\n            return localeStore.instance.TranslateText('messaging.message-lists.message-detail.date-today') + ' ' + time;\r\n        }\r\n        else {\r\n            return localehelper.toLocaleDateString(new Date(timeToDisplay)) + ' ' + time;\r\n        }\r\n    };\r\n    /**\r\n     * Get the Display Header for the Group Header.\r\n     * @param message\r\n     */\r\n    MessageHelper.getDisplayText = function (message) {\r\n        var msg = messagestore.instance.messagesMarkSchemes;\r\n        if (msg) {\r\n            var messageList = msg.filter(function (messages) { return messages.markSchemeGroupId === message.markSchemeGroupId; });\r\n            {\r\n                return stringFormatHelper.formatAwardingBodyQIG(messageList.first().markSchemeGroupName, messageList.first().assessmentCode, messageList.first().sessionName, messageList.first().componentId, messageList.first().questionPaperName, messageList.first().assessmentName, messageList.first().componentName, stringFormatHelper.getOverviewQIGNameFormat());\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Return the Mark Scheme Group Name\r\n     * @param message\r\n     */\r\n    MessageHelper.getMarkSchemeGroupName = function (message) {\r\n        var msg = messagestore.instance.messagesMarkSchemes;\r\n        if (msg) {\r\n            return msg.filter(function (messages) { return messages.markSchemeGroupId === message.markSchemeGroupId; }).\r\n                first().markSchemeGroupName;\r\n        }\r\n    };\r\n    /**\r\n     * Used to create the MessageOrExceptionLinkedItems based on the messages\r\n     * @param messages\r\n     */\r\n    MessageHelper.getMessageLinkedItems = function (messages) {\r\n        var messageOrExceptionLinkedItems = [];\r\n        var items = messages.forEach(function (message) {\r\n            messageOrExceptionLinkedItems.push({\r\n                itemId: message.examinerMessageId,\r\n                senderOrItem: message.toTeam ?\r\n                    localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.entire-team') :\r\n                    MessageHelper.appendExaminer(message),\r\n                priorityOrStatus: message.priorityName,\r\n                subjectOrType: message.subject,\r\n                timeToDisplay: message.displayDate,\r\n                isUnreadOrUnactioned: message.status === enums.MessageReadStatus.New &&\r\n                    !messagestore.instance.isMessageRead(message.examinerMessageId)\r\n            });\r\n        });\r\n        return Immutable.List(messageOrExceptionLinkedItems);\r\n    };\r\n    /**\r\n     * append examiners\r\n     */\r\n    MessageHelper.appendExaminer = function (message) {\r\n        var examiners = '';\r\n        if (message && message.toExaminerDetails != null) {\r\n            message.toExaminerDetails.map(function (item) {\r\n                examiners += item.fullName + ';';\r\n            });\r\n            // removing last item semicolon\r\n            return examiners.replace(/;$/, '');\r\n        }\r\n        else {\r\n            examiners = message.examinerDetails.fullName;\r\n        }\r\n        return examiners;\r\n    };\r\n    /**\r\n     * This method will returns the message content based on the template name\r\n     * @param templateName - template name\r\n     * @param messageBody - message content\r\n     */\r\n    MessageHelper.getMessageContent = function (templateName, messageFrom, date, messageBody) {\r\n        var template;\r\n        switch (templateName) {\r\n            case enums.MessageType.InboxReply:\r\n            case enums.MessageType.ResponseReply:\r\n                template = stringHelper.format(localeStore.instance.TranslateText('messaging.compose-message.new-message-templates.reply'), [messageEditorConstants.TINYMCE_DEFAULT_FONT, messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE,\r\n                    this.getDateToDisplay(date, false), messageFrom, messageBody]);\r\n                break;\r\n            case enums.MessageType.InboxForward:\r\n            case enums.MessageType.ResponseForward:\r\n                template = stringHelper.format(localeStore.instance.TranslateText('messaging.compose-message.new-message-templates.forward'), [messageEditorConstants.TINYMCE_DEFAULT_FONT, messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE,\r\n                    this.getDateToDisplay(date, false), messageFrom, messageBody]);\r\n                break;\r\n            case enums.MessageType.ResponseCompose:\r\n            case enums.MessageType.WorklistCompose:\r\n            case enums.MessageType.InboxCompose:\r\n            case enums.MessageType.TeamCompose:\r\n                template = stringHelper.format(localeStore.instance.TranslateText('messaging.compose-message.new-message-templates.new'), [messageEditorConstants.TINYMCE_DEFAULT_FONT, messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE]);\r\n                break;\r\n        }\r\n        return template;\r\n    };\r\n    /**\r\n     * This method will return the Menu Action items needed based on the folder type\r\n     * @param folderType\r\n     * @param messageActions: an array of message actions\r\n     */\r\n    MessageHelper.getMessageMenuActionItems = function (folderType, messageActions) {\r\n        var _this = this;\r\n        var messageMenuActionItems = [];\r\n        switch (folderType) {\r\n            case enums.MessageFolderType.Inbox:\r\n                if (messageActions && messageActions.length > 0) {\r\n                    messageActions.map(function (x) {\r\n                        var actionItems = _this.messageActionItems(x);\r\n                        if (actionItems) {\r\n                            messageMenuActionItems.push(actionItems);\r\n                        }\r\n                    });\r\n                }\r\n        }\r\n        return messageMenuActionItems;\r\n    };\r\n    /**\r\n     * This method will return the localised message string based on message type\r\n     */\r\n    MessageHelper.getMessageHeader = function (messageType) {\r\n        var messageHeader;\r\n        switch (messageType) {\r\n            case enums.MessageType.InboxCompose:\r\n            case enums.MessageType.WorklistCompose:\r\n            case enums.MessageType.ResponseCompose:\r\n            case enums.MessageType.TeamCompose:\r\n                messageHeader = localeStore.instance.TranslateText('messaging.compose-message.new-message-header');\r\n                break;\r\n            case enums.MessageType.InboxForward:\r\n            case enums.MessageType.ResponseForward:\r\n                messageHeader = localeStore.instance.TranslateText('messaging.compose-message.forward-header');\r\n                break;\r\n            case enums.MessageType.InboxReply:\r\n            case enums.MessageType.ResponseReply:\r\n                messageHeader = localeStore.instance.TranslateText('messaging.compose-message.reply-header');\r\n                break;\r\n            case enums.MessageType.ResponseDetails:\r\n                messageHeader = localeStore.instance.TranslateText('marking.response.message-panel.header');\r\n        }\r\n        return messageHeader;\r\n    };\r\n    /**\r\n     * This method will returns the subject string\r\n     * @param messageType\r\n     * @param subject\r\n     */\r\n    MessageHelper.getSubjectContent = function (messageType, subject) {\r\n        var subjectText;\r\n        var subjectPrefix;\r\n        switch (messageType) {\r\n            case enums.MessageType.InboxCompose:\r\n                subjectText = subject;\r\n                break;\r\n            case enums.MessageType.InboxForward:\r\n            case enums.MessageType.ResponseForward:\r\n                subjectPrefix = localeStore.instance.TranslateText('messaging.compose-message.forward-prefix');\r\n                subjectText = subject.indexOf(subjectPrefix) === -1 ? subjectPrefix + ' ' + subject : subject;\r\n                break;\r\n            case enums.MessageType.InboxReply:\r\n            case enums.MessageType.ResponseReply:\r\n                subjectPrefix = localeStore.instance.TranslateText('messaging.compose-message.reply-prefix');\r\n                subjectText = subject.indexOf(subjectPrefix) === -1 ? subjectPrefix + ' ' + subject : subject;\r\n                break;\r\n        }\r\n        return subjectText;\r\n    };\r\n    Object.defineProperty(MessageHelper, \"getCreateNewMessageText\", {\r\n        /**\r\n         * Get the Create new text for the component.\r\n         */\r\n        get: function () {\r\n            return localeStore.instance.TranslateText('marking.response.message-list-panel.create-new-message');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * This method will return the Menu Action item based on the action parameter\r\n     * @param messageAction\r\n     */\r\n    MessageHelper.messageActionItems = function (messageAction) {\r\n        switch (messageAction) {\r\n            case enums.MessageAction.Reply:\r\n                return ({\r\n                    id: enums.MessageAction.Reply,\r\n                    icon: 'reply-icon',\r\n                    name: localeStore.instance.TranslateText('messaging.message-lists.message-detail.reply-button')\r\n                });\r\n            case enums.MessageAction.Forward:\r\n                if (!markerOperationModeFactory.operationMode.isForwardButtonHidden) {\r\n                    return ({\r\n                        id: enums.MessageAction.Forward,\r\n                        icon: 'forward-icon',\r\n                        name: localeStore.instance.TranslateText('messaging.message-lists.message-detail.forward-button')\r\n                    });\r\n                }\r\n                break;\r\n            case enums.MessageAction.Delete:\r\n                return ({\r\n                    id: enums.MessageAction.Delete,\r\n                    icon: 'delete-icon-small',\r\n                    name: localeStore.instance.TranslateText('messaging.message-lists.message-detail.delete-button')\r\n                });\r\n        }\r\n    };\r\n    /**\r\n     * This method will update the IFrame content with message details\r\n     * @param o\r\n     * @param e\r\n     */\r\n    MessageHelper.addIFrameForMessageDetails = function (o, e) {\r\n        var timeout = 0;\r\n        // add script to init mouse click event in parent window for any 'click' in current window\r\n        var scriptBlock = 'window.addEventListener(\\'click\\', function() { parent.initMouseClickEvent(); });';\r\n        var headTagContent = '<style type=\"text/css\"> p,body{margin:0;padding:0;}</style>';\r\n        if (htmlUtilities.isIPadDevice && htmlUtilities.getUserDevice().browser === 'Safari') {\r\n            //include script to block double tap and pinch zoom in iPad safari\r\n            scriptBlock +=\r\n                'window.addEventListener(\\'touchend\\', blockDoubleTapZoom);' +\r\n                    'window.addEventListener(\\'touchstart\\', blockPinchToZoom);' +\r\n                    //block double tap zoom\r\n                    'let lastTap = 0;' +\r\n                    'function blockDoubleTapZoom ( e ) {' +\r\n                    'let currentTime = new Date().getTime();' +\r\n                    'let tapLength = currentTime - lastTap;' +\r\n                    'if (tapLength < 500 && tapLength > 0) {' +\r\n                    'e.preventDefault();}' +\r\n                    'lastTap = currentTime;' +\r\n                    //init mouse click event\r\n                    'parent.initMouseClickEvent(); }' +\r\n                    //block pinch zoom\r\n                    'function blockPinchToZoom ( e ) {' +\r\n                    'if (e.touches.length > 1) {' +\r\n                    'e.preventDefault();}' +\r\n                    '}';\r\n        }\r\n        else {\r\n            //incluse script to init mouse click event in parent window for any 'touch' in current window\r\n            scriptBlock +=\r\n                'window.addEventListener(\\'touchend\\', function() { parent.initMouseClickEvent(); });';\r\n        }\r\n        var content = e.getContent().trim() +\r\n            '<script>' + scriptBlock + '</script >';\r\n        // put a timeout of 0, otherwise message details are not rendering on first message item click\r\n        if (!htmlUtilities.isTabletOrMobileDevice && htmlUtilities.getUserDevice().browser === 'Firefox') {\r\n            timeout = 50;\r\n        }\r\n        setTimeout(function () {\r\n            $('#msg-iframe_ifr').contents().find('head').html(headTagContent);\r\n            $('#msg-iframe_ifr').contents().find('body').html(content);\r\n        }, timeout);\r\n    };\r\n    /**\r\n     * Returns a boolean indicating whether the message panel is edited.\r\n     */\r\n    MessageHelper.isMessagePanelEdited = function (messageType, messageToFieldValues, messageToFieldIds) {\r\n        if (messagestore.instance.isMessagePanelActive) {\r\n            var currentActiveEditorId = tinymce.activeEditor.id;\r\n            var activeEditor = tinymce.get(MessageHelper.messageEditorId);\r\n            if (messageType === enums.MessageType.InboxCompose || messageType === enums.MessageType.InboxForward ||\r\n                messageType === enums.MessageType.InboxReply) {\r\n                return MessageHelper.messageSubject && MessageHelper.messageSubject.trim().length > 0 ||\r\n                    activeEditor.getContent({ format: 'text' }).trim().length > 0 ||\r\n                    ((messageToFieldValues && messageToFieldValues.length > 0) &&\r\n                        (messageToFieldIds && messageToFieldIds.length > 0));\r\n            }\r\n            else if (messageType === enums.MessageType.ResponseCompose\r\n                || messageType === enums.MessageType.WorklistCompose || messageType === enums.MessageType.ResponseReply\r\n                || messageType === enums.MessageType.ResponseForward || messageType === enums.MessageType.TeamCompose) {\r\n                return MessageHelper.messageSubject && MessageHelper.messageSubject.trim().length > 0 ||\r\n                    activeEditor.getContent({ format: 'text' }).trim().length > 0;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This method revamps the marking mode naming for display in message\r\n     * @param markingMode\r\n     * @param isElectronicStandardisationTeamMember\r\n     */\r\n    MessageHelper.getMarkingModeText = function (markingMode, isElectronicStandardisationTeamMember) {\r\n        if (markingMode === enums.MarkingMode.ES_TeamApproval) {\r\n            if (isElectronicStandardisationTeamMember) {\r\n                return ((localeStore.instance.TranslateText('marking.worklist.response-data.stm-standardisation-response-title')) + ' ');\r\n            }\r\n            else {\r\n                return ((localeStore.instance.TranslateText('marking.worklist.response-data.second-standardisation-response-title')) + ' ');\r\n            }\r\n        }\r\n        else if (markingMode === enums.MarkingMode.Practice) {\r\n            return ((localeStore.instance.TranslateText('marking.worklist.response-data.practice-response-title')) + ' ');\r\n        }\r\n        else if (markingMode === enums.MarkingMode.Approval) {\r\n            return ((localeStore.instance.TranslateText('marking.worklist.response-data.standardisation-response-title')) + ' ');\r\n        }\r\n        else if (markingMode === enums.MarkingMode.ES_TeamApproval) {\r\n            return ((localeStore.instance.TranslateText('marking.worklist.response-data.second-standardisation-response-title')) + ' ');\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    };\r\n    MessageHelper._isPasteEnabled = false;\r\n    MessageHelper.messageEditorId = 'msg-tinymce-editor';\r\n    /**\r\n     * This method will return the selected item for priority dropdown based on priority name\r\n     */\r\n    MessageHelper.getPriorityDropDownSelectedItem = function (priorityName) {\r\n        if (priorityName === enums.getEnumString(enums.MessagePriority, enums.MessagePriority.Standard)) {\r\n            return enums.MessagePriority.Standard;\r\n        }\r\n        else if (priorityName === enums.getEnumString(enums.MessagePriority, enums.MessagePriority.Important)) {\r\n            return enums.MessagePriority.Important;\r\n        }\r\n        else if (priorityName === enums.getEnumString(enums.MessagePriority, enums.MessagePriority.Mandatory)) {\r\n            // When replying and forwarding a  mandatory message,priority need to be reset to standard.\r\n            return enums.MessagePriority.Standard;\r\n        }\r\n    };\r\n    /**\r\n     * returns the navigate to default options for different message types.\r\n     */\r\n    MessageHelper.getNavigateAwayType = function (messageType) {\r\n        var navigateTo = enums.SaveAndNavigate.none;\r\n        switch (messageType) {\r\n            case enums.MessageType.ResponseReply:\r\n            case enums.MessageType.ResponseForward:\r\n            case enums.MessageType.ResponseCompose:\r\n                navigateTo = enums.SaveAndNavigate.toNewResponseMessageCompose;\r\n                break;\r\n        }\r\n        return navigateTo;\r\n    };\r\n    /**\r\n     * Returns true if focus needs to be set in tinymce editor else return false\r\n     */\r\n    MessageHelper.hasFocus = function (messageType) {\r\n        return (messageType === enums.MessageType.InboxForward || messageType === enums.MessageType.InboxReply\r\n            || messageType === enums.MessageType.ResponseReply || messageType === enums.MessageType.ResponseForward);\r\n    };\r\n    MessageHelper.addInitMouseClickEventScriptBlock = function () {\r\n        // we have to close opened priority drop down and user options (logout options) while clicking on outside that. iframe was\r\n        // preventing the click event to propagate outside so closing of those things are not happening while clicking on iframe.\r\n        // dynamically add script to create mouse event\r\n        var scriptElement = document.getElementById('init_mouse_click_event_script_block');\r\n        var isScriptElementPresent = false;\r\n        if (scriptElement != null) {\r\n            isScriptElementPresent = true;\r\n        }\r\n        else {\r\n            scriptElement = document.createElement('script');\r\n            scriptElement.id = 'init_mouse_click_event_script_block';\r\n            scriptElement.innerText =\r\n                'function initMouseClickEvent() {' +\r\n                    'let event = document.createEvent(\\'MouseEvents\\');' +\r\n                    'event.initMouseEvent(\\'click\\', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);' +\r\n                    'window.dispatchEvent(event); }';\r\n        }\r\n        if (!isScriptElementPresent) {\r\n            document.body.appendChild(scriptElement);\r\n        }\r\n    };\r\n    MessageHelper.removeInitMouseClickEventScriptBlock = function () {\r\n        var scriptElement = document.getElementById('init_mouse_click_event_script_block');\r\n        if (htmlUtilities.getUserDevice().browser !== 'IE') {\r\n            document.body.removeChild(scriptElement);\r\n        }\r\n    };\r\n    MessageHelper.setPasteEnabledAction = function (isPasteEnabled) {\r\n        MessageHelper._isPasteEnabled = isPasteEnabled;\r\n    };\r\n    /**\r\n     * Method which gets the selected QIG's name based on the Awarding Body specific QIG Naming format\r\n     */\r\n    MessageHelper.getCurrentQIGName = function () {\r\n        // Calling the helper method to format the QIG Name\r\n        if (qigStore.instance.selectedQIGForMarkerOperation !== undefined) {\r\n            var selectedQig = qigStore.instance.selectedQIGForMarkerOperation;\r\n            return stringFormatHelper.formatAwardingBodyQIG(selectedQig.markSchemeGroupName, selectedQig.assessmentCode, selectedQig.sessionName, selectedQig.componentId, selectedQig.questionPaperName, selectedQig.assessmentName, selectedQig.componentName, stringFormatHelper.getOverviewQIGNameFormat());\r\n        }\r\n        // If a QIG is not selected, return the default text to be shown on the drop down\r\n        return localeStore.instance.TranslateText('messaging.compose-message.please-select-qig-placeholder');\r\n    };\r\n    /**\r\n     * Handles changes in the message panel subject section.\r\n     * @param e\r\n     */\r\n    MessageHelper.handleSubjectChange = function (subject) {\r\n        MessageHelper.messageSubject = subject;\r\n    };\r\n    return MessageHelper;\r\n}());\r\nmodule.exports = MessageHelper;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 42)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 292:
/* no static exports found */
/* all exports used */
/*!***************************************************************************************************!*\
  !*** ./src/components/utility/grid/standardisationsetuphelpers/standardisationsetuphelperbase.ts ***!
  \***************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar gridRow = __webpack_require__(/*! ../../../utility/grid/gridrow */ 296);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar localeStore = __webpack_require__(/*! ../../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar GenericComponentWrapper = __webpack_require__(/*! ../genericcomponentwrapper */ 365);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar ColumnHeader = __webpack_require__(/*! ../../../worklist/shared/columnheader */ 329);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar jsonRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar GenericTextColumn = __webpack_require__(/*! ../../../worklist/shared/generictextcolumn */ 387);\r\nvar comparerList = __webpack_require__(/*! ../../../../utility/sorting/sortbase/comparerlist */ 262);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../markeroperationmode/markeroperationmodefactory */ 232);\r\nvar immutable = __webpack_require__(/*! immutable */ 40);\r\nvar standardisationSetupGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/standardisationsetupgridcolumns.json */ 273);\r\nvar blueBannerMessage = __webpack_require__(/*! ../../../standardisationsetup/shared/bluebanner */ 401);\r\nvar totalMark = __webpack_require__(/*! ../../../worklist/shared/totalmarkdetail */ 391);\r\nvar TagList = __webpack_require__(/*! ../../../response/responsescreen/taglist */ 313);\r\nvar stdResponseId = __webpack_require__(/*! ../../../standardisationsetup/shared/standardisationresponseid */ 406);\r\nvar LinkedMessageIndicator = __webpack_require__(/*! ../../../worklist/shared/linkedmessageindicator */ 389);\r\nvar LastUpdatedColumn = __webpack_require__(/*! ../../../worklist/shared/lastupdatedcolumn */ 388);\r\nvar scriptidgridelement = __webpack_require__(/*! ../../../standardisationsetup/shared/scriptidgridelement */ 403);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar ecourseWorkHelper = __webpack_require__(/*! ../../ecoursework/ecourseworkhelper */ 238);\r\nvar RigOrder = __webpack_require__(/*! ../../../standardisationsetup/shared/rigorder */ 402);\r\nvar tagStore = __webpack_require__(/*! ../../../../stores/tags/tagstore */ 331);\r\nvar slaoAnnotationIndicator = __webpack_require__(/*! ../../../worklist/shared/slaoannotationindicator */ 371);\r\nvar MarkingProgress = __webpack_require__(/*! ../../../worklist/shared/markingprogress */ 369);\r\nvar marksColumn = __webpack_require__(/*! ../../../worklist/shared/markscolumn */ 415);\r\nvar allPageAnnotationIndicator = __webpack_require__(/*! ../../../worklist/shared/allpageannotationindicator */ 368);\r\nvar allFilesNotViewedIndicator = __webpack_require__(/*! ../../../worklist/shared/allfilesnotviewedindicator */ 386);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../ecoursework/ecourseworkhelper */ 238);\r\nvar submitHelper = __webpack_require__(/*! ../../submit/submithelper */ 282);\r\nvar DeclassifyButton = __webpack_require__(/*! ../../../standardisationsetup/declassifybutton */ 400);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\nvar stringFormatHelper = __webpack_require__(/*! ../../../../utility/stringformat/stringformathelper */ 250);\r\nvar genericDate = __webpack_require__(/*! ../../../worklist/shared/genericdate */ 315);\r\nvar xmlHelper = __webpack_require__(/*! ../../../../utility/generic/xmlhelper */ 379);\r\nvar sortHelper = __webpack_require__(/*! ../../../../utility/sorting/sorthelper */ 272);\r\nvar sharedResponseIndicatorElement = __webpack_require__(/*! ../../../standardisationsetup/shared/sharedresponseindicator */ 405);\r\n/**\r\n * class for WorkList Helper implementation\r\n */\r\nvar StandardisationSetupHelperBase = /** @class */ (function () {\r\n    function StandardisationSetupHelperBase() {\r\n        var _this = this;\r\n        this._dateLengthInPixel = 0;\r\n        this._isNonNumeric = false;\r\n        /**\r\n         * returns the blue banner element\r\n         * @param selectedWorkList\r\n         * @param targetCount\r\n         * @param isESTeamMember\r\n         * @param selectedSession\r\n         */\r\n        this.getBlueBannerForTargets = function (selectedWorkList, targetCount, isESTeamMember, selectedSession) {\r\n            var componentProps;\r\n            componentProps = {\r\n                key: selectedWorkList + '_blueBanner',\r\n                blueBannerMessageKey: _this.getRightContainerBlueBannerKey(selectedWorkList, targetCount, isESTeamMember, selectedSession)\r\n            };\r\n            return React.createElement(blueBannerMessage, componentProps);\r\n        };\r\n        /**\r\n         * returns the blue banner message key for resource file\r\n         * @param selectedWorkList\r\n         * @param targetCount\r\n         * @param isESTeamMember\r\n         * @param selectedSession\r\n         */\r\n        this.getRightContainerBlueBannerKey = function (selectedWorkList, targetCount, isESTeamMember, selectedSession) {\r\n            if (isESTeamMember === void 0) { isESTeamMember = false; }\r\n            var key;\r\n            switch (selectedWorkList) {\r\n                case enums.StandardisationSetup.None:\r\n                    key = 'standardisation-setup.right-container.select-response-bluebanner-message';\r\n                    break;\r\n                case enums.StandardisationSetup.SelectResponse:\r\n                    if (selectedSession !== null && selectedSession !== undefined\r\n                        && selectedSession === enums.StandardisationSessionTab.PreviousSession) {\r\n                        targetCount === 0 ?\r\n                            key = 'standardisation-setup.right-container.select-response-previouse-session-empty-message' :\r\n                            key = 'standardisation-setup.right-container.select-response-previouse-session-default-message';\r\n                    }\r\n                    else {\r\n                        key = 'standardisation-setup.right-container.select-response-bluebanner-message';\r\n                    }\r\n                    break;\r\n                case enums.StandardisationSetup.ProvisionalResponse:\r\n                    key = targetCount > 0 ? 'standardisation-setup.right-container.provisional-bluebanner-message' :\r\n                        'standardisation-setup.right-container.empty-responses-provisional-bluebanner-message';\r\n                    break;\r\n                case enums.StandardisationSetup.UnClassifiedResponse:\r\n                    var isSeedVisible = standardisationSetupStore.instance.stdSetupPermissionCCData ?\r\n                        standardisationSetupStore.instance.stdSetupPermissionCCData.role.viewByClassification.classifications.seeding :\r\n                        false;\r\n                    // Check whether the logged in examiner role is present in the 'StandardisationSetupPermissions' CC\r\n                    var isLoggedInExaminerRolePresentInCC = standardisationSetupStore.instance.stdSetupPermissionCCData.isLoggedInExaminerRolePresentInCC;\r\n                    var loggedInExaminerRole = standardisationSetupStore.instance.stdSetupPermissionCCData.role.name;\r\n                    key = targetCount > 0 ?\r\n                        ((isESTeamMember && (isSeedVisible === false || isSeedVisible === undefined)) ?\r\n                            'standardisation-setup.right-container.unclassified-bluebanner-message-for-esteam' :\r\n                            'standardisation-setup.right-container.unclassified-bluebanner-message') :\r\n                        (isESTeamMember && !isLoggedInExaminerRolePresentInCC) ?\r\n                            'standardisation-setup.right-container.empty-responses-unclassified-without-role-bluebanner-message' :\r\n                            'standardisation-setup.right-container.empty-responses-unclassified-bluebanner-message';\r\n                    break;\r\n                case enums.StandardisationSetup.ClassifiedResponse:\r\n                    key = targetCount > 0 ? 'standardisation-setup.right-container.classified-bluebanner-message' :\r\n                        'standardisation-setup.right-container.empty-responses-classified-bluebanner-message';\r\n                    break;\r\n            }\r\n            return key;\r\n        };\r\n    }\r\n    /**\r\n     * Get the Configurable characteristic value.\r\n     * @param ccName\r\n     * @returns\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getCCValue = function (ccName, markSchemeGroupId) {\r\n        return configurableCharacteristicsHelper.getCharacteristicValue(ccName, markSchemeGroupId);\r\n    };\r\n    /**\r\n     * Get Session tab visibilty in SSU\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getSessionTabVisibiltyinSelectResponse = function () {\r\n        return (configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ReuseRIG).toLowerCase() === 'true'\r\n            && standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.reuseResponses);\r\n    };\r\n    /**\r\n     * Get the retain provisional CC\r\n     */\r\n    StandardisationSetupHelperBase.prototype.isRetainProvisionalMarksCCOn = function () {\r\n        return configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.RetainProvisionalMarks, standardisationSetupStore.instance.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n    };\r\n    /**\r\n     * generateStandardisationRowDefinion is used for generating row collection for WorkList Grid\r\n     * @param comparerName\r\n     * @param sortDirection\r\n     * @param workListSelection\r\n     * @param gridType\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateStandardisationRowDefinion = function (comparerName, sortDirection, workListSelection, gridType) {\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Generating Reusable response worklist grid row definition\r\n     * @param reusableResponsesList\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateReusableResponsesRowDefinition = function (reusableResponsesList) {\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Generating frozen row body for reusable responses grid\r\n     * @param reusableResponsesList\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateStandardisationFrozenRowBodyReusableGrid = function (reusableResponsesList, comparerName, sortDirection) {\r\n        return this._stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * generateScriptRowDefinition is used for generating row collection for Select response Script Grid\r\n     * @param standardisationScriptList\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateScriptRowDefinition = function (standardisationScriptList) {\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * GenerateTableHeader is used for generating header collection.\r\n     * @param standardisationSetupType\r\n     * @param comparerName\r\n     * @param sortDirection\r\n     * @param gridType\r\n     * @param selectedSessionTab\r\n     * @param centreOrScript\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateTableHeader = function (standardisationSetupType, comparerName, sortDirection, gridType, selectedSessionTab, centreOrScript) {\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        var _tableHeaderCollection = this.getTableHeader(standardisationSetupType, comparerName, sortDirection, selectedSessionTab, gridType, centreOrScript);\r\n        return _tableHeaderCollection;\r\n    };\r\n    /**\r\n     * generateFrozenRowBody is used for generating row collection for Standardisation Setup Grid\r\n     * @param standardisationSetupDetailsList\r\n     * @param standardisationSetupType\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateFrozenRowBody = function (standardisationSetupDetailsList, standardisationSetupType, gridType, comparerName, sortDirection) {\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        var _workListFrozenRowBodyCollection = this.getFrozenRowBodyForListView(standardisationSetupDetailsList, standardisationSetupType, gridType, comparerName, sortDirection);\r\n        return _workListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Is used for generating row header collection for WorkList table\r\n     * @param comparerName\r\n     * @param sortDirection\r\n     * @param standardisationSetupType\r\n     * @param selectedSessionTab\r\n     * @param isSortable\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateFrozenRowHeader = function (comparerName, sortDirection, standardisationSetupType, selectedSessionTab, isSortable) {\r\n        if (selectedSessionTab === void 0) { selectedSessionTab = enums.StandardisationSessionTab.CurrentSession; }\r\n        if (isSortable === void 0) { isSortable = true; }\r\n        // Get the frozen column list from json\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        var _frozenRowHeaderCollection = this.getFrozenRowHeader(comparerName, sortDirection, isSortable, standardisationSetupType, selectedSessionTab);\r\n        return _frozenRowHeaderCollection;\r\n    };\r\n    /**\r\n     * Is used for generating frozen row body collection for STD WorkList table\r\n     * @param standardisationResponseListData\r\n     * @param standardisationSetupType\r\n     * @param gridType\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateStandardisationFrozenRowBody = function (comparerName, sortDirection, standardisationSetupType, gridType) {\r\n        return this._stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * create a wraper for grid column\r\n     * @param elements\r\n     * @param className\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getWrappedColumn = function (elements, className, seq) {\r\n        var componentProps;\r\n        var _workListCell;\r\n        var _gridCell = new gridCell();\r\n        var element;\r\n        componentProps = {\r\n            key: seq,\r\n            divClassName: className,\r\n            componentList: elements\r\n        };\r\n        _workListCell = new gridCell();\r\n        _workListCell.columnElement = React.createElement(GenericComponentWrapper, componentProps);\r\n        return _workListCell;\r\n    };\r\n    /**\r\n     * creating grid columns collection\r\n     * @param gridgridLeftColumn\r\n     * @param gridMiddleColumn\r\n     * @param key\r\n     * @param gridRightColumn - to display AMD and TMD based on Accuracy Indicator\r\n     * @returns grid cell collection.\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getGridCells = function (gridgridLeftColumn, gridMiddleColumn, key, gridRightColumn) {\r\n        var _gridCells = new Array();\r\n        _gridCells.push(this.getWrappedColumn(Immutable.List(gridgridLeftColumn), 'col left-col', 'Grid_left_' + key));\r\n        _gridCells.push(this.getWrappedColumn(Immutable.List(gridMiddleColumn), 'col centre-col', 'Grid_centre_' + key));\r\n        // create column for AMD and TMD only if gridRightColumn is not null\r\n        if (gridRightColumn !== null) {\r\n            _gridCells.push(this.getWrappedColumn(Immutable.List(gridRightColumn), 'col right-col', 'Grid_right_' + key));\r\n        }\r\n        return _gridCells;\r\n    };\r\n    /**\r\n     * Group the elements based on the classNames.\r\n     * @param {string} groupClassName\r\n     * @param {string} seq\r\n     * @returns the grouped JSX.Element.\r\n     * @Summary groupClassName is the root element className and the column list may contain\r\n     * the key same as groupClassName. Then that will not group the elements instead add it as\r\n     * immediate child node.\r\n     */\r\n    StandardisationSetupHelperBase.prototype.groupColumnElements = function (groupClassName, seq) {\r\n        var elements = Immutable.List();\r\n        // loop through the class group names to find the child and group.\r\n        for (var key in this._groupColumns) {\r\n            if (this._groupColumns[key].values) {\r\n                var componentProps_1 = {\r\n                    id: this._groupColumns[key] + seq,\r\n                    key: this._groupColumns[key] + seq,\r\n                    divClassName: key,\r\n                    componentList: this._groupColumns[key].values\r\n                };\r\n                // If the key same as main group className then we dont need to create a childnode.\r\n                // treating it as immediate child of the main element.\r\n                if (key !== groupClassName) {\r\n                    elements = elements.push(React.createElement(GenericComponentWrapper, componentProps_1));\r\n                }\r\n                else {\r\n                    this._groupColumns[key].values.map(function (x) {\r\n                        elements = elements.push(x);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        var componentProps = {\r\n            id: groupClassName + seq,\r\n            key: groupClassName + seq,\r\n            divClassName: groupClassName,\r\n            componentList: elements\r\n        };\r\n        return React.createElement(GenericComponentWrapper, componentProps);\r\n    };\r\n    /**\r\n     * Start with fresh group.\r\n     */\r\n    StandardisationSetupHelperBase.prototype.emptyGroupColumns = function () {\r\n        // start with a fresh list of column group set.\r\n        this._groupColumns = {};\r\n    };\r\n    Object.defineProperty(StandardisationSetupHelperBase.prototype, \"groupColumns\", {\r\n        /**\r\n         * Return the group columns\r\n         * @returns\r\n         */\r\n        get: function () {\r\n            return this._groupColumns;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Mapping the each elements to a group.\r\n     * This add the elements to a dictionary which has className as key\r\n     * and list of elements that  grouped under the className.\r\n     * @param {string} className\r\n     * @param {JSX.Element} element\r\n     */\r\n    StandardisationSetupHelperBase.prototype.mapGroupColumns = function (className, element) {\r\n        // If not group class has been added create a new object\r\n        // otherwise add to the existing.\r\n        if (this._groupColumns[className] === undefined) {\r\n            this._groupColumns[className] = { values: Immutable.List() };\r\n        }\r\n        this._groupColumns[className].values = this._groupColumns[className].values.push(element);\r\n    };\r\n    /**\r\n     * creating react element for the  Column Header component\r\n     * @param seq - key value for the component\r\n     * @param displayText - the text to append with the display id.\r\n     * @returns JSX.Element.\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getColumnHeaderElement = function (seq, headerText, gridColumn, isCurrentSort, isSortRequired, sortDirection) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            headerText: headerText,\r\n            sortDirection: sortDirection,\r\n            isCurrentSort: isCurrentSort,\r\n            isSortingRequired: isSortRequired\r\n        };\r\n        return React.createElement(ColumnHeader, componentProps);\r\n    };\r\n    /**\r\n     * returns the table row collection for table header.\r\n     * @param standardisationSetupType\r\n     * @param comparerName\r\n     * @param sortDirection\r\n     * @param selectedSessionTab\r\n     * @param gridType\r\n     * @param centreOrScript\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getTableHeader = function (standardisationSetupType, comparerName, sortDirection, selectedSessionTab, gridType, centreOrScript) {\r\n        if (selectedSessionTab === void 0) { selectedSessionTab = enums.StandardisationSessionTab.CurrentSession; }\r\n        var _columnHeaderCollection = Array();\r\n        var _cell;\r\n        var _row = new gridRow();\r\n        var _columnHeaderCellcollection = new Array();\r\n        var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, standardisationSetupType, false, gridType, selectedSessionTab, centreOrScript);\r\n        var gridColumnLength = gridColumns.length;\r\n        this.resetDynamicColumnSettings();\r\n        // Getting the classified worklist columns\r\n        for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n            _cell = new gridCell();\r\n            var _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n            var headerText = gridColumns[gridColumnCount].ColumnHeader;\r\n            var _comparerName = gridColumns[gridColumnCount].ComparerName;\r\n            headerText = (headerText && headerText !== '') ? localeStore.instance.TranslateText(headerText) : '';\r\n            var key = 'columnHeader_' + gridColumnCount;\r\n            var isCurrentSort = standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse ?\r\n                undefined : (comparerName === _comparerName);\r\n            var isSortRequired = standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse ?\r\n                false : (gridColumns[gridColumnCount].Sortable === 'true');\r\n            var currentSortDirection = standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse ?\r\n                undefined : sortDirection;\r\n            _cell.columnElement = this.getColumnHeaderElement(key, headerText, _responseColumn, isCurrentSort, isSortRequired, currentSortDirection);\r\n            _cell.isHidden = this.getCellVisibility(_responseColumn);\r\n            // No sort for classification\r\n            if (standardisationSetupType !== enums.StandardisationSetup.ClassifiedResponse) {\r\n                _cell.comparerName = _comparerName;\r\n                _cell.sortDirection = this.getSortDirection((comparerName === _comparerName), sortDirection);\r\n            }\r\n            var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n            _cell.setCellStyle(cellStyle);\r\n            // Creating the grid row collection.\r\n            _columnHeaderCellcollection.push(_cell);\r\n        }\r\n        // Get Dynamic Headers for Individual question when Mark By question view selected\r\n        if (gridType === enums.GridType.markByQuestion) {\r\n            var standardisationResponseListData = Immutable.List(standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses);\r\n            _columnHeaderCellcollection.concat(this.getDynamicHeadersForMarks(standardisationResponseListData, _columnHeaderCellcollection));\r\n            if (standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse &&\r\n                (standardisationSetupStore.instance.stdSetupPermissionCCData &&\r\n                    standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.declassify) &&\r\n                this.isRetainProvisionalMarksCCOn() &&\r\n                !qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete) {\r\n                var key = 'columnHeader_Declassify';\r\n                var cellStyle = 'last-cell-header';\r\n                _cell = new gridCell();\r\n                // create question header element for each question.\r\n                _cell.columnElement = this.getColumnHeaderElement(key, '', undefined, undefined, false, undefined);\r\n                _cell.isHidden = false;\r\n                _cell.setCellStyle(cellStyle);\r\n                // Creating the grid row collection.\r\n                _columnHeaderCellcollection.push(_cell);\r\n            }\r\n            else {\r\n                //Adding the 'last-cell' column as this column is not added to classified worklst by default\r\n                var key = 'columnHeader_Declassify';\r\n                var cellStyle = 'last-cell-header';\r\n                _cell = new gridCell();\r\n                _cell.isHidden = false;\r\n                _cell.setCellStyle(cellStyle);\r\n                // Creating the grid row collection.\r\n                _columnHeaderCellcollection.push(_cell);\r\n            }\r\n        }\r\n        _row.setRowId(1);\r\n        _row.setCells(_columnHeaderCellcollection);\r\n        _columnHeaderCollection.push(_row);\r\n        var _standardisationTableHeaderCollection = Immutable.fromJS(_columnHeaderCollection);\r\n        return _standardisationTableHeaderCollection;\r\n    };\r\n    /**\r\n     * returns the table row collection of frozen table\r\n     * @param standardisationSetupDetailsList\r\n     * @param standardisationSetupType\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getFrozenRowBodyForListView = function (standardisationSetupDetailsList, standardisationSetupType, gridType, comparerName, sortDirection) {\r\n        var _rowHeaderCellcollection = Array();\r\n        var _row;\r\n        var _rowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _cell;\r\n        var key;\r\n        var cssClass;\r\n        var submitResponse = new submitHelper();\r\n        if (standardisationSetupDetailsList != null) {\r\n            var gridSeq = void 0;\r\n            var _responseListData = void 0;\r\n            var gridColumns = void 0;\r\n            var gridRowIdColumn = void 0;\r\n            switch (standardisationSetupType) {\r\n                case enums.StandardisationSetup.SelectResponse:\r\n                    if (standardisationSetupDetailsList.standardisationScriptDetailsList) {\r\n                        gridSeq = standardisationSetupDetailsList.standardisationScriptDetailsList.centreScriptList.keySeq();\r\n                        _responseListData = standardisationSetupDetailsList.standardisationScriptDetailsList.centreScriptList.toArray();\r\n                        gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, standardisationSetupType, true, null, enums.StandardisationSessionTab.CurrentSession, 'Script');\r\n                        gridRowIdColumn = 'candidateScriptId';\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                    break;\r\n                case enums.StandardisationSetup.ProvisionalResponse:\r\n                    _responseListData = standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses;\r\n                    var sortedData = void 0;\r\n                    sortedData = Immutable.List(sortHelper.sort(_responseListData, comparerList[comparerName]));\r\n                    _responseListData = sortedData.toArray();\r\n                    gridSeq = Immutable.List(_responseListData).keySeq();\r\n                    gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, standardisationSetupType, true, gridType);\r\n                    break;\r\n                case enums.StandardisationSetup.None:\r\n                    break;\r\n            }\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the list data row\r\n                _row = new gridRow();\r\n                _rowHeaderCellcollection = new Array();\r\n                var responseData = _responseListData[responseListCount];\r\n                var gridColumnLength = gridColumns.length;\r\n                var responseStatuses = submitResponse.submitButtonValidate(responseData, responseData.markingProgress, false, false);\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _cell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    //Switch statement for adding frozen columns.\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.ScriptId:\r\n                            key = gridSeq.get(responseListCount) + '_ScriptId_' + gridColumnCount;\r\n                            _cell.columnElement = this.getScriptIdElement(responseData, componentPropsJson, key, (localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.script-id')\r\n                                + ' '), true);\r\n                            _cell.setCellStyle('col-script-id header-col');\r\n                            _rowHeaderCellcollection.push(_cell);\r\n                            break;\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _cell.columnElement = this.getResponseIdColumnElement(responseData, key, true);\r\n                            _cell.setCellStyle('col-response header-col');\r\n                            _rowHeaderCellcollection.push(_cell);\r\n                            break;\r\n                        case gridColumnNames.IsSharedProvisional:\r\n                            var isSharedProvisional = this.isCommonProvisionalStandardisationOn()\r\n                                && standardisationSetupStore.instance.stdSetupPermissionCCData.role\r\n                                    .permissions.viewCommonProvisionalAvailableResponses\r\n                                && responseData.isSharedProvisional;\r\n                            key = gridSeq.get(responseListCount) + '_ShareResponseIndicatorColumn_' + gridColumnCount;\r\n                            _cell.columnElement = this.getSharedResponseIndicatorElement(isSharedProvisional, key);\r\n                            _cell.setCellStyle('col-share');\r\n                            _rowHeaderCellcollection.push(_cell);\r\n                            break;\r\n                    }\r\n                }\r\n                // Creating the table row collection.\r\n                _rowCollection.push(this.getGridRow(responseData[gridRowIdColumn], _rowHeaderCellcollection, undefined, cssClass, responseStatuses));\r\n            }\r\n        }\r\n        var _frozenRowBodyCollection = Immutable.fromJS(_rowCollection);\r\n        return _frozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * get Script Id Element\r\n     * @param standardisationScriptDetails\r\n     * @param propsNames\r\n     * @param seq\r\n     * @param displayText\r\n     * @param isScriptIdClickable\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getScriptIdElement = function (standardisationScriptDetails, propsNames, seq, displayText, isScriptIdClickable) {\r\n        if (isScriptIdClickable === void 0) { isScriptIdClickable = true; }\r\n        var componentProps;\r\n        var _displayText;\r\n        _displayText = standardisationScriptDetails[propsNames.ScriptId];\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            displayId: standardisationScriptDetails[propsNames.ScriptId],\r\n            displayText: _displayText,\r\n            isClickable: isScriptIdClickable\r\n        };\r\n        return React.createElement(scriptidgridelement, componentProps);\r\n    };\r\n    /**\r\n     * returns the table row elements for frozen table header\r\n     * @param comparerName\r\n     * @param sortDirection\r\n     * @param isSortable\r\n     * @param standardisationSetupType\r\n     * @param selectedTab\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getFrozenRowHeader = function (comparerName, sortDirection, isSortable, standardisationSetupType, selectedSessionTab) {\r\n        var _columnHeaderCollection = Array();\r\n        var _row = new gridRow();\r\n        var _columnHeaderCellcollection = new Array();\r\n        var _comparerName;\r\n        var _gridColumnName = '';\r\n        var _cellStyle = '';\r\n        switch (standardisationSetupType) {\r\n            case enums.StandardisationSetup.SelectResponse:\r\n                switch (selectedSessionTab) {\r\n                    case enums.StandardisationSessionTab.CurrentSession:\r\n                        _comparerName = comparerList.stdScriptIdComparer;\r\n                        _gridColumnName = localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.script-id');\r\n                        _cellStyle = 'col-script-id header-col';\r\n                        // Creating the grid row collection.\r\n                        _columnHeaderCellcollection.push(this.setFrozenColumnHeaders(standardisationSetupType, _gridColumnName, _cellStyle, comparerName, isSortable, _comparerName, sortDirection));\r\n                        break;\r\n                    case enums.StandardisationSessionTab.PreviousSession:\r\n                        var _cell = void 0;\r\n                        var gridColumns_1 = this.getGridColumns(this.resolvedGridColumnsJson, enums.StandardisationSetup.SelectResponse, true, null, enums.StandardisationSessionTab.PreviousSession);\r\n                        var gridColumnLength_1 = gridColumns_1.length;\r\n                        for (var gridColumnCount = 0; gridColumnCount < gridColumnLength_1; gridColumnCount++) {\r\n                            _cell = new gridCell();\r\n                            var key = 'frozenRowHeader_' + gridColumnCount;\r\n                            var currentComparer = gridColumns_1[gridColumnCount].ComparerName;\r\n                            var isSortRequired = gridColumns_1[gridColumnCount].Sortable === 'true';\r\n                            var headerText = gridColumns_1[gridColumnCount].ColumnHeader;\r\n                            headerText = (headerText && headerText !== '') ? localeStore.instance.TranslateText(headerText) : '';\r\n                            var cellStyle = (gridColumns_1[gridColumnCount].CssClass) ? gridColumns_1[gridColumnCount].CssClass : '';\r\n                            // Creating the grid row collection.\r\n                            _columnHeaderCellcollection.push(this.setFrozenColumnHeaders(standardisationSetupType, headerText, cellStyle, comparerName, isSortRequired, comparerList[currentComparer], sortDirection));\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case enums.StandardisationSetup.ClassifiedResponse:\r\n                _gridColumnName =\r\n                    localeStore.instance.\r\n                        TranslateText('standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.response-id');\r\n                _cellStyle = 'col-response header-col';\r\n                // Creating the grid row collection.\r\n                _columnHeaderCellcollection.push(this.setFrozenColumnHeaders(standardisationSetupType, '', 'col-std-classify-items header-col', '', false));\r\n                _columnHeaderCellcollection.push(this.setFrozenColumnHeaders(standardisationSetupType, _gridColumnName, _cellStyle, '', false));\r\n                break;\r\n            case enums.StandardisationSetup.ProvisionalResponse:\r\n                var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, standardisationSetupType, true);\r\n                var gridColumnLength = gridColumns.length;\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    var currentComparer = gridColumns[gridColumnCount].ComparerName;\r\n                    _gridColumnName = gridColumns[gridColumnCount].ColumnHeader;\r\n                    _gridColumnName = (_gridColumnName && _gridColumnName !== '') ?\r\n                        localeStore.instance.TranslateText(_gridColumnName) : '';\r\n                    _cellStyle = (gridColumns[gridColumnCount].CssClass) ?\r\n                        gridColumns[gridColumnCount].CssClass : ''; // 'col-response header-col';\r\n                    var isSortRequired = gridColumns[gridColumnCount].Sortable === 'true';\r\n                    // Creating the grid row collection.\r\n                    _columnHeaderCellcollection.push(this.setFrozenColumnHeaders(standardisationSetupType, _gridColumnName, _cellStyle, comparerName, isSortRequired, comparerList[currentComparer], sortDirection));\r\n                }\r\n                break;\r\n            case enums.StandardisationSetup.UnClassifiedResponse:\r\n                _gridColumnName =\r\n                    localeStore.instance.\r\n                        TranslateText('standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.response-id');\r\n                _cellStyle = 'col-response header-col';\r\n                _comparerName = comparerList.responseIdComparer;\r\n                // Creating the grid row collection.\r\n                _columnHeaderCellcollection.push(this.setFrozenColumnHeaders(standardisationSetupType, _gridColumnName, _cellStyle, comparerName, isSortable, _comparerName, sortDirection));\r\n                break;\r\n            case enums.StandardisationSetup.None:\r\n                break;\r\n        }\r\n        _row.setRowId(1);\r\n        _row.setCells(_columnHeaderCellcollection);\r\n        _columnHeaderCollection.push(_row);\r\n        var _frozenRowHeaderCollection = Immutable.fromJS(_columnHeaderCollection);\r\n        return _frozenRowHeaderCollection;\r\n    };\r\n    /**\r\n     * Setting frozen header columns (Rig order empty column/Response Id for Classifed)\r\n     * @param columnHeader\r\n     * @param cellStyle\r\n     */\r\n    StandardisationSetupHelperBase.prototype.setFrozenColumnHeaders = function (standardisationSetupType, columnHeader, cellStyle, currentComparer, isSortable, _comparerName, sortDirection) {\r\n        var _cell;\r\n        _cell = new gridCell();\r\n        var key = 'frozenRowHeader';\r\n        var isCurrentSort = standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse ?\r\n            undefined : (comparerList[currentComparer] === _comparerName);\r\n        var isSortRequired = standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse ?\r\n            false : isSortable;\r\n        var currentSortDirection = standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse ?\r\n            undefined : sortDirection;\r\n        //TODO : Move the magic strings outside (json?)\r\n        _cell.columnElement = this.getColumnHeaderElement(key, columnHeader, '', isCurrentSort, isSortRequired, currentSortDirection);\r\n        if (standardisationSetupType !== enums.StandardisationSetup.ClassifiedResponse) {\r\n            _cell.comparerName = comparerList[_comparerName];\r\n            _cell.sortDirection = this.getSortDirection((comparerList[currentComparer] === _comparerName), sortDirection);\r\n        }\r\n        _cell.setCellStyle(cellStyle);\r\n        return _cell;\r\n    };\r\n    /**\r\n     * returns the gridcolumns based on the response mode and worklist type\r\n     * @param resolvedGridColumnsJson\r\n     * @param standardisationSetupType\r\n     * @param isFrozen\r\n     * @param selectedSessionTab\r\n     * @param centreOrScript\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getGridColumns = function (resolvedGridColumnsJson, standardisationSetupType, isFrozen, gridType, selectedSessionTab, centreOrScript) {\r\n        if (isFrozen === void 0) { isFrozen = false; }\r\n        var gridColumns;\r\n        switch (standardisationSetupType) {\r\n            case enums.StandardisationSetup.SelectResponse:\r\n                if (selectedSessionTab === enums.StandardisationSessionTab.CurrentSession) {\r\n                    if (centreOrScript === 'Script') {\r\n                        gridColumns = (isFrozen === false) ? resolvedGridColumnsJson.standardisationsetup.SelectResponse.Script.GridColumns\r\n                            : resolvedGridColumnsJson.standardisationsetup.SelectResponse.FrozenRows.GridColumns;\r\n                    }\r\n                    else {\r\n                        gridColumns = resolvedGridColumnsJson.standardisationsetup.SelectResponse.Centre.GridColumns;\r\n                    }\r\n                }\r\n                else if (selectedSessionTab === enums.StandardisationSessionTab.PreviousSession) {\r\n                    gridColumns = (isFrozen === false) ?\r\n                        resolvedGridColumnsJson.standardisationsetup.PreviousSession.ReusableResponse.GridColumns\r\n                        : resolvedGridColumnsJson.standardisationsetup.PreviousSession.frozenRows.GridColumns;\r\n                }\r\n                break;\r\n            case enums.StandardisationSetup.ProvisionalResponse:\r\n                gridColumns = (isFrozen === false) ? (gridType === enums.GridType.totalMarks ?\r\n                    resolvedGridColumnsJson.standardisationsetup.ProvisionalResponse.totalmarksview.GridColumns\r\n                    : resolvedGridColumnsJson.standardisationsetup.ProvisionalResponse.marksbyquestionview.GridColumns)\r\n                    : resolvedGridColumnsJson.standardisationsetup.ProvisionalResponse.frozenRows.GridColumns;\r\n                break;\r\n            case enums.StandardisationSetup.UnClassifiedResponse:\r\n                gridColumns = (isFrozen === false) ? (gridType === enums.GridType.totalMarks ?\r\n                    resolvedGridColumnsJson.standardisationsetup.UnClassifiedResponse.totalmarksview.GridColumns\r\n                    : resolvedGridColumnsJson.standardisationsetup.UnClassifiedResponse.marksbyquestionview.GridColumns)\r\n                    : resolvedGridColumnsJson.standardisationsetup.UnClassifiedResponse.frozenRows.GridColumns;\r\n                break;\r\n            case enums.StandardisationSetup.ClassifiedResponse:\r\n                gridColumns = (isFrozen === false) ? (gridType === enums.GridType.totalMarks ?\r\n                    resolvedGridColumnsJson.standardisationsetup.ClassifiedResponse.totalmarksview.GridColumns\r\n                    : resolvedGridColumnsJson.standardisationsetup.ClassifiedResponse.marksbyquestionview.GridColumns)\r\n                    : resolvedGridColumnsJson.standardisationsetup.ClassifiedResponse.frozenRows.GridColumns;\r\n                break;\r\n            case enums.StandardisationSetup.None:\r\n                break;\r\n        }\r\n        return gridColumns;\r\n    };\r\n    /**\r\n     * returns whether the the given column is hidden or not\r\n     * @param responseColumn\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getCellVisibility = function (column) {\r\n        if (ecourseWorkHelper.isECourseworkComponent && column === 'FirstScanned') {\r\n            return true;\r\n        }\r\n        if (!(configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.eBookmarking).toLowerCase() === 'true' ? true : false) && column === 'QuestionItems') {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Reset dynamic column\r\n     */\r\n    StandardisationSetupHelperBase.prototype.resetDynamicColumnSettings = function () {\r\n        this._dateLengthInPixel = 0;\r\n    };\r\n    /**\r\n     * return the sort direction - if it is current sort just reverse the direction otherwise asc as defaualt direction.\r\n     * @param isCurrentSort\r\n     * @param sortDirection\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getSortDirection = function (isCurrentSort, sortDirection) {\r\n        return ((isCurrentSort === true) ?\r\n            ((sortDirection === enums.SortDirection.Ascending) ? enums.SortDirection.Descending : enums.SortDirection.Ascending)\r\n            : enums.SortDirection.Ascending);\r\n    };\r\n    /**\r\n     * Get the text value for Grid Column\r\n     * @param textValue\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getGenericTextElement = function (textValue, seq, title) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            textValue: textValue,\r\n            title: title\r\n        };\r\n        return React.createElement(GenericTextColumn, componentProps);\r\n    };\r\n    /**\r\n     * Get the Formatted date element.\r\n     * @param value\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getGenericFormattedDateElement = function (value, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            dateValue: new Date(value.toString()),\r\n            className: 'dim-text txt-val small-text'\r\n        };\r\n        return React.createElement(genericDate, componentProps);\r\n    };\r\n    /**\r\n     * Get the Converted text value for Grid Column\r\n     *  @param textValue\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getConvertTextElement = function (textValue, seq) {\r\n        var componentProps;\r\n        switch (textValue) {\r\n            case 'true':\r\n                textValue = 'Yes';\r\n                break;\r\n            case 'false':\r\n                textValue = 'No';\r\n                break;\r\n        }\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            textValue: textValue\r\n        };\r\n        return React.createElement(GenericTextColumn, componentProps);\r\n    };\r\n    /**\r\n     * Get the Marks Grid Column\r\n     * @param textValue\r\n     * @param seq\r\n     * @param usedInTotal\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getMarksColumn = function (textValue, seq, usedInTotal) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            textValue: textValue,\r\n            usedInTotal: usedInTotal\r\n        };\r\n        return React.createElement(marksColumn, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  TotalMark component\r\n     * @param mark\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getTotalMarkElement = function (mark, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            isNonNumericMark: false,\r\n            maximumMark: 100,\r\n            totalMark: mark,\r\n            markingProgress: 100,\r\n            selectedLanguage: localeStore.instance.Locale\r\n        };\r\n        return React.createElement(totalMark, componentProps);\r\n    };\r\n    /**\r\n     * returns the Selected Tag Id of response.\r\n     * @param seq\r\n     * @param tagId\r\n     * @param tagList\r\n     * @param markGroupId\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getTag = function (seq, tagId, tagList, markGroupId, markingMode) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedTagId: tagId,\r\n            tagList: tagList,\r\n            markGroupId: markGroupId,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            // isESResponse = true when tag updated from standardisation setup.\r\n            isESResponse: true,\r\n            markingMode: markingMode\r\n        };\r\n        return React.createElement(TagList, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  ResponseIdColumn component\r\n     * @param stdResponseData\r\n     * @param seq\r\n     * @param isResponseIdClickable\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getResponseIdColumnElement = function (stdResponseData, seq, isResponseIdClickable, isReusableResponseView, candidateScriptId) {\r\n        if (isResponseIdClickable === void 0) { isResponseIdClickable = true; }\r\n        if (isReusableResponseView === void 0) { isReusableResponseView = false; }\r\n        if (candidateScriptId === void 0) { candidateScriptId = ''; }\r\n        var componentProps;\r\n        var displayId = stdResponseData.displayId;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            displayId: displayId.toString(),\r\n            isResponseIdClickable: isResponseIdClickable,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isReusableResponseView: isReusableResponseView,\r\n            candidateScriptId: '1' + stdResponseData.candidateScriptId\r\n        };\r\n        return React.createElement(stdResponseId, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  LinkedMessagrIndicator component\r\n     * @param responseData\r\n     * @param propsNames\r\n     * @param seq\r\n     * @param isTileView\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getLinkedMessageElement = function (responseData, propsNames, seq, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            messageCount: responseData[propsNames.unreadMessagesCount],\r\n            hasMessages: responseData[propsNames.hasMessages],\r\n            displayId: responseData[propsNames.displayId],\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isTileView: isTileView,\r\n            isTeamManagementMode: markerOperationModeFactory.operationMode.isTeamManagementMode\r\n        };\r\n        return React.createElement(LinkedMessageIndicator, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  Last updated component\r\n     * @param lastUpdatedDate\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getLastUpdatedElement = function (stdResponseData, propsNames, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            dateType: enums.WorkListDateType.lastUpdatedDate,\r\n            dateValue: new Date(stdResponseData[propsNames.updatedDate]),\r\n            isTileView: false\r\n        };\r\n        return React.createElement(LastUpdatedColumn, componentProps);\r\n    };\r\n    /**\r\n     * create react element for declassify button\r\n     * @param title\r\n     * @param anchorclassName\r\n     * @param spanclassName\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getDeclassifyButtonElement = function (title, anchorclassName, spanclassName, seq, displayId, totalMarkValue, candidateScriptId, esCandidateScriptMarkSchemeGroupId, markingModeId, rigOrder, esMarkGroupRowVersion) {\r\n        var componentProps;\r\n        componentProps = {\r\n            title: title,\r\n            id: seq,\r\n            anchorclassName: anchorclassName,\r\n            spanclassName: spanclassName,\r\n            displayId: displayId,\r\n            totalMarkValue: totalMarkValue,\r\n            candidateScriptId: candidateScriptId,\r\n            esCandidateScriptMarkSchemeGroupId: esCandidateScriptMarkSchemeGroupId,\r\n            markSchemeGroupId: standardisationSetupStore.instance.markSchemeGroupId,\r\n            markingModeId: markingModeId,\r\n            rigOrder: rigOrder,\r\n            esMarkGroupRowVersion: esMarkGroupRowVersion\r\n        };\r\n        return React.createElement(DeclassifyButton, componentProps);\r\n    };\r\n    /**\r\n     * creating grid row\r\n     * @param {string} uniqueId\r\n     * @param {Array<gridCell>} gridCells\r\n     * @param {JSX.Element} [additionalComponent]\r\n     * @param {string} [cssClass]\r\n     * @param {Immutable.List<enums.ResponseStatus>} [responseStatus]\r\n     * @param {boolean} [overClassified]\r\n     * @returns {gridRow}\r\n     * @memberof StandardisationSetupHelperBase\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getGridRow = function (uniqueId, gridCells, additionalComponent, cssClass, responseStatus, overClassified) {\r\n        var _gridRow = new gridRow();\r\n        var className = this.setRowStyle(responseStatus, overClassified);\r\n        className = (cssClass) ? (className + ' ' + cssClass) : className;\r\n        _gridRow.setRowStyle(className);\r\n        _gridRow.setRowId(parseFloat(uniqueId));\r\n        _gridRow.setCells(gridCells);\r\n        _gridRow.setAdditionalElement(additionalComponent);\r\n        return _gridRow;\r\n    };\r\n    /**\r\n     * Set row style to amber if the response has blocking exceptions or other reasons\r\n     * @param {Immutable.List<enums.ResponseStatus>} responseStatus\r\n     * @returns {string}\r\n     * @memberof StandardisationSetupHelperBase\r\n     */\r\n    StandardisationSetupHelperBase.prototype.setRowStyle = function (responseStatus, overClassified) {\r\n        // Check whetehr the classifcation type exceeded the current target,\r\n        // if so highlight the exceeded last rows with amber color.\r\n        if ((responseStatus && (responseStatus.contains(enums.ResponseStatus.hasException) ||\r\n            responseStatus.contains(enums.ResponseStatus.hasZoningException) ||\r\n            responseStatus.contains(enums.ResponseStatus.notAllPagesAnnotated) ||\r\n            responseStatus.contains(enums.ResponseStatus.markChangeReasonNotExist) ||\r\n            responseStatus.contains(enums.ResponseStatus.supervisorRemarkDecisionNotSelected) ||\r\n            responseStatus.contains(enums.ResponseStatus.notAllFilesViewed))) || overClassified) {\r\n            return 'row warning-alert';\r\n        }\r\n        else {\r\n            return 'row';\r\n        }\r\n    };\r\n    /**\r\n     * Generate Centre Row Definition\r\n     * @param standardisationCentreList\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateCentreRowDefinition = function (standardisationCentreList) {\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Return the dynamic headers for questions\r\n     * @param standardisationResponseListData\r\n     * @param _columnHeaderCellcollection\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getDynamicHeadersForMarks = function (standardisationResponseListData, _columnHeaderCellcollection) {\r\n        // Get the Standardisation marks for the response if exist.\r\n        var _stdMarksData = standardisationResponseListData.first().standardisationMarks;\r\n        var questionsCount = _stdMarksData.length;\r\n        var _cell;\r\n        // iterate through each questions and get the display label.\r\n        for (var questionItemCount = 0; questionItemCount < questionsCount; questionItemCount++) {\r\n            _cell = new gridCell();\r\n            var headerText = _stdMarksData[questionItemCount].displayLabel;\r\n            var _comparerName = '';\r\n            headerText = (headerText && headerText !== '') ? headerText : '';\r\n            var key = 'columnHeader_' + questionItemCount;\r\n            // create question header element for each question.\r\n            _cell.columnElement = this.getColumnHeaderElement(key, headerText, undefined, undefined, false, undefined);\r\n            _cell.isHidden = false;\r\n            _cell.comparerName = _comparerName;\r\n            var cellStyle = 'col-question-item';\r\n            _cell.setCellStyle(cellStyle);\r\n            // Creating the grid row collection.\r\n            _columnHeaderCellcollection.push(_cell);\r\n        }\r\n        return _columnHeaderCellcollection;\r\n    };\r\n    /**\r\n     * Get Dynamic Value For Marks\r\n     * @param gridSeq\r\n     * @param stdResponseData\r\n     * @param _stdRowHeaderCellcollection\r\n     * @param index\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getDynamicValueForMarks = function (stdResponseData, _stdRowHeaderCellcollection, index) {\r\n        var _stdGridCell;\r\n        var key;\r\n        // Get the Standardisation marks for the response if exist.\r\n        var stdMarks = stdResponseData.standardisationMarks;\r\n        var noOfQuestions = stdMarks.length;\r\n        var mark;\r\n        var usedInTotal;\r\n        // Getting the Marks Data\r\n        for (var questionItemCount = 0; questionItemCount < noOfQuestions; questionItemCount++) {\r\n            _stdGridCell = new gridCell();\r\n            key = index + '_Questions_' + questionItemCount;\r\n            mark = isNaN(parseInt(stdMarks[questionItemCount].mark.toString())) ?\r\n                stdMarks[questionItemCount].mark : parseInt(stdMarks[questionItemCount].mark.toString());\r\n            usedInTotal = stdMarks[questionItemCount].usedInTotal;\r\n            _stdGridCell.columnElement = this.getMarksColumn(mark, key, usedInTotal);\r\n            _stdGridCell.isHidden = false;\r\n            var cellStyle = 'col-question-item';\r\n            _stdGridCell.setCellStyle(cellStyle);\r\n            _stdRowHeaderCellcollection.push(_stdGridCell);\r\n        }\r\n        return _stdRowHeaderCellcollection;\r\n    };\r\n    /**\r\n     * Method to create Frozen Body Data for different std worklists.\r\n     * @param stdResponseData\r\n     * @param gridSeq\r\n     * @param gridType\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getFrozenRowData = function (stdResponseData, gridType, gridColumns, index, overClassified) {\r\n        var _stdWorkListRowHeaderCellcollection = Array();\r\n        var _stdWorkListCell;\r\n        var key;\r\n        var cellStyle;\r\n        var _stdResponseColumn;\r\n        var componentPropsJson;\r\n        var gridColumnLength = gridColumns.length;\r\n        var submitResponse = new submitHelper();\r\n        var responseStatuses = submitResponse.submitButtonValidate(stdResponseData, stdResponseData.markingProgress, false, false);\r\n        // Set rig order as \"Seed\" for seed responses.\r\n        var isSeed = (stdResponseData.markingModeId === enums.MarkingMode.Seeding);\r\n        // Getting the STD worklist columns\r\n        for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n            _stdResponseColumn = gridColumns[gridColumnCount].GridColumn;\r\n            _stdWorkListCell = new gridCell();\r\n            componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n            //Switch statement for adding frozen columns in future.\r\n            switch (_stdResponseColumn) {\r\n                case gridColumnNames.RigOrderColumn:\r\n                    key = index + '_RigOrderColumn_' + gridColumnCount;\r\n                    var className = 'dim-text small-text classify-index';\r\n                    _stdWorkListCell.columnElement = this.getRIGOrderColumnElement(key, className, undefined, isSeed ? 'Seed' : stdResponseData.rigOrder.toString());\r\n                    cellStyle = 'col-std-classify-items header-col';\r\n                    break;\r\n                case gridColumnNames.ResponseIdColumn:\r\n                    key = index + '_ResponseIdColumn_' + gridColumnCount;\r\n                    _stdWorkListCell.columnElement = this.getResponseIdColumnElement(stdResponseData, key, true);\r\n                    cellStyle = 'col-response header-col';\r\n                    break;\r\n            }\r\n            _stdWorkListCell.setCellStyle(cellStyle);\r\n            _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n        }\r\n        // Return the table row.\r\n        return this.getGridRow(stdResponseData.displayId.toString(), _stdWorkListRowHeaderCellcollection, undefined, undefined, responseStatuses, overClassified);\r\n    };\r\n    /**\r\n     * Method to return ufrozen row data for different type.\r\n     * @param stdResponseListData\r\n     * @param gridColumns\r\n     * @param gridSeq\r\n     * @param gridType\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getRowData = function (stdResponseListData, gridColumns, gridType, index, standardisationSetupType) {\r\n        var _this = this;\r\n        var stdGridRowCollection = Array();\r\n        var submitResponse = new submitHelper();\r\n        // Loop through each response\r\n        stdResponseListData.map(function (stdResponseData) {\r\n            var stdGridRowHeaderCellcollection = Array();\r\n            var _stdResponseColumn;\r\n            var componentPropsJson;\r\n            var _stdGridCell;\r\n            var key;\r\n            var responseStatuses = submitResponse.submitButtonValidate(stdResponseData, stdResponseData.markingProgress, false, false);\r\n            // Getting the worklist columns\r\n            for (var gridColumnCount = 0; gridColumnCount < gridColumns.length; gridColumnCount++) {\r\n                _stdResponseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                _stdGridCell = new gridCell();\r\n                switch (_stdResponseColumn) {\r\n                    case gridColumnNames.ScriptId:\r\n                        key = index + '_ScriptId_' + gridColumnCount;\r\n                        var candidateScriptId = '1' + stdResponseData.candidateScriptId.toString();\r\n                        _stdGridCell.columnElement = _this.getGenericTextElement(candidateScriptId, key);\r\n                        break;\r\n                    case gridColumnNames.Centre:\r\n                        key = index + '_Centre_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getGenericTextElement(stdResponseData.centreNumber, key);\r\n                        break;\r\n                    case gridColumnNames.CentreCandidateNum:\r\n                        key = index + '_Candidate_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getGenericTextElement(stdResponseData.centreCandidateNumber, key);\r\n                        break;\r\n                    case gridColumnNames.MarksColumn:\r\n                        key = index + '_Marks_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getTotalMarkElement(stdResponseData.totalMarkValue, key);\r\n                        break;\r\n                    case gridColumnNames.LastMarkerColumn:\r\n                        key = index + '_LastMarker_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getGenericTextElement(stringFormatHelper.getFormattedExaminerName(stdResponseData.lastMarkerInitials, stdResponseData.lastMarkerSurname), key);\r\n                        break;\r\n                    case gridColumnNames.NoteColumn:\r\n                        key = index + '_Note_' + gridColumnCount;\r\n                        var title = stdResponseData.note;\r\n                        _stdGridCell.columnElement = _this.getGenericTextElement(stdResponseData.note, key, title);\r\n                        break;\r\n                    case gridColumnNames.LinkedMessageIndicator:\r\n                        key = index + '_LinkedMessage_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getLinkedMessageElement(stdResponseData, componentPropsJson, key, false);\r\n                        break;\r\n                    case gridColumnNames.TagIndicator:\r\n                        key = index + '_TagIndicator_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getTag(key, stdResponseData.tagId, tagStore.instance.tags, stdResponseData.esMarkGroupId, stdResponseData.markingModeId);\r\n                        break;\r\n                    case gridColumnNames.LastUpdatedColumn:\r\n                        key = index + '_LastUpdated_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getLastUpdatedElement(stdResponseData, componentPropsJson, key);\r\n                        break;\r\n                    case gridColumnNames.Status:\r\n                        responseStatuses = submitResponse.submitButtonValidate(stdResponseData, stdResponseData.markingProgress, false, false);\r\n                        key = index + '_Status_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getMarkingProgressElement(stdResponseData, componentPropsJson, key, responseStatuses, standardisationSetupType);\r\n                        break;\r\n                    case gridColumnNames.DeClassifyColumn:\r\n                        if ((standardisationSetupStore.instance.stdSetupPermissionCCData &&\r\n                            standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.declassify) &&\r\n                            _this.isRetainProvisionalMarksCCOn() &&\r\n                            !qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete) {\r\n                            key = index + '_DeClassify_' + gridColumnCount;\r\n                            _stdGridCell.columnElement = _this.getDeclassifyButtonElement('Declassify', 'close-icon-link', 'close-icon', key, stdResponseData.displayId, stdResponseData.totalMarkValue, stdResponseData.candidateScriptId, stdResponseData.esCandidateScriptMarkSchemeGroupId, stdResponseData.markingModeId, stdResponseData.rigOrder, stdResponseData.esMarkGroupRowVersion);\r\n                        }\r\n                        else {\r\n                            //Adding the 'last-cell' column as this column is not added to classified worklst by default\r\n                            key = index + '_DeClassify_' + gridColumnCount;\r\n                        }\r\n                        break;\r\n                    case gridColumnNames.SLAOIndicator:\r\n                        key = index + '_SLAOIndicator_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = (_this.getSLAOIndicatorElementForStandardisationResponses(stdResponseData, componentPropsJson, key, true, false));\r\n                        break;\r\n                    case gridColumnNames.AllPageAnnotedIndicator:\r\n                        key = index + '_AllPageAnnotated_' + gridColumnCount;\r\n                        // Create annotation indicator element.\r\n                        _stdGridCell.columnElement = _this.getAllPageAnnotationIndicatorElement(stdResponseData, componentPropsJson, key);\r\n                        break;\r\n                    case gridColumnNames.AllFilesNotViewedIndicator:\r\n                        key = index + '_AllFilesNotViewed_' + gridColumnCount;\r\n                        // Create annotation indicator element.\r\n                        _stdGridCell.columnElement = _this.getAllFilesNotViewedIndicatorElement(stdResponseData, componentPropsJson, key);\r\n                        break;\r\n                    default:\r\n                }\r\n                _stdGridCell.isHidden = _this.getCellVisibility(_stdResponseColumn);\r\n                var cellStyle = gridColumns[gridColumnCount].CssClass\r\n                    ? gridColumns[gridColumnCount].CssClass\r\n                    : '';\r\n                _stdGridCell.setCellStyle(cellStyle);\r\n                stdGridRowHeaderCellcollection.push(_stdGridCell);\r\n            }\r\n            // Get individual question's marks if Mark by question view.\r\n            if (gridType === enums.GridType.markByQuestion) {\r\n                stdGridRowHeaderCellcollection.concat(_this.getDynamicValueForMarks(stdResponseData, stdGridRowHeaderCellcollection, index));\r\n                if (standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse &&\r\n                    (standardisationSetupStore.instance.stdSetupPermissionCCData &&\r\n                        standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.declassify) &&\r\n                    _this.isRetainProvisionalMarksCCOn() &&\r\n                    !qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete) {\r\n                    _stdGridCell = new gridCell();\r\n                    key = index + '_DeClassify_' + stdGridRowHeaderCellcollection.length + 1;\r\n                    _stdGridCell.columnElement = _this.getDeclassifyButtonElement('Declassify', 'close-icon-link', 'close-icon', key, stdResponseData.displayId, stdResponseData.totalMarkValue, stdResponseData.candidateScriptId, stdResponseData.esCandidateScriptMarkSchemeGroupId, stdResponseData.markingModeId, stdResponseData.rigOrder, stdResponseData.esMarkGroupRowVersion);\r\n                    _stdGridCell.isHidden = _this.getCellVisibility(_stdResponseColumn);\r\n                    var cellStyle = 'last-cell col-declassify';\r\n                    _stdGridCell.setCellStyle(cellStyle);\r\n                    stdGridRowHeaderCellcollection.push(_stdGridCell);\r\n                }\r\n                else {\r\n                    //Adding the 'last-cell' column as this column is not added to classified worklst by default\r\n                    _stdGridCell = new gridCell();\r\n                    key = index + '_DeClassify_' + stdGridRowHeaderCellcollection.length + 1;\r\n                    _stdGridCell.isHidden = _this.getCellVisibility(_stdResponseColumn);\r\n                    var cellStyle = 'last-cell';\r\n                    _stdGridCell.setCellStyle(cellStyle);\r\n                    stdGridRowHeaderCellcollection.push(_stdGridCell);\r\n                }\r\n            }\r\n            // Check whetehr the classifcation type exceeded the current target,\r\n            // if so highlight the exceeded last rows with amber color.\r\n            // Applicable for Classified Worklist\r\n            var overClassified = _this.isSSUTargetsOverClassified(standardisationSetupType, stdResponseData.markingModeId, stdResponseData.rigOrder);\r\n            // Creating the grid row collection.\r\n            stdGridRowCollection.push(_this.getGridRow(stdResponseData.displayId.toString(), stdGridRowHeaderCellcollection, undefined, undefined, responseStatuses, overClassified));\r\n            index++;\r\n        });\r\n        // Return the STD Set up row collection for Unfrozen data.\r\n        return stdGridRowCollection;\r\n    };\r\n    /**\r\n     * Creating react element for the  RIG Order Column component\r\n     * @param seq\r\n     * @param className\r\n     * @param classificationType\r\n     * @param rigOrder\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getRIGOrderColumnElement = function (seq, className, classificationType, rigOrder) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            classificationType: classificationType,\r\n            rigOrder: rigOrder,\r\n            className: className\r\n        };\r\n        return React.createElement(RigOrder, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  getSLAOIndicatorElement component\r\n     * @param standardisationScriptDetails\r\n     * @param propsNames\r\n     * @param seq\r\n     * @param showMarkingProgress\r\n     * @param isTileView\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getSLAOIndicatorElement = function (standardisationScriptDetails, propsNames, seq, showMarkingProgress, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isResponseHasSLAO: standardisationScriptDetails.hasAdditionalObjects,\r\n            isAllAnnotated: false,\r\n            isMarkingCompleted: false,\r\n            isTileView: isTileView,\r\n            markSchemeGroupId: standardisationSetupStore.instance.markSchemeGroupId\r\n        };\r\n        return React.createElement(slaoAnnotationIndicator, componentProps);\r\n    };\r\n    /**\r\n     * Getting SLAO Indicator Element for Standardisation Responses\r\n     * @param {StandardisationResponseDetails} standardisationResponseDetails\r\n     * @param {*} propsNames\r\n     * @param {string} seq\r\n     * @param {boolean} showMarkingProgress\r\n     * @param {boolean} [isTileView=true]\r\n     * @returns {JSX.Element}\r\n     * @memberof StandardisationSetupHelperBase\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getSLAOIndicatorElementForStandardisationResponses = function (standardisationResponseDetails, propsNames, seq, showMarkingProgress, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isResponseHasSLAO: standardisationResponseDetails.hasAdditionalObjects,\r\n            isAllAnnotated: standardisationResponseDetails.hasAllPagesAnnotated,\r\n            isMarkingCompleted: ((showMarkingProgress ? standardisationResponseDetails.markingProgress : 100) === 100) ? true : false,\r\n            isTileView: isTileView,\r\n            markSchemeGroupId: standardisationSetupStore.instance.markSchemeGroupId\r\n        };\r\n        return React.createElement(slaoAnnotationIndicator, componentProps);\r\n    };\r\n    /**\r\n     * Creating react element for the  MarkingProgress component.\r\n     * @param standardisationResponses\r\n     * @param propsNames\r\n     * @param seq\r\n     * @param responseStatuses\r\n     * @param standardisationSetup\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getMarkingProgressElement = function (standardisationResponses, propsNames, seq, responseStatuses, standardisationSetup) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            responseStatus: responseStatuses,\r\n            progress: standardisationResponses.markingProgress,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            markGroupId: standardisationResponses.esMarkGroupId,\r\n            isSubmitDisabled: false,\r\n            standardisationSetupTab: standardisationSetup,\r\n            stdResponseDetails: standardisationResponses\r\n        };\r\n        return React.createElement(MarkingProgress, componentProps);\r\n    };\r\n    /**\r\n     * Show the AllPageAnnotationIndicator when the CC is on and marking is completed\r\n     * blocking submission.\r\n     * @param {ResponseBase} responseData\r\n     * @param {any} propsNames\r\n     * @param {string} seq\r\n     * @returns\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getAllPageAnnotationIndicatorElement = function (responseData, propsNames, seq, showMarkingProgress) {\r\n        if (showMarkingProgress === void 0) { showMarkingProgress = true; }\r\n        var isForceAnnotationCCOn = this.getCCValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, responseData.markSchemeGroupId);\r\n        var markingProgress = responseData[propsNames.markingProgress];\r\n        // we need to show this in tile view only if we 100% marked responses and\r\n        // all page annotation cc is on.\r\n        if (isForceAnnotationCCOn === 'true' && markingProgress === 100) {\r\n            var componentProps = void 0;\r\n            componentProps = {\r\n                key: seq,\r\n                id: seq,\r\n                selectedLanguage: localeStore.instance.Locale,\r\n                isAllAnnotated: responseData[propsNames.hasAllPagesAnnotated],\r\n                isMarkingCompleted: ((showMarkingProgress ? responseData[propsNames.markingProgress] : 100) === 100) ? true : false,\r\n                isTileView: false,\r\n                markSchemeGroupId: responseData.markSchemeGroupId\r\n            };\r\n            var allPageElement = Immutable.List([React.createElement(allPageAnnotationIndicator, componentProps)]);\r\n            return this.getWrappedColumn(allPageElement, 'col wl-slao-holder', seq + 'wrapped').columnElement;\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * creating react element for the  getAllPageAnnotatedIndicatorElement component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the component\r\n     * @param seq - key value for the component\r\n     * @param showMarkingProgress - key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getAllFilesNotViewedIndicatorElement = function (responseData, propsNames, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            allFilesViewed: responseData[propsNames.allFilesViewed],\r\n            isMarkingCompleted: responseData[propsNames.markingProgress] === 100 ? true : false,\r\n            isTileView: false,\r\n            isECourseworkComponent: eCourseworkHelper.isECourseworkComponent\r\n        };\r\n        return React.createElement(allFilesNotViewedIndicator, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  Shared Response Indicator component\r\n     * @param stdResponseData\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getSharedResponseIndicatorElement = function (isSharedProvisional, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isSharedProvisional: isSharedProvisional\r\n        };\r\n        return React.createElement(sharedResponseIndicatorElement, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  Shared Response Indicator component\r\n     * @param stdResponseData\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.isCommonProvisionalStandardisationOn = function () {\r\n        return this.getCCValue(configurableCharacteristicsNames.CommonProvisionalStandardisation, standardisationSetupStore.instance.markSchemeGroupId).toLowerCase() === 'true';\r\n    };\r\n    /**\r\n     * Get restricted Classification types\r\n     * which should be highlighted as amber when over classified.\r\n     * @param markSchemeGroupId\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getRestrictedSSUTarget = function (markSchemeGroupId) {\r\n        var restrictSSUTargetsCCValue = configurableCharacteristicsHelper.getCharacteristicValue('RestrictStandardisationSetupTargets', markSchemeGroupId);\r\n        if (restrictSSUTargetsCCValue !== '') {\r\n            var xmlHelperObj = new xmlHelper(restrictSSUTargetsCCValue);\r\n            var restrictedTargetNodes = xmlHelperObj.getAllChildNodes();\r\n            var restrictedTargets = immutable.List();\r\n            if (restrictedTargetNodes) {\r\n                // get targets which are restricted. exclude seed.\r\n                for (var node = 0; node < restrictedTargetNodes.length; node++) {\r\n                    switch (restrictedTargetNodes[node].firstChild.nodeValue) {\r\n                        case 'Practice':\r\n                            restrictedTargets =\r\n                                immutable.List(restrictedTargets.concat(enums.MarkingMode.Practice));\r\n                            break;\r\n                        case 'Standardisation':\r\n                            restrictedTargets =\r\n                                immutable.List(restrictedTargets.concat(enums.MarkingMode.Approval));\r\n                            break;\r\n                        case 'STMStandardisation':\r\n                            restrictedTargets =\r\n                                immutable.List(restrictedTargets.concat(enums.MarkingMode.ES_TeamApproval));\r\n                            break;\r\n                    }\r\n                }\r\n                return restrictedTargets;\r\n            }\r\n            return undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Get Standardisation Setup Required Targets\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getStandardisationSetupRequiredTargets = function () {\r\n        var standardisationSetupRequiredTargetsCCValue = configurableCharacteristicsHelper.getCharacteristicValue('StandardisationSetupRequiredTargets');\r\n        if (standardisationSetupRequiredTargetsCCValue !== '') {\r\n            var xmlHelperObj = new xmlHelper(standardisationSetupRequiredTargetsCCValue);\r\n            var requiredTargetNodes = xmlHelperObj.getAllChildNodes();\r\n            var requiredTargets = Immutable.List();\r\n            if (requiredTargetNodes) {\r\n                // get targets which are restricted. exclude seed.\r\n                for (var node = 0; node < requiredTargetNodes.length; node++) {\r\n                    if (requiredTargetNodes[node].firstChild !== null) {\r\n                        switch (requiredTargetNodes[node].firstChild.nodeValue) {\r\n                            case 'Practice':\r\n                                requiredTargets =\r\n                                    Immutable.List(requiredTargets.concat(enums.MarkingMode.Practice));\r\n                                break;\r\n                            case 'Standardisation':\r\n                                requiredTargets =\r\n                                    Immutable.List(requiredTargets.concat(enums.MarkingMode.Approval));\r\n                                break;\r\n                            case 'STMStandardisation':\r\n                                requiredTargets =\r\n                                    Immutable.List(requiredTargets.concat(enums.MarkingMode.ES_TeamApproval));\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                return requiredTargets;\r\n            }\r\n            return undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Check whether the specified target ov3erclassified\r\n     * @param tabSelection\r\n     * @param markingMode\r\n     * @param rigOrder\r\n     */\r\n    StandardisationSetupHelperBase.prototype.isSSUTargetsOverClassified = function (tabSelection, markingMode, rigOrder) {\r\n        // Hold the Restricted targets which should be highlighted when over classified.\r\n        var restrictedSSUTargets = this.getRestrictedSSUTarget(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId);\r\n        var classificationSummaryTargetDetails = standardisationSetupStore.instance.classificationSummaryTargetDetails;\r\n        return tabSelection === enums.StandardisationSetup.ClassifiedResponse &&\r\n            restrictedSSUTargets && restrictedSSUTargets.contains(markingMode) &&\r\n            classificationSummaryTargetDetails.some(function (x) { return x.markingModeId === markingMode &&\r\n                x.markingModeId !== enums.MarkingMode.Seeding &&\r\n                x.count > x.target && rigOrder > x.target; });\r\n    };\r\n    return StandardisationSetupHelperBase;\r\n}());\r\nmodule.exports = StandardisationSetupHelperBase;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 296:
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./src/components/utility/grid/gridrow.ts ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Row Definition for Grid Compoent\r\n */\r\nvar GridRow = /** @class */ (function () {\r\n    function GridRow() {\r\n    }\r\n    /**\r\n     * returns the rowId\r\n     */\r\n    GridRow.prototype.getRowId = function () {\r\n        return this.rowId;\r\n    };\r\n    /**\r\n     * returns the cells\r\n     */\r\n    GridRow.prototype.getCells = function () {\r\n        return this.cells;\r\n    };\r\n    /**\r\n     * set the cells\r\n     */\r\n    GridRow.prototype.setCells = function (_cells) {\r\n        this.cells = _cells;\r\n    };\r\n    /**\r\n     * returns the rowStyle\r\n     */\r\n    GridRow.prototype.getRowStyle = function () {\r\n        return this.rowStyle;\r\n    };\r\n    /**\r\n     * set the rowStyle\r\n     */\r\n    GridRow.prototype.setRowStyle = function (_rowStyle) {\r\n        this.rowStyle = _rowStyle;\r\n    };\r\n    /**\r\n     * set the rowId\r\n     * @param rowId\r\n     */\r\n    GridRow.prototype.setRowId = function (rowId) {\r\n        this.rowId = rowId;\r\n    };\r\n    /**\r\n     * returns the rowTitle\r\n     */\r\n    GridRow.prototype.getRowTitle = function () {\r\n        return this.rowTitle;\r\n    };\r\n    /**\r\n     * returns the rowTitle\r\n     */\r\n    GridRow.prototype.setRowTitle = function (title) {\r\n        this.rowTitle = title;\r\n    };\r\n    /**\r\n     * returns the additional row Element\r\n     */\r\n    GridRow.prototype.getAdditionalElement = function () {\r\n        return this.additionalElement;\r\n    };\r\n    /**\r\n     * returns the additional row Element\r\n     */\r\n    GridRow.prototype.setAdditionalElement = function (_additionalElement) {\r\n        this.additionalElement = _additionalElement;\r\n    };\r\n    return GridRow;\r\n}());\r\nmodule.exports = GridRow;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL2dyaWRyb3cudHM/ZTk1YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPSd0eXBpbmdzL3Jvdy50cycgLz5cclxuaW1wb3J0IGdyaWRDZWxsID0gcmVxdWlyZSgnLi9ncmlkY2VsbCcpO1xyXG5cclxuLyoqXHJcbiAqIFJvdyBEZWZpbml0aW9uIGZvciBHcmlkIENvbXBvZW50XHJcbiAqL1xyXG5jbGFzcyBHcmlkUm93IGltcGxlbWVudHMgUm93IHtcclxuXHJcbiAgICBwcml2YXRlIGNlbGxzOiBBcnJheTxncmlkQ2VsbD47XHJcbiAgICBwcml2YXRlIHJvd1N0eWxlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHJvd0lkOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHJvd1RpdGxlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGFkZGl0aW9uYWxFbGVtZW50OiBKU1guRWxlbWVudDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIHJvd0lkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRSb3dJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb3dJZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIGNlbGxzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRDZWxscygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jZWxscztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldCB0aGUgY2VsbHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldENlbGxzKF9jZWxsczogQXJyYXk8Z3JpZENlbGw+KSB7XHJcbiAgICAgICAgdGhpcy5jZWxscyA9IF9jZWxscztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIHJvd1N0eWxlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRSb3dTdHlsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb3dTdHlsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldCB0aGUgcm93U3R5bGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldFJvd1N0eWxlKF9yb3dTdHlsZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5yb3dTdHlsZSA9IF9yb3dTdHlsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldCB0aGUgcm93SWRcclxuICAgICAqIEBwYXJhbSByb3dJZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0Um93SWQocm93SWQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMucm93SWQgPSByb3dJZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIHJvd1RpdGxlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRSb3dUaXRsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb3dUaXRsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIHJvd1RpdGxlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRSb3dUaXRsZSh0aXRsZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5yb3dUaXRsZSA9IHRpdGxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyB0aGUgYWRkaXRpb25hbCByb3cgRWxlbWVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0QWRkaXRpb25hbEVsZW1lbnQoKTogSlNYLkVsZW1lbnQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZGl0aW9uYWxFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyB0aGUgYWRkaXRpb25hbCByb3cgRWxlbWVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0QWRkaXRpb25hbEVsZW1lbnQoX2FkZGl0aW9uYWxFbGVtZW50OiBKU1guRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuYWRkaXRpb25hbEVsZW1lbnQgPSBfYWRkaXRpb25hbEVsZW1lbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IEdyaWRSb3c7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ3JpZC9ncmlkcm93LnRzIl0sIm1hcHBpbmdzIjoiO0FBR0E7O0FBRUE7QUFDQTtBQUFBO0FBOEVBO0FBdEVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 297:
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/actions/submit/submitactioncreator.ts ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar dispatcher = __webpack_require__(/*! ../../app/dispatcher */ 242);\r\nvar submitResponseStartedAction = __webpack_require__(/*! ./submitresponsestartedaction */ 346);\r\nvar submitResponseDataService = __webpack_require__(/*! ../../dataservices/submit/submitresponsedataservice */ 375);\r\nvar submitResponseCompletedAction = __webpack_require__(/*! ./submitresponsecompletedaction */ 345);\r\nvar shareAndClassifyCompletedAction = __webpack_require__(/*! ./shareandclassifycompletedaction */ 344);\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar base = __webpack_require__(/*! ../base/actioncreatorbase */ 280);\r\nvar SubmitActionCreator = /** @class */ (function (_super) {\r\n    __extends(SubmitActionCreator, _super);\r\n    function SubmitActionCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * when clicking on submit button\r\n     * @param markGroupId The mark group id\r\n     */\r\n    SubmitActionCreator.prototype.submitResponseStarted = function (markGroupId) {\r\n        dispatcher.dispatch(new submitResponseStartedAction(markGroupId));\r\n    };\r\n    /**\r\n     * Submit response\r\n     * @param submitResponseArgument\r\n     * @param markSchemeGroupId\r\n     * @param worklistType\r\n     * @param remarkRequestType\r\n     * @param selectedDisplayId\r\n     */\r\n    SubmitActionCreator.prototype.submitResponse = function (submitResponseArgument, markSchemeGroupId, worklistType, remarkRequestType, fromMarkschemepanel, selectedDisplayId, examinerRoleIds, markSchemeGroupIds, isStdSetupMode) {\r\n        if (remarkRequestType === void 0) { remarkRequestType = enums.RemarkRequestType.Unknown; }\r\n        if (fromMarkschemepanel === void 0) { fromMarkschemepanel = false; }\r\n        if (selectedDisplayId === void 0) { selectedDisplayId = undefined; }\r\n        if (examinerRoleIds === void 0) { examinerRoleIds = null; }\r\n        if (markSchemeGroupIds === void 0) { markSchemeGroupIds = null; }\r\n        if (isStdSetupMode === void 0) { isStdSetupMode = false; }\r\n        var that = this;\r\n        submitResponseDataService.submitResponses(submitResponseArgument, markSchemeGroupId, worklistType, remarkRequestType, examinerRoleIds, markSchemeGroupIds, function (success, submitResponseReturn) {\r\n            // This will validate the call to find any network failure\r\n            // and is mandatory to add this.\r\n            if (that.validateCall(submitResponseReturn, true, true)) {\r\n                if (!success) {\r\n                    submitResponseReturn = undefined;\r\n                }\r\n                dispatcher.dispatch(new submitResponseCompletedAction(success, submitResponseReturn, worklistType, fromMarkschemepanel, submitResponseArgument.examinerApproval, submitResponseArgument.markGroupIds, selectedDisplayId, isStdSetupMode));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Share and Classify response\r\n     * @param submitResponseArgument\r\n     * @param fromMarkschemepanel\r\n     * @param selectedDisplayId\r\n     */\r\n    SubmitActionCreator.prototype.shareAndClassifyResponse = function (submitResponseArgument, fromMarkschemepanel, selectedDisplayId) {\r\n        if (fromMarkschemepanel === void 0) { fromMarkschemepanel = false; }\r\n        if (selectedDisplayId === void 0) { selectedDisplayId = undefined; }\r\n        var that = this;\r\n        submitResponseDataService.ShareAndClassifyResponse(submitResponseArgument, function (success, shareAndClassifyReturn) {\r\n            // This will validate the call to find any network failure\r\n            // and is mandatory to add this.\r\n            if (that.validateCall(shareAndClassifyReturn, true, true)) {\r\n                if (!success) {\r\n                    shareAndClassifyReturn = undefined;\r\n                }\r\n                dispatcher.dispatch(new shareAndClassifyCompletedAction(success, shareAndClassifyReturn, fromMarkschemepanel, selectedDisplayId));\r\n            }\r\n        });\r\n    };\r\n    return SubmitActionCreator;\r\n}(base));\r\nvar submitActionCreator = new SubmitActionCreator();\r\nmodule.exports = submitActionCreator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvc3VibWl0L3N1Ym1pdGFjdGlvbmNyZWF0b3IudHM/ZDMyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uLy4uL2FwcC9kaXNwYXRjaGVyJyk7XHJcbmltcG9ydCBzdWJtaXRSZXNwb25zZVN0YXJ0ZWRBY3Rpb24gPSByZXF1aXJlKCcuL3N1Ym1pdHJlc3BvbnNlc3RhcnRlZGFjdGlvbicpO1xyXG5pbXBvcnQgc3VibWl0UmVzcG9uc2VEYXRhU2VydmljZSA9IHJlcXVpcmUoJy4uLy4uL2RhdGFzZXJ2aWNlcy9zdWJtaXQvc3VibWl0cmVzcG9uc2VkYXRhc2VydmljZScpO1xyXG5pbXBvcnQgc3VibWl0UmVzcG9uc2VDb21wbGV0ZWRBY3Rpb24gPSByZXF1aXJlKCcuL3N1Ym1pdHJlc3BvbnNlY29tcGxldGVkYWN0aW9uJyk7XHJcbmltcG9ydCBzaGFyZUFuZENsYXNzaWZ5Q29tcGxldGVkQWN0aW9uID0gcmVxdWlyZSgnLi9zaGFyZWFuZGNsYXNzaWZ5Y29tcGxldGVkYWN0aW9uJyk7XHJcbmltcG9ydCB3b3JrbGlzdERhdGFTZXJ2aWNlID0gcmVxdWlyZSgnLi4vLi4vZGF0YXNlcnZpY2VzL3dvcmtsaXN0L3dvcmtsaXN0ZGF0YXNlcnZpY2UnKTtcclxuaW1wb3J0IG1hcmtlclByb2dyZXNzRGF0YSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy93b3JrbGlzdC90eXBpbmdzL21hcmtlcnByb2dyZXNzZGF0YScpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IGJhc2UgPSByZXF1aXJlKCcuLi9iYXNlL2FjdGlvbmNyZWF0b3JiYXNlJyk7XHJcbmltcG9ydCBTaGFyZUFuZENsYXNzaWZ5UmV0dXJuID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL3N1Ym1pdC90eXBpbmdzL3NoYXJlQW5kQ2xhc3NpZnlSZXR1cm4nKTtcclxuY2xhc3MgU3VibWl0QWN0aW9uQ3JlYXRvciBleHRlbmRzIGJhc2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiB3aGVuIGNsaWNraW5nIG9uIHN1Ym1pdCBidXR0b25cclxuICAgICAqIEBwYXJhbSBtYXJrR3JvdXBJZCBUaGUgbWFyayBncm91cCBpZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3VibWl0UmVzcG9uc2VTdGFydGVkKG1hcmtHcm91cElkOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBkaXNwYXRjaGVyLmRpc3BhdGNoKG5ldyBzdWJtaXRSZXNwb25zZVN0YXJ0ZWRBY3Rpb24obWFya0dyb3VwSWQpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFN1Ym1pdCByZXNwb25zZVxyXG4gICAgICogQHBhcmFtIHN1Ym1pdFJlc3BvbnNlQXJndW1lbnRcclxuICAgICAqIEBwYXJhbSBtYXJrU2NoZW1lR3JvdXBJZFxyXG4gICAgICogQHBhcmFtIHdvcmtsaXN0VHlwZVxyXG4gICAgICogQHBhcmFtIHJlbWFya1JlcXVlc3RUeXBlXHJcbiAgICAgKiBAcGFyYW0gc2VsZWN0ZWREaXNwbGF5SWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN1Ym1pdFJlc3BvbnNlKHN1Ym1pdFJlc3BvbnNlQXJndW1lbnQ6IFN1Ym1pdFJlc3BvbnNlQXJndW1lbnQsXHJcbiAgICAgICAgbWFya1NjaGVtZUdyb3VwSWQ6IG51bWJlcixcclxuICAgICAgICB3b3JrbGlzdFR5cGU6IGVudW1zLldvcmtsaXN0VHlwZSxcclxuICAgICAgICByZW1hcmtSZXF1ZXN0VHlwZTogZW51bXMuUmVtYXJrUmVxdWVzdFR5cGUgPSBlbnVtcy5SZW1hcmtSZXF1ZXN0VHlwZS5Vbmtub3duLCBmcm9tTWFya3NjaGVtZXBhbmVsOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICAgICAgc2VsZWN0ZWREaXNwbGF5SWQ6IHN0cmluZyA9IHVuZGVmaW5lZCwgZXhhbWluZXJSb2xlSWRzOiBBcnJheTxudW1iZXI+ID0gbnVsbCwgbWFya1NjaGVtZUdyb3VwSWRzOiBBcnJheTxudW1iZXI+ID0gbnVsbCxcclxuICAgICAgICBpc1N0ZFNldHVwTW9kZTogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICBzdWJtaXRSZXNwb25zZURhdGFTZXJ2aWNlLnN1Ym1pdFJlc3BvbnNlcyhzdWJtaXRSZXNwb25zZUFyZ3VtZW50LCBtYXJrU2NoZW1lR3JvdXBJZCxcclxuICAgICAgICAgICAgd29ya2xpc3RUeXBlLFxyXG4gICAgICAgICAgICByZW1hcmtSZXF1ZXN0VHlwZSwgZXhhbWluZXJSb2xlSWRzLCBtYXJrU2NoZW1lR3JvdXBJZHMsXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChzdWNjZXNzOiBib29sZWFuLCBzdWJtaXRSZXNwb25zZVJldHVybj86IFN1Ym1pdFJlc3BvbnNlUmV0dXJuKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgdmFsaWRhdGUgdGhlIGNhbGwgdG8gZmluZCBhbnkgbmV0d29yayBmYWlsdXJlXHJcbiAgICAgICAgICAgICAgICAvLyBhbmQgaXMgbWFuZGF0b3J5IHRvIGFkZCB0aGlzLlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoYXQudmFsaWRhdGVDYWxsKHN1Ym1pdFJlc3BvbnNlUmV0dXJuLCB0cnVlLCB0cnVlKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0UmVzcG9uc2VSZXR1cm4gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoZXIuZGlzcGF0Y2gobmV3IHN1Ym1pdFJlc3BvbnNlQ29tcGxldGVkQWN0aW9uKHN1Y2Nlc3MsIHN1Ym1pdFJlc3BvbnNlUmV0dXJuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrbGlzdFR5cGUsIGZyb21NYXJrc2NoZW1lcGFuZWwsIHN1Ym1pdFJlc3BvbnNlQXJndW1lbnQuZXhhbWluZXJBcHByb3ZhbCwgc3VibWl0UmVzcG9uc2VBcmd1bWVudC5tYXJrR3JvdXBJZHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRGlzcGxheUlkLCBpc1N0ZFNldHVwTW9kZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaGFyZSBhbmQgQ2xhc3NpZnkgcmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSBzdWJtaXRSZXNwb25zZUFyZ3VtZW50XHJcbiAgICAgKiBAcGFyYW0gZnJvbU1hcmtzY2hlbWVwYW5lbFxyXG4gICAgICogQHBhcmFtIHNlbGVjdGVkRGlzcGxheUlkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzaGFyZUFuZENsYXNzaWZ5UmVzcG9uc2UoXHJcbiAgICAgICAgc3VibWl0UmVzcG9uc2VBcmd1bWVudDogU3VibWl0UmVzcG9uc2VBcmd1bWVudCxcclxuICAgICAgICBmcm9tTWFya3NjaGVtZXBhbmVsOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICAgICAgc2VsZWN0ZWREaXNwbGF5SWQ6IHN0cmluZyA9IHVuZGVmaW5lZCxcclxuICAgICk6IHZvaWQge1xyXG5cclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgc3VibWl0UmVzcG9uc2VEYXRhU2VydmljZS5TaGFyZUFuZENsYXNzaWZ5UmVzcG9uc2Uoc3VibWl0UmVzcG9uc2VBcmd1bWVudCxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKHN1Y2Nlc3M6IGJvb2xlYW4sIHNoYXJlQW5kQ2xhc3NpZnlSZXR1cm4/OiBTaGFyZUFuZENsYXNzaWZ5UmV0dXJuKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHdpbGwgdmFsaWRhdGUgdGhlIGNhbGwgdG8gZmluZCBhbnkgbmV0d29yayBmYWlsdXJlXHJcbiAgICAgICAgICAgICAgICAvLyBhbmQgaXMgbWFuZGF0b3J5IHRvIGFkZCB0aGlzLlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoYXQudmFsaWRhdGVDYWxsKHNoYXJlQW5kQ2xhc3NpZnlSZXR1cm4sIHRydWUsIHRydWUpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFyZUFuZENsYXNzaWZ5UmV0dXJuID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGVyLmRpc3BhdGNoKG5ldyBzaGFyZUFuZENsYXNzaWZ5Q29tcGxldGVkQWN0aW9uKHN1Y2Nlc3MsIHNoYXJlQW5kQ2xhc3NpZnlSZXR1cm4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb21NYXJrc2NoZW1lcGFuZWwsIHNlbGVjdGVkRGlzcGxheUlkKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmxldCBzdWJtaXRBY3Rpb25DcmVhdG9yID0gbmV3IFN1Ym1pdEFjdGlvbkNyZWF0b3IoKTtcclxuLyogZXhwb3J0aW5nIGFuIGluc3RhbmNlIG9mIFN1Ym1pdEFjdGlvbkNyZWF0b3IgKi9cclxuZXhwb3J0ID0gc3VibWl0QWN0aW9uQ3JlYXRvcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2FjdGlvbnMvc3VibWl0L3N1Ym1pdGFjdGlvbmNyZWF0b3IudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7O0FBdUVBO0FBdEVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7Ozs7O0FBT0E7QUFDQTtBQUdBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUVBOzs7OztBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 304:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/utility/worklistvalidators/worklistvalidatorlist.ts ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * List of validators used for worklists. An entry should be added to this enum for all worklist validators\r\n */\r\nvar WorklistValidatorList;\r\n(function (WorklistValidatorList) {\r\n    WorklistValidatorList[WorklistValidatorList[\"liveOpen\"] = 0] = \"liveOpen\";\r\n    WorklistValidatorList[WorklistValidatorList[\"atypicalOpen\"] = 1] = \"atypicalOpen\";\r\n    WorklistValidatorList[WorklistValidatorList[\"standardisationOpen\"] = 2] = \"standardisationOpen\";\r\n    WorklistValidatorList[WorklistValidatorList[\"practiceOpen\"] = 3] = \"practiceOpen\";\r\n    WorklistValidatorList[WorklistValidatorList[\"directedRemarkOpen\"] = 4] = \"directedRemarkOpen\";\r\n    WorklistValidatorList[WorklistValidatorList[\"simulationOpen\"] = 5] = \"simulationOpen\";\r\n})(WorklistValidatorList || (WorklistValidatorList = {}));\r\nmodule.exports = WorklistValidatorList;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvd29ya2xpc3R2YWxpZGF0b3JzL3dvcmtsaXN0dmFsaWRhdG9ybGlzdC50cz9lZTc5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBMaXN0IG9mIHZhbGlkYXRvcnMgdXNlZCBmb3Igd29ya2xpc3RzLiBBbiBlbnRyeSBzaG91bGQgYmUgYWRkZWQgdG8gdGhpcyBlbnVtIGZvciBhbGwgd29ya2xpc3QgdmFsaWRhdG9yc1xyXG4gKi9cclxuXHJcbmVudW0gV29ya2xpc3RWYWxpZGF0b3JMaXN0IHtcclxuICAgIGxpdmVPcGVuLFxyXG4gICAgYXR5cGljYWxPcGVuLFxyXG4gICAgc3RhbmRhcmRpc2F0aW9uT3BlbixcclxuICAgIHByYWN0aWNlT3BlbixcclxuICAgIGRpcmVjdGVkUmVtYXJrT3BlbixcclxuICAgIHNpbXVsYXRpb25PcGVuXHJcbn1cclxuZXhwb3J0ID0gV29ya2xpc3RWYWxpZGF0b3JMaXN0O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS93b3JrbGlzdHZhbGlkYXRvcnMvd29ya2xpc3R2YWxpZGF0b3JsaXN0LnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7O0FBRUE7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 308:
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/components/utility/togglebutton.tsx ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\n/**\r\n * React component class for Ask on Logout confirmation\r\n */\r\nvar ToggleButton = /** @class */ (function (_super) {\r\n    __extends(ToggleButton, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function ToggleButton(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.onToggleChange = function () {\r\n            _this.props.onChange(_this.props.index, !_this.props.isChecked, _this.props.displayId);\r\n        };\r\n        _this.onToggleChange = _this.onToggleChange.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render method\r\n     */\r\n    ToggleButton.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: classNames('toggle-button', this.props.className), \"aria-pressed\": 'false', style: this.props.style, title: this.props.title },\r\n            React.createElement(\"input\", { type: 'checkbox', id: this.props.id + '_toggle_button', \"data-value\": this.props.isChecked, checked: this.props.isChecked, onChange: this.onToggleChange, disabled: this.props.isDisabled }),\r\n            React.createElement(\"label\", { className: 'toggle-label', id: this.props.id + '_label', htmlFor: this.props.id + '_toggle_button', title: this.props.title },\r\n                React.createElement(\"div\", { className: 'toggle-content' },\r\n                    React.createElement(\"div\", { className: 'on-text' }, this.props.onText),\r\n                    React.createElement(\"div\", { className: 'off-text' }, this.props.offText)),\r\n                React.createElement(\"div\", { className: 'toggle-switch' }))));\r\n    };\r\n    return ToggleButton;\r\n}(pureRenderComponent));\r\nmodule.exports = ToggleButton;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS90b2dnbGVidXR0b24udHN4P2ZjZmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxubGV0IGNsYXNzTmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XHJcbmltcG9ydCBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5cclxuLyoqXHJcbiAqIFByb3BzIGZvciB0aGUgTGVmdCBQYW5lbFxyXG4gKi9cclxuaW50ZXJmYWNlIFRvZ2dsZUJ1dHRvblByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIGluZGV4OiBudW1iZXI7XHJcbiAgICBpc0NoZWNrZWQ6IGJvb2xlYW47XHJcbiAgICBvbkNoYW5nZTogRnVuY3Rpb247XHJcbiAgICBzdHlsZTogUmVhY3QuQ1NTUHJvcGVydGllcztcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcblx0Y2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gICAgaXNEaXNhYmxlZD86IGJvb2xlYW47XHJcbiAgICBvblRleHQ6IHN0cmluZztcclxuICAgIG9mZlRleHQ6IHN0cmluZztcclxuICAgIGRpc3BsYXlJZD86IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlYWN0IGNvbXBvbmVudCBjbGFzcyBmb3IgQXNrIG9uIExvZ291dCBjb25maXJtYXRpb25cclxuICovXHJcbmNsYXNzIFRvZ2dsZUJ1dHRvbiBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8VG9nZ2xlQnV0dG9uUHJvcHMsIGFueT4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBUb2dnbGVCdXR0b25Qcm9wcywgc3RhdGU6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBzdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5vblRvZ2dsZUNoYW5nZSA9IHRoaXMub25Ub2dnbGVDaGFuZ2UuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBtZXRob2RcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygndG9nZ2xlLWJ1dHRvbicsIHRoaXMucHJvcHMuY2xhc3NOYW1lKX1cclxuICAgICAgICAgICAgICAgIGFyaWEtcHJlc3NlZD0nZmFsc2UnIHN0eWxlPXt0aGlzLnByb3BzLnN0eWxlfSB0aXRsZT17dGhpcy5wcm9wcy50aXRsZX0gPlxyXG5cdFx0XHRcdDxpbnB1dCB0eXBlPSdjaGVja2JveCcgaWQ9e3RoaXMucHJvcHMuaWQgKyAnX3RvZ2dsZV9idXR0b24nfVxyXG5cdFx0XHRcdFx0ZGF0YS12YWx1ZT17dGhpcy5wcm9wcy5pc0NoZWNrZWR9IGNoZWNrZWQ9e3RoaXMucHJvcHMuaXNDaGVja2VkfSBvbkNoYW5nZT17dGhpcy5vblRvZ2dsZUNoYW5nZX0gZGlzYWJsZWQ9e3RoaXMucHJvcHMuaXNEaXNhYmxlZH0gLz5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9J3RvZ2dsZS1sYWJlbCcgaWQ9e3RoaXMucHJvcHMuaWQgKyAnX2xhYmVsJ30gaHRtbEZvcj17dGhpcy5wcm9wcy5pZCArICdfdG9nZ2xlX2J1dHRvbid9XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9e3RoaXMucHJvcHMudGl0bGV9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0b2dnbGUtY29udGVudCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdvbi10ZXh0Jz57dGhpcy5wcm9wcy5vblRleHR9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdvZmYtdGV4dCc+e3RoaXMucHJvcHMub2ZmVGV4dH08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndG9nZ2xlLXN3aXRjaCc+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Ub2dnbGVDaGFuZ2UgPSAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZSh0aGlzLnByb3BzLmluZGV4LCAhdGhpcy5wcm9wcy5pc0NoZWNrZWQsIHRoaXMucHJvcHMuZGlzcGxheUlkKTtcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCA9IFRvZ2dsZUJ1dHRvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS90b2dnbGVidXR0b24udHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFQTtBQW1CQTs7QUFFQTtBQUNBO0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFBQTtBQTBCQTtBQUNBO0FBQ0E7QUExQkE7O0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFJQTtBQUtBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 313:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/response/responsescreen/taglist.tsx ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar Tag = __webpack_require__(/*! ./tag */ 356);\r\nvar tagActionCreator = __webpack_require__(/*! ../../../actions/tag/tagactioncreator */ 441);\r\nvar responseStore = __webpack_require__(/*! ../../../stores/response/responsestore */ 235);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar domManager = __webpack_require__(/*! ../../../utility/generic/domhelper */ 294);\r\nvar loginSession = __webpack_require__(/*! ../../../app/loginsession */ 252);\r\nvar TAG_LIST_WIDTH = 90;\r\nvar TAG_LIST_HEIGHT = 216;\r\n/**\r\n * React component for reports\r\n */\r\nvar TagList = /** @class */ (function (_super) {\r\n    __extends(TagList, _super);\r\n    /**\r\n     * Constructor for TagList class\r\n     */\r\n    function TagList(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.xPos = 0;\r\n        _this.yPos = 0;\r\n        /**\r\n         * Render the list\r\n         */\r\n        _this.renderTagListItems = function () {\r\n            var that = _this;\r\n            var tagList = that.props.tagList;\r\n            var element = tagList && tagList.map(function (tagItem) {\r\n                return (React.createElement(\"li\", { className: 'tag-menu-item', id: that.props.id + '_item_' + tagItem.tagId, key: that.props.id + '_item_' + tagItem.tagId },\r\n                    React.createElement(Tag, { isSelected: (that.selectedTag === tagItem.tagId), tagType: tagItem.tagId, onSelection: that.onTagSelection, onArrowClick: that.onArrowClick, isInList: true, isFromWorklist: (that.props.markGroupId ? true : false), selectedLanguage: that.props.selectedLanguage, id: that.props.id + '_' + tagItem.tagId, key: that.props.id + '_' + tagItem.tagId })));\r\n            });\r\n            return element;\r\n        };\r\n        /**\r\n         * to hide the tag drop down clicking outside the box.\r\n         */\r\n        _this.hideTagList = function (event) {\r\n            if (event.target !== undefined &&\r\n                domManager.searchParentNode(event.target, function (el) { return el.id === 'response_tag'; }) == null) {\r\n                if (_this.state.isExpanded === true) {\r\n                    _this.setState({\r\n                        isExpanded: false\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * To change the state of the component on selecting the component.\r\n         */\r\n        _this.onTagSelection = function (selectedTag, event) {\r\n            event.stopPropagation();\r\n            // Case 1: this.props.markGroupId : Tag Updated from worklist.\r\n            // Case 2: responseStore.instance.selectedMarkGroupId : Tag Updated  within response.\r\n            var currentMarkGroupId = _this.props.markGroupId ? _this.props.markGroupId : responseStore.instance.selectedMarkGroupId;\r\n            var updateResponseTagArguments = {\r\n                markGroupList: _this.populateMarkGroupList(currentMarkGroupId, _this.props.isESResponse),\r\n                examinerId: loginSession.EXAMINER_ID,\r\n                isDelete: selectedTag === 0 ? true : false,\r\n                tagId: selectedTag,\r\n                isESResponse: _this.props.isESResponse\r\n            };\r\n            // get the updated tag order to update the worklist data with the newly selected tag.\r\n            var tagOrder = _this.props.tagList.filter(function (t) { return t.tagId === selectedTag; })[0].tagOrder;\r\n            tagActionCreator.updateTags(updateResponseTagArguments, tagOrder, currentMarkGroupId, _this.props.markingMode);\r\n        };\r\n        /**\r\n         * event listener for the tag update event\r\n         */\r\n        _this.onTagUpdated = function (selectedTag, markGroupId) {\r\n            // Case 1: !this.props.markGroupId : Tag Updated within response.\r\n            // Case 2: this.props.markGroupId === markGroupId : Tag Updated from worklist.\r\n            if (!_this.props.markGroupId || _this.props.markGroupId === markGroupId) {\r\n                _this.selectedTag = selectedTag;\r\n                _this.setState({\r\n                    isExpanded: false\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * event listener for the tag list click event\r\n         * To hide any open tag list other than selected one.\r\n         */\r\n        _this.onTagListClicked = function (selectedMarkGroupId) {\r\n            // Hide all tag list other than one selected now.\r\n            if (_this.props.markGroupId !== selectedMarkGroupId && _this.state.isExpanded === true) {\r\n                _this.setState({\r\n                    isExpanded: false\r\n                });\r\n            }\r\n        };\r\n        // Setting the initial state\r\n        _this.state = {\r\n            isExpanded: undefined\r\n        };\r\n        _this.onTagSelection = _this.onTagSelection.bind(_this);\r\n        _this.onArrowClick = _this.onArrowClick.bind(_this);\r\n        _this.hideTagList = _this.hideTagList.bind(_this);\r\n        _this.selectedTag = _this.props.selectedTagId;\r\n        _this.onTagUpdated = _this.onTagUpdated.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component.\r\n     */\r\n    TagList.prototype.render = function () {\r\n        var tagClass;\r\n        return (React.createElement(\"span\", { className: classNames('tag dropdown-wrap', { ' center right': this.isCenterAlignmentRequired === true && this.isRightAlignmentRequired === true }, { ' center left': this.isCenterAlignmentRequired === true && this.isLeftAlignmentRequired === true }, { ' bottom right': this.isRightAlignmentRequired === true && this.isBottomAlignmentRequired === true }, {\r\n                ' bottom left': this.isRightAlignmentRequired === false &&\r\n                    this.isBottomAlignmentRequired === true && this.isLeftAlignmentRequired === true\r\n            }, {\r\n                ' top left': this.isRightAlignmentRequired === false\r\n                    && this.isLeftAlignmentRequired === true && this.isTopAlignmentRequired === true\r\n            }, { ' top right': this.isRightAlignmentRequired === true && this.isTopAlignmentRequired === true }, { ' close': (this.state.isExpanded === false) }, { ' open': (this.state.isExpanded === true) }), id: 'response_tag' },\r\n            React.createElement(Tag, { isSelected: true, tagType: this.selectedTag, onSelection: this.onTagSelection, onArrowClick: this.onArrowClick, isInList: false, isFromWorklist: (this.props.markGroupId ? true : false), selectedLanguage: this.props.selectedLanguage, id: this.props.id + '_selected', key: this.props.id + '_selected' }),\r\n            React.createElement(\"div\", { className: 'menu-callout' }),\r\n            React.createElement(\"ul\", { className: 'menu tag-menu', role: 'menu', \"aria-hidden\": 'true', id: 'tag_list' }, this.renderTagListItems())));\r\n    };\r\n    /**\r\n     * triggers when the tag list component mount.\r\n     */\r\n    TagList.prototype.componentDidMount = function () {\r\n        /** Avoid memory leak warning */\r\n        worklistStore.instance.setMaxListeners(0);\r\n        window.addEventListener('touchend', this.hideTagList);\r\n        window.addEventListener('click', this.hideTagList);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.TAG_UPDATED_EVENT, this.onTagUpdated);\r\n        // Event to collapse all tag list except the selected one from worklist \r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.TAG_LIST_CLICKED, this.onTagListClicked);\r\n    };\r\n    /**\r\n     * triggers while the component receives the props.\r\n     */\r\n    TagList.prototype.componentWillReceiveProps = function (nextProps) {\r\n        if (this.selectedTag !== nextProps.selectedTagId) {\r\n            this.selectedTag = nextProps.selectedTagId;\r\n        }\r\n    };\r\n    /**\r\n     * triggers when the tag list components unmounts\r\n     */\r\n    TagList.prototype.componentWillUnmount = function () {\r\n        window.removeEventListener('touchend', this.hideTagList);\r\n        window.removeEventListener('click', this.hideTagList);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.TAG_UPDATED_EVENT, this.onTagUpdated);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.TAG_LIST_CLICKED, this.onTagListClicked);\r\n    };\r\n    /**\r\n     * On arrow click.\r\n     */\r\n    TagList.prototype.onArrowClick = function (selectedTag, event) {\r\n        // Tag List Position Logic is applicable only in worklist.\r\n        if (this.props.markGroupId) {\r\n            this.getTaglistPosition(event.clientX, event.clientY);\r\n            tagActionCreator.tagListClickAction(this.props.markGroupId);\r\n        }\r\n        this.setState({\r\n            isExpanded: !this.state.isExpanded\r\n        });\r\n    };\r\n    /**\r\n     * Check if tag list goes offscreen on right hand side of the window.\r\n     * If taglist widhth  is greater than the space available right to tag indicator then\r\n     * it means that when tag list is rendered it will go offscreen.\r\n     */\r\n    TagList.prototype.isHorizontalAlignmentRequired = function (mouseX, worklistWidth) {\r\n        // if space available right of tag indicator,\r\n        if (TAG_LIST_WIDTH < (window.innerWidth - mouseX)) {\r\n            this.isRightAlignmentRequired = true;\r\n        }\r\n        else {\r\n            if (TAG_LIST_WIDTH < (mouseX - (window.innerWidth - worklistWidth))) {\r\n                this.isLeftAlignmentRequired = true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check if tag list goes offscreen on bottom side of the window.\r\n     * If mouse Y position + tag list height is greater than\r\n     * space available bottom from tag indicator then\r\n     * it means that when tag list is rendered it will go offscreen.\r\n     */\r\n    TagList.prototype.isVerticalAlignmentRequired = function (mouseY, worklistHeight) {\r\n        // If space available in the bottom of tag indicator,\r\n        if ((window.innerHeight - mouseY) > TAG_LIST_HEIGHT) {\r\n            this.isTopAlignmentRequired = true;\r\n        }\r\n        else {\r\n            if (mouseY - (window.innerHeight - worklistHeight) > TAG_LIST_HEIGHT) {\r\n                this.isBottomAlignmentRequired = true;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Get tag list expanded position based on window space available.\r\n     * @param xPos: Tag Indicator Xcoord\r\n     * @param yPos: Tag Indicator Y coord\r\n     */\r\n    TagList.prototype.getTaglistPosition = function (xPos, yPos) {\r\n        this.isCenterAlignmentRequired = false;\r\n        this.isLeftAlignmentRequired = false;\r\n        this.isRightAlignmentRequired = false;\r\n        this.isTopAlignmentRequired = false;\r\n        this.isBottomAlignmentRequired = false;\r\n        // Tag indicator Coords.\r\n        this.xPos = xPos;\r\n        this.yPos = yPos;\r\n        // Get the height and width of scroll holder.\r\n        var worklistElement = document.getElementsByClassName('table-scroll-holder')[0].getBoundingClientRect();\r\n        var worklistHeight = worklistElement.height;\r\n        var worklistWidth = worklistElement.width;\r\n        // Determine whether tag list show in Bottom/Top.\r\n        this.isVerticalAlignmentRequired(this.yPos, worklistHeight);\r\n        // Determine whether tag list show in Right/Left.\r\n        this.isHorizontalAlignmentRequired(this.xPos, worklistWidth);\r\n        // If no space available in bottom or Top portion,\r\n        // we should display it in centre position.\r\n        if (this.isBottomAlignmentRequired === false && this.isTopAlignmentRequired === false) {\r\n            this.isCenterAlignmentRequired = true;\r\n        }\r\n    };\r\n    /**\r\n     * Get the markGroupIds for tagging the resposnse.\r\n     * @param currentMarkGroupId\r\n     * @param isESResponse\r\n     */\r\n    TagList.prototype.populateMarkGroupList = function (currentMarkGroupId, isESResponse) {\r\n        var markGroupIds = [];\r\n        // If the response is an es response then whole response tagging is not possible\r\n        // So only pushing the current markGroupID into the collection\r\n        // else we need to add the related markGroupIds for a whole response.\r\n        if (isESResponse) {\r\n            markGroupIds.push(currentMarkGroupId);\r\n        }\r\n        else {\r\n            markGroupIds = worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(currentMarkGroupId);\r\n            markGroupIds.unshift(currentMarkGroupId);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    return TagList;\r\n}(pureRenderComponent));\r\nmodule.exports = TagList;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 315:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/components/worklist/shared/genericdate.tsx ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n    React component for generic date.\r\n*/\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeHelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\n/**\r\n * Stateless component for generic date.\r\n * @param props\r\n */\r\nvar genericDate = function (props) {\r\n    var dateValue = props.displayText ? props.displayText : localeHelper.toLocaleDateTimeString(props.dateValue);\r\n    return (React.createElement(\"span\", { id: props.id, className: props.className }, dateValue));\r\n};\r\nmodule.exports = genericDate;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2dlbmVyaWNkYXRlLnRzeD83YmYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgICBSZWFjdCBjb21wb25lbnQgZm9yIGdlbmVyaWMgZGF0ZS5cclxuKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgbG9jYWxlSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9sb2NhbGUvbG9jYWxlaGVscGVyJyk7XHJcbmltcG9ydCBzdHJpbmdIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2dlbmVyaWMvc3RyaW5naGVscGVyJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IGNvbnN0YW50ID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9jb25zdGFudHMnKTtcclxuXHJcbmludGVyZmFjZSBHZW5lcmljRGF0ZSBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcbiAgICBkYXRlVmFsdWU/OiBEYXRlO1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGNsYXNzTmFtZTogc3RyaW5nO1xyXG4gICAgZGlzcGxheVRleHQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdGF0ZWxlc3MgY29tcG9uZW50IGZvciBnZW5lcmljIGRhdGUuXHJcbiAqIEBwYXJhbSBwcm9wc1xyXG4gKi9cclxuY29uc3QgZ2VuZXJpY0RhdGU6IFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDxHZW5lcmljRGF0ZT4gPSAocHJvcHM6IEdlbmVyaWNEYXRlKSA9PiB7XHJcbiAgICBsZXQgZGF0ZVZhbHVlIDogc3RyaW5nID0gcHJvcHMuZGlzcGxheVRleHQgPyBwcm9wcy5kaXNwbGF5VGV4dCA6IGxvY2FsZUhlbHBlci50b0xvY2FsZURhdGVUaW1lU3RyaW5nKHByb3BzLmRhdGVWYWx1ZSk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxzcGFuIGlkPXtwcm9wcy5pZH0gY2xhc3NOYW1lPXtwcm9wcy5jbGFzc05hbWV9PlxyXG4gICAgICAgICAgICB7ZGF0ZVZhbHVlfVxyXG4gICAgICAgIDwvc3Bhbj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgPSBnZW5lcmljRGF0ZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2dlbmVyaWNkYXRlLnRzeCJdLCJtYXBwaW5ncyI6IjtBQUFBOztBQUVBO0FBQ0E7QUFFQTtBQVlBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 319:
/* no static exports found */
/* all exports used */
/*!********************************************************************!*\
  !*** ./src/utility/worklistvalidators/worklistvalidatorfactory.ts ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar worklistValidatorList = __webpack_require__(/*! ./worklistvalidatorlist */ 304);\r\nvar liveWorklistValidator = __webpack_require__(/*! ./liveworklistvalidator */ 421);\r\nvar standardisationWorklistValidator = __webpack_require__(/*! ./standardisationworklistvalidator */ 424);\r\nvar practiceWorklistValidator = __webpack_require__(/*! ./practiceworklistvalidator */ 422);\r\nvar directedRemarkWorlistValidator = __webpack_require__(/*! ./directedremarkworklistvalidator */ 420);\r\nvar simulationkWorlistValidator = __webpack_require__(/*! ./simulationworklistvalidator */ 423);\r\nvar WorklistValidatorFactory = /** @class */ (function () {\r\n    function WorklistValidatorFactory() {\r\n    }\r\n    /**\r\n     * returns the validator object.\r\n     * @param comparerName - Name of the validator - should be a member of the worklistvalidatorlist enum.\r\n     */\r\n    WorklistValidatorFactory.prototype.getValidator = function (validatorName) {\r\n        var worklistValidator = undefined;\r\n        switch (validatorName) {\r\n            /** instance of liveWorklistValidator to be registered in this factory */\r\n            case worklistValidatorList.liveOpen:\r\n            case worklistValidatorList.atypicalOpen:\r\n                worklistValidator = new liveWorklistValidator();\r\n                break;\r\n            case worklistValidatorList.standardisationOpen:\r\n                worklistValidator = new standardisationWorklistValidator();\r\n                break;\r\n            case worklistValidatorList.practiceOpen:\r\n                worklistValidator = new practiceWorklistValidator();\r\n                break;\r\n            case worklistValidatorList.directedRemarkOpen:\r\n                worklistValidator = new directedRemarkWorlistValidator();\r\n                break;\r\n            case worklistValidatorList.simulationOpen:\r\n                worklistValidator = new simulationkWorlistValidator();\r\n        }\r\n        /** returns the validator object corresponding to  the name */\r\n        return worklistValidator;\r\n    };\r\n    return WorklistValidatorFactory;\r\n}());\r\nvar validatorFactory = new WorklistValidatorFactory();\r\nmodule.exports = validatorFactory;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvd29ya2xpc3R2YWxpZGF0b3JzL3dvcmtsaXN0dmFsaWRhdG9yZmFjdG9yeS50cz8wNzM2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB3b3JrbGlzdFZhbGlkYXRvckxpc3QgPSByZXF1aXJlKCcuL3dvcmtsaXN0dmFsaWRhdG9ybGlzdCcpO1xyXG5pbXBvcnQgbGl2ZVdvcmtsaXN0VmFsaWRhdG9yID0gcmVxdWlyZSgnLi9saXZld29ya2xpc3R2YWxpZGF0b3InKTtcclxuaW1wb3J0IHdvcmtsaXN0dmFsaWRhdG9yc2NoZW1hID0gcmVxdWlyZSgnLi93b3JrbGlzdHZhbGlkYXRvcnNjaGVtYScpO1xyXG5pbXBvcnQgc3RhbmRhcmRpc2F0aW9uV29ya2xpc3RWYWxpZGF0b3IgPSByZXF1aXJlKCcuL3N0YW5kYXJkaXNhdGlvbndvcmtsaXN0dmFsaWRhdG9yJyk7XHJcbmltcG9ydCBwcmFjdGljZVdvcmtsaXN0VmFsaWRhdG9yID0gcmVxdWlyZSgnLi9wcmFjdGljZXdvcmtsaXN0dmFsaWRhdG9yJyk7XHJcbmltcG9ydCBkaXJlY3RlZFJlbWFya1dvcmxpc3RWYWxpZGF0b3IgPSByZXF1aXJlKCcuL2RpcmVjdGVkcmVtYXJrd29ya2xpc3R2YWxpZGF0b3InKTtcclxuaW1wb3J0IHNpbXVsYXRpb25rV29ybGlzdFZhbGlkYXRvciA9IHJlcXVpcmUoJy4vc2ltdWxhdGlvbndvcmtsaXN0dmFsaWRhdG9yJyk7XHJcblxyXG5jbGFzcyBXb3JrbGlzdFZhbGlkYXRvckZhY3Rvcnkge1xyXG4gICAvKipcclxuICAgICogcmV0dXJucyB0aGUgdmFsaWRhdG9yIG9iamVjdC5cclxuICAgICogQHBhcmFtIGNvbXBhcmVyTmFtZSAtIE5hbWUgb2YgdGhlIHZhbGlkYXRvciAtIHNob3VsZCBiZSBhIG1lbWJlciBvZiB0aGUgd29ya2xpc3R2YWxpZGF0b3JsaXN0IGVudW0uXHJcbiAgICAqL1xyXG4gICAgcHVibGljIGdldFZhbGlkYXRvcih2YWxpZGF0b3JOYW1lOiB3b3JrbGlzdFZhbGlkYXRvckxpc3QpOiB3b3JrbGlzdHZhbGlkYXRvcnNjaGVtYSB7XHJcbiAgICAgICAgbGV0IHdvcmtsaXN0VmFsaWRhdG9yOiB3b3JrbGlzdHZhbGlkYXRvcnNjaGVtYSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgc3dpdGNoICh2YWxpZGF0b3JOYW1lKSB7XHJcbiAgICAgICAgICAgIC8qKiBpbnN0YW5jZSBvZiBsaXZlV29ya2xpc3RWYWxpZGF0b3IgdG8gYmUgcmVnaXN0ZXJlZCBpbiB0aGlzIGZhY3RvcnkgKi9cclxuXHRcdFx0Y2FzZSB3b3JrbGlzdFZhbGlkYXRvckxpc3QubGl2ZU9wZW46XHJcblx0XHRcdGNhc2Ugd29ya2xpc3RWYWxpZGF0b3JMaXN0LmF0eXBpY2FsT3BlbjpcclxuICAgICAgICAgICAgICAgIHdvcmtsaXN0VmFsaWRhdG9yID0gbmV3IGxpdmVXb3JrbGlzdFZhbGlkYXRvcigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2Ugd29ya2xpc3RWYWxpZGF0b3JMaXN0LnN0YW5kYXJkaXNhdGlvbk9wZW46XHJcbiAgICAgICAgICAgICAgICB3b3JrbGlzdFZhbGlkYXRvciA9IG5ldyBzdGFuZGFyZGlzYXRpb25Xb3JrbGlzdFZhbGlkYXRvcigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2Ugd29ya2xpc3RWYWxpZGF0b3JMaXN0LnByYWN0aWNlT3BlbjpcclxuICAgICAgICAgICAgICAgIHdvcmtsaXN0VmFsaWRhdG9yID0gbmV3IHByYWN0aWNlV29ya2xpc3RWYWxpZGF0b3IoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIHdvcmtsaXN0VmFsaWRhdG9yTGlzdC5kaXJlY3RlZFJlbWFya09wZW46XHJcbiAgICAgICAgICAgICAgICB3b3JrbGlzdFZhbGlkYXRvciA9IG5ldyBkaXJlY3RlZFJlbWFya1dvcmxpc3RWYWxpZGF0b3IoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIHdvcmtsaXN0VmFsaWRhdG9yTGlzdC5zaW11bGF0aW9uT3BlbjpcclxuICAgICAgICAgICAgICAgIHdvcmtsaXN0VmFsaWRhdG9yID0gbmV3IHNpbXVsYXRpb25rV29ybGlzdFZhbGlkYXRvcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqIHJldHVybnMgdGhlIHZhbGlkYXRvciBvYmplY3QgY29ycmVzcG9uZGluZyB0byAgdGhlIG5hbWUgKi9cclxuICAgICAgICByZXR1cm4gd29ya2xpc3RWYWxpZGF0b3I7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCB2YWxpZGF0b3JGYWN0b3J5ID0gbmV3IFdvcmtsaXN0VmFsaWRhdG9yRmFjdG9yeSgpO1xyXG5leHBvcnQgPSB2YWxpZGF0b3JGYWN0b3J5O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS93b3JrbGlzdHZhbGlkYXRvcnMvd29ya2xpc3R2YWxpZGF0b3JmYWN0b3J5LnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQThCQTtBQTdCQTs7O0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 325:
/* no static exports found */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/components/utility/messageeditorconstants.ts ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar MessageEditorConstants;\r\n(function (MessageEditorConstants) {\r\n    MessageEditorConstants.TINYMCE_THEME = 'advanced';\r\n    MessageEditorConstants.TINYMCE_PLUGINS = 'link textcolor advlist';\r\n    MessageEditorConstants.TINYMCE_TOOLBAR = 'bold italic underline | fontselect fontsizeselect | alignleft aligncenter alignright | bullist numlist | link';\r\n    MessageEditorConstants.TINYMCE_FONTSIZES = '8px 10px 12px 14px 18px 24px 36px';\r\n    MessageEditorConstants.TINYMCE_FONTS = 'Andale Mono=andale mono,times;'\r\n        + 'Arial=arial,helvetica,sans-serif;'\r\n        + 'Arial Black=arial black,avant garde;'\r\n        + 'Book Antiqua=book antiqua,palatino;'\r\n        + 'Comic Sans MS=comic sans ms,sans-serif;'\r\n        + 'Courier New=courier new,courier;'\r\n        + 'Georgia=georgia,palatino;'\r\n        + 'Helvetica=helvetica;'\r\n        + 'Impact=impact,chicago;'\r\n        + 'Tahoma=tahoma,arial,helvetica,sans-serif;'\r\n        + 'Terminal=terminal,monaco;'\r\n        + 'Times New Roman=times new roman,times;'\r\n        + 'Trebuchet MS=trebuchet ms,geneva;'\r\n        + 'Verdana=verdana,geneva;';\r\n    MessageEditorConstants.TINYMCE_TEXTCOLOR_PALETTE = [\r\n        '000000', '',\r\n        '993300', '',\r\n        '333300', '',\r\n        '003300', '',\r\n        '003366', '',\r\n        '000080', '',\r\n        '333399', '',\r\n        '333333', '',\r\n        '800000', '',\r\n        '808000', '',\r\n        '008000', '',\r\n        '008080', '',\r\n        '0000FF', '',\r\n        '666699', '',\r\n        '808080', '',\r\n        'FF0000', '',\r\n        '99CC00', '',\r\n        '339966', '',\r\n        '33CCCC', '',\r\n        '3366FF', '',\r\n        '800080', '',\r\n        '999999', '',\r\n        'FF00FF', '',\r\n        '00FF00', '',\r\n        '00FFFF', '',\r\n        '00CCFF', '',\r\n        '993366', '',\r\n        'FFFFFF', '',\r\n        '99CCFF', '',\r\n    ];\r\n    MessageEditorConstants.TINYMCE_FONTNAME_CMD = 'FontName';\r\n    MessageEditorConstants.TINYMCE_FONTSIZE_CMD = 'FontSize';\r\n    MessageEditorConstants.TINYMCE_DEFAULT_FONT = 'arial,helvetica,sans-serif';\r\n    MessageEditorConstants.TINYMCE_DEFAULT_FONTSIZE = '12px';\r\n})(MessageEditorConstants || (MessageEditorConstants = {}));\r\nmodule.exports = MessageEditorConstants;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9tZXNzYWdlZWRpdG9yY29uc3RhbnRzLnRzP2NkZmYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIE1lc3NhZ2VFZGl0b3JDb25zdGFudHMge1xyXG4gICAgZXhwb3J0IGNvbnN0IFRJTllNQ0VfVEhFTUUgPSAnYWR2YW5jZWQnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFRJTllNQ0VfUExVR0lOUyA9ICdsaW5rIHRleHRjb2xvciBhZHZsaXN0JztcclxuICAgIGV4cG9ydCBjb25zdCBUSU5ZTUNFX1RPT0xCQVIgPVxyXG4gICAgICAgICdib2xkIGl0YWxpYyB1bmRlcmxpbmUgfCBmb250c2VsZWN0IGZvbnRzaXplc2VsZWN0IHwgYWxpZ25sZWZ0IGFsaWduY2VudGVyIGFsaWducmlnaHQgfCBidWxsaXN0IG51bWxpc3QgfCBsaW5rJztcclxuICAgIGV4cG9ydCBjb25zdCBUSU5ZTUNFX0ZPTlRTSVpFUyA9ICc4cHggMTBweCAxMnB4IDE0cHggMThweCAyNHB4IDM2cHgnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFRJTllNQ0VfRk9OVFMgPSAnQW5kYWxlIE1vbm89YW5kYWxlIG1vbm8sdGltZXM7J1xyXG4gICAgICAgICsgJ0FyaWFsPWFyaWFsLGhlbHZldGljYSxzYW5zLXNlcmlmOydcclxuICAgICAgICArICdBcmlhbCBCbGFjaz1hcmlhbCBibGFjayxhdmFudCBnYXJkZTsnXHJcbiAgICAgICAgKyAnQm9vayBBbnRpcXVhPWJvb2sgYW50aXF1YSxwYWxhdGlubzsnXHJcbiAgICAgICAgKyAnQ29taWMgU2FucyBNUz1jb21pYyBzYW5zIG1zLHNhbnMtc2VyaWY7J1xyXG4gICAgICAgICsgJ0NvdXJpZXIgTmV3PWNvdXJpZXIgbmV3LGNvdXJpZXI7J1xyXG4gICAgICAgICsgJ0dlb3JnaWE9Z2VvcmdpYSxwYWxhdGlubzsnXHJcbiAgICAgICAgKyAnSGVsdmV0aWNhPWhlbHZldGljYTsnXHJcbiAgICAgICAgKyAnSW1wYWN0PWltcGFjdCxjaGljYWdvOydcclxuICAgICAgICArICdUYWhvbWE9dGFob21hLGFyaWFsLGhlbHZldGljYSxzYW5zLXNlcmlmOydcclxuICAgICAgICArICdUZXJtaW5hbD10ZXJtaW5hbCxtb25hY287J1xyXG4gICAgICAgICsgJ1RpbWVzIE5ldyBSb21hbj10aW1lcyBuZXcgcm9tYW4sdGltZXM7J1xyXG4gICAgICAgICsgJ1RyZWJ1Y2hldCBNUz10cmVidWNoZXQgbXMsZ2VuZXZhOydcclxuICAgICAgICArICdWZXJkYW5hPXZlcmRhbmEsZ2VuZXZhOyc7XHJcbiAgICBleHBvcnQgY29uc3QgVElOWU1DRV9URVhUQ09MT1JfUEFMRVRURSA9IFtcclxuICAgICAgICAnMDAwMDAwJywgJycsXHJcbiAgICAgICAgJzk5MzMwMCcsICcnLFxyXG4gICAgICAgICczMzMzMDAnLCAnJyxcclxuICAgICAgICAnMDAzMzAwJywgJycsXHJcbiAgICAgICAgJzAwMzM2NicsICcnLFxyXG4gICAgICAgICcwMDAwODAnLCAnJyxcclxuICAgICAgICAnMzMzMzk5JywgJycsXHJcbiAgICAgICAgJzMzMzMzMycsICcnLFxyXG4gICAgICAgICc4MDAwMDAnLCAnJyxcclxuICAgICAgICAnODA4MDAwJywgJycsXHJcbiAgICAgICAgJzAwODAwMCcsICcnLFxyXG4gICAgICAgICcwMDgwODAnLCAnJyxcclxuICAgICAgICAnMDAwMEZGJywgJycsXHJcbiAgICAgICAgJzY2NjY5OScsICcnLFxyXG4gICAgICAgICc4MDgwODAnLCAnJyxcclxuICAgICAgICAnRkYwMDAwJywgJycsXHJcbiAgICAgICAgJzk5Q0MwMCcsICcnLFxyXG4gICAgICAgICczMzk5NjYnLCAnJyxcclxuICAgICAgICAnMzNDQ0NDJywgJycsXHJcbiAgICAgICAgJzMzNjZGRicsICcnLFxyXG4gICAgICAgICc4MDAwODAnLCAnJyxcclxuICAgICAgICAnOTk5OTk5JywgJycsXHJcbiAgICAgICAgJ0ZGMDBGRicsICcnLFxyXG4gICAgICAgICcwMEZGMDAnLCAnJyxcclxuICAgICAgICAnMDBGRkZGJywgJycsXHJcbiAgICAgICAgJzAwQ0NGRicsICcnLFxyXG4gICAgICAgICc5OTMzNjYnLCAnJyxcclxuICAgICAgICAnRkZGRkZGJywgJycsXHJcbiAgICAgICAgJzk5Q0NGRicsICcnLFxyXG4gICAgXTtcclxuICAgIGV4cG9ydCBjb25zdCBUSU5ZTUNFX0ZPTlROQU1FX0NNRCA9ICdGb250TmFtZSc7XHJcbiAgICBleHBvcnQgY29uc3QgVElOWU1DRV9GT05UU0laRV9DTUQgPSAnRm9udFNpemUnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFRJTllNQ0VfREVGQVVMVF9GT05UID0gJ2FyaWFsLGhlbHZldGljYSxzYW5zLXNlcmlmJztcclxuICAgIGV4cG9ydCBjb25zdCBUSU5ZTUNFX0RFRkFVTFRfRk9OVFNJWkUgPSAnMTJweCc7XHJcbn1cclxuZXhwb3J0ID0gTWVzc2FnZUVkaXRvckNvbnN0YW50cztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9tZXNzYWdlZWRpdG9yY29uc3RhbnRzLnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 326:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/stores/busyindicator/busyindicatorstore.ts ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar storeBase = __webpack_require__(/*! ../base/storebase */ 285);\r\nvar dispatcher = __webpack_require__(/*! ../../app/dispatcher */ 242);\r\nvar actionType = __webpack_require__(/*! ../../actions/base/actiontypes */ 228);\r\n/* The busy indicator store */\r\nvar BusyIndicatorStore = /** @class */ (function (_super) {\r\n    __extends(BusyIndicatorStore, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function BusyIndicatorStore() {\r\n        var _this = _super.call(this) || this;\r\n        _this.dispatchToken = dispatcher.register(function (action) {\r\n            if (action.actionType === actionType.BUSY_INDICATOR) {\r\n                _this.busyIndicatorInvoker = action.getBusyIndicatorInvoker;\r\n                _this.emit(BusyIndicatorStore.BUSY_INDICATOR);\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    Object.defineProperty(BusyIndicatorStore.prototype, \"getBusyIndicatorInvoker\", {\r\n        /**\r\n         * Returns the busy indicator invoker\r\n         * @returns\r\n         */\r\n        get: function () {\r\n            return this.busyIndicatorInvoker;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    BusyIndicatorStore.BUSY_INDICATOR = 'setBusyIndicatorInvoker';\r\n    return BusyIndicatorStore;\r\n}(storeBase));\r\nvar instance = new BusyIndicatorStore();\r\nmodule.exports = { BusyIndicatorStore: BusyIndicatorStore, instance: instance };\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3Jlcy9idXN5aW5kaWNhdG9yL2J1c3lpbmRpY2F0b3JzdG9yZS50cz83OTVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdG9yZUJhc2UgPSByZXF1aXJlKCcuLi9iYXNlL3N0b3JlYmFzZScpO1xyXG5pbXBvcnQgZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uLy4uL2FwcC9kaXNwYXRjaGVyJyk7XHJcbmltcG9ydCBhY3Rpb24gPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL2Jhc2UvYWN0aW9uJyk7XHJcbmltcG9ydCBhY3Rpb25UeXBlID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy9iYXNlL2FjdGlvbnR5cGVzJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvdXRpbGl0eS9lbnVtcycpO1xyXG5pbXBvcnQgYnVzeUluZGljYXRvckFjdGlvbiA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbnMvYnVzeWluZGljYXRvci9idXN5aW5kaWNhdG9yYWN0aW9uJyk7XHJcblxyXG4vKiBUaGUgYnVzeSBpbmRpY2F0b3Igc3RvcmUgKi9cclxuY2xhc3MgQnVzeUluZGljYXRvclN0b3JlIGV4dGVuZHMgc3RvcmVCYXNlIHtcclxuICAgIHByaXZhdGUgYnVzeUluZGljYXRvckludm9rZXI6IGVudW1zLkJ1c3lJbmRpY2F0b3JJbnZva2VyO1xyXG4gICAgcHVibGljIHN0YXRpYyBCVVNZX0lORElDQVRPUiA9ICdzZXRCdXN5SW5kaWNhdG9ySW52b2tlcic7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoVG9rZW4gPSBkaXNwYXRjaGVyLnJlZ2lzdGVyKChhY3Rpb246IGFjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYWN0aW9uLmFjdGlvblR5cGUgPT09IGFjdGlvblR5cGUuQlVTWV9JTkRJQ0FUT1IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnVzeUluZGljYXRvckludm9rZXIgPSAoYWN0aW9uIGFzIGJ1c3lJbmRpY2F0b3JBY3Rpb24pLmdldEJ1c3lJbmRpY2F0b3JJbnZva2VyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KEJ1c3lJbmRpY2F0b3JTdG9yZS5CVVNZX0lORElDQVRPUik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBidXN5IGluZGljYXRvciBpbnZva2VyXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG4gICAgcHVibGljIGdldCBnZXRCdXN5SW5kaWNhdG9ySW52b2tlcigpOiBlbnVtcy5CdXN5SW5kaWNhdG9ySW52b2tlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVzeUluZGljYXRvckludm9rZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCBpbnN0YW5jZSA9IG5ldyBCdXN5SW5kaWNhdG9yU3RvcmUoKTtcclxuZXhwb3J0ID0geyBCdXN5SW5kaWNhdG9yU3RvcmUsIGluc3RhbmNlIH07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9zdG9yZXMvYnVzeWluZGljYXRvci9idXN5aW5kaWNhdG9yc3RvcmUudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUFBO0FBSUE7O0FBRUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBTUE7QUFKQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBckJBO0FBc0JBO0FBQUE7QUFFQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 327:
/* no static exports found */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/stores/teammanagement/warningmessagestore.ts ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar dispatcher = __webpack_require__(/*! ../../app/dispatcher */ 242);\r\nvar storeBase = __webpack_require__(/*! ../base/storebase */ 285);\r\nvar actionType = __webpack_require__(/*! ../../actions/base/actiontypes */ 228);\r\n/**\r\n * Warning Message store\r\n */\r\nvar WarningMessageStore = /** @class */ (function (_super) {\r\n    __extends(WarningMessageStore, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function WarningMessageStore() {\r\n        var _this = _super.call(this) || this;\r\n        _this._dispatchToken = dispatcher.register(function (action) {\r\n            switch (action.actionType) {\r\n                case actionType.WARNING_MESSAGE_ACTION:\r\n                    var validateAction = action;\r\n                    _this.emit(WarningMessageStore.WARNING_MESSAGE_EVENT, validateAction.failureCode, validateAction.warningMessageAction);\r\n                    break;\r\n                case actionType.WARNING_MESSAGE_NAVIGATION_ACTION:\r\n                    var navigationAction = action;\r\n                    _this.emit(WarningMessageStore.WARNING_MESSAGE_NAVIGATION_EVENT, navigationAction.failureCode, navigationAction.warningMessageAction);\r\n                    break;\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    // Warning message event\r\n    WarningMessageStore.WARNING_MESSAGE_EVENT = 'warningessageevent';\r\n    // Warning message event\r\n    WarningMessageStore.WARNING_MESSAGE_NAVIGATION_EVENT = 'warningessagenavigationevent';\r\n    return WarningMessageStore;\r\n}(storeBase));\r\nvar instance = new WarningMessageStore();\r\nmodule.exports = { WarningMessageStore: WarningMessageStore, instance: instance };\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3Jlcy90ZWFtbWFuYWdlbWVudC93YXJuaW5nbWVzc2FnZXN0b3JlLnRzP2I0ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi8uLi9hcHAvZGlzcGF0Y2hlcicpO1xyXG5pbXBvcnQgYWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy9iYXNlL2FjdGlvbicpO1xyXG5pbXBvcnQgc3RvcmVCYXNlID0gcmVxdWlyZSgnLi4vYmFzZS9zdG9yZWJhc2UnKTtcclxuaW1wb3J0IGFjdGlvblR5cGUgPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL2Jhc2UvYWN0aW9udHlwZXMnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCB2YWxpZGF0aW9uQWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy90ZWFtbWFuYWdlbWVudC92YWxpZGF0aW9uYWN0aW9uJyk7XHJcbmltcG9ydCB3YXJuaW5nTWVzc2FnZU5hdmlnYXRpb25BY3Rpb24gPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL3RlYW1tYW5hZ2VtZW50L3dhcm5pbmdtZXNzYWdlbmF2aWdhdGlvbmFjdGlvbicpO1xyXG5cclxuLyoqXHJcbiAqIFdhcm5pbmcgTWVzc2FnZSBzdG9yZVxyXG4gKi9cclxuY2xhc3MgV2FybmluZ01lc3NhZ2VTdG9yZSBleHRlbmRzIHN0b3JlQmFzZSB7XHJcblxyXG4gICAgLy8gV2FybmluZyBtZXNzYWdlIGV2ZW50XHJcbiAgICBwdWJsaWMgc3RhdGljIFdBUk5JTkdfTUVTU0FHRV9FVkVOVCA9ICd3YXJuaW5nZXNzYWdlZXZlbnQnO1xyXG5cclxuICAgIC8vIFdhcm5pbmcgbWVzc2FnZSBldmVudFxyXG4gICAgcHVibGljIHN0YXRpYyBXQVJOSU5HX01FU1NBR0VfTkFWSUdBVElPTl9FVkVOVCA9ICd3YXJuaW5nZXNzYWdlbmF2aWdhdGlvbmV2ZW50JztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoVG9rZW4gPSBkaXNwYXRjaGVyLnJlZ2lzdGVyKChhY3Rpb246IGFjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGFjdGlvbi5hY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGFjdGlvblR5cGUuV0FSTklOR19NRVNTQUdFX0FDVElPTjpcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsaWRhdGVBY3Rpb24gPSAoYWN0aW9uIGFzIHZhbGlkYXRpb25BY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChXYXJuaW5nTWVzc2FnZVN0b3JlLldBUk5JTkdfTUVTU0FHRV9FVkVOVCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3Rpb24uZmFpbHVyZUNvZGUsIHZhbGlkYXRlQWN0aW9uLndhcm5pbmdNZXNzYWdlQWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgYWN0aW9uVHlwZS5XQVJOSU5HX01FU1NBR0VfTkFWSUdBVElPTl9BQ1RJT046XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5hdmlnYXRpb25BY3Rpb24gPSAoYWN0aW9uIGFzIHdhcm5pbmdNZXNzYWdlTmF2aWdhdGlvbkFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFdhcm5pbmdNZXNzYWdlU3RvcmUuV0FSTklOR19NRVNTQUdFX05BVklHQVRJT05fRVZFTlQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb25BY3Rpb24uZmFpbHVyZUNvZGUsIG5hdmlnYXRpb25BY3Rpb24ud2FybmluZ01lc3NhZ2VBY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCBpbnN0YW5jZSA9IG5ldyBXYXJuaW5nTWVzc2FnZVN0b3JlKCk7XHJcbmV4cG9ydCA9IHsgV2FybmluZ01lc3NhZ2VTdG9yZSwgaW5zdGFuY2UgfTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9zdG9yZXMvdGVhbW1hbmFnZW1lbnQvd2FybmluZ21lc3NhZ2VzdG9yZS50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFLQTs7QUFFQTtBQUNBO0FBQUE7QUFRQTs7QUFFQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUF6QkE7QUFDQTtBQUVBO0FBQ0E7QUFzQkE7QUFBQTtBQUVBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 329:
/* no static exports found */
/* all exports used */
/*!*********************************************************!*\
  !*** ./src/components/worklist/shared/columnheader.tsx ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar SortArrow = __webpack_require__(/*! ../../utility/table/sortarrow */ 340);\r\n/* tslint:disable:variable-name */\r\nvar ColumnHeader = function (props) {\r\n    if (props.isSortingRequired) {\r\n        return (React.createElement(\"a\", { className: getSortClassName(), href: 'javascript:void(0)', title: getTitleText() },\r\n            React.createElement(\"div\", { className: 'frozen-header' },\r\n                React.createElement(\"span\", { className: 'sort-head-text', id: 'col_' + props.headerText.replace(/ /g, '') }, props.headerText),\r\n                React.createElement(SortArrow, { sortOption: props.sortOption }))));\r\n    }\r\n    else {\r\n        return (React.createElement(\"div\", { className: 'frozen-header' },\r\n            React.createElement(\"span\", { className: 'sort-head-text', id: 'col_' + props.headerText.replace(/ /g, '') }, props.headerText)));\r\n    }\r\n    /**\r\n     * This method will return the sort className\r\n     */\r\n    function getSortClassName() {\r\n        if (!props.isSortingRequired) {\r\n            return '';\r\n        }\r\n        if (props.isCurrentSort) {\r\n            if (props.sortOption === undefined || props.sortOption === enums.SortOption.Both) {\r\n                return (props.sortDirection === enums.SortDirection.Descending) ?\r\n                    'sortable-link desc' : 'sortable-link asc';\r\n            }\r\n            else if (props.sortOption === enums.SortOption.Up) {\r\n                return ('sortable-link asc');\r\n            }\r\n            else {\r\n                return ('sortable-link desc');\r\n            }\r\n        }\r\n        else {\r\n            return 'sortable-link';\r\n        }\r\n    }\r\n    /**\r\n     * Gets Title text.\r\n     */\r\n    function getTitleText() {\r\n        if (props.headerText && props.headerText !== '') {\r\n            return localeStore.instance.TranslateText('marking.worklist.list-view-column-headers.sort-by-tooltip') + ' ' + props.headerText;\r\n        }\r\n    }\r\n};\r\nmodule.exports = ColumnHeader;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2NvbHVtbmhlYWRlci50c3g/NWY3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IFNvcnRBcnJvdyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvdGFibGUvc29ydGFycm93Jyk7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBQcm9wc0Jhc2Uge1xyXG4gICAgaGVhZGVyVGV4dDogc3RyaW5nO1xyXG4gICAgc29ydERpcmVjdGlvbj86IGVudW1zLlNvcnREaXJlY3Rpb247XHJcbiAgICBpc0N1cnJlbnRTb3J0PzogYm9vbGVhbjtcclxuICAgIGlzU29ydGluZ1JlcXVpcmVkPzogYm9vbGVhbjtcclxuICAgIHNvcnRPcHRpb24/OiBlbnVtcy5Tb3J0T3B0aW9uO1xyXG59XHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcbmNvbnN0IENvbHVtbkhlYWRlciA9IChwcm9wczogUHJvcHMpID0+IHtcclxuXHJcbiAgICBpZiAocHJvcHMuaXNTb3J0aW5nUmVxdWlyZWQpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9e2dldFNvcnRDbGFzc05hbWUoKX1cclxuICAgICAgICAgICAgICAgIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKSdcclxuICAgICAgICAgICAgICAgIHRpdGxlPXtnZXRUaXRsZVRleHQoKX0gPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Zyb3plbi1oZWFkZXInPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nc29ydC1oZWFkLXRleHQnIGlkPXsnY29sXycgKyBwcm9wcy5oZWFkZXJUZXh0LnJlcGxhY2UoLyAvZywgJycpfT57cHJvcHMuaGVhZGVyVGV4dH08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNvcnRBcnJvdyBzb3J0T3B0aW9uPXtwcm9wcy5zb3J0T3B0aW9ufSAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvYT4pO1xyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Zyb3plbi1oZWFkZXInPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdzb3J0LWhlYWQtdGV4dCcgaWQ9eydjb2xfJyArIHByb3BzLmhlYWRlclRleHQucmVwbGFjZSgvIC9nLCAnJyl9Pntwcm9wcy5oZWFkZXJUZXh0fTwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBzb3J0IGNsYXNzTmFtZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRTb3J0Q2xhc3NOYW1lKCkge1xyXG4gICAgICAgIGlmICghcHJvcHMuaXNTb3J0aW5nUmVxdWlyZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHByb3BzLmlzQ3VycmVudFNvcnQpIHtcclxuICAgICAgICAgICAgaWYgKHByb3BzLnNvcnRPcHRpb24gPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5zb3J0T3B0aW9uID09PSBlbnVtcy5Tb3J0T3B0aW9uLkJvdGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAocHJvcHMuc29ydERpcmVjdGlvbiA9PT0gZW51bXMuU29ydERpcmVjdGlvbi5EZXNjZW5kaW5nKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgJ3NvcnRhYmxlLWxpbmsgZGVzYycgOiAnc29ydGFibGUtbGluayBhc2MnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BzLnNvcnRPcHRpb24gPT09IGVudW1zLlNvcnRPcHRpb24uVXApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoJ3NvcnRhYmxlLWxpbmsgYXNjJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCdzb3J0YWJsZS1saW5rIGRlc2MnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnc29ydGFibGUtbGluayc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBUaXRsZSB0ZXh0LlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRUaXRsZVRleHQoKSB7XHJcbiAgICAgICAgaWYgKHByb3BzLmhlYWRlclRleHQgJiYgcHJvcHMuaGVhZGVyVGV4dCAhPT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHRcclxuICAgICAgICAgICAgICAgICgnbWFya2luZy53b3JrbGlzdC5saXN0LXZpZXctY29sdW1uLWhlYWRlcnMuc29ydC1ieS10b29sdGlwJykgKyAnICcgKyBwcm9wcy5oZWFkZXJUZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCA9IENvbHVtbkhlYWRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2NvbHVtbmhlYWRlci50c3giXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVVBO0FBQ0E7QUFFQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQUVBO0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 336:
/* no static exports found */
/* all exports used */
/*!*************************************************************************!*\
  !*** ./src/utility/standardisationsetup/standardisationsetupfactory.ts ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar classifiedHelper = __webpack_require__(/*! ../../components/utility/grid/standardisationsetuphelpers/classifiedhelper */ 411);\r\nvar unclassifiedHelper = __webpack_require__(/*! ../../components/utility/grid/standardisationsetuphelpers/unclassifiedhelper */ 414);\r\nvar provisionalHelper = __webpack_require__(/*! ../../components/utility/grid/standardisationsetuphelpers/provisionalhelper */ 412);\r\nvar selectResponseHelper = __webpack_require__(/*! ../../components/utility/grid/standardisationsetuphelpers/selectresponsehelper */ 413);\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar StandardisationSetupFactory = /** @class */ (function () {\r\n    function StandardisationSetupFactory() {\r\n    }\r\n    /**\r\n     * returns the standard helper object based on the type\r\n     * @param teamManagementTab\r\n     */\r\n    StandardisationSetupFactory.prototype.getStandardisationSetUpWorklistHelper = function (standardisationSetUpWorkList) {\r\n        var standardisationSetUpHelper;\r\n        switch (standardisationSetUpWorkList) {\r\n            case enums.StandardisationSetup.SelectResponse:\r\n                standardisationSetUpHelper = new selectResponseHelper();\r\n                break;\r\n            case enums.StandardisationSetup.ProvisionalResponse:\r\n                standardisationSetUpHelper = new provisionalHelper();\r\n                break;\r\n            case enums.StandardisationSetup.UnClassifiedResponse:\r\n                standardisationSetUpHelper = new unclassifiedHelper();\r\n                break;\r\n            case enums.StandardisationSetup.ClassifiedResponse:\r\n                standardisationSetUpHelper = new classifiedHelper();\r\n                break;\r\n        }\r\n        return standardisationSetUpHelper;\r\n    };\r\n    return StandardisationSetupFactory;\r\n}());\r\nvar standardisationSetupFactory = new StandardisationSetupFactory();\r\nmodule.exports = standardisationSetupFactory;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc3RhbmRhcmRpc2F0aW9uc2V0dXBmYWN0b3J5LnRzPzhmODEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsYXNzaWZpZWRIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZ3JpZC9zdGFuZGFyZGlzYXRpb25zZXR1cGhlbHBlcnMvY2xhc3NpZmllZGhlbHBlcicpO1xyXG5pbXBvcnQgdW5jbGFzc2lmaWVkSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2dyaWQvc3RhbmRhcmRpc2F0aW9uc2V0dXBoZWxwZXJzL3VuY2xhc3NpZmllZGhlbHBlcicpO1xyXG5pbXBvcnQgcHJvdmlzaW9uYWxIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZ3JpZC9zdGFuZGFyZGlzYXRpb25zZXR1cGhlbHBlcnMvcHJvdmlzaW9uYWxoZWxwZXInKTtcclxuaW1wb3J0IHNlbGVjdFJlc3BvbnNlSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2dyaWQvc3RhbmRhcmRpc2F0aW9uc2V0dXBoZWxwZXJzL3NlbGVjdHJlc3BvbnNlaGVscGVyJyk7XHJcblxyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZW51bXMnKTtcclxuXHJcbmNsYXNzIFN0YW5kYXJkaXNhdGlvblNldHVwRmFjdG9yeSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBzdGFuZGFyZCBoZWxwZXIgb2JqZWN0IGJhc2VkIG9uIHRoZSB0eXBlXHJcbiAgICAgKiBAcGFyYW0gdGVhbU1hbmFnZW1lbnRUYWJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFN0YW5kYXJkaXNhdGlvblNldFVwV29ya2xpc3RIZWxwZXIoc3RhbmRhcmRpc2F0aW9uU2V0VXBXb3JrTGlzdDogZW51bXMuU3RhbmRhcmRpc2F0aW9uU2V0dXApIHtcclxuXHJcbiAgICAgICAgbGV0IHN0YW5kYXJkaXNhdGlvblNldFVwSGVscGVyO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHN0YW5kYXJkaXNhdGlvblNldFVwV29ya0xpc3QpIHtcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cC5TZWxlY3RSZXNwb25zZTpcclxuICAgICAgICAgICAgICAgIHN0YW5kYXJkaXNhdGlvblNldFVwSGVscGVyID0gbmV3IHNlbGVjdFJlc3BvbnNlSGVscGVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cC5Qcm92aXNpb25hbFJlc3BvbnNlOlxyXG4gICAgICAgICAgICAgICAgc3RhbmRhcmRpc2F0aW9uU2V0VXBIZWxwZXIgPSBuZXcgcHJvdmlzaW9uYWxIZWxwZXIoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLlN0YW5kYXJkaXNhdGlvblNldHVwLlVuQ2xhc3NpZmllZFJlc3BvbnNlOlxyXG4gICAgICAgICAgICAgICAgc3RhbmRhcmRpc2F0aW9uU2V0VXBIZWxwZXIgPSBuZXcgdW5jbGFzc2lmaWVkSGVscGVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cC5DbGFzc2lmaWVkUmVzcG9uc2U6XHJcbiAgICAgICAgICAgICAgICBzdGFuZGFyZGlzYXRpb25TZXRVcEhlbHBlciA9IG5ldyBjbGFzc2lmaWVkSGVscGVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdGFuZGFyZGlzYXRpb25TZXRVcEhlbHBlcjtcclxuICAgIH1cclxufVxyXG5cclxubGV0IHN0YW5kYXJkaXNhdGlvblNldHVwRmFjdG9yeSA9IG5ldyBTdGFuZGFyZGlzYXRpb25TZXR1cEZhY3RvcnkoKTtcclxuZXhwb3J0ID0gc3RhbmRhcmRpc2F0aW9uU2V0dXBGYWN0b3J5O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS9zdGFuZGFyZGlzYXRpb25zZXR1cC9zdGFuZGFyZGlzYXRpb25zZXR1cGZhY3RvcnkudHMiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFBQTtBQTJCQTtBQXpCQTs7O0FBR0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 338:
/* no static exports found */
/* all exports used */
/*!******************************************************************!*\
  !*** ./src/components/utility/multioptionconfirmationdialog.tsx ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for Confirmation Popup\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar moduleKeyHandler = __webpack_require__(/*! ../../utility/generic/modulekeyhandler */ 323);\r\nvar modulekeys = __webpack_require__(/*! ../../utility/generic/modulekeys */ 318);\r\nvar keyDownHelper = __webpack_require__(/*! ../../utility/generic/keydownhelper */ 258);\r\nvar enums = __webpack_require__(/*! ./enums */ 225);\r\nvar controlsEnum = { none: 0, cancel: 1, no: 2, yes: 3 };\r\n/**\r\n * React component class for Header for Authorized pages\r\n */\r\nvar MultiOptionConfirmationDialog = /** @class */ (function (_super) {\r\n    __extends(MultiOptionConfirmationDialog, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function MultiOptionConfirmationDialog(props) {\r\n        var _this = _super.call(this, props, null) || this;\r\n        _this.focusedItem = controlsEnum.none;\r\n        _this.keyHandler = _this.keyHandler.bind(_this);\r\n        _this.onCancelClick = _this.onCancelClick.bind(_this);\r\n        _this.onPopupNoClick = _this.onPopupNoClick.bind(_this);\r\n        _this.onYesClick = _this.onYesClick.bind(_this);\r\n        _this.onNoClick = _this.onNoClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render method\r\n     */\r\n    MultiOptionConfirmationDialog.prototype.render = function () {\r\n        if (this.props.displayPopup) {\r\n            if (this.props.isKeyBoardSupportEnabled) {\r\n                var keyDownHandler = new moduleKeyHandler(modulekeys.POPUP_KEY_DOWN, enums.Priority.Second, true, this.keyHandler, enums.KeyMode.down);\r\n                keyDownHelper.instance.mountKeyDownHandler(keyDownHandler);\r\n                var keyPressHandler = new moduleKeyHandler(modulekeys.POPUP_KEY_PRESS, enums.Priority.Second, true, this.keyHandler, enums.KeyMode.press);\r\n                keyDownHelper.instance.mountKeyPressHandler(keyPressHandler);\r\n            }\r\n            var prefix = void 0;\r\n            switch (this.props.popupType) {\r\n                case enums.PopUpType.AtypicalSearch:\r\n                    prefix = 'atypicalSearch';\r\n                    break;\r\n                case enums.PopUpType.SelectToMarkAsProvisional:\r\n                    prefix = 'selectToMark';\r\n                    break;\r\n                case enums.PopUpType.ReclassifyMultiOption:\r\n                    prefix = 'ReclassifyMultiOption';\r\n                    break;\r\n                case enums.PopUpType.ShareResponse:\r\n                    prefix = 'shareResponse';\r\n                    break;\r\n                case enums.PopUpType.ReuseRigAction:\r\n                    prefix = 'reuseRig';\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            var noButtonEl = void 0;\r\n            if (this.props.displayNoButton) {\r\n                noButtonEl = (React.createElement(\"button\", { autoFocus: false, onClick: this.onNoClick, id: 'popup_' + prefix + 'Messge_move_to_worklist_button', className: 'button rounded', ref: 'noButton' }, this.props.buttonNoText));\r\n            }\r\n            return (React.createElement(\"div\", { className: classNames('popup popup-overlay close-button popup-open open', enums.getEnumString(enums.PopupSize, this.props.popupSize).toLowerCase()), id: this.id, role: 'dialog', \"aria-labelledby\": 'popup42Title', \"aria-describedby\": 'popup42Desc', onClick: this.onPopupNoClick },\r\n                React.createElement(\"div\", { className: 'popup-wrap', onClick: this.onPopupClick },\r\n                    React.createElement(\"div\", { className: 'popup-header bold-header-txt' },\r\n                        React.createElement(\"h4\", { id: 'popup42Title' }, this.props.header)),\r\n                    React.createElement(\"div\", { className: 'popup-content content-with-radio-btn', id: 'popup42Desc', key: 'popup14Desc' },\r\n                        React.createElement(\"p\", null, this.props.content)),\r\n                    React.createElement(\"div\", { className: 'popup-footer text-right' },\r\n                        React.createElement(\"button\", { onClick: this.onCancelClick, id: 'popup_' + prefix + 'Messge_cancel_button', ref: 'cancelButton', className: 'button rounded close-button' }, this.props.buttonCancelText),\r\n                        noButtonEl,\r\n                        React.createElement(\"button\", { autoFocus: true, onClick: this.onYesClick, id: 'popup_' + prefix + 'Messge_mark_now_button', className: 'button primary rounded', ref: 'yesButton', disabled: this.props.isClassifyResponseOkButtonDisabled }, this.props.buttonYesText)))));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * This function gets invoked when the component is about to be mounted\r\n     */\r\n    MultiOptionConfirmationDialog.prototype.componentWillUnmount = function () {\r\n        if (this.props.isKeyBoardSupportEnabled) {\r\n            // Unmount the event to give others the priority\r\n            keyDownHelper.instance.unmountKeyHandler(modulekeys.POPUP_KEY_DOWN);\r\n            // Unmount the event to give others the priority\r\n            keyDownHelper.instance.unmountKeyHandler(modulekeys.POPUP_KEY_PRESS);\r\n        }\r\n    };\r\n    /**\r\n     * Event fired on clicking 'No'\r\n     * @param evnt\r\n     */\r\n    MultiOptionConfirmationDialog.prototype.onCancelClick = function (evnt) {\r\n        if (this.props.isKeyBoardSupportEnabled) {\r\n            // Unmount the event to give others the priority\r\n            keyDownHelper.instance.unmountKeyHandler(modulekeys.POPUP_KEY_DOWN);\r\n            // Unmount the event to give others the priority\r\n            keyDownHelper.instance.unmountKeyHandler(modulekeys.POPUP_KEY_PRESS);\r\n        }\r\n        /** Should be true and rerender once the user changed (turn on) the ask on logout from panel and logging out */\r\n        this.setState({ isAskOnLogOutChecked: true });\r\n        this.props.onCancelClick();\r\n    };\r\n    /**\r\n     * Event fired on clicking 'Yes'\r\n     * @param evnt\r\n     */\r\n    MultiOptionConfirmationDialog.prototype.onNoClick = function (evnt) {\r\n        if (this.props.isKeyBoardSupportEnabled) {\r\n            // Unmount the event to give others the priority\r\n            keyDownHelper.instance.unmountKeyHandler(modulekeys.POPUP_KEY_DOWN);\r\n            // Unmount the event to give others the priority\r\n            keyDownHelper.instance.unmountKeyHandler(modulekeys.POPUP_KEY_PRESS);\r\n        }\r\n        this.props.onNoClick();\r\n    };\r\n    /**\r\n     * Event fired on clicking 'MarkNow'\r\n     * @param evnt\r\n     */\r\n    MultiOptionConfirmationDialog.prototype.onYesClick = function (evnt) {\r\n        if (this.props.isKeyBoardSupportEnabled) {\r\n            // Unmount the event to give others the priority\r\n            keyDownHelper.instance.unmountKeyHandler(modulekeys.POPUP_KEY_DOWN);\r\n            // Unmount the event to give others the priority\r\n            keyDownHelper.instance.unmountKeyHandler(modulekeys.POPUP_KEY_PRESS);\r\n        }\r\n        this.props.onYesClick();\r\n    };\r\n    /**\r\n     * Event fired on clicking popup\r\n     * @param evnt\r\n     */\r\n    MultiOptionConfirmationDialog.prototype.onPopupClick = function (evnt) {\r\n        evnt.stopPropagation();\r\n        return false;\r\n    };\r\n    /**\r\n     * Event fired on clicking 'No' of popup\r\n     * @param evnt\r\n     */\r\n    MultiOptionConfirmationDialog.prototype.onPopupNoClick = function (evnt) {\r\n        this.onPopupClick(evnt);\r\n    };\r\n    /**\r\n     * Handle keydown.\r\n     * @param {KeyboardEvent} event\r\n     * @returns\r\n     */\r\n    MultiOptionConfirmationDialog.prototype.keyHandler = function (event) {\r\n        var key = event.keyCode || event.charCode;\r\n        // Handling the tab key for toggling the yes and no button focus.\r\n        if (key === enums.KeyCode.tab) {\r\n            switch (this.focusedItem) {\r\n                case controlsEnum.cancel:\r\n                    this.refs.noButton.focus();\r\n                    this.focusedItem = controlsEnum.no;\r\n                    break;\r\n                case controlsEnum.no:\r\n                    this.refs.yesButton.focus();\r\n                    this.focusedItem = controlsEnum.yes;\r\n                    break;\r\n                case controlsEnum.yes:\r\n                    this.refs.cancelButton.focus();\r\n                    this.focusedItem = controlsEnum.cancel;\r\n                    break;\r\n                case controlsEnum.none:\r\n                    this.refs.cancelButton.focus();\r\n                    this.focusedItem = controlsEnum.cancel;\r\n                    break;\r\n            }\r\n        }\r\n        // If enter key pressed firing action based on focused element.\r\n        if (key === enums.KeyCode.enter) {\r\n            switch (this.focusedItem) {\r\n                case controlsEnum.cancel:\r\n                    this.onCancelClick(event);\r\n                    break;\r\n                case controlsEnum.no:\r\n                    this.onNoClick(event);\r\n                    break;\r\n                case controlsEnum.yes:\r\n                    this.onYesClick(event);\r\n                    break;\r\n            }\r\n        }\r\n        else if (key === enums.KeyCode.backspace) {\r\n            keyDownHelper.KeydownHelper.stopEvent(event);\r\n            return true;\r\n        }\r\n        /** to disbale the response navigation on confirmation popups (reset marks and annotation) */\r\n        if (key === enums.KeyCode.left || key === enums.KeyCode.right) {\r\n            keyDownHelper.KeydownHelper.stopEvent(event);\r\n        }\r\n        return true;\r\n    };\r\n    return MultiOptionConfirmationDialog;\r\n}(pureRenderComponent));\r\nmodule.exports = MultiOptionConfirmationDialog;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 340:
/* no static exports found */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/components/utility/table/sortarrow.tsx ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\n/* tslint:disable:variable-name */\r\nvar SortArrow = function (props) {\r\n    switch (props.sortOption) {\r\n        case enums.SortOption.Up:\r\n            return (React.createElement(\"span\", { className: 'sort-arrow' },\r\n                React.createElement(\"span\", { className: 'sort-arrow-up' })));\r\n        case enums.SortOption.Down:\r\n            return (React.createElement(\"span\", { className: 'sort-arrow' },\r\n                React.createElement(\"span\", { className: 'sort-arrow-down' })));\r\n        default:// enums.SortOption.both or undefined\r\n            return (React.createElement(\"span\", { className: 'sort-arrow' },\r\n                React.createElement(\"span\", { className: 'sort-arrow-up' }),\r\n                React.createElement(\"span\", { className: 'sort-arrow-down' })));\r\n    }\r\n};\r\nmodule.exports = SortArrow;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS90YWJsZS9zb3J0YXJyb3cudHN4PzdjYzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vZW51bXMnKTtcclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuY29uc3QgU29ydEFycm93ID0gKHByb3BzOiB7IHNvcnRPcHRpb246IGVudW1zLlNvcnRPcHRpb24gfSkgPT4ge1xyXG4gICAgc3dpdGNoIChwcm9wcy5zb3J0T3B0aW9uKSB7XHJcbiAgICAgICAgY2FzZSBlbnVtcy5Tb3J0T3B0aW9uLlVwOlxyXG4gICAgICAgICAgICByZXR1cm4gKDwgc3BhbiBjbGFzc05hbWU9J3NvcnQtYXJyb3cnID5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nc29ydC1hcnJvdy11cCc+PC9zcGFuPlxyXG4gICAgICAgICAgICA8L3NwYW4gPik7XHJcbiAgICAgICAgY2FzZSBlbnVtcy5Tb3J0T3B0aW9uLkRvd246XHJcbiAgICAgICAgICAgIHJldHVybiAoPCBzcGFuIGNsYXNzTmFtZT0nc29ydC1hcnJvdycgPlxyXG4gICAgICAgICAgICAgICAgPCBzcGFuIGNsYXNzTmFtZT0nc29ydC1hcnJvdy1kb3duJyA+PC9zcGFuID5cclxuICAgICAgICAgICAgPC9zcGFuID4pO1xyXG4gICAgICAgIGRlZmF1bHQ6IC8vIGVudW1zLlNvcnRPcHRpb24uYm90aCBvciB1bmRlZmluZWRcclxuICAgICAgICAgICAgcmV0dXJuICg8IHNwYW4gY2xhc3NOYW1lPSdzb3J0LWFycm93JyA+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3NvcnQtYXJyb3ctdXAnPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwgc3BhbiBjbGFzc05hbWU9J3NvcnQtYXJyb3ctZG93bicgPjwvc3BhbiA+XHJcbiAgICAgICAgICAgIDwvc3BhbiA+KTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCA9IFNvcnRBcnJvdztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS90YWJsZS9zb3J0YXJyb3cudHN4Il0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 344:
/* no static exports found */
/* all exports used */
/*!***************************************************************!*\
  !*** ./src/actions/submit/shareandclassifycompletedaction.ts ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar action = __webpack_require__(/*! ../base/action */ 229);\r\nvar actionType = __webpack_require__(/*! ../base/actiontypes */ 228);\r\nvar dataRetrievalAction = __webpack_require__(/*! ../base/dataretrievalaction */ 239);\r\n/**\r\n * Action when responses are submitted\r\n */\r\nvar ShareAndClassifyCompletedAction = /** @class */ (function (_super) {\r\n    __extends(ShareAndClassifyCompletedAction, _super);\r\n    /**\r\n     * Constructor for ShareAndClassifyResponse\r\n     * @param submitResponseReturn The return values after response submission\r\n     */\r\n    function ShareAndClassifyCompletedAction(success, shareAndClassifyReturn, fromMarkScheme, selectedDisplayId) {\r\n        var _this = _super.call(this, action.Source.View, actionType.SHARE_AND_CLASSIFY_COMPLETED, success, shareAndClassifyReturn) || this;\r\n        _this._shareAndClassifyResponseReturn = shareAndClassifyReturn;\r\n        _this.fromMarkScheme = fromMarkScheme;\r\n        _this._selectedDisplayId = selectedDisplayId;\r\n        _this.auditLog.logContent = _this.auditLog.logContent.replace(/{success}/g, success.toString()).replace(/{errorCode}/g, shareAndClassifyReturn.responseShareAndClassifyErrorCode.toString());\r\n        return _this;\r\n    }\r\n    Object.defineProperty(ShareAndClassifyCompletedAction.prototype, \"getShareAndClassifyResponseReturnDetails\", {\r\n        /**\r\n         * Gets the submit response return details\r\n         */\r\n        get: function () {\r\n            return this._shareAndClassifyResponseReturn;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShareAndClassifyCompletedAction.prototype, \"isFromMarkScheme\", {\r\n        /**\r\n         * Gets whether the response has been submitted from markscheme\r\n         */\r\n        get: function () {\r\n            return this.fromMarkScheme;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ShareAndClassifyCompletedAction.prototype, \"getSelectedDisplayId\", {\r\n        /**\r\n         * Gets the  selectedDisplayId\r\n         */\r\n        get: function () {\r\n            return this._selectedDisplayId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ShareAndClassifyCompletedAction;\r\n}(dataRetrievalAction));\r\nmodule.exports = ShareAndClassifyCompletedAction;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvc3VibWl0L3NoYXJlYW5kY2xhc3NpZnljb21wbGV0ZWRhY3Rpb24udHM/YmRjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYWN0aW9uID0gcmVxdWlyZSgnLi4vYmFzZS9hY3Rpb24nKTtcclxuaW1wb3J0IGFjdGlvblR5cGUgPSByZXF1aXJlKCcuLi9iYXNlL2FjdGlvbnR5cGVzJyk7XHJcbmltcG9ydCBhY3Rpb25BdWRpdExvZ0luZm8gPSByZXF1aXJlKCcuLi9iYXNlL2F1ZGl0bG9naW5mby9hY3Rpb25hdWRpdGxvZ2luZm8nKTtcclxuaW1wb3J0IGRhdGFSZXRyaWV2YWxBY3Rpb24gPSByZXF1aXJlKCcuLi9iYXNlL2RhdGFyZXRyaWV2YWxhY3Rpb24nKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBzaGFyZUFuZENsYXNzaWZ5UmV0dXJuICA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy9zdWJtaXQvdHlwaW5ncy9zaGFyZUFuZENsYXNzaWZ5UmV0dXJuJyk7XHJcblxyXG4vKipcclxuICogQWN0aW9uIHdoZW4gcmVzcG9uc2VzIGFyZSBzdWJtaXR0ZWRcclxuICovXHJcbmNsYXNzIFNoYXJlQW5kQ2xhc3NpZnlDb21wbGV0ZWRBY3Rpb24gZXh0ZW5kcyBkYXRhUmV0cmlldmFsQWN0aW9uIHtcclxuXHJcbiAgICBwcml2YXRlIF9zaGFyZUFuZENsYXNzaWZ5UmVzcG9uc2VSZXR1cm46IHNoYXJlQW5kQ2xhc3NpZnlSZXR1cm47XHJcbiAgICBwcml2YXRlIGZyb21NYXJrU2NoZW1lOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWREaXNwbGF5SWQ6IHN0cmluZztcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgU2hhcmVBbmRDbGFzc2lmeVJlc3BvbnNlXHJcbiAgICAgKiBAcGFyYW0gc3VibWl0UmVzcG9uc2VSZXR1cm4gVGhlIHJldHVybiB2YWx1ZXMgYWZ0ZXIgcmVzcG9uc2Ugc3VibWlzc2lvblxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzdWNjZXNzOiBib29sZWFuLFxyXG4gICAgICAgIHNoYXJlQW5kQ2xhc3NpZnlSZXR1cm46IHNoYXJlQW5kQ2xhc3NpZnlSZXR1cm4sXHJcbiAgICAgICAgZnJvbU1hcmtTY2hlbWU6IGJvb2xlYW4sXHJcbiAgICAgICAgc2VsZWN0ZWREaXNwbGF5SWQ/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihhY3Rpb24uU291cmNlLlZpZXcsIGFjdGlvblR5cGUuU0hBUkVfQU5EX0NMQVNTSUZZX0NPTVBMRVRFRCwgc3VjY2Vzcywgc2hhcmVBbmRDbGFzc2lmeVJldHVybik7XHJcbiAgICAgICAgdGhpcy5fc2hhcmVBbmRDbGFzc2lmeVJlc3BvbnNlUmV0dXJuID0gc2hhcmVBbmRDbGFzc2lmeVJldHVybjtcclxuICAgICAgICB0aGlzLmZyb21NYXJrU2NoZW1lID0gZnJvbU1hcmtTY2hlbWU7XHJcbiAgICAgICAgdGhpcy5fc2VsZWN0ZWREaXNwbGF5SWQgPSBzZWxlY3RlZERpc3BsYXlJZDtcclxuICAgICAgICB0aGlzLmF1ZGl0TG9nLmxvZ0NvbnRlbnQgPSB0aGlzLmF1ZGl0TG9nLmxvZ0NvbnRlbnQucmVwbGFjZSgve3N1Y2Nlc3N9L2csXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MudG9TdHJpbmcoKSkucmVwbGFjZSgve2Vycm9yQ29kZX0vZywgc2hhcmVBbmRDbGFzc2lmeVJldHVybi5yZXNwb25zZVNoYXJlQW5kQ2xhc3NpZnlFcnJvckNvZGUudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBzdWJtaXQgcmVzcG9uc2UgcmV0dXJuIGRldGFpbHNcclxuICAgICAqL1xyXG4gICAgZ2V0IGdldFNoYXJlQW5kQ2xhc3NpZnlSZXNwb25zZVJldHVybkRldGFpbHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NoYXJlQW5kQ2xhc3NpZnlSZXNwb25zZVJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgd2hldGhlciB0aGUgcmVzcG9uc2UgaGFzIGJlZW4gc3VibWl0dGVkIGZyb20gbWFya3NjaGVtZVxyXG4gICAgICovXHJcbiAgICBnZXQgaXNGcm9tTWFya1NjaGVtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mcm9tTWFya1NjaGVtZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSAgc2VsZWN0ZWREaXNwbGF5SWRcclxuICAgICAqL1xyXG4gICAgZ2V0IGdldFNlbGVjdGVkRGlzcGxheUlkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZERpc3BsYXlJZDtcclxuICAgIH1cclxuXHJcbn1cclxuZXhwb3J0ID0gU2hhcmVBbmRDbGFzc2lmeUNvbXBsZXRlZEFjdGlvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2FjdGlvbnMvc3VibWl0L3NoYXJlYW5kY2xhc3NpZnljb21wbGV0ZWRhY3Rpb24udHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBSUE7O0FBRUE7QUFDQTtBQUFBO0FBT0E7OztBQUdBO0FBQ0E7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQU1BO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBRUE7QUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 345:
/* no static exports found */
/* all exports used */
/*!*************************************************************!*\
  !*** ./src/actions/submit/submitresponsecompletedaction.ts ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar action = __webpack_require__(/*! ../base/action */ 229);\r\nvar actionType = __webpack_require__(/*! ../base/actiontypes */ 228);\r\nvar dataRetrievalAction = __webpack_require__(/*! ../base/dataretrievalaction */ 239);\r\n/**\r\n * Action when responses are submitted\r\n */\r\nvar SubmitResponseCompletedAction = /** @class */ (function (_super) {\r\n    __extends(SubmitResponseCompletedAction, _super);\r\n    /**\r\n     * Constructor for SubmitResponseCompletedAction\r\n     * @param submitResponseReturn The return values after response submission\r\n     */\r\n    function SubmitResponseCompletedAction(success, submitResponseReturn, worklistType, fromMarkScheme, examinerApproval, markGroupIds, selectedDisplayId, isStdSetupMode) {\r\n        var _this = _super.call(this, action.Source.View, actionType.SUBMIT_RESPONSE_COMPLETED, success, submitResponseReturn) || this;\r\n        _this._submitResponseReturn = submitResponseReturn;\r\n        _this.worklistType = worklistType;\r\n        _this.fromMarkScheme = fromMarkScheme;\r\n        _this.examinerApproval = examinerApproval;\r\n        _this.markGroupIds = markGroupIds;\r\n        _this._selectedDisplayId = selectedDisplayId;\r\n        _this._isStdSetupMode = isStdSetupMode;\r\n        _this.auditLog.logContent = _this.auditLog.logContent.replace(/{success}/g, success.toString()).replace(/{errorCode}/g, submitResponseReturn.responseSubmitErrorCode.toString());\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SubmitResponseCompletedAction.prototype, \"getExaminerApproval\", {\r\n        /**\r\n         * Gets the approval status of examiner while submitting the response\r\n         */\r\n        get: function () {\r\n            return this.examinerApproval;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SubmitResponseCompletedAction.prototype, \"getSubmitResponseReturnDetails\", {\r\n        /**\r\n         * Gets the submit response return details\r\n         */\r\n        get: function () {\r\n            return this._submitResponseReturn;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SubmitResponseCompletedAction.prototype, \"getCurrentWorklistType\", {\r\n        /**\r\n         * Gets the current worklist type.\r\n         */\r\n        get: function () {\r\n            return this.worklistType;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SubmitResponseCompletedAction.prototype, \"isFromMarkScheme\", {\r\n        /**\r\n         * Gets whether the response has been submitted from markscheme\r\n         */\r\n        get: function () {\r\n            return this.fromMarkScheme;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SubmitResponseCompletedAction.prototype, \"getSubmittedMarkGroupIds\", {\r\n        /**\r\n         * Getsthe list of submitted Markgroupids\r\n         */\r\n        get: function () {\r\n            return this.markGroupIds;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SubmitResponseCompletedAction.prototype, \"getSelectedDisplayId\", {\r\n        /**\r\n         * Gets the  selectedDisplayId\r\n         */\r\n        get: function () {\r\n            return this._selectedDisplayId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SubmitResponseCompletedAction.prototype, \"isStdSetupMode\", {\r\n        /**\r\n         * Gets whether submitted from Standardisation Setup Worklist\r\n         */\r\n        get: function () {\r\n            return this._isStdSetupMode;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return SubmitResponseCompletedAction;\r\n}(dataRetrievalAction));\r\nmodule.exports = SubmitResponseCompletedAction;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvc3VibWl0L3N1Ym1pdHJlc3BvbnNlY29tcGxldGVkYWN0aW9uLnRzPzUxNTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFjdGlvbiA9IHJlcXVpcmUoJy4uL2Jhc2UvYWN0aW9uJyk7XHJcbmltcG9ydCBhY3Rpb25UeXBlID0gcmVxdWlyZSgnLi4vYmFzZS9hY3Rpb250eXBlcycpO1xyXG5pbXBvcnQgYWN0aW9uQXVkaXRMb2dJbmZvID0gcmVxdWlyZSgnLi4vYmFzZS9hdWRpdGxvZ2luZm8vYWN0aW9uYXVkaXRsb2dpbmZvJyk7XHJcbmltcG9ydCBkYXRhUmV0cmlldmFsQWN0aW9uID0gcmVxdWlyZSgnLi4vYmFzZS9kYXRhcmV0cmlldmFsYWN0aW9uJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvdXRpbGl0eS9lbnVtcycpO1xyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiB3aGVuIHJlc3BvbnNlcyBhcmUgc3VibWl0dGVkXHJcbiAqL1xyXG5jbGFzcyBTdWJtaXRSZXNwb25zZUNvbXBsZXRlZEFjdGlvbiBleHRlbmRzIGRhdGFSZXRyaWV2YWxBY3Rpb24ge1xyXG5cclxuICAgIHByaXZhdGUgX3N1Ym1pdFJlc3BvbnNlUmV0dXJuOiBTdWJtaXRSZXNwb25zZVJldHVybjtcclxuICAgIHByaXZhdGUgd29ya2xpc3RUeXBlOiBlbnVtcy5Xb3JrbGlzdFR5cGU7XHJcbiAgICBwcml2YXRlIGZyb21NYXJrU2NoZW1lOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBleGFtaW5lckFwcHJvdmFsOiBlbnVtcy5FeGFtaW5lckFwcHJvdmFsO1xyXG4gICAgcHJpdmF0ZSBtYXJrR3JvdXBJZHM6IEFycmF5PE51bWJlcj47XHJcbiAgICBwcml2YXRlIF9zZWxlY3RlZERpc3BsYXlJZDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBfaXNTdGRTZXR1cE1vZGU6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgU3VibWl0UmVzcG9uc2VDb21wbGV0ZWRBY3Rpb25cclxuICAgICAqIEBwYXJhbSBzdWJtaXRSZXNwb25zZVJldHVybiBUaGUgcmV0dXJuIHZhbHVlcyBhZnRlciByZXNwb25zZSBzdWJtaXNzaW9uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHN1Y2Nlc3M6IGJvb2xlYW4sIHN1Ym1pdFJlc3BvbnNlUmV0dXJuOiBTdWJtaXRSZXNwb25zZVJldHVybiwgd29ya2xpc3RUeXBlOiBlbnVtcy5Xb3JrbGlzdFR5cGUsXHJcbiAgICAgICAgZnJvbU1hcmtTY2hlbWU6IGJvb2xlYW4sIGV4YW1pbmVyQXBwcm92YWw6IGVudW1zLkV4YW1pbmVyQXBwcm92YWwsIG1hcmtHcm91cElkczogQXJyYXk8TnVtYmVyPixcclxuICAgICAgICBzZWxlY3RlZERpc3BsYXlJZD86IHN0cmluZywgaXNTdGRTZXR1cE1vZGU/OiBib29sZWFuKSB7XHJcbiAgICAgICAgc3VwZXIoYWN0aW9uLlNvdXJjZS5WaWV3LCBhY3Rpb25UeXBlLlNVQk1JVF9SRVNQT05TRV9DT01QTEVURUQsIHN1Y2Nlc3MsIHN1Ym1pdFJlc3BvbnNlUmV0dXJuKTtcclxuICAgICAgICB0aGlzLl9zdWJtaXRSZXNwb25zZVJldHVybiA9IHN1Ym1pdFJlc3BvbnNlUmV0dXJuO1xyXG4gICAgICAgIHRoaXMud29ya2xpc3RUeXBlID0gd29ya2xpc3RUeXBlO1xyXG4gICAgICAgIHRoaXMuZnJvbU1hcmtTY2hlbWUgPSBmcm9tTWFya1NjaGVtZTtcclxuICAgICAgICB0aGlzLmV4YW1pbmVyQXBwcm92YWwgPSBleGFtaW5lckFwcHJvdmFsO1xyXG4gICAgICAgIHRoaXMubWFya0dyb3VwSWRzID0gbWFya0dyb3VwSWRzO1xyXG4gICAgICAgIHRoaXMuX3NlbGVjdGVkRGlzcGxheUlkID0gc2VsZWN0ZWREaXNwbGF5SWQ7XHJcbiAgICAgICAgdGhpcy5faXNTdGRTZXR1cE1vZGUgPSBpc1N0ZFNldHVwTW9kZTtcclxuICAgICAgICB0aGlzLmF1ZGl0TG9nLmxvZ0NvbnRlbnQgPSB0aGlzLmF1ZGl0TG9nLmxvZ0NvbnRlbnQucmVwbGFjZSgve3N1Y2Nlc3N9L2csXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MudG9TdHJpbmcoKSkucmVwbGFjZSgve2Vycm9yQ29kZX0vZywgc3VibWl0UmVzcG9uc2VSZXR1cm4ucmVzcG9uc2VTdWJtaXRFcnJvckNvZGUudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ZhbCBzdGF0dXMgb2YgZXhhbWluZXIgd2hpbGUgc3VibWl0dGluZyB0aGUgcmVzcG9uc2VcclxuICAgICAqL1xyXG4gICAgZ2V0IGdldEV4YW1pbmVyQXBwcm92YWwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhhbWluZXJBcHByb3ZhbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIHN1Ym1pdCByZXNwb25zZSByZXR1cm4gZGV0YWlsc1xyXG4gICAgICovXHJcbiAgICBnZXQgZ2V0U3VibWl0UmVzcG9uc2VSZXR1cm5EZXRhaWxzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdWJtaXRSZXNwb25zZVJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgd29ya2xpc3QgdHlwZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IGdldEN1cnJlbnRXb3JrbGlzdFR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud29ya2xpc3RUeXBlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB3aGV0aGVyIHRoZSByZXNwb25zZSBoYXMgYmVlbiBzdWJtaXR0ZWQgZnJvbSBtYXJrc2NoZW1lXHJcbiAgICAgKi9cclxuICAgIGdldCBpc0Zyb21NYXJrU2NoZW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZyb21NYXJrU2NoZW1lO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0c3RoZSBsaXN0IG9mIHN1Ym1pdHRlZCBNYXJrZ3JvdXBpZHNcclxuICAgICAqL1xyXG4gICAgZ2V0IGdldFN1Ym1pdHRlZE1hcmtHcm91cElkcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXJrR3JvdXBJZHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSAgc2VsZWN0ZWREaXNwbGF5SWRcclxuICAgICAqL1xyXG4gICAgZ2V0IGdldFNlbGVjdGVkRGlzcGxheUlkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZERpc3BsYXlJZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgd2hldGhlciBzdWJtaXR0ZWQgZnJvbSBTdGFuZGFyZGlzYXRpb24gU2V0dXAgV29ya2xpc3RcclxuICAgICAqL1xyXG4gICAgZ2V0IGlzU3RkU2V0dXBNb2RlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1N0ZFNldHVwTW9kZTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgPSBTdWJtaXRSZXNwb25zZUNvbXBsZXRlZEFjdGlvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2FjdGlvbnMvc3VibWl0L3N1Ym1pdHJlc3BvbnNlY29tcGxldGVkYWN0aW9uLnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFFQTtBQUdBOztBQUVBO0FBQ0E7QUFBQTtBQVVBOzs7QUFHQTtBQUNBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 346:
/* no static exports found */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/actions/submit/submitresponsestartedaction.ts ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar action = __webpack_require__(/*! ../base/action */ 229);\r\nvar actionType = __webpack_require__(/*! ../base/actiontypes */ 228);\r\n/**\r\n * Action to start submit single response\r\n */\r\nvar SubmitResponseStartedAction = /** @class */ (function (_super) {\r\n    __extends(SubmitResponseStartedAction, _super);\r\n    /**\r\n     * Constructor for ResponseSubmitStarted\r\n     * @param markGroupId The mark group id\r\n     */\r\n    function SubmitResponseStartedAction(markGroupId) {\r\n        var _this = _super.call(this, action.Source.View, actionType.SINGLE_RESPONSE_SUBMIT_STARTED) || this;\r\n        _this._markGroupId = markGroupId;\r\n        _this.auditLog.logContent = _this.auditLog.logContent.replace(/{markGroupId}/g, markGroupId.toString());\r\n        return _this;\r\n    }\r\n    Object.defineProperty(SubmitResponseStartedAction.prototype, \"getMarkGroupId\", {\r\n        /**\r\n         * Gets the mark group id\r\n         */\r\n        get: function () {\r\n            return this._markGroupId;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return SubmitResponseStartedAction;\r\n}(action));\r\nmodule.exports = SubmitResponseStartedAction;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvc3VibWl0L3N1Ym1pdHJlc3BvbnNlc3RhcnRlZGFjdGlvbi50cz9hYzA0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhY3Rpb24gPSByZXF1aXJlKCcuLi9iYXNlL2FjdGlvbicpO1xyXG5pbXBvcnQgYWN0aW9uVHlwZSA9IHJlcXVpcmUoJy4uL2Jhc2UvYWN0aW9udHlwZXMnKTtcclxuaW1wb3J0IGFjdGlvbkF1ZGl0TG9nSW5mbyA9IHJlcXVpcmUoJy4uL2Jhc2UvYXVkaXRsb2dpbmZvL2FjdGlvbmF1ZGl0bG9naW5mbycpO1xyXG5cclxuLyoqXHJcbiAqIEFjdGlvbiB0byBzdGFydCBzdWJtaXQgc2luZ2xlIHJlc3BvbnNlXHJcbiAqL1xyXG5jbGFzcyBTdWJtaXRSZXNwb25zZVN0YXJ0ZWRBY3Rpb24gZXh0ZW5kcyBhY3Rpb24ge1xyXG5cclxuICAgIHByaXZhdGUgX21hcmtHcm91cElkOiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgUmVzcG9uc2VTdWJtaXRTdGFydGVkXHJcbiAgICAgKiBAcGFyYW0gbWFya0dyb3VwSWQgVGhlIG1hcmsgZ3JvdXAgaWRcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoIG1hcmtHcm91cElkOiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihhY3Rpb24uU291cmNlLlZpZXcsIGFjdGlvblR5cGUuU0lOR0xFX1JFU1BPTlNFX1NVQk1JVF9TVEFSVEVEKTtcclxuICAgICAgICB0aGlzLl9tYXJrR3JvdXBJZCA9IG1hcmtHcm91cElkO1xyXG4gICAgICAgIHRoaXMuYXVkaXRMb2cubG9nQ29udGVudCA9IHRoaXMuYXVkaXRMb2cubG9nQ29udGVudC5yZXBsYWNlKC97bWFya0dyb3VwSWR9L2csIG1hcmtHcm91cElkLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgbWFyayBncm91cCBpZFxyXG4gICAgICovXHJcbiAgICBnZXQgZ2V0TWFya0dyb3VwSWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcmtHcm91cElkO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCA9IFN1Ym1pdFJlc3BvbnNlU3RhcnRlZEFjdGlvbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2FjdGlvbnMvc3VibWl0L3N1Ym1pdHJlc3BvbnNlc3RhcnRlZGFjdGlvbi50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBR0E7O0FBRUE7QUFDQTtBQUFBO0FBSUE7OztBQUdBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7O0FBQ0E7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 356:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/components/response/responsescreen/tag.tsx ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar tag = function (props) {\r\n    // For light-green tag, in css class they are using a hyphen(-) but the same cannot be applied to an Enum.\r\n    // So for light Green Tag, we are appending the class name through below condition.\r\n    // For other tags, it works.\r\n    var tagClass = props.tagType === enums.TagType.LightGreen ? ' light-green'\r\n        : enums.getEnumString(enums.TagType, props.tagType).toLocaleLowerCase();\r\n    /**\r\n     * This method gets the title for the tag\r\n     */\r\n    var getTitleForTag = function () {\r\n        var title;\r\n        switch (props.tagType) {\r\n            case enums.TagType.Empty:\r\n                title = localeStore.instance.TranslateText('marking.worklist.tag-tooltips.no-tag');\r\n                if (props.isSelected && props.isInList === false) {\r\n                    title = localeStore.instance.TranslateText('marking.worklist.tag-tooltips.add-tag');\r\n                }\r\n                break;\r\n            default:\r\n                title = localeStore.instance.TranslateText('marking.worklist.tag-tooltips.' +\r\n                    enums.getEnumString(enums.TagType, props.tagType).toLocaleLowerCase());\r\n        }\r\n        return title;\r\n    };\r\n    /**\r\n     * handler for selection of tags from list (Callback).\r\n     */\r\n    var onSelection = function (event) {\r\n        props.onSelection(props.tagType, event);\r\n    };\r\n    /**\r\n     * handler for clicking on the tag to expand/collapse the list (Callback).\r\n     */\r\n    var onClickExpandAndCollapse = function (event) {\r\n        props.onArrowClick(props.tagType, event);\r\n    };\r\n    // SVG element for tag icons\r\n    var svgElements = React.createElement(\"g\", { id: 'tag-icon' },\r\n        React.createElement(\"svg\", { viewBox: '0 0 20 20', preserveAspectRatio: 'xMidYMid meet' },\r\n            React.createElement(\"g\", null,\r\n                React.createElement(\"path\", { d: 'M17.125,2.876l-5.553-0.799l-9.336,9.336l6.35,6.352l9.338-9.337L17.125,2.876z M15.145,7.39c-0.7,0.7-1.835,0.7-2.536,0c-0.7-0.699-0.7-1.833,0-2.532c0.7-0.7,1.836-0.7,2.536,0C15.845,5.557,15.845,6.69,15.145,7.39' }),\r\n                React.createElement(\"path\", { d: 'M17.59,2.41l-6.203-0.892L1.49,11.413l7.095,7.097l9.896-9.896L17.59,2.41z M8.585,17.02L2.98,11.413l8.779-8.776l4.9,0.705l0.704,4.899L8.585,17.02z', fill: 'currentColor' }),\r\n                React.createElement(\"path\", { d: 'M12.237,4.483c-0.904,0.905-0.904,2.374,0,3.278c0.453,0.453,1.045,0.679,1.64,0.679s1.188-0.226,1.64-0.679c0.904-0.904,0.904-2.373,0-3.278C14.614,3.581,13.14,3.579,12.237,4.483z M14.772,7.017c-0.494,0.496-1.296,0.493-1.791,0c-0.492-0.492-0.492-1.295,0-1.788c0.247-0.246,0.572-0.369,0.896-0.369s0.648,0.123,0.895,0.369C15.264,5.722,15.264,6.524,14.772,7.017z', fill: 'currentColor' }),\r\n                React.createElement(\"path\", { d: 'M9.127,8.035c-0.207-0.206-0.54-0.206-0.745,0c-0.207,0.206-0.207,0.539,0,0.745l2.838,2.839c0.103,0.102,0.239,0.153,0.373,0.153c0.136,0,0.27-0.052,0.373-0.153c0.206-0.207,0.206-0.54,0-0.746L9.127,8.035z', fill: 'currentColor' }),\r\n                React.createElement(\"path\", { d: 'M6.69,10.472c-0.206-0.206-0.539-0.206-0.745,0c-0.206,0.206-0.206,0.539,0,0.745l2.838,2.839c0.103,0.103,0.238,0.153,0.373,0.153s0.27-0.051,0.373-0.153c0.206-0.206,0.206-0.54,0-0.746L6.69,10.472z', fill: 'currentColor' }))));\r\n    // SVG elements for highlighted tags\r\n    var svgElementHighlight = React.createElement(\"g\", { id: 'tag-highlight' },\r\n        React.createElement(\"svg\", { viewBox: '0 0 20 20', preserveAspectRatio: 'xMidYMid meet' },\r\n            React.createElement(\"g\", null,\r\n                React.createElement(\"path\", { d: 'M13.877,4.859c-0.323,0-0.648,0.123-0.896,0.369c-0.492,0.493-0.492,1.296,0,1.788c0.494,0.493,1.295,0.496,1.791,0c0.492-0.492,0.492-1.295,0-1.788C14.525,4.982,14.2,4.859,13.877,4.859' }),\r\n                React.createElement(\"path\", { d: 'M19.524,8.464l-0.891-6.203L18.52,1.479l-0.78-0.11l-6.204-0.895L11.014,0.4l-0.373,0.373l-9.896,9.895L0,11.413l0.745,0.745l7.096,7.097L8.586,20l0.745-0.745l9.894-9.896l0.375-0.372L19.524,8.464z M8.586,18.51L1.49,11.413l9.896-9.896l6.203,0.895l0.891,6.201L8.586,18.51z' }))));\r\n    // SVG Elements for no tags\r\n    var svgElementEmpty = React.createElement(\"g\", { id: 'tag-icon-empty' },\r\n        React.createElement(\"svg\", { viewBox: '0 0 20 20', preserveAspectRatio: 'xMidYMid meet' },\r\n            React.createElement(\"g\", null,\r\n                React.createElement(\"path\", { d: 'M17.59,2.41l-6.203-0.892L1.49,11.413l7.095,7.097l9.896-9.896L17.59,2.41z M8.585,17.02L2.98,11.413l8.779-8.776l4.9,0.705l0.704,4.899L8.585,17.02z', fill: 'currentColor' }),\r\n                React.createElement(\"path\", { d: 'M12.237,4.483c-0.904,0.905-0.904,2.374,0,3.278c0.453,0.453,1.045,0.679,1.64,0.679s1.188-0.226,1.64-0.679c0.904-0.904,0.904-2.373,0-3.278C14.614,3.581,13.14,3.579,12.237,4.483z M14.772,7.017c-0.494,0.496-1.296,0.493-1.791,0c-0.492-0.492-0.492-1.295,0-1.788c0.247-0.246,0.572-0.369,0.896-0.369s0.648,0.123,0.895,0.369C15.264,5.722,15.264,6.524,14.772,7.017z', fill: 'currentColor' }))));\r\n    if (props.isInList) {\r\n        return (React.createElement(\"a\", { className: classNames('tag-menu-item-link', { ' current': props.isSelected }), title: getTitleForTag(), id: 'tag_item_' + props.tagType, onClick: onSelection },\r\n            React.createElement(\"span\", { className: 'svg-icon tag' },\r\n                React.createElement(\"svg\", { viewBox: '0 0 20 20', className: ' tag-icon ' + tagClass, id: 'tag_list_' + tagClass },\r\n                    React.createElement(\"use\", { xlinkHref: '#tag-icon' + (props.tagType === enums.TagType.Empty ? '-empty' : '') })))));\r\n    }\r\n    else {\r\n        return (React.createElement(\"a\", { className: 'tag-menu-anchor menu-button', id: (props.isFromWorklist ? ('tag_icon_' + props.id) : 'tag_icon'), title: getTitleForTag(), onClick: onClickExpandAndCollapse },\r\n            React.createElement(\"span\", { className: 'svg-icon tag' },\r\n                React.createElement(\"svg\", { viewBox: '0 0 20 20', className: ' tag-icon ' + tagClass, id: 'tag_color' },\r\n                    React.createElement(\"use\", { xlinkHref: '#tag-icon', className: 'non-empty-tag' }, svgElements),\r\n                    React.createElement(\"use\", { xlinkHref: '#tag-icon-empty', className: 'empty-tag' }, svgElementEmpty),\r\n                    React.createElement(\"use\", { xlinkHref: '#tag-highlight', className: 'highlight-tag' }, svgElementHighlight))),\r\n            React.createElement(\"span\", { className: 'sprite-icon toolexpand-icon' + (props.isFromWorklist ? '-grey' : '') })));\r\n    }\r\n};\r\nmodule.exports = tag;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 361:
/* no static exports found */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/components/utility/genericcheckbox.tsx ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/**\r\n * generic check box component.\r\n * @param props\r\n */\r\nvar genericCheckbox = function (props) {\r\n    return (React.createElement(\"div\", { className: props.containerClassName },\r\n        React.createElement(\"input\", { type: 'checkbox', id: props.id, className: props.className, checked: props.isChecked, disabled: props.disabled, onChange: function () { props.onSelectionChange(); } }),\r\n        React.createElement(\"label\", { htmlFor: props.id, className: props.labelClassName }, props.labelContent)));\r\n};\r\nmodule.exports = genericCheckbox;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9nZW5lcmljY2hlY2tib3gudHN4PzU3NTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIG9uU2VsZWN0aW9uQ2hhbmdlPzogRnVuY3Rpb247XHJcbiAgICBpc0NoZWNrZWQ/OiBib29sZWFuO1xyXG4gICAgbGFiZWxDb250ZW50Pzogc3RyaW5nO1xyXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gICAgbGFiZWxDbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgICBjb250YWluZXJDbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBnZW5lcmljIGNoZWNrIGJveCBjb21wb25lbnQuXHJcbiAqIEBwYXJhbSBwcm9wc1xyXG4gKi9cclxuY29uc3QgZ2VuZXJpY0NoZWNrYm94ID0gKHByb3BzOiBQcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17cHJvcHMuY29udGFpbmVyQ2xhc3NOYW1lfT5cclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9J2NoZWNrYm94J1xyXG4gICAgICAgICAgICAgICAgaWQ9e3Byb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtwcm9wcy5jbGFzc05hbWV9XHJcbiAgICAgICAgICAgICAgICBjaGVja2VkPXtwcm9wcy5pc0NoZWNrZWR9XHJcbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuZGlzYWJsZWR9XHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4geyBwcm9wcy5vblNlbGVjdGlvbkNoYW5nZSgpOyB9fS8+XHJcbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPXtwcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17cHJvcHMubGFiZWxDbGFzc05hbWV9Pntwcm9wcy5sYWJlbENvbnRlbnR9PC9sYWJlbD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgPSBnZW5lcmljQ2hlY2tib3g7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ2VuZXJpY2NoZWNrYm94LnRzeCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBYUE7OztBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBTUE7QUFJQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 362:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/components/utility/genericpopupwithradiobuttons.tsx ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar _this = this;\r\n/*\r\n  React component for Generic button.\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/**\r\n * React component class for Generic popup with radio buttons implementation.\r\n */\r\nvar genericPopupWithRadioButtons = function (props) {\r\n    var that = _this;\r\n    var toRender = (React.createElement(\"ul\", { id: props.id, key: 'key_ul_genericpopup', className: props.className }, props.items && props.items.map(function (item) {\r\n        return React.createElement(\"li\", { id: 'li_genericpopup_' + item.id, className: props.liClassName, key: 'key_li_genericpopup_' + item.id },\r\n            React.createElement(\"input\", { checked: item.isChecked, type: 'radio', id: item.id.toString(), onClick: function () { props.onCheckedChange(item); }, key: 'key_' + item.id, name: 'genericpopup', value: item.isChecked ? 'true' : 'false' }),\r\n            React.createElement(\"label\", { htmlFor: item.id.toString() },\r\n                React.createElement(\"span\", { className: 'radio-ui' }),\r\n                React.createElement(\"span\", { className: 'label-text' }, item.name),\r\n                React.createElement(\"span\", { className: 'label-text error' }, item.errorText)));\r\n    })));\r\n    return toRender;\r\n};\r\nmodule.exports = genericPopupWithRadioButtons;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9nZW5lcmljcG9wdXB3aXRocmFkaW9idXR0b25zLnRzeD8wMWU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gIFJlYWN0IGNvbXBvbmVudCBmb3IgR2VuZXJpYyBidXR0b24uXG4qL1xuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXG5pbXBvcnQgZ2VuZXJpY1JhZGlvQnV0dG9uSXRlbXMgPSByZXF1aXJlKCcuLi91dGlsaXR5L2dlbmVyaWNyYWRpb2J1dHRvbml0ZW1zJyk7XG5cblxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgb25DaGVja2VkQ2hhbmdlPzogRnVuY3Rpb247XG4gICAgaXRlbXM/OiBBcnJheTxnZW5lcmljUmFkaW9CdXR0b25JdGVtcz47XG4gICAgcmVuZGVyZWRPbj86IG51bWJlcjtcbiAgICBsaUNsYXNzTmFtZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZWFjdCBjb21wb25lbnQgY2xhc3MgZm9yIEdlbmVyaWMgcG9wdXAgd2l0aCByYWRpbyBidXR0b25zIGltcGxlbWVudGF0aW9uLlxuICovXG5jb25zdCBnZW5lcmljUG9wdXBXaXRoUmFkaW9CdXR0b25zOiBSZWFjdC5TdGF0ZWxlc3NDb21wb25lbnQ8UHJvcHM+ID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICBsZXQgdG9SZW5kZXIgPSAoPHVsIGlkPXtwcm9wcy5pZH0ga2V5PSdrZXlfdWxfZ2VuZXJpY3BvcHVwJyBjbGFzc05hbWU9e3Byb3BzLmNsYXNzTmFtZX0gPlxuICAgICAgICB7XG4gICAgICAgICAgICBwcm9wcy5pdGVtcyAmJiBwcm9wcy5pdGVtcy5tYXAoKGl0ZW06IGdlbmVyaWNSYWRpb0J1dHRvbkl0ZW1zKSA9PlxuICAgICAgICAgICAgICAgIDxsaSBpZD17J2xpX2dlbmVyaWNwb3B1cF8nICsgaXRlbS5pZH0gY2xhc3NOYW1lPXtwcm9wcy5saUNsYXNzTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgIGtleT17J2tleV9saV9nZW5lcmljcG9wdXBfJyArIGl0ZW0uaWR9PlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2hlY2tlZD17aXRlbS5pc0NoZWNrZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSdyYWRpbycgaWQ9e2l0ZW0uaWQudG9TdHJpbmcoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHsgcHJvcHMub25DaGVja2VkQ2hhbmdlKGl0ZW0pOyB9fVxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXsna2V5XycgKyBpdGVtLmlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0nZ2VuZXJpY3BvcHVwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2l0ZW0uaXNDaGVja2VkID8gJ3RydWUnIDogJ2ZhbHNlJ30gLz5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9e2l0ZW0uaWQudG9TdHJpbmcoKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3JhZGlvLXVpJz48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2xhYmVsLXRleHQnPntpdGVtLm5hbWV9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdsYWJlbC10ZXh0IGVycm9yJz57aXRlbS5lcnJvclRleHR9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICA8L3VsPik7XG5cbiAgICByZXR1cm4gdG9SZW5kZXI7XG59O1xuXG5leHBvcnQgPSBnZW5lcmljUG9wdXBXaXRoUmFkaW9CdXR0b25zO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ2VuZXJpY3BvcHVwd2l0aHJhZGlvYnV0dG9ucy50c3giXSwibWFwcGluZ3MiOiI7QUFJQTtBQUpBOztBQUVBO0FBQ0E7QUFDQTtBQWFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBWEE7QUFrQkE7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 363:
/* no static exports found */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/components/utility/genericradiobuttonitems.ts ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Radio Button Items\r\n */\r\nvar GenericRadioButtonItems = /** @class */ (function () {\r\n    function GenericRadioButtonItems() {\r\n    }\r\n    return GenericRadioButtonItems;\r\n}());\r\nmodule.exports = GenericRadioButtonItems;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9nZW5lcmljcmFkaW9idXR0b25pdGVtcy50cz80ZmUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBSYWRpbyBCdXR0b24gSXRlbXNcclxuICovXHJcbmNsYXNzIEdlbmVyaWNSYWRpb0J1dHRvbkl0ZW1zIHtcclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgaWQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyBpc0NoZWNrZWQ6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgc2VxdWVuY2VObzogbnVtYmVyO1xyXG4gICAgcHVibGljIGVycm9yVGV4dD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0ID0gR2VuZXJpY1JhZGlvQnV0dG9uSXRlbXM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ2VuZXJpY3JhZGlvYnV0dG9uaXRlbXMudHMiXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBQUE7QUFNQTtBQUFBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 365:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/components/utility/grid/genericcomponentwrapper.tsx ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\n/**\r\n * React component class for GenericWrapper\r\n */\r\nvar GenericComponentWrapper = /** @class */ (function (_super) {\r\n    __extends(GenericComponentWrapper, _super);\r\n    /**\r\n     * Constructor GenericComponentWrapper\r\n     * @param properties\r\n     * @param state\r\n     */\r\n    function GenericComponentWrapper(properties, state) {\r\n        return _super.call(this, properties, state) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    GenericComponentWrapper.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: this.props.divClassName }, this.props.componentList));\r\n    };\r\n    return GenericComponentWrapper;\r\n}(pureRenderComponent));\r\nmodule.exports = GenericComponentWrapper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL2dlbmVyaWNjb21wb25lbnR3cmFwcGVyLnRzeD9jYjU5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIGEgY29tcG9uZW50IEdlbmVyaWNXcmFwcGVyXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgZGl2Q2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgICBjb21wb25lbnRMaXN0OiBJbW11dGFibGUuTGlzdDxKU1guRWxlbWVudD47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWFjdCBjb21wb25lbnQgY2xhc3MgZm9yIEdlbmVyaWNXcmFwcGVyXHJcbiAqL1xyXG5jbGFzcyBHZW5lcmljQ29tcG9uZW50V3JhcHBlciBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3IgR2VuZXJpY0NvbXBvbmVudFdyYXBwZXJcclxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcGVydGllczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wZXJ0aWVzLCBzdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgY29tcG9uZW50XHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lID0ge3RoaXMucHJvcHMuZGl2Q2xhc3NOYW1lfSA+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jb21wb25lbnRMaXN0fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBHZW5lcmljQ29tcG9uZW50V3JhcHBlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL2dlbmVyaWNjb21wb25lbnR3cmFwcGVyLnRzeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBV0E7O0FBRUE7QUFDQTtBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 367:
/* no static exports found */
/* all exports used */
/*!********************************************************************************************************************!*\
  !*** ./src/components/utility/savemarksandannotations/savemarksandannotationsnonrecoverableerrordialogcontents.ts ***!
  \********************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar marksAndAnnotationsSaveHelper = __webpack_require__(/*! ../../../utility/marking/marksandannotationssavehelper */ 295);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\n/**\r\n * Class for generating Save Marks and annotations error dialog.\r\n */\r\nvar SaveMarksAndAnnotationsNonRecoverableErrorDialogContents = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     */\r\n    function SaveMarksAndAnnotationsNonRecoverableErrorDialogContents(detailedError) {\r\n        this._detailedError = false;\r\n        this._detailedError = detailedError;\r\n    }\r\n    Object.defineProperty(SaveMarksAndAnnotationsNonRecoverableErrorDialogContents.prototype, \"header\", {\r\n        /**\r\n         * returns the error dialog header.\r\n         */\r\n        get: function () {\r\n            return localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.header-error-saving-marks');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SaveMarksAndAnnotationsNonRecoverableErrorDialogContents.prototype, \"content\", {\r\n        /**\r\n         * returns the error dialog content based on the dialog type\r\n         */\r\n        get: function () {\r\n            var isDefinitive = standardisationSetupStore.instance.selectedStandardisationSetupWorkList\r\n                === enums.StandardisationSetup.UnClassifiedResponse;\r\n            if (!this._detailedError) {\r\n                return localeStore.instance.TranslateText(isDefinitive ? 'marking.response.saving-marks-error-dialog.body-error-saving-def-marks-single-response' :\r\n                    'marking.response.saving-marks-error-dialog.body-error-saving-marks-single-response');\r\n            }\r\n            else {\r\n                return localeStore.instance.TranslateText(isDefinitive ? 'marking.response.saving-marks-error-dialog.body-error-saving-def-marks-multiple-responses' :\r\n                    'marking.response.saving-marks-error-dialog.body-error-saving-marks-multiple-responses');\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SaveMarksAndAnnotationsNonRecoverableErrorDialogContents.prototype, \"tableContent\", {\r\n        /**\r\n         * This will returns the non-recoverable error items (displayIds)\r\n         */\r\n        get: function () {\r\n            return marksAndAnnotationsSaveHelper.markGroupItemsWithNonRecoverableErrors;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return SaveMarksAndAnnotationsNonRecoverableErrorDialogContents;\r\n}());\r\nmodule.exports = SaveMarksAndAnnotationsNonRecoverableErrorDialogContents;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9zYXZlbWFya3NhbmRhbm5vdGF0aW9ucy9zYXZlbWFya3NhbmRhbm5vdGF0aW9uc25vbnJlY292ZXJhYmxlZXJyb3JkaWFsb2djb250ZW50cy50cz9mMTE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtYXJrc0FuZEFubm90YXRpb25zU2F2ZUhlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvbWFya2luZy9tYXJrc2FuZGFubm90YXRpb25zc2F2ZWhlbHBlcicpO1xyXG5pbXBvcnQgc3RhbmRhcmRpc2F0aW9uU2V0dXBTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9zdGFuZGFyZGlzYXRpb25zZXR1cC9zdGFuZGFyZGlzYXRpb25zZXR1cHN0b3JlJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vZW51bXMnKTtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyBmb3IgZ2VuZXJhdGluZyBTYXZlIE1hcmtzIGFuZCBhbm5vdGF0aW9ucyBlcnJvciBkaWFsb2cuXHJcbiAqL1xyXG5jbGFzcyBTYXZlTWFya3NBbmRBbm5vdGF0aW9uc05vblJlY292ZXJhYmxlRXJyb3JEaWFsb2dDb250ZW50cyB7XHJcblxyXG4gICAgcHJpdmF0ZSBfZGV0YWlsZWRFcnJvcjogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZGV0YWlsZWRFcnJvcjogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2RldGFpbGVkRXJyb3IgPSBkZXRhaWxlZEVycm9yO1xyXG4gICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIHJldHVybnMgdGhlIGVycm9yIGRpYWxvZyBoZWFkZXIuXHJcbiAgICAqL1xyXG4gICAgcHVibGljIGdldCBoZWFkZXIoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dFxyXG4gICAgICAgICAgICAgICAgKCdtYXJraW5nLnJlc3BvbnNlLnNhdmluZy1tYXJrcy1lcnJvci1kaWFsb2cuaGVhZGVyLWVycm9yLXNhdmluZy1tYXJrcycpO1xyXG4gICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIHJldHVybnMgdGhlIGVycm9yIGRpYWxvZyBjb250ZW50IGJhc2VkIG9uIHRoZSBkaWFsb2cgdHlwZVxyXG4gICAgKi9cclxuICAgIHB1YmxpYyBnZXQgY29udGVudCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBpc0RlZmluaXRpdmU6IGJvb2xlYW4gPSBzdGFuZGFyZGlzYXRpb25TZXR1cFN0b3JlLmluc3RhbmNlLnNlbGVjdGVkU3RhbmRhcmRpc2F0aW9uU2V0dXBXb3JrTGlzdFxyXG4gICAgICAgICAgICA9PT0gZW51bXMuU3RhbmRhcmRpc2F0aW9uU2V0dXAuVW5DbGFzc2lmaWVkUmVzcG9uc2U7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9kZXRhaWxlZEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0XHJcbiAgICAgICAgICAgICAgICAoaXNEZWZpbml0aXZlID8gJ21hcmtpbmcucmVzcG9uc2Uuc2F2aW5nLW1hcmtzLWVycm9yLWRpYWxvZy5ib2R5LWVycm9yLXNhdmluZy1kZWYtbWFya3Mtc2luZ2xlLXJlc3BvbnNlJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgJ21hcmtpbmcucmVzcG9uc2Uuc2F2aW5nLW1hcmtzLWVycm9yLWRpYWxvZy5ib2R5LWVycm9yLXNhdmluZy1tYXJrcy1zaW5nbGUtcmVzcG9uc2UnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dFxyXG4gICAgICAgICAgICAgICAgKGlzRGVmaW5pdGl2ZSA/ICdtYXJraW5nLnJlc3BvbnNlLnNhdmluZy1tYXJrcy1lcnJvci1kaWFsb2cuYm9keS1lcnJvci1zYXZpbmctZGVmLW1hcmtzLW11bHRpcGxlLXJlc3BvbnNlcycgOlxyXG4gICAgICAgICAgICAgICAgICAgICdtYXJraW5nLnJlc3BvbnNlLnNhdmluZy1tYXJrcy1lcnJvci1kaWFsb2cuYm9keS1lcnJvci1zYXZpbmctbWFya3MtbXVsdGlwbGUtcmVzcG9uc2VzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIFRoaXMgd2lsbCByZXR1cm5zIHRoZSBub24tcmVjb3ZlcmFibGUgZXJyb3IgaXRlbXMgKGRpc3BsYXlJZHMpXHJcbiAgICAqL1xyXG4gICAgcHVibGljIGdldCB0YWJsZUNvbnRlbnQoKTogQXJyYXk8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIG1hcmtzQW5kQW5ub3RhdGlvbnNTYXZlSGVscGVyLm1hcmtHcm91cEl0ZW1zV2l0aE5vblJlY292ZXJhYmxlRXJyb3JzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBTYXZlTWFya3NBbmRBbm5vdGF0aW9uc05vblJlY292ZXJhYmxlRXJyb3JEaWFsb2dDb250ZW50cztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9zYXZlbWFya3NhbmRhbm5vdGF0aW9ucy9zYXZlbWFya3NhbmRhbm5vdGF0aW9uc25vbnJlY292ZXJhYmxlZXJyb3JkaWFsb2djb250ZW50cy50cyJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUdBOztBQUVBO0FBQ0E7QUFKQTtBQUtBO0FBQ0E7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUVBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 368:
/* no static exports found */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/components/worklist/shared/allpageannotationindicator.tsx ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for All pages annotation indicator\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\n/**\r\n * React component class for SLAO annotation indicator\r\n */\r\nvar AllPageAnnotationIndicator = /** @class */ (function (_super) {\r\n    __extends(AllPageAnnotationIndicator, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function AllPageAnnotationIndicator(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    /**\r\n     * returns true or false to display or hide the icon\r\n     */\r\n    AllPageAnnotationIndicator.prototype.isAllPageAnnotationIndiactorIconShow = function () {\r\n        /**\r\n         * If allpage annotated cc on, all pages are not annotated and marking is completed\r\n         * then the icon will show. in all other cases icon won't be there\r\n         */\r\n        /**\r\n         * taking the cc from cc helper\r\n         */\r\n        var _isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, this.props.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        if (_isAllPagesAnnotatedCC && this.props.isAllAnnotated === false && this.props.isMarkingCompleted) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Render component\r\n     */\r\n    AllPageAnnotationIndicator.prototype.render = function () {\r\n        var className = 'sprite-icon';\r\n        var title = '';\r\n        var isIconVisible = this.isAllPageAnnotationIndiactorIconShow();\r\n        if (isIconVisible) {\r\n            return ((this.props.isTileView) ?\r\n                (React.createElement(\"div\", { className: 'col-inner' },\r\n                    React.createElement(\"span\", { id: 'allPagesAnnotated_' + this.props.id, key: 'allPagesAnnotated_key_' + this.props.id, className: 'sprite-icon note-and-cross-icon', title: localeStore.instance.TranslateText('marking.worklist.response-data.not-all-pages-annotated-icon-tooltip') }))) :\r\n                (React.createElement(\"span\", { className: 'sprite-icon note-and-cross-icon', id: 'allPagesAnnotated_' + this.props.id, key: 'allPagesAnnotated_key_' + this.props.id, title: localeStore.instance.TranslateText('marking.worklist.response-data.not-all-pages-annotated-icon-tooltip') })));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return AllPageAnnotationIndicator;\r\n}(pureRenderComponent));\r\nmodule.exports = AllPageAnnotationIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2FsbHBhZ2Vhbm5vdGF0aW9uaW5kaWNhdG9yLnRzeD8wY2ViIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgUmVhY3QgY29tcG9uZW50IGZvciBBbGwgcGFnZXMgYW5ub3RhdGlvbiBpbmRpY2F0b3JcclxuKi9cclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljL2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljc2hlbHBlcicpO1xyXG5pbXBvcnQgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzTmFtZXMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljL2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljc25hbWVzJyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBTTEFPIGFubm90YXRpb24gaW5kaWNhdG9yXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgaXNBbGxBbm5vdGF0ZWQ/OiBib29sZWFuO1xyXG4gICAgaXNNYXJraW5nQ29tcGxldGVkOiBib29sZWFuO1xyXG4gICAgaXNUaWxlVmlldz86IGJvb2xlYW47XHJcbiAgICBtYXJrU2NoZW1lR3JvdXBJZDogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogUmVhY3QgY29tcG9uZW50IGNsYXNzIGZvciBTTEFPIGFubm90YXRpb24gaW5kaWNhdG9yXHJcbiAqL1xyXG5jbGFzcyBBbGxQYWdlQW5ub3RhdGlvbkluZGljYXRvciBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzLCBzdGF0ZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIHN0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdHJ1ZSBvciBmYWxzZSB0byBkaXNwbGF5IG9yIGhpZGUgdGhlIGljb25cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpc0FsbFBhZ2VBbm5vdGF0aW9uSW5kaWFjdG9ySWNvblNob3coKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAvKipcclxuICAgICAgICAgICAqIElmIGFsbHBhZ2UgYW5ub3RhdGVkIGNjIG9uLCBhbGwgcGFnZXMgYXJlIG5vdCBhbm5vdGF0ZWQgYW5kIG1hcmtpbmcgaXMgY29tcGxldGVkXHJcbiAgICAgICAgICAgKiB0aGVuIHRoZSBpY29uIHdpbGwgc2hvdy4gaW4gYWxsIG90aGVyIGNhc2VzIGljb24gd29uJ3QgYmUgdGhlcmVcclxuICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAvKiogXHJcbiAgICAgICAgICogdGFraW5nIHRoZSBjYyBmcm9tIGNjIGhlbHBlclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxldCBfaXNBbGxQYWdlc0Fubm90YXRlZENDID0gY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzSGVscGVyLmdldENoYXJhY3RlcmlzdGljVmFsdWUoXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzLkZvcmNlQW5ub3RhdGlvbk9uRWFjaFBhZ2UsXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMubWFya1NjaGVtZUdyb3VwSWQpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJyA/IHRydWUgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKF9pc0FsbFBhZ2VzQW5ub3RhdGVkQ0MgJiYgdGhpcy5wcm9wcy5pc0FsbEFubm90YXRlZCA9PT0gZmFsc2UgJiYgdGhpcy5wcm9wcy5pc01hcmtpbmdDb21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBjb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgY2xhc3NOYW1lID0gJ3Nwcml0ZS1pY29uJztcclxuICAgICAgICBsZXQgdGl0bGU6IHN0cmluZyA9ICcnO1xyXG4gICAgICAgIGxldCBpc0ljb25WaXNpYmxlID0gdGhpcy5pc0FsbFBhZ2VBbm5vdGF0aW9uSW5kaWFjdG9ySWNvblNob3coKTtcclxuXHJcbiAgICAgICAgaWYgKGlzSWNvblZpc2libGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICh0aGlzLnByb3BzLmlzVGlsZVZpZXcpID9cclxuICAgICAgICAgICAgICAgICAgICAoPGRpdiBjbGFzc05hbWU9J2NvbC1pbm5lcic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD17J2FsbFBhZ2VzQW5ub3RhdGVkXycgKyB0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17J2FsbFBhZ2VzQW5ub3RhdGVkX2tleV8nICsgdGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3Nwcml0ZS1pY29uIG5vdGUtYW5kLWNyb3NzLWljb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCdtYXJraW5nLndvcmtsaXN0LnJlc3BvbnNlLWRhdGEubm90LWFsbC1wYWdlcy1hbm5vdGF0ZWQtaWNvbi10b29sdGlwJyl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pIDpcclxuICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nc3ByaXRlLWljb24gbm90ZS1hbmQtY3Jvc3MtaWNvbicgaWQ9eydhbGxQYWdlc0Fubm90YXRlZF8nICsgdGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXsnYWxsUGFnZXNBbm5vdGF0ZWRfa2V5XycgKyB0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17bG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLm5vdC1hbGwtcGFnZXMtYW5ub3RhdGVkLWljb24tdG9vbHRpcCcpIH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBBbGxQYWdlQW5ub3RhdGlvbkluZGljYXRvcjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9hbGxwYWdlYW5ub3RhdGlvbmluZGljYXRvci50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVlBOztBQUVBO0FBQ0E7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUVBOztBQUVBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBT0E7QUFPQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 369:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/worklist/shared/markingprogress.tsx ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for login header\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar SubmitResponse = __webpack_require__(/*! ./submitresponse */ 372);\r\nvar localeHelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar ClassifyResponse = __webpack_require__(/*! ../../standardisationsetup/shared/classifyresponse */ 383);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\n/**\r\n * React component class for marking progress\r\n */\r\nvar MarkingProgress = /** @class */ (function (_super) {\r\n    __extends(MarkingProgress, _super);\r\n    /**\r\n     * Constructor for MarkingProgress\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function MarkingProgress(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * Open classify multi option pop with unclassified response details\r\n         */\r\n        _this.classifyMultiOptionPopUpOpen = function (esMarkGroupId) {\r\n            standardisationActionCreator.reclassifyMultiOptionPopupOpen(esMarkGroupId);\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    MarkingProgress.prototype.render = function () {\r\n        if (this.props.responseStatus !== undefined) {\r\n            if (this.props.responseStatus.contains(enums.ResponseStatus.readyToSubmit) &&\r\n                !(this.props.isTeamManagementMode ||\r\n                    worklistStore.instance.isMarkingCheckMode)) {\r\n                if (this.props.standardisationSetupTab === enums.StandardisationSetup.UnClassifiedResponse) {\r\n                    return (React.createElement(ClassifyResponse, { id: this.props.id, key: this.props.id + '_key', isDisabled: false, buttonTextResourceKey: 'standardisation-setup.right-container.classify-button', esMarkGroupId: this.props.markGroupId, onClickAction: this.classifyMultiOptionPopUpOpen }));\r\n                }\r\n                else {\r\n                    return (React.createElement(SubmitResponse, { isSubmitAll: false, selectedLanguage: this.props.selectedLanguage, id: this.props.id, key: 'key_' + this.props.id, markGroupId: this.props.markGroupId, isDisabled: this.props.isSubmitDisabled, isTileView: this.props.isTileView, standardisationSetupType: this.props.standardisationSetupTab, stdResponseDetails: this.props.stdResponseDetails }));\r\n                }\r\n            }\r\n            else if (this.props.responseStatus.contains(enums.ResponseStatus.markingNotStarted)) {\r\n                return (((!this.props.isTileView) ? null :\r\n                    React.createElement(\"div\", { className: 'col wl-status text-center', id: this.props.id + '_markingProgress' },\r\n                        React.createElement(\"div\", { className: 'col-inner' }))));\r\n            }\r\n            else if (this.props.responseStatus.contains(enums.ResponseStatus.definitiveMarkingNotStarted) ||\r\n                this.props.responseStatus.contains(enums.ResponseStatus.NoViewDefinitivesPermisssion)) {\r\n                return (React.createElement(\"span\", { className: 'dim-text txt-val small-text', id: this.props.id + '_provisional' }, localeStore.instance.TranslateText('standardisation-setup.right-container.status-provisional')));\r\n            }\r\n            else {\r\n                return (((!this.props.isTileView) ? React.createElement(\"span\", { className: classNames('inline-bubble oval', {\r\n                        'pink': (this.props.responseStatus.contains(enums.ResponseStatus.hasException) ||\r\n                            this.props.responseStatus.contains(enums.ResponseStatus.hasZoningException) ||\r\n                            this.props.responseStatus.contains(enums.ResponseStatus.markChangeReasonNotExist) ||\r\n                            this.props.responseStatus.contains(enums.ResponseStatus.supervisorRemarkDecisionNotSelected) ||\r\n                            this.props.responseStatus.contains(enums.ResponseStatus.wholeResponseNotAvailable) ||\r\n                            this.props.responseStatus.contains(enums.ResponseStatus.notAllPagesAnnotated)) &&\r\n                            !worklistStore.instance.isMarkingCheckMode ?\r\n                            false : true\r\n                    }), id: this.props.id + '_markingProgress' },\r\n                    \" \",\r\n                    markerOperationModeFactory.operationMode.showMarkingProgressWithPercentage(this.props.responseStatus.contains(enums.ResponseStatus.markingInProgress))\r\n                        ? localeHelper.toLocaleString(this.props.progress) + '%' : '')\r\n                    :\r\n                        React.createElement(\"div\", { className: 'col wl-status text-center', id: this.props.id + '_markingProgress' },\r\n                            React.createElement(\"div\", { className: 'col-inner' },\r\n                                React.createElement(\"span\", { className: classNames('inline-bubble oval', {\r\n                                        'pink': this.props.responseStatus.contains(enums.ResponseStatus.hasException) ||\r\n                                            this.props.responseStatus.contains(enums.ResponseStatus.hasZoningException) ||\r\n                                            this.props.responseStatus.contains(enums.ResponseStatus.markChangeReasonNotExist) ||\r\n                                            this.props.responseStatus.contains(enums.ResponseStatus.supervisorRemarkDecisionNotSelected) ||\r\n                                            this.props.responseStatus.contains(enums.ResponseStatus.wholeResponseNotAvailable) ||\r\n                                            this.props.responseStatus.contains(enums.ResponseStatus.notAllPagesAnnotated) ?\r\n                                            false : true\r\n                                    }) }, this.props.responseStatus.contains(enums.ResponseStatus.markingInProgress)\r\n                                    ? localeHelper.toLocaleString(this.props.progress) + '%' : '')))));\r\n            }\r\n        }\r\n        else {\r\n            return (null);\r\n        }\r\n    };\r\n    /**\r\n     * Checks if Share button text is visible\r\n     */\r\n    MarkingProgress.prototype.isShareButtonVisible = function () {\r\n        return this.props.standardisationSetupTab === enums.StandardisationSetup.ProvisionalResponse;\r\n    };\r\n    return MarkingProgress;\r\n}(PureRenderComponent));\r\nmodule.exports = MarkingProgress;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL21hcmtpbmdwcm9ncmVzcy50c3g/NTUyYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gIFJlYWN0IGNvbXBvbmVudCBmb3IgbG9naW4gaGVhZGVyXHJcbiovXHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgU3VibWl0UmVzcG9uc2UgPSByZXF1aXJlKCcuL3N1Ym1pdHJlc3BvbnNlJyk7XHJcbmltcG9ydCBsb2NhbGVIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2xvY2FsZS9sb2NhbGVoZWxwZXInKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9lbnVtcycpO1xyXG5pbXBvcnQgbWFya2VyT3BlcmF0aW9uTW9kZUZhY3RvcnkgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L21hcmtlcm9wZXJhdGlvbm1vZGUvbWFya2Vyb3BlcmF0aW9ubW9kZWZhY3RvcnknKTtcclxubGV0IGNsYXNzTmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XHJcbmltcG9ydCBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcclxuaW1wb3J0IHdvcmtsaXN0U3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvd29ya2xpc3Qvd29ya2xpc3RzdG9yZScpO1xyXG5pbXBvcnQgQ2xhc3NpZnlSZXNwb25zZSA9IHJlcXVpcmUoJy4uLy4uL3N0YW5kYXJkaXNhdGlvbnNldHVwL3NoYXJlZC9jbGFzc2lmeXJlc3BvbnNlJyk7XHJcbmltcG9ydCBzdGFuZGFyZGlzYXRpb25BY3Rpb25DcmVhdG9yID0gcmVxdWlyZSgnLi4vLi4vLi4vYWN0aW9ucy9zdGFuZGFyZGlzYXRpb25zZXR1cC9zdGFuZGFyZGlzYXRpb25hY3Rpb25jcmVhdG9yJyk7XHJcblxyXG5cclxuLyoqXHJcbiAqIFByb3BlcnRpZXMgb2YgbWFya2luZyBwcm9ncmVzc1xyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIHJlc3BvbnNlU3RhdHVzOiBJbW11dGFibGUuTGlzdDxlbnVtcy5SZXNwb25zZVN0YXR1cz47XHJcbiAgICBwcm9ncmVzczogbnVtYmVyO1xyXG4gICAgbWFya0dyb3VwSWQ6IG51bWJlcjtcclxuICAgIGlzU3VibWl0RGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBpc1RpbGVWaWV3OiBib29sZWFuO1xyXG5cdGlzVGVhbU1hbmFnZW1lbnRNb2RlOiBib29sZWFuO1xyXG4gICAgc3RhbmRhcmRpc2F0aW9uU2V0dXBUYWI/OiBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cDtcclxuICAgIHN0ZFJlc3BvbnNlRGV0YWlscz86IFN0YW5kYXJkaXNhdGlvblJlc3BvbnNlRGV0YWlscztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlYWN0IGNvbXBvbmVudCBjbGFzcyBmb3IgbWFya2luZyBwcm9ncmVzc1xyXG4gKi9cclxuY2xhc3MgTWFya2luZ1Byb2dyZXNzIGV4dGVuZHMgUHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgTWFya2luZ1Byb2dyZXNzXHJcbiAgICAgKiBAcGFyYW0gcHJvcHNcclxuICAgICAqIEBwYXJhbSBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIGNvbXBvbmVudFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5yZXNwb25zZVN0YXR1cyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnJlc3BvbnNlU3RhdHVzLmNvbnRhaW5zKGVudW1zLlJlc3BvbnNlU3RhdHVzLnJlYWR5VG9TdWJtaXQpICYmXHJcbiAgICAgICAgICAgICAgICAhKHRoaXMucHJvcHMuaXNUZWFtTWFuYWdlbWVudE1vZGUgfHxcclxuXHRcdFx0XHRcdHdvcmtsaXN0U3RvcmUuaW5zdGFuY2UuaXNNYXJraW5nQ2hlY2tNb2RlKSkge1xyXG5cdFx0XHRcdGlmICh0aGlzLnByb3BzLnN0YW5kYXJkaXNhdGlvblNldHVwVGFiID09PSBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cC5VbkNsYXNzaWZpZWRSZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuICg8Q2xhc3NpZnlSZXNwb25zZVxyXG5cdFx0XHRcdFx0XHRpZD17dGhpcy5wcm9wcy5pZH1cclxuXHRcdFx0XHRcdFx0a2V5PXt0aGlzLnByb3BzLmlkICsgJ19rZXknfVxyXG5cdFx0XHRcdFx0XHRpc0Rpc2FibGVkPXtmYWxzZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uVGV4dFJlc291cmNlS2V5PXsnc3RhbmRhcmRpc2F0aW9uLXNldHVwLnJpZ2h0LWNvbnRhaW5lci5jbGFzc2lmeS1idXR0b24nfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlc01hcmtHcm91cElkPXt0aGlzLnByb3BzLm1hcmtHcm91cElkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrQWN0aW9uPXt0aGlzLmNsYXNzaWZ5TXVsdGlPcHRpb25Qb3BVcE9wZW59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+KTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0cmV0dXJuIChcclxuXHRcdFx0XHRcdFx0PFN1Ym1pdFJlc3BvbnNlIGlzU3VibWl0QWxsPXtmYWxzZX1cclxuXHRcdFx0XHRcdFx0XHRzZWxlY3RlZExhbmd1YWdlPXt0aGlzLnByb3BzLnNlbGVjdGVkTGFuZ3VhZ2V9XHJcblx0XHRcdFx0XHRcdFx0aWQ9e3RoaXMucHJvcHMuaWR9XHJcblx0XHRcdFx0XHRcdFx0a2V5PXsna2V5XycgKyB0aGlzLnByb3BzLmlkfVxyXG5cdFx0XHRcdFx0XHRcdG1hcmtHcm91cElkPXt0aGlzLnByb3BzLm1hcmtHcm91cElkfVxyXG5cdFx0XHRcdFx0XHRcdGlzRGlzYWJsZWQ9e3RoaXMucHJvcHMuaXNTdWJtaXREaXNhYmxlZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVGlsZVZpZXc9e3RoaXMucHJvcHMuaXNUaWxlVmlld31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YW5kYXJkaXNhdGlvblNldHVwVHlwZT17dGhpcy5wcm9wcy5zdGFuZGFyZGlzYXRpb25TZXR1cFRhYn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZFJlc3BvbnNlRGV0YWlscz17dGhpcy5wcm9wcy5zdGRSZXNwb25zZURldGFpbHN9XHJcblx0XHRcdFx0XHRcdC8+XHJcblx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnJlc3BvbnNlU3RhdHVzLmNvbnRhaW5zKGVudW1zLlJlc3BvbnNlU3RhdHVzLm1hcmtpbmdOb3RTdGFydGVkKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICAgICAoKCF0aGlzLnByb3BzLmlzVGlsZVZpZXcpID8gbnVsbCA6XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbCB3bC1zdGF0dXMgdGV4dC1jZW50ZXInIGlkPXt0aGlzLnByb3BzLmlkICsgJ19tYXJraW5nUHJvZ3Jlc3MnfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1pbm5lcic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pXHJcbiAgICAgICAgICAgICAgICApO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMucHJvcHMucmVzcG9uc2VTdGF0dXMuY29udGFpbnMoZW51bXMuUmVzcG9uc2VTdGF0dXMuZGVmaW5pdGl2ZU1hcmtpbmdOb3RTdGFydGVkKSB8fFxyXG5cdFx0XHRcdHRoaXMucHJvcHMucmVzcG9uc2VTdGF0dXMuY29udGFpbnMoZW51bXMuUmVzcG9uc2VTdGF0dXMuTm9WaWV3RGVmaW5pdGl2ZXNQZXJtaXNzc2lvbikpe1xyXG5cdFx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9J2RpbS10ZXh0IHR4dC12YWwgc21hbGwtdGV4dCcgaWQ9e3RoaXMucHJvcHMuaWQgKyAnX3Byb3Zpc2lvbmFsJ30+XHJcblx0XHRcdFx0XHRcdHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdzdGFuZGFyZGlzYXRpb24tc2V0dXAucmlnaHQtY29udGFpbmVyLnN0YXR1cy1wcm92aXNpb25hbCcpfVxyXG5cdFx0XHRcdFx0PC9zcGFuPlxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKCghdGhpcy5wcm9wcy5pc1RpbGVWaWV3KSA/IDxzcGFuIGNsYXNzTmFtZSA9IHtjbGFzc05hbWVzKCdpbmxpbmUtYnViYmxlIG92YWwnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdwaW5rJzogKHRoaXMucHJvcHMucmVzcG9uc2VTdGF0dXMuY29udGFpbnMoZW51bXMuUmVzcG9uc2VTdGF0dXMuaGFzRXhjZXB0aW9uKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5yZXNwb25zZVN0YXR1cy5jb250YWlucyhlbnVtcy5SZXNwb25zZVN0YXR1cy5oYXNab25pbmdFeGNlcHRpb24pIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnJlc3BvbnNlU3RhdHVzLmNvbnRhaW5zKGVudW1zLlJlc3BvbnNlU3RhdHVzLm1hcmtDaGFuZ2VSZWFzb25Ob3RFeGlzdCkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucmVzcG9uc2VTdGF0dXMuY29udGFpbnMoZW51bXMuUmVzcG9uc2VTdGF0dXMuc3VwZXJ2aXNvclJlbWFya0RlY2lzaW9uTm90U2VsZWN0ZWQpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnJlc3BvbnNlU3RhdHVzLmNvbnRhaW5zKGVudW1zLlJlc3BvbnNlU3RhdHVzLndob2xlUmVzcG9uc2VOb3RBdmFpbGFibGUpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnJlc3BvbnNlU3RhdHVzLmNvbnRhaW5zKGVudW1zLlJlc3BvbnNlU3RhdHVzLm5vdEFsbFBhZ2VzQW5ub3RhdGVkKSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICF3b3JrbGlzdFN0b3JlLmluc3RhbmNlLmlzTWFya2luZ0NoZWNrTW9kZSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSA6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gaWQ9e3RoaXMucHJvcHMuaWQgKyAnX21hcmtpbmdQcm9ncmVzcyd9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJPcGVyYXRpb25Nb2RlRmFjdG9yeS5vcGVyYXRpb25Nb2RlLnNob3dNYXJraW5nUHJvZ3Jlc3NXaXRoUGVyY2VudGFnZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnJlc3BvbnNlU3RhdHVzLmNvbnRhaW5zKGVudW1zLlJlc3BvbnNlU3RhdHVzLm1hcmtpbmdJblByb2dyZXNzKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBsb2NhbGVIZWxwZXIudG9Mb2NhbGVTdHJpbmcodGhpcy5wcm9wcy5wcm9ncmVzcykgKyAnJScgOiAnJ308L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sIHdsLXN0YXR1cyB0ZXh0LWNlbnRlcicgaWQ9e3RoaXMucHJvcHMuaWQgKyAnX21hcmtpbmdQcm9ncmVzcyd9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLWlubmVyJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWVzKCdpbmxpbmUtYnViYmxlIG92YWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGluayc6IHRoaXMucHJvcHMucmVzcG9uc2VTdGF0dXMuY29udGFpbnMoZW51bXMuUmVzcG9uc2VTdGF0dXMuaGFzRXhjZXB0aW9uKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucmVzcG9uc2VTdGF0dXMuY29udGFpbnMoZW51bXMuUmVzcG9uc2VTdGF0dXMuaGFzWm9uaW5nRXhjZXB0aW9uKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucmVzcG9uc2VTdGF0dXMuY29udGFpbnMoZW51bXMuUmVzcG9uc2VTdGF0dXMubWFya0NoYW5nZVJlYXNvbk5vdEV4aXN0KSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucmVzcG9uc2VTdGF0dXMuY29udGFpbnMoZW51bXMuUmVzcG9uc2VTdGF0dXMuc3VwZXJ2aXNvclJlbWFya0RlY2lzaW9uTm90U2VsZWN0ZWQpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5yZXNwb25zZVN0YXR1cy5jb250YWlucyhlbnVtcy5SZXNwb25zZVN0YXR1cy53aG9sZVJlc3BvbnNlTm90QXZhaWxhYmxlKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucmVzcG9uc2VTdGF0dXMuY29udGFpbnMoZW51bXMuUmVzcG9uc2VTdGF0dXMubm90QWxsUGFnZXNBbm5vdGF0ZWQpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSA6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLnJlc3BvbnNlU3RhdHVzLmNvbnRhaW5zKGVudW1zLlJlc3BvbnNlU3RhdHVzLm1hcmtpbmdJblByb2dyZXNzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGxvY2FsZUhlbHBlci50b0xvY2FsZVN0cmluZyh0aGlzLnByb3BzLnByb2dyZXNzKSArICclJyA6ICcnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIChudWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaWYgU2hhcmUgYnV0dG9uIHRleHQgaXMgdmlzaWJsZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGlzU2hhcmVCdXR0b25WaXNpYmxlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLnN0YW5kYXJkaXNhdGlvblNldHVwVGFiID09PSBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cC5Qcm92aXNpb25hbFJlc3BvbnNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3BlbiBjbGFzc2lmeSBtdWx0aSBvcHRpb24gcG9wIHdpdGggdW5jbGFzc2lmaWVkIHJlc3BvbnNlIGRldGFpbHNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjbGFzc2lmeU11bHRpT3B0aW9uUG9wVXBPcGVuID0gKGVzTWFya0dyb3VwSWQ6IG51bWJlcikgPT4ge1xyXG5cdCAgICBzdGFuZGFyZGlzYXRpb25BY3Rpb25DcmVhdG9yLnJlY2xhc3NpZnlNdWx0aU9wdGlvblBvcHVwT3Blbihlc01hcmtHcm91cElkKTtcclxuICAgIH1cclxuXHJcbn1cclxuZXhwb3J0ID0gTWFya2luZ1Byb2dyZXNzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9zaGFyZWQvbWFya2luZ3Byb2dyZXNzLnRzeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBaUJBOztBQUVBO0FBQ0E7QUFBQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUFBO0FBc0dBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQXpHQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFBQTtBQUNBO0FBWUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBSUE7QUFBQTtBQUNBO0FBQ0E7QUFLQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBTUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFTQTtBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 370:
/* no static exports found */
/* all exports used */
/*!******************************************************************!*\
  !*** ./src/components/worklist/shared/responseidgridelement.tsx ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar stringHelper = __webpack_require__(/*! ../../../utility/generic/stringhelper */ 254);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar markSchemeHelper = __webpack_require__(/*! ../../../utility/markscheme/markschemehelper */ 276);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar messageStore = __webpack_require__(/*! ../../../stores/message/messagestore */ 240);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../../actions/messaging/messagingactioncreator */ 268);\r\nvar responseHelper = __webpack_require__(/*! ../../utility/responsehelper/responsehelper */ 249);\r\nvar teamManagementStore = __webpack_require__(/*! ../../../stores/teammanagement/teammanagementstore */ 245);\r\nvar teamManagementActionCreator = __webpack_require__(/*! ../../../actions/teammanagement/teammanagementactioncreator */ 263);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../utility/ecoursework/ecourseworkhelper */ 238);\r\nvar applicationStore = __webpack_require__(/*! ../../../stores/applicationoffline/applicationstore */ 247);\r\nvar applicationActionCreator = __webpack_require__(/*! ../../../actions/applicationoffline/applicationactioncreator */ 256);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\n/**\r\n * React component class for response id\r\n */\r\nvar ResponseIdGridElement = /** @class */ (function (_super) {\r\n    __extends(ResponseIdGridElement, _super);\r\n    /**\r\n     * Constructor for ResponseIdGridElement\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function ResponseIdGridElement(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.classNameText = '';\r\n        /**\r\n         * This will initiate open response action\r\n         */\r\n        _this.handleResponseClick = function () {\r\n            //TO DO Remove this on enabling response click.\r\n            if (!_this.props.isClickable) {\r\n                return;\r\n            }\r\n            if (!applicationStore.instance.isOnline) {\r\n                applicationActionCreator.checkActionInterrupted();\r\n            }\r\n            else {\r\n                // Ideally marking mode should be read from the opened response,\r\n                // since multiple marking modes won't come in the same worklist now this will work.\r\n                _this.selectedMarkingMode = worklistStore.instance.getMarkingModeByWorkListType(worklistStore.instance.currentWorklistType);\r\n                _this.actualDisplayId = _this.props.displayId.toString();\r\n                if (!messageStore.instance.isMessagePanelActive) {\r\n                    if (markerOperationModeFactory.operationMode.isHelpExaminersView) {\r\n                        var dataCollection = new Array();\r\n                        var examinerSEPAction = {\r\n                            examinerRoleId: qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId,\r\n                            markSchemeGroupId: qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId,\r\n                            requestedByExaminerRoleId: qigStore.instance.getSelectedQIGForTheLoggedInUser.examinerRoleId\r\n                        };\r\n                        dataCollection.push(examinerSEPAction);\r\n                        var examinerSEPActions = Immutable.List(dataCollection);\r\n                        var doSEPApprovalManagementActionArgument = {\r\n                            actionIdentifier: enums.SEPAction.ViewResponse,\r\n                            examiners: examinerSEPActions\r\n                        };\r\n                        teamManagementActionCreator.ExecuteApprovalManagementAction(doSEPApprovalManagementActionArgument);\r\n                    }\r\n                    else if (worklistStore.instance.isMarkingCheckMode) {\r\n                        teamManagementActionCreator.teamManagementExaminerValidation(qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, 0, worklistStore.instance.selectedMarkingCheckExaminer.fromExaminerID, enums.ExaminerValidationArea.MarkCheckWorklist, false, _this.actualDisplayId, _this.selectedMarkingMode);\r\n                    }\r\n                    else {\r\n                        _this.openResponse(_this.actualDisplayId, _this.selectedMarkingMode);\r\n                    }\r\n                }\r\n                else {\r\n                    var messageNavigationArguments = {\r\n                        responseId: parseInt(_this.actualDisplayId),\r\n                        canNavigate: false,\r\n                        navigateTo: enums.MessageNavigation.toResponse,\r\n                        navigationConfirmed: false,\r\n                        hasMessageContainsDirtyValue: undefined,\r\n                        triggerPoint: enums.TriggerPoint.None\r\n                    };\r\n                    messagingActionCreator.canMessageNavigate(messageNavigationArguments);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * This will initiate the SEP action while opening a response\r\n         */\r\n        _this.onApprovalManagementActionExecuted = function (actionIdentifier) {\r\n            if (actionIdentifier === enums.SEPAction.ViewResponse) {\r\n                if (_this.actualDisplayId && _this.selectedMarkingMode) {\r\n                    _this.openResponse(_this.actualDisplayId, _this.selectedMarkingMode);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Method to open response if the loggined examiner is valid.\r\n         */\r\n        _this.validateExaminerStatus = function (displayId, markingMode) {\r\n            if (displayId && markingMode !== enums.MarkingMode.None) {\r\n                _this.openResponse(displayId, markingMode);\r\n            }\r\n        };\r\n        _this.handleResponseClick = _this.handleResponseClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    ResponseIdGridElement.prototype.render = function () {\r\n        var title = (this.props.isReusableResponseView) ?\r\n            stringHelper.format(localeStore.instance.\r\n                TranslateText('standardisation-setup.standardisation-setup-worklist.response-data.script-id-tooltip'), [String(this.props.candidateScriptId)])\r\n            : stringHelper.format(localeStore.instance.TranslateText('marking.worklist.response-data.response-id-tooltip'), [(this.props.displayText) ? String(this.props.displayText) : String(this.props.displayId)]);\r\n        (this.props.isTileView) ? this.classNameText = 'resp-id response-display-id' :\r\n            this.classNameText = 'response-display-id resp-id';\r\n        return (React.createElement(\"div\", { className: this.classNameText },\r\n            React.createElement(\"a\", { href: 'javascript:void(0)', id: 'res_' + this.props.id, key: 'res_key_' + this.props.id, title: title, className: (this.props.isTileView) ? 'dark-link large-text' : '', onClick: this.handleResponseClick }, (this.props.isReusableResponseView) ? String(this.props.candidateScriptId)\r\n                : (this.props.displayText) ? String(this.props.displayText) : String(this.props.displayId))));\r\n    };\r\n    /**\r\n     * Componet did mount\r\n     */\r\n    ResponseIdGridElement.prototype.componentDidMount = function () {\r\n        teamManagementStore.instance.setMaxListeners(0);\r\n        if (markerOperationModeFactory.operationMode.isHelpExaminersView) {\r\n            teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.APPROVAL_MANAGEMENT_ACTION_EXECUTED, this.onApprovalManagementActionExecuted);\r\n        }\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.EXAMINER_VALIDATED_OPEN_RESPONSE_EVENT, this.validateExaminerStatus);\r\n    };\r\n    /**\r\n     * Component will unmount\r\n     */\r\n    ResponseIdGridElement.prototype.componentWillUnmount = function () {\r\n        if (markerOperationModeFactory.operationMode.isHelpExaminersView) {\r\n            teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.APPROVAL_MANAGEMENT_ACTION_EXECUTED, this.onApprovalManagementActionExecuted);\r\n        }\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.EXAMINER_VALIDATED_OPEN_RESPONSE_EVENT, this.validateExaminerStatus);\r\n    };\r\n    /**\r\n     * This will open the response\r\n     * @param actualDisplayId contains the actual display id\r\n     * @param selectedMarkingMode contains the selected marking mode\r\n     */\r\n    ResponseIdGridElement.prototype.openResponse = function (actualDisplayId, selectedMarkingMode) {\r\n        var openedResponseDetails = markerOperationModeFactory.operationMode.openedResponseDetails(actualDisplayId);\r\n        responseHelper.openResponse(parseInt(actualDisplayId), enums.ResponseNavigation.specific, markerOperationModeFactory.operationMode.isStandardisationSetupMode ?\r\n            (standardisationSetupStore.instance.selectedStandardisationSetupWorkList === enums.StandardisationSetup.SelectResponse &&\r\n                standardisationSetupStore.instance.selectedTabInSelectResponse === enums.StandardisationSessionTab.PreviousSession) ?\r\n                enums.ResponseMode.closed : enums.ResponseMode.open :\r\n            worklistStore.instance.getResponseMode, markerOperationModeFactory.operationMode.isStandardisationSetupMode ?\r\n            openedResponseDetails.esMarkGroupId : openedResponseDetails.markGroupId, enums.ResponseViewMode.zoneView, enums.TriggerPoint.None, openedResponseDetails.sampleReviewCommentId, openedResponseDetails.sampleReviewCommentCreatedBy);\r\n        markSchemeHelper.getMarks(parseInt(actualDisplayId), selectedMarkingMode, false, true);\r\n        eCourseworkHelper.fetchECourseWorkCandidateScriptMetadata(parseInt(actualDisplayId));\r\n    };\r\n    return ResponseIdGridElement;\r\n}(pureRenderComponent));\r\nmodule.exports = ResponseIdGridElement;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 371:
/* no static exports found */
/* all exports used */
/*!********************************************************************!*\
  !*** ./src/components/worklist/shared/slaoannotationindicator.tsx ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for SLAO annotation indicator\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\n/**\r\n * React component class for SLAO annotation indicator\r\n */\r\nvar SLAOAnnotationIndicator = /** @class */ (function (_super) {\r\n    __extends(SLAOAnnotationIndicator, _super);\r\n    /**\r\n     * Constructor fot SLAOAnnotationIndicator\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function SLAOAnnotationIndicator(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    /**\r\n     * returns the below values which define the type of SLAO indicator icon displayed\r\n     *       true        - icon without cross\r\n     *       false       - icon with cross\r\n     *       undefined   - no icon\r\n     */\r\n    SLAOAnnotationIndicator.prototype.getIconType = function () {\r\n        /**\r\n         * taking the cc from cc helper\r\n         */\r\n        var _isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, this.props.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        var _isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, this.props.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        /**\r\n         * If the response has no SLAO's ther will not be an icon in the column, so returning undefined\r\n         */\r\n        if (!this.props.isResponseHasSLAO) {\r\n            return undefined;\r\n        }\r\n        else if (!this.props.isMarkingCompleted && !this.props.isTileView) {\r\n            /**\r\n             * If the response has SLAO and marking is ot completed the icon without cross will display\r\n             * on the grid column(returning true)\r\n             */\r\n            return true;\r\n        }\r\n        else if (!_isAllPagesAnnotatedCC && _isAllSLAOAnnotatedCC && this.props.isAllAnnotated === false\r\n            && this.props.isMarkingCompleted) {\r\n            /**\r\n             * If the marking is completed an icon with cross mark will display if the All SLALO CC is on\r\n             * and all SLAO's are not annotated\r\n             */\r\n            return false;\r\n        }\r\n        else if (!this.props.isTileView && this.props.isMarkingCompleted && this.props.isAllAnnotated === true) {\r\n            /**\r\n             * If the marking is completed , all slo annotated  and listview\r\n             * show sprite-icon bundle-icon\r\n             */\r\n            return true;\r\n        }\r\n        else if (!this.props.isTileView) {\r\n            /**\r\n             * show 'sprite-icon bundle-icon' in listview in all other cases otherthan mentioned above.\r\n             * will not show, if the response has no SLAO's.\r\n             */\r\n            return true;\r\n        }\r\n        /**\r\n         * no need to display 'sprite-icon bundle-icon' in tileview .\r\n         */\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Render component\r\n     */\r\n    SLAOAnnotationIndicator.prototype.render = function () {\r\n        var className = 'sprite-icon';\r\n        var title = '';\r\n        var id = '';\r\n        var iconType = this.getIconType();\r\n        /**\r\n         * choosing the class name and title based on the icon type returned from the getIconType() method\r\n         */\r\n        if (iconType === undefined) {\r\n            return null;\r\n        }\r\n        else if (iconType === true) {\r\n            className = 'sprite-icon bundle-icon';\r\n            title = localeStore.instance.TranslateText('marking.worklist.response-data.additional-objects-icon-tooltip');\r\n        }\r\n        else if (iconType === false) {\r\n            className = 'sprite-icon bundle-icon-cross';\r\n            id = 'sprite-icon bundle-icon-cross-id';\r\n            title = localeStore.instance.TranslateText('marking.worklist.response-data.additional-objects-not-annotated-icon-tooltip');\r\n        }\r\n        return ((this.props.isTileView) ?\r\n            React.createElement(\"div\", { className: 'slao' },\r\n                React.createElement(\"a\", { id: 'slaoAnnotation_' + this.props.id, key: 'slaoAnnotation_key_' + this.props.id, href: 'javascript:void(0)', title: title },\r\n                    React.createElement(\"span\", { className: className, id: id }, \"slao\")))\r\n            : React.createElement(\"span\", { className: 'Response has additional answer pages' },\r\n                React.createElement(\"a\", { id: 'slaoAnnotation_' + this.props.id, key: 'slaoAnnotation_key_' + this.props.id, href: 'javascript:void(0)', title: title },\r\n                    React.createElement(\"span\", { className: className }, \"slao\"))));\r\n    };\r\n    return SLAOAnnotationIndicator;\r\n}(pureRenderComponent));\r\nmodule.exports = SLAOAnnotationIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 372:
/* no static exports found */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/components/worklist/shared/submitresponse.tsx ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for Submit response header\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar submitActionCreator = __webpack_require__(/*! ../../../actions/submit/submitactioncreator */ 297);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar busyIndicatorActionCreator = __webpack_require__(/*! ../../../actions/busyindicator/busyindicatoractioncreator */ 279);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar markingStore = __webpack_require__(/*! ../../../stores/marking/markingstore */ 236);\r\nvar markingActionCreator = __webpack_require__(/*! ../../../actions/marking/markingactioncreator */ 246);\r\nvar submitHelper = __webpack_require__(/*! ../../utility/submit/submithelper */ 282);\r\nvar markingHelper = __webpack_require__(/*! ../../../utility/markscheme/markinghelper */ 267);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar combinedWarningPopupHelper = __webpack_require__(/*! ../../utility/popup/responseerrordialoghelper */ 438);\r\nvar eCourseWorkFileStore = __webpack_require__(/*! ../../../stores/response/digital/ecourseworkfilestore */ 278);\r\nvar applicationActionCreator = __webpack_require__(/*! ../../../actions/applicationoffline/applicationactioncreator */ 256);\r\nvar standardisationsetupActionCreator = __webpack_require__(/*! ../../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\n/**\r\n * React component class for submit button\r\n */\r\nvar SubmitResponse = /** @class */ (function (_super) {\r\n    __extends(SubmitResponse, _super);\r\n    /**\r\n     * Constructor for SubmitResponse\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function SubmitResponse(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * Change visibility of mark change reason\r\n         */\r\n        _this.showHideMarkChangeReason = function () {\r\n            if (_this.props.checkIsSubmitVisible()) {\r\n                _this.isVisible = true;\r\n            }\r\n            else {\r\n                _this.isVisible = false;\r\n            }\r\n            _this.setState({ reRender: Date.now() });\r\n        };\r\n        /**\r\n         * File read status updated event.\r\n         */\r\n        _this.fileReadStatusUpdated = function () {\r\n            _this.isVisible = _this.props.checkIsSubmitVisible();\r\n            _this.setState({ reRender: Date.now() });\r\n        };\r\n        _this.submitResponseFromMarkscheme = function () {\r\n            if (markingStore.instance.navigateTo === enums.SaveAndNavigate.submit) {\r\n                busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.submitInResponseScreen);\r\n                submitHelper.saveAndSubmitResponse(_this.props.markGroupId);\r\n            }\r\n        };\r\n        _this.state = {\r\n            reRender: Date.now()\r\n        };\r\n        _this.onSubmit = _this.onSubmit.bind(_this);\r\n        _this.showHideMarkChangeReason = _this.showHideMarkChangeReason.bind(_this);\r\n        _this.isVisible = _this.props.isVisible;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    SubmitResponse.prototype.render = function () {\r\n        /**\r\n         * show multiple/single response submit button\r\n         */\r\n        if (this.props.isSubmitAll) {\r\n            return (React.createElement(\"button\", { id: 'submitResponseAll_' + this.props.id, key: 'submitResponseAll_key_' + this.props.id, title: !this.props.isDisabled ? '' :\r\n                    localeStore.instance.TranslateText('marking.worklist.action-buttons.submit-button-not-approved-tooltip'), disabled: this.props.isDisabled ? true : false, className: classNames('button primary rounded', {\r\n                    'disabled submit-all-rsp-btn': this.props.isDisabled\r\n                }), onClick: this.onSubmit },\r\n                localeStore.instance.TranslateText('marking.worklist.action-buttons.submit-button'),\r\n                this.renderSubTextItem()));\r\n        }\r\n        else if (this.props.fromMarkScheme) {\r\n            if (this.isVisible) {\r\n                return (React.createElement(\"div\", { className: 'submit-holder show' }, this.getSubmitButton()));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return (((!this.props.isTileView) ?\r\n                this.getSubmitButton() :\r\n                React.createElement(\"div\", { className: 'col wl-status text-center' },\r\n                    React.createElement(\"div\", { className: 'col-inner' }, this.getSubmitButton()))));\r\n        }\r\n    };\r\n    /**\r\n     * To get the submit button\r\n     */\r\n    SubmitResponse.prototype.getSubmitButton = function () {\r\n        var isfromStandardisationProvResponse = this.props.standardisationSetupType === enums.StandardisationSetup.ProvisionalResponse;\r\n        var className = isfromStandardisationProvResponse ? 'primary button rounded popup-nav shareProv'\r\n            : 'button primary rounded submit-button';\r\n        var id = isfromStandardisationProvResponse ? 'shareProvResponse_'\r\n            : 'submitSingleResponse_';\r\n        var toolTip = isfromStandardisationProvResponse ?\r\n            localeStore.instance.TranslateText('standardisation-setup.right-container.share-button-tooltip') : '';\r\n        if (this.props.fromMarkScheme) {\r\n            className = ' submit-mark rounded primary';\r\n        }\r\n        else if (this.props.isDisabled) {\r\n            className = className + ' disabled';\r\n        }\r\n        var result = React.createElement(\"button\", null);\r\n        result = React.createElement(\"button\", { id: id + this.props.id, key: 'submitSingleResponse_key_' + this.props.id, disabled: this.props.isDisabled ? true : false, title: !this.props.isDisabled ? toolTip :\r\n                localeStore.instance.TranslateText('marking.worklist.action-buttons.submit-button-not-approved-tooltip'), className: className, onClick: this.onSubmit }, \r\n        // For provisional worklist in standardisationsetup, instead of submit we should show share button\r\n        isfromStandardisationProvResponse ?\r\n            localeStore.instance.TranslateText('standardisation-setup.right-container.share-button') :\r\n            localeStore.instance.TranslateText('marking.worklist.response-data.submit-button'));\r\n        return result;\r\n    };\r\n    /**\r\n     * componentDidMount\r\n     */\r\n    SubmitResponse.prototype.componentDidMount = function () {\r\n        markingStore.instance.addListener(markingStore.MarkingStore.READY_TO_NAVIGATE, this.submitResponseFromMarkscheme);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.MARK_CHANGE_REASON_VISIBILITY_UPDATED, this.showHideMarkChangeReason);\r\n        eCourseWorkFileStore.instance.addListener(eCourseWorkFileStore.ECourseWorkFileStore.FILE_READ_STATUS_UPDATED, this.fileReadStatusUpdated);\r\n    };\r\n    /**\r\n     * componentWillUnmount\r\n     */\r\n    SubmitResponse.prototype.componentWillUnmount = function () {\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.READY_TO_NAVIGATE, this.submitResponseFromMarkscheme);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.MARK_CHANGE_REASON_VISIBILITY_UPDATED, this.showHideMarkChangeReason);\r\n        eCourseWorkFileStore.instance.removeListener(eCourseWorkFileStore.ECourseWorkFileStore.FILE_READ_STATUS_UPDATED, this.fileReadStatusUpdated);\r\n    };\r\n    /**\r\n     * Comparing the props to check the updats are made by self\r\n     * @param {Props} nextProps\r\n     */\r\n    SubmitResponse.prototype.componentWillReceiveProps = function (nextProps) {\r\n        this.isVisible = nextProps.isVisible;\r\n    };\r\n    /**\r\n     * Method to indicate whether to show the sub text for the case where Submit button is disabled;\r\n     * since the subtext needs to be shown only in disabled state\r\n     */\r\n    SubmitResponse.prototype.renderSubTextItem = function () {\r\n        if (this.props.isDisabled) {\r\n            return (React.createElement(\"span\", { className: classNames('', {\r\n                    'awaiting-feedback-msg text-middle small-text': this.props.isDisabled\r\n                }) }, localeStore.instance.TranslateText('marking.worklist.action-buttons.submit-button-suspended-indicator')));\r\n        }\r\n    };\r\n    /**\r\n     * On clicking submit\r\n     */\r\n    SubmitResponse.prototype.onSubmit = function (e) {\r\n        //on submitting simulation response, show a confirmation popup before submit\r\n        if (!applicationActionCreator.checkActionInterrupted()) {\r\n            return;\r\n        }\r\n        if (this.props.standardisationSetupType === enums.StandardisationSetup.ProvisionalResponse) {\r\n            //ActionCreator for showing Share Response Popup\r\n            var navigatePossible = true;\r\n            if (this.props.fromMarkScheme) {\r\n                this.props.stdResponseDetails.totalMarkValue = Number(this.props.updatedTotalMarks);\r\n                var responseNavigationFailureReasons = markingHelper.canNavigateAwayFromCurrentResponse();\r\n                if (responseNavigationFailureReasons.length > 0) {\r\n                    navigatePossible = false;\r\n                    var combinedWarningMessages = combinedWarningPopupHelper.getCombinedWarningMessage(enums.SaveAndNavigate.submit, responseNavigationFailureReasons);\r\n                    markingActionCreator.showResponseNavigationFailureReasons(enums.SaveAndNavigate.submit, combinedWarningMessages);\r\n                }\r\n            }\r\n            if (navigatePossible) {\r\n                standardisationsetupActionCreator.displayShareResponsePopup(this.props.stdResponseDetails, this.props.fromMarkScheme);\r\n                return;\r\n            }\r\n        }\r\n        if (worklistStore.instance.currentWorklistType === enums.WorklistType.simulation) {\r\n            markingActionCreator.showSimulationResponseSubmitConfirmationPopup(this.props.markGroupId, this.props.fromMarkScheme);\r\n            if (!this.props.fromMarkScheme) {\r\n                /* stopping propagation because the parent li has a click event in tile view\r\n                which should not work when submit is clicked\r\n                 */\r\n                e.stopPropagation();\r\n            }\r\n        }\r\n        else if (this.props.fromMarkScheme) {\r\n            var navigatePossible = true;\r\n            var responseNavigationFailureReasons = markingHelper.canNavigateAwayFromCurrentResponse();\r\n            if (responseNavigationFailureReasons.length > 0) {\r\n                navigatePossible = false;\r\n                var combinedWarningMessages = combinedWarningPopupHelper.getCombinedWarningMessage(enums.SaveAndNavigate.submit, responseNavigationFailureReasons);\r\n                markingActionCreator.showResponseNavigationFailureReasons(enums.SaveAndNavigate.submit, combinedWarningMessages);\r\n            }\r\n            if (navigatePossible) {\r\n                busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.submitInResponseScreen);\r\n                markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.submit);\r\n            }\r\n        }\r\n        else {\r\n            var markGroupId = void 0;\r\n            if (this.props.isSubmitAll) {\r\n                markGroupId = 0;\r\n            }\r\n            else {\r\n                markGroupId = this.props.markGroupId;\r\n            }\r\n            submitActionCreator.submitResponseStarted(markGroupId);\r\n            /* stopping propagation because the parent li has a click event in tile view\r\n            which should not work when submit is clicked\r\n             */\r\n            e.stopPropagation();\r\n        }\r\n    };\r\n    return SubmitResponse;\r\n}(PureRenderComponent));\r\nmodule.exports = SubmitResponse;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 373:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/worklist/worklistcomponenthelper.ts ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar worklistValidatorFactory = __webpack_require__(/*! ../../utility/worklistvalidators/worklistvalidatorfactory */ 319);\r\nvar worklistValidatorList = __webpack_require__(/*! ../../utility/worklistvalidators/worklistvalidatorlist */ 304);\r\nvar submitStore = __webpack_require__(/*! ../../stores/submit/submitstore */ 293);\r\nvar customError = __webpack_require__(/*! ../base/customerror */ 398);\r\nvar targetHelper = __webpack_require__(/*! ../../utility/target/targethelper */ 300);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar teamManagementStore = __webpack_require__(/*! ../../stores/teammanagement/teammanagementstore */ 245);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\n/**\r\n * Helper class for worklist\r\n */\r\nvar WorklistComponentHelper = /** @class */ (function () {\r\n    function WorklistComponentHelper() {\r\n    }\r\n    /**\r\n     * Method which returns array of mark group ids to submit\r\n     */\r\n    WorklistComponentHelper.createMarkgroupIdCollectionForLiveSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        var relatedMarkGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            /* looping through each response to determine whether the same is eligible for submit */\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.liveOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    if (response.isWholeResponse) {\r\n                        relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(response.markGroupId));\r\n                    }\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (worklistData &&\r\n                worklistData.responses.count() > 0 &&\r\n                worklistData.responses.filter(function (x) { return x.markGroupId === singleResponseMarkGroupId; }).first().isWholeResponse) {\r\n                relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(singleResponseMarkGroupId));\r\n            }\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        if (relatedMarkGroupIds.length > 0) {\r\n            markGroupIds = markGroupIds.concat(relatedMarkGroupIds);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Raturns the markgroup ids of practice response to submit.\r\n     * @param {PracticeOpenWorklist} worklistData\r\n     * @param {number} singleResponseMarkGroupId\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.createMarkGroupIdCollectionForPracticeSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.practiceOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Raturns the markgroup ids of standardization response to submit.\r\n     * @param {StandardisationOpenWorklist} worklistData\r\n     * @param {number} singleResponseMarkGroupId\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.createMarkGroupIdCollectionForStandardizationSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.standardisationOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Raturns the markgroup ids of directed remark response to submit.\r\n     * @param {StandardisationOpenWorklist} worklistData\r\n     * @param {number} singleResponseMarkGroupId\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.createMarkGroupIdCollectionForDirectedRemarkSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        var relatedMarkGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            /* looping through each response to determine whether the same is eligible for submit */\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.directedRemarkOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    if (response.isWholeResponse) {\r\n                        // grouping related mark-group id's for the whole response.\r\n                        relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(response.markGroupId));\r\n                    }\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (worklistData &&\r\n                worklistData.responses.count() > 0 &&\r\n                worklistData.responses.filter(function (x) { return x.markGroupId === singleResponseMarkGroupId; }).first().isWholeResponse) {\r\n                // grouping related mark-group id's for the whole response.\r\n                relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(singleResponseMarkGroupId));\r\n            }\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        if (relatedMarkGroupIds.length > 0) {\r\n            markGroupIds = markGroupIds.concat(relatedMarkGroupIds);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Raturns the markgroup ids of pooled remark response to submit.\r\n     * @param {PooledRemarkOpenWorklist} worklistData\r\n     * @param {number} singleResponseMarkGroupId\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.createMarkGroupIdCollectionForPooledRemarkSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        var relatedMarkGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            /* looping through each response to determine whether the same is eligible for submit */\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.directedRemarkOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    // grouping related mark-group id's for the whole response.\r\n                    if (response.isWholeResponse) {\r\n                        relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(response.markGroupId));\r\n                    }\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (worklistData &&\r\n                worklistData.responses.count() > 0 &&\r\n                worklistData.responses.filter(function (x) { return x.markGroupId === singleResponseMarkGroupId; }).first().isWholeResponse) {\r\n                // grouping related mark-group id's for the whole response.\r\n                relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(singleResponseMarkGroupId));\r\n            }\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        if (relatedMarkGroupIds.length > 0) {\r\n            markGroupIds = markGroupIds.concat(relatedMarkGroupIds);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Method which returns array of mark group ids to submit simulation response/s\r\n     */\r\n    WorklistComponentHelper.createMarkgroupIdCollectionForSimulationSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            /* looping through each response to determine whether the same is eligible for submit */\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.simulationOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Method which returns array of mark group ids to submit\r\n     * @param worklistData\r\n     * @param singleResponseMarkGroupId\r\n     */\r\n    WorklistComponentHelper.createMarkgroupIdCollectionForAtypicalSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        /* Collection of Mark Group Ids of realted RIGs in other QIGs */\r\n        var relatedMarkGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            /* looping through each response to determine whether the same is eligible for submit */\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.atypicalOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(response.markGroupId));\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(singleResponseMarkGroupId));\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        if (relatedMarkGroupIds.length > 0) {\r\n            markGroupIds = markGroupIds.concat(relatedMarkGroupIds);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Get the error message key to show when submit response fails\r\n     */\r\n    WorklistComponentHelper.showMessageOnSubmitResponse = function (submittedResponseCount) {\r\n        var messageKey = '';\r\n        var messageHeaderKey = undefined;\r\n        if (submitStore.instance.getErrorCode > 0) {\r\n            var isInStandardisationworklist = worklistStore.instance.currentWorklistType === enums.WorklistType.practice ||\r\n                worklistStore.instance.currentWorklistType === enums.WorklistType.standardisation ||\r\n                worklistStore.instance.currentWorklistType === enums.WorklistType.secondstandardisation;\r\n            // If standardisation worklist, then no need to check the not approved status\r\n            if (submitStore.instance.getSubmitResponseReturn.examinerApprovalStatus === enums.ExaminerApproval.Suspended) {\r\n                if (submitStore.instance.getSubmitResponseReturn.hasQualityFeedbackOutstanding) {\r\n                    messageKey = 'marking.worklist.approval-status-changed-dialog.body-quality-feedback';\r\n                }\r\n                else {\r\n                    messageKey = 'marking.worklist.approval-status-changed-dialog.body';\r\n                }\r\n                messageHeaderKey = submittedResponseCount === 0 ?\r\n                    'marking.worklist.response-submission-error-dialog.header' : 'marking.worklist.approval-status-changed-dialog.header';\r\n            }\r\n            else if (submitStore.instance.getSubmitResponseReturn.examinerApprovalStatus === enums.ExaminerApproval.NotApproved &&\r\n                !isInStandardisationworklist &&\r\n                worklistStore.instance.currentWorklistType !== enums.WorklistType.simulation) {\r\n                messageKey = 'marking.worklist.approval-status-changed-dialog.body';\r\n                messageHeaderKey = submittedResponseCount === 0 ?\r\n                    'marking.worklist.response-submission-error-dialog.header' : 'marking.worklist.approval-status-changed-dialog.header';\r\n            }\r\n            else {\r\n                switch (submitStore.instance.getErrorCode) {\r\n                    case enums.SubmitResponseErrorCode.responseNotFullyMarked:\r\n                    case enums.SubmitResponseErrorCode.responseHasExceptions:\r\n                    case enums.SubmitResponseErrorCode.allSLAOsNotAnnotated:\r\n                    case enums.SubmitResponseErrorCode.allPagesNotAnnotated:\r\n                    case enums.SubmitResponseErrorCode.onHold:\r\n                    case enums.SubmitResponseErrorCode.mandateMarkschemeNotCommented:\r\n                    case enums.SubmitResponseErrorCode.notAllFilesViewed:\r\n                    case enums.SubmitResponseErrorCode.hasZoningException:\r\n                        messageHeaderKey = submitStore.instance.getMarkGroupId > 0 ?\r\n                            'marking.worklist.submit-response-dialog.header' :\r\n                            'marking.worklist.submit-all-responses-dialog.header';\r\n                        messageKey = submitStore.instance.getMarkGroupId > 0 ?\r\n                            'marking.worklist.response-submission-error-dialog.body-single-response-not-submitted' :\r\n                            'marking.worklist.response-submission-error-dialog.body-some-responses-not-submitted';\r\n                        break;\r\n                    case enums.SubmitResponseErrorCode.responseAlreadySubmitted:\r\n                        if (submitStore.instance.getMarkGroupId > 0) {\r\n                            messageHeaderKey = 'marking.worklist.submit-response-dialog.header';\r\n                            messageKey = 'marking.worklist.response-submission-error-dialog.body-single-response-already-submitted';\r\n                        }\r\n                        else {\r\n                            messageHeaderKey = 'marking.worklist.submit-all-responses-dialog.header';\r\n                            messageKey = 'marking.worklist.response-submission-error-dialog.body-some-responses-already-submitted';\r\n                        }\r\n                        break;\r\n                    case enums.SubmitResponseErrorCode.examinerNotApproved:\r\n                        messageKey = 'marking.worklist.approval-status-changed-dialog.body-relatedQIG';\r\n                        messageHeaderKey = submittedResponseCount === 0 ?\r\n                            'marking.worklist.response-submission-error-dialog.header' :\r\n                            'marking.worklist.approval-status-changed-dialog.header';\r\n                        break;\r\n                    case enums.SubmitResponseErrorCode.examinerSuspended:\r\n                        if (submitStore.instance.getSubmitResponseReturn.hasQualityFeedbackOutstanding) {\r\n                            messageKey = 'marking.worklist.approval-status-changed-dialog.body-quality-feedback';\r\n                        }\r\n                        else {\r\n                            messageKey = 'marking.worklist.approval-status-changed-dialog.body';\r\n                        }\r\n                        messageHeaderKey = submittedResponseCount === 0 ?\r\n                            'marking.worklist.response-submission-error-dialog.header' :\r\n                            'marking.worklist.approval-status-changed-dialog.header';\r\n                        break;\r\n                    case enums.SubmitResponseErrorCode.examinerWithdrawn:\r\n                        //This code added for whole response case and the examinerApprovalStatus contains only current qig’s status, \r\n                        //but SubmitResponseErrorCode contains status against any qig etc.\r\n                        messageKey = 'marking.worklist.approval-status-changed-dialog.body-withdrawn';\r\n                        messageHeaderKey = submittedResponseCount === 0 ?\r\n                            'marking.worklist.response-submission-error-dialog.header' :\r\n                            'marking.worklist.approval-status-changed-dialog.header';\r\n                        break;\r\n                    default:\r\n                        messageKey = '';\r\n                }\r\n            }\r\n        }\r\n        if (messageKey !== '' && submittedResponseCount === 0) {\r\n            /** Creating custom error message to show */\r\n            var submitErrorMessage = {\r\n                messageHeader: messageHeaderKey,\r\n                messageContent: messageKey\r\n            };\r\n            return submitErrorMessage;\r\n        }\r\n        else if (messageKey !== '') {\r\n            /** Creating custom error message to show */\r\n            var submitResponseError = new customError('Submit', messageKey, messageHeaderKey, false);\r\n            window.onerror('', '', null, null, submitResponseError);\r\n            return undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the auto approval Secondary content\r\n     * @param submittedResponseCount\r\n     */\r\n    WorklistComponentHelper.getAutoApprovalSecondaryContent = function (submittedResponseCount) {\r\n        var deleteResponseOnAutoApproval = targetHelper.isResponsesDeletedOnAutoApproval(submittedResponseCount);\r\n        return ((targetHelper.currentMarkingMode === enums.MarkingMode.ES_TeamApproval\r\n            && qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember === false) ?\r\n            ((deleteResponseOnAutoApproval === false) ?\r\n                'marking.worklist.auto-approved-dialog.body-standardisation'\r\n                : 'marking.worklist.auto-approved-dialog.body-excess-second-standardisation-responses-removed')\r\n            : ((targetHelper.currentMarkingMode === enums.MarkingMode.Approval\r\n                && qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember === false) ?\r\n                ((deleteResponseOnAutoApproval === false) ?\r\n                    'marking.worklist.auto-approved-dialog.body-standardisation'\r\n                    : 'marking.worklist.auto-approved-dialog.body-excess-standardisation-responses-removed')\r\n                : ((deleteResponseOnAutoApproval === false) ?\r\n                    'marking.worklist.auto-approved-dialog.body-stm-standardisation'\r\n                    : 'marking.worklist.auto-approved-dialog.body-excess-stm-standardisation-responses-removed')));\r\n    };\r\n    /**\r\n     * Returns the markgroup id collection for response submission\r\n     * @param {enums.MarkingMode} markingMode\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.getMarkgroupIdCollectionForSubmit = function (markingMode) {\r\n        switch (markingMode) {\r\n            case enums.MarkingMode.LiveMarking:\r\n                if (worklistStore.instance.currentWorklistType !== enums.WorklistType.atypical) {\r\n                    return WorklistComponentHelper.createMarkgroupIdCollectionForLiveSubmit(worklistStore.instance.getLiveOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n                }\r\n                return WorklistComponentHelper.createMarkgroupIdCollectionForAtypicalSubmit(worklistStore.instance.getAtypicalOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n            case enums.MarkingMode.Practice:\r\n                return WorklistComponentHelper.createMarkGroupIdCollectionForPracticeSubmit(worklistStore.instance.getPracticeOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n            case enums.MarkingMode.Approval:\r\n                return WorklistComponentHelper.createMarkGroupIdCollectionForStandardizationSubmit(worklistStore.instance.getStandardisationOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n            case enums.MarkingMode.ES_TeamApproval:\r\n                return WorklistComponentHelper.createMarkGroupIdCollectionForStandardizationSubmit(worklistStore.instance.getSecondStandardisationOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n            case enums.MarkingMode.Remarking:\r\n                if (worklistStore.instance.isDirectedRemark) {\r\n                    return WorklistComponentHelper.createMarkGroupIdCollectionForDirectedRemarkSubmit(worklistStore.instance.getDirectedRemarkOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n                }\r\n                else {\r\n                    return WorklistComponentHelper.createMarkGroupIdCollectionForPooledRemarkSubmit(worklistStore.instance.getPooledRemarkOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n                }\r\n            case enums.MarkingMode.Simulation:\r\n                return WorklistComponentHelper.createMarkgroupIdCollectionForSimulationSubmit(worklistStore.instance.getSimulationOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n        }\r\n    };\r\n    /**\r\n     * Get remark request type\r\n     * @param worklistType\r\n     */\r\n    WorklistComponentHelper.getRemarkRequestType = function (worklistType) {\r\n        return worklistType === enums.WorklistType.directedRemark || worklistType === enums.WorklistType.pooledRemark ?\r\n            worklistStore.instance.getRemarkRequestType : enums.RemarkRequestType.Unknown;\r\n    };\r\n    /**\r\n     * Get is directed remark\r\n     * @param worklistType\r\n     */\r\n    WorklistComponentHelper.getIsDirectedRemark = function (worklistType) {\r\n        return worklistType === enums.WorklistType.directedRemark || worklistType === enums.WorklistType.pooledRemark ?\r\n            worklistStore.instance.isDirectedRemark : false;\r\n    };\r\n    /**\r\n     * Method which returns whether the quality feedback related message should be shown on submitting\r\n     * seeds accurately/within tolerance\r\n     */\r\n    WorklistComponentHelper.shouldShowQualityFeedbackMessage = function () {\r\n        var _automaticQualityFeedback = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.AutomaticQualityFeedback, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        var _seedSubmissionStatus = submitStore.instance.getSubmitResponseReturn.seedSubmissionStatus;\r\n        return _automaticQualityFeedback &&\r\n            _seedSubmissionStatus === enums.SeedSubmissionStatus.SeedsSubmittedWithinToleranceOrAccurately;\r\n    };\r\n    /**\r\n     * Get the tab details that needs to be shown in the live worklist\r\n     * @param targetSummary\r\n     */\r\n    WorklistComponentHelper.getLiveWorklistTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        // Only closed tab is displaying in help examiners,\r\n        if (teamManagementStore.instance.selectedTeamManagementTab !== enums.TeamManagement.HelpExaminers) {\r\n            worklistTabDetails.push({\r\n                responseMode: enums.ResponseMode.open,\r\n                responseCount: targetSummary.examinerProgress.openResponsesCount\r\n            });\r\n            worklistTabDetails.push({\r\n                responseMode: enums.ResponseMode.pending,\r\n                responseCount: targetSummary.examinerProgress.pendingResponsesCount\r\n            });\r\n        }\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.closed,\r\n            responseCount: targetSummary.examinerProgress.closedResponsesCount\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Get the tab details that needs to be shown in the atypical worklist\r\n     * @param targetSummary\r\n     */\r\n    WorklistComponentHelper.getAtypicalWorklistTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.open,\r\n            responseCount: (isNaN(targetSummary.examinerProgress.atypicalOpenResponsesCount)\r\n                ? 0 : targetSummary.examinerProgress.atypicalOpenResponsesCount)\r\n        });\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.pending,\r\n            responseCount: (isNaN(targetSummary.examinerProgress.atypicalPendingResponsesCount)\r\n                ? 0 : targetSummary.examinerProgress.atypicalPendingResponsesCount)\r\n        });\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.closed,\r\n            responseCount: (isNaN(targetSummary.examinerProgress.atypicalClosedResponsesCount)\r\n                ? 0 : targetSummary.examinerProgress.atypicalClosedResponsesCount)\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Get the tab details that needs to be shown in the live worklist\r\n     * @param targetSummary\r\n     */\r\n    WorklistComponentHelper.getPracticeWorklistTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        if (!targetSummary.isTargetCompleted) {\r\n            worklistTabDetails.push({\r\n                responseMode: enums.ResponseMode.open,\r\n                responseCount: targetSummary.examinerProgress.openResponsesCount\r\n            });\r\n        }\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.closed,\r\n            responseCount: targetSummary.examinerProgress.closedResponsesCount\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Returns StandardisationWorklist TabDetails\r\n     * @param {markingTargetSummary} targetSummary\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.getStandardisationWorklistTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        if (markerOperationModeFactory.operationMode.shouldDisplayStandardisationOpenTab(targetSummary)) {\r\n            if (targetHelper.isESTargetCompleted(enums.MarkingMode.Approval) === false) {\r\n                worklistTabDetails.push({\r\n                    responseMode: enums.ResponseMode.open,\r\n                    responseCount: targetSummary.examinerProgress.openResponsesCount\r\n                });\r\n            }\r\n        }\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.closed,\r\n            responseCount: targetSummary.examinerProgress.closedResponsesCount\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Returns SecondStandardization TabDetails\r\n     * @param {markingTargetSummary} targetSummary\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.getSecondStandardizationTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        if (markerOperationModeFactory.operationMode.shouldDisplayStandardisationOpenTab(targetSummary)) {\r\n            if (targetHelper.isESTargetCompleted(enums.MarkingMode.ES_TeamApproval) === false) {\r\n                worklistTabDetails.push({\r\n                    responseMode: enums.ResponseMode.open,\r\n                    responseCount: targetSummary.examinerProgress.openResponsesCount\r\n                });\r\n            }\r\n        }\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.closed,\r\n            responseCount: targetSummary.examinerProgress.closedResponsesCount\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Get the tab details that needs to be shown in the remark worklist\r\n     * @param targetSummary\r\n     */\r\n    WorklistComponentHelper.getRemarkWorklistTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.open,\r\n            responseCount: targetSummary.examinerProgress.openResponsesCount\r\n        });\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.pending,\r\n            responseCount: targetSummary.examinerProgress.pendingResponsesCount\r\n        });\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.closed,\r\n            responseCount: targetSummary.examinerProgress.closedResponsesCount\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Returns the worklist tab details\r\n     * @param {enums.MarkingMode} markingMode\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.getWorklistTabDetails = function (markingMode, isTargetRefresh) {\r\n        if (isTargetRefresh === void 0) { isTargetRefresh = false; }\r\n        var worklistTabDetails = [];\r\n        var markingTargetsSummary;\r\n        /** Getting  markingTargetsSummary from worklist store,\r\n         * it will be updated if the worklist response collection changes\r\n         */\r\n        if (isTargetRefresh) {\r\n            /** If calling from refreshTargetProgress in worklist, will return summary data from targetSummaryStore */\r\n            markingTargetsSummary = targetHelper.getExaminerMarkingTargetProgress;\r\n        }\r\n        else {\r\n            /** If calling from markingmodechanged in worklist, will return summary data from workliststore\r\n             * worklist target summary collection is updated based on resposecount in the worklist\r\n             */\r\n            markingTargetsSummary = worklistStore.instance.getExaminerMarkingTargetProgress(markerOperationModeFactory.operationMode.isSelectedExaminerSTM);\r\n        }\r\n        switch (markingMode) {\r\n            case enums.MarkingMode.LiveMarking:\r\n                if (worklistStore.instance.currentWorklistType === enums.WorklistType.atypical) {\r\n                    worklistTabDetails = this.getAtypicalWorklistTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.LiveMarking; }).first());\r\n                }\r\n                else {\r\n                    worklistTabDetails = this.getLiveWorklistTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.LiveMarking; }).first());\r\n                }\r\n                break;\r\n            case enums.MarkingMode.Practice:\r\n                worklistTabDetails = this.getPracticeWorklistTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.Practice; }).first());\r\n                break;\r\n            case enums.MarkingMode.Approval:\r\n                worklistTabDetails = this.getStandardisationWorklistTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.Approval; }).first());\r\n                break;\r\n            case enums.MarkingMode.ES_TeamApproval:\r\n                worklistTabDetails = this.getSecondStandardizationTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.ES_TeamApproval; }).first());\r\n                break;\r\n            case enums.MarkingMode.Remarking:\r\n                worklistTabDetails = this.getRemarkWorklistTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.Remarking\r\n                    && x.remarkRequestTypeID === worklistStore.instance.getRemarkRequestType; }).first());\r\n                break;\r\n            case enums.MarkingMode.Simulation:\r\n                worklistTabDetails = this.getSimulationWorklistTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.Simulation; }).first());\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Get the tab details that needs to be shown in the simulation worklist\r\n     * @param targetSummary\r\n     */\r\n    WorklistComponentHelper.getSimulationWorklistTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.open,\r\n            responseCount: targetSummary.examinerProgress.openResponsesCount\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    return WorklistComponentHelper;\r\n}());\r\nmodule.exports = WorklistComponentHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 375:
/* no static exports found */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/dataservices/submit/submitresponsedataservice.ts ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar dataServiceBase = __webpack_require__(/*! ../base/dataservicebase */ 287);\r\nvar urls = __webpack_require__(/*! ../base/urls */ 266);\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar storageAdapterHelper = __webpack_require__(/*! ../storageadapters/storageadapterhelper */ 269);\r\nvar SubmitResponseDataService = /** @class */ (function (_super) {\r\n    __extends(SubmitResponseDataService, _super);\r\n    function SubmitResponseDataService() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.storageAdapterHelper = new storageAdapterHelper();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Method which makes the AJAX call to submit responses\r\n     * @param submitResponseArgument\r\n     * @param markSchemeGroupId\r\n     * @param remarkRequestType\r\n     * @param callback\r\n     */\r\n    SubmitResponseDataService.prototype.submitResponses = function (submitResponseArgument, markSchemeGroupId, worklistType, remarkRequestType, examinerRoleIds, markSchemeGroupIds, callback) {\r\n        /* Clear open/closed/pending cache */\r\n        if (remarkRequestType === void 0) { remarkRequestType = enums.RemarkRequestType.Unknown; }\r\n        if (examinerRoleIds === void 0) { examinerRoleIds = null; }\r\n        if (markSchemeGroupIds === void 0) { markSchemeGroupIds = null; }\r\n        this.storageAdapterHelper.clearCache(markSchemeGroupId, submitResponseArgument.markingMode, remarkRequestType, submitResponseArgument.examinerRoleId, worklistType);\r\n        var url = urls.SUBMIT_RESPONSE;\r\n        var that = this;\r\n        var index = 0;\r\n        //Clearing Cache for Whole Response\r\n        if (markSchemeGroupIds && markSchemeGroupIds.length !== 0) {\r\n            do {\r\n                this.storageAdapterHelper.clearCache(markSchemeGroupIds[index], submitResponseArgument.markingMode, remarkRequestType, examinerRoleIds[index], worklistType);\r\n                index++;\r\n            } while (index < markSchemeGroupIds.length);\r\n        }\r\n        index = 0;\r\n        /**  Making AJAX call to get the examiner progress fata */\r\n        var worklistPromise = this.makeAJAXCall('POST', url, JSON.stringify(submitResponseArgument), true, false);\r\n        worklistPromise.then(function (json) {\r\n            if (callback) {\r\n                var result = JSON.parse(json);\r\n                that.storageAdapterHelper.clearCachePostSubmission(submitResponseArgument.examinerRoleId, submitResponseArgument.markingMode, result);\r\n                //Clearing Cache for Whole Response\r\n                if (examinerRoleIds && examinerRoleIds.length !== 0) {\r\n                    do {\r\n                        that.storageAdapterHelper.clearCachePostSubmission(examinerRoleIds[index], submitResponseArgument.markingMode, result);\r\n                        index++;\r\n                    } while (index < examinerRoleIds.length);\r\n                }\r\n                callback(result.success, result);\r\n            }\r\n        }).catch(function (json) {\r\n            if (callback) {\r\n                callback(false, json);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * ShareAndClassifyResponse\r\n     */\r\n    SubmitResponseDataService.prototype.ShareAndClassifyResponse = function (submitResponseArgument, callback) {\r\n        var url = urls.SHARE_AND_CLASSIFY_RESPONSE;\r\n        var that = this;\r\n        var index = 0;\r\n        /**  Making AJAX call to get data */\r\n        var worklistPromise = this.makeAJAXCall('POST', url, JSON.stringify(submitResponseArgument), true, false);\r\n        worklistPromise.then(function (json) {\r\n            if (callback) {\r\n                var result = JSON.parse(json);\r\n                callback(true, result);\r\n            }\r\n        }).catch(function (json) {\r\n            if (callback) {\r\n                callback(false, json);\r\n            }\r\n        });\r\n    };\r\n    return SubmitResponseDataService;\r\n}(dataServiceBase));\r\nvar submitResponseDataService = new SubmitResponseDataService();\r\nmodule.exports = submitResponseDataService;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2RhdGFzZXJ2aWNlcy9zdWJtaXQvc3VibWl0cmVzcG9uc2VkYXRhc2VydmljZS50cz8xMmM4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkYXRhU2VydmljZUJhc2UgPSByZXF1aXJlKCcuLi9iYXNlL2RhdGFzZXJ2aWNlYmFzZScpO1xyXG5pbXBvcnQgdXJscyA9IHJlcXVpcmUoJy4uL2Jhc2UvdXJscycpO1xyXG5pbXBvcnQgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XHJcbmRlY2xhcmUgbGV0IGNvbmZpZzogYW55O1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IHN0b3JhZ2VBZGFwdGVySGVscGVyID0gcmVxdWlyZSgnLi4vc3RvcmFnZWFkYXB0ZXJzL3N0b3JhZ2VhZGFwdGVyaGVscGVyJyk7XHJcbmltcG9ydCBTaGFyZUFuZENsYXNzaWZ5UmV0dXJuICA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy9zdWJtaXQvdHlwaW5ncy9zaGFyZUFuZENsYXNzaWZ5UmV0dXJuJyk7XHJcblxyXG5jbGFzcyBTdWJtaXRSZXNwb25zZURhdGFTZXJ2aWNlIGV4dGVuZHMgZGF0YVNlcnZpY2VCYXNlIHtcclxuXHJcbiAgICBwcml2YXRlIHN0b3JhZ2VBZGFwdGVySGVscGVyID0gbmV3IHN0b3JhZ2VBZGFwdGVySGVscGVyKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRob2Qgd2hpY2ggbWFrZXMgdGhlIEFKQVggY2FsbCB0byBzdWJtaXQgcmVzcG9uc2VzXHJcbiAgICAgKiBAcGFyYW0gc3VibWl0UmVzcG9uc2VBcmd1bWVudFxyXG4gICAgICogQHBhcmFtIG1hcmtTY2hlbWVHcm91cElkXHJcbiAgICAgKiBAcGFyYW0gcmVtYXJrUmVxdWVzdFR5cGVcclxuICAgICAqIEBwYXJhbSBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3VibWl0UmVzcG9uc2VzKHN1Ym1pdFJlc3BvbnNlQXJndW1lbnQ6IFN1Ym1pdFJlc3BvbnNlQXJndW1lbnQsIG1hcmtTY2hlbWVHcm91cElkOiBudW1iZXIsXHJcbiAgICAgICAgd29ya2xpc3RUeXBlOiBlbnVtcy5Xb3JrbGlzdFR5cGUsXHJcbiAgICAgICAgcmVtYXJrUmVxdWVzdFR5cGU6IGVudW1zLlJlbWFya1JlcXVlc3RUeXBlID0gZW51bXMuUmVtYXJrUmVxdWVzdFR5cGUuVW5rbm93bixcclxuICAgICAgICBleGFtaW5lclJvbGVJZHM6IEFycmF5PG51bWJlcj4gPSBudWxsLCBtYXJrU2NoZW1lR3JvdXBJZHM6IEFycmF5PG51bWJlcj4gPSBudWxsLFxyXG4gICAgICAgIGNhbGxiYWNrOiAoKHN1Y2Nlc3M6IGJvb2xlYW4sIHN1Ym1pdFJlc3BvbnNlUmV0dXJuOiBTdWJtaXRSZXNwb25zZVJldHVybikgPT4gdm9pZCkpOiB2b2lkIHtcclxuICAgICAgICAvKiBDbGVhciBvcGVuL2Nsb3NlZC9wZW5kaW5nIGNhY2hlICovXHJcblxyXG4gICAgICAgIHRoaXMuc3RvcmFnZUFkYXB0ZXJIZWxwZXIuY2xlYXJDYWNoZShtYXJrU2NoZW1lR3JvdXBJZCwgc3VibWl0UmVzcG9uc2VBcmd1bWVudC5tYXJraW5nTW9kZSxcclxuICAgICAgICAgICAgcmVtYXJrUmVxdWVzdFR5cGUsIHN1Ym1pdFJlc3BvbnNlQXJndW1lbnQuZXhhbWluZXJSb2xlSWQsIHdvcmtsaXN0VHlwZSk7XHJcbiAgICAgICAgbGV0IHVybCA9IHVybHMuU1VCTUlUX1JFU1BPTlNFO1xyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICBsZXQgaW5kZXg6IG51bWJlciA9IDA7XHJcblxyXG4gICAgICAgIC8vQ2xlYXJpbmcgQ2FjaGUgZm9yIFdob2xlIFJlc3BvbnNlXHJcbiAgICAgICAgaWYgKG1hcmtTY2hlbWVHcm91cElkcyAmJiBtYXJrU2NoZW1lR3JvdXBJZHMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZUFkYXB0ZXJIZWxwZXIuY2xlYXJDYWNoZShtYXJrU2NoZW1lR3JvdXBJZHNbaW5kZXhdLCBzdWJtaXRSZXNwb25zZUFyZ3VtZW50Lm1hcmtpbmdNb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlbWFya1JlcXVlc3RUeXBlLCBleGFtaW5lclJvbGVJZHNbaW5kZXhdLCB3b3JrbGlzdFR5cGUpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcclxuICAgICAgICAgICAgfSB3aGlsZSAoaW5kZXggPCBtYXJrU2NoZW1lR3JvdXBJZHMubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5kZXggPSAwO1xyXG4gICAgICAgIC8qKiAgTWFraW5nIEFKQVggY2FsbCB0byBnZXQgdGhlIGV4YW1pbmVyIHByb2dyZXNzIGZhdGEgKi9cclxuICAgICAgICBsZXQgd29ya2xpc3RQcm9taXNlID0gdGhpcy5tYWtlQUpBWENhbGwoJ1BPU1QnLCB1cmwsIEpTT04uc3RyaW5naWZ5KHN1Ym1pdFJlc3BvbnNlQXJndW1lbnQpLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgd29ya2xpc3RQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGpzb246IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQ6IFN1Ym1pdFJlc3BvbnNlUmV0dXJuID0gSlNPTi5wYXJzZShqc29uKTtcclxuICAgICAgICAgICAgICAgIHRoYXQuc3RvcmFnZUFkYXB0ZXJIZWxwZXIuY2xlYXJDYWNoZVBvc3RTdWJtaXNzaW9uKHN1Ym1pdFJlc3BvbnNlQXJndW1lbnQuZXhhbWluZXJSb2xlSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VibWl0UmVzcG9uc2VBcmd1bWVudC5tYXJraW5nTW9kZSwgcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIC8vQ2xlYXJpbmcgQ2FjaGUgZm9yIFdob2xlIFJlc3BvbnNlXHJcbiAgICAgICAgICAgICAgICBpZiAoZXhhbWluZXJSb2xlSWRzICYmIGV4YW1pbmVyUm9sZUlkcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc3RvcmFnZUFkYXB0ZXJIZWxwZXIuY2xlYXJDYWNoZVBvc3RTdWJtaXNzaW9uKGV4YW1pbmVyUm9sZUlkc1tpbmRleF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRSZXNwb25zZUFyZ3VtZW50Lm1hcmtpbmdNb2RlLCByZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKGluZGV4IDwgZXhhbWluZXJSb2xlSWRzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXN1bHQuc3VjY2VzcywgcmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChqc29uOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSwganNvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNoYXJlQW5kQ2xhc3NpZnlSZXNwb25zZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgU2hhcmVBbmRDbGFzc2lmeVJlc3BvbnNlKFxyXG4gICAgICAgIHN1Ym1pdFJlc3BvbnNlQXJndW1lbnQ6IFN1Ym1pdFJlc3BvbnNlQXJndW1lbnQsXHJcbiAgICAgICAgY2FsbGJhY2s6ICgoc3VjY2VzczogYm9vbGVhbiwgc2hhcmVBbmRDbGFzc2lmeVJlc3BvbnNlUmV0dXJuOiBTaGFyZUFuZENsYXNzaWZ5UmV0dXJuKSA9PiB2b2lkKSk6IHZvaWQge1xyXG4gICAgICAgICAgICBsZXQgdXJsID0gdXJscy5TSEFSRV9BTkRfQ0xBU1NJRllfUkVTUE9OU0U7XHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgLyoqICBNYWtpbmcgQUpBWCBjYWxsIHRvIGdldCBkYXRhICovXHJcbiAgICAgICAgbGV0IHdvcmtsaXN0UHJvbWlzZSA9IHRoaXMubWFrZUFKQVhDYWxsKCdQT1NUJywgdXJsLCBKU09OLnN0cmluZ2lmeShzdWJtaXRSZXNwb25zZUFyZ3VtZW50KSwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgICAgIHdvcmtsaXN0UHJvbWlzZS50aGVuKGZ1bmN0aW9uIChqc29uOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0OiBTaGFyZUFuZENsYXNzaWZ5UmV0dXJuID0gSlNPTi5wYXJzZShqc29uKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlLCByZXN1bHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGpzb246IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlLCBqc29uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5sZXQgc3VibWl0UmVzcG9uc2VEYXRhU2VydmljZSA9IG5ldyBTdWJtaXRSZXNwb25zZURhdGFTZXJ2aWNlKCk7XHJcbmV4cG9ydCA9IHN1Ym1pdFJlc3BvbnNlRGF0YVNlcnZpY2U7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9kYXRhc2VydmljZXMvc3VibWl0L3N1Ym1pdHJlc3BvbnNlZGF0YXNlcnZpY2UudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUdBO0FBQ0E7QUFHQTtBQUFBO0FBQUE7QUFBQTtBQUVBOztBQStFQTtBQTdFQTs7Ozs7O0FBTUE7QUFDQTtBQUtBO0FBSEE7QUFDQTtBQUFBO0FBSUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 382:
/* no static exports found */
/* all exports used */
/*!***********************************!*\
  !*** ./src/components/footer.tsx ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ./base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../stores/locale/localestore */ 226);\r\nvar ConfirmationDialog = __webpack_require__(/*! ./utility/confirmationdialog */ 408);\r\nvar userOptionsHelper = __webpack_require__(/*! ../utility/useroption/useroptionshelper */ 265);\r\nvar logoutArgument = __webpack_require__(/*! ../dataservices/authentication/logoutargument */ 416);\r\nvar logoutActionCreator = __webpack_require__(/*! ../actions/logout/logoutactioncreator */ 396);\r\nvar loginSession = __webpack_require__(/*! ../app/loginsession */ 252);\r\nvar loginStore = __webpack_require__(/*! ../stores/login/loginstore */ 286);\r\nvar useroptionKeys = __webpack_require__(/*! ../utility/useroption/useroptionkeys */ 264);\r\nvar userOptionStore = __webpack_require__(/*! ../stores/useroption/useroptionstore */ 302);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ./utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar enums = __webpack_require__(/*! ./utility/enums */ 225);\r\nvar marksAndAnnotationsSaveHelper = __webpack_require__(/*! ../utility/marking/marksandannotationssavehelper */ 295);\r\nvar markingStore = __webpack_require__(/*! ../stores/marking/markingstore */ 236);\r\nvar markingActionCreator = __webpack_require__(/*! ../actions/marking/markingactioncreator */ 246);\r\nvar worklistStore = __webpack_require__(/*! ../stores/worklist/workliststore */ 231);\r\nvar BusyIndicator = __webpack_require__(/*! ./utility/busyindicator/busyindicator */ 312);\r\nvar navigationHelper = __webpack_require__(/*! ./utility/navigation/navigationhelper */ 248);\r\nvar navigationStore = __webpack_require__(/*! ../stores/navigation/navigationstore */ 275);\r\nvar applicationActionCreator = __webpack_require__(/*! ../actions/applicationoffline/applicationactioncreator */ 256);\r\nvar GenericDialog = __webpack_require__(/*! ./utility/genericdialog */ 317);\r\nvar saveMarksAndAnnotationsNonRecoverableErrorDialogContents = __webpack_require__(/*! ./utility/savemarksandannotations/savemarksandannotationsnonrecoverableerrordialogcontents */ 367);\r\nvar htmlUtilities = __webpack_require__(/*! ../utility/generic/htmlutilities */ 243);\r\nvar worklistActionCreator = __webpack_require__(/*! ../actions/worklist/worklistactioncreator */ 261);\r\nvar qigStore = __webpack_require__(/*! ../stores/qigselector/qigstore */ 230);\r\nvar keyDownHelper = __webpack_require__(/*! ../utility/generic/keydownhelper */ 258);\r\nvar qigActionCreator = __webpack_require__(/*! ../actions/qigselector/qigselectoractioncreator */ 253);\r\nvar messageStore = __webpack_require__(/*! ../stores/message/messagestore */ 240);\r\nvar exceptionStore = __webpack_require__(/*! ../stores/exception/exceptionstore */ 277);\r\nvar popUpDisplayActionCreator = __webpack_require__(/*! ../actions/popupdisplay/popupdisplayactioncreator */ 328);\r\nvar examinerStore = __webpack_require__(/*! ../stores/markerinformation/examinerstore */ 259);\r\nvar responseActionCreator = __webpack_require__(/*! ../actions/response/responseactioncreator */ 257);\r\nvar qualityFeedbackHelper = __webpack_require__(/*! ../utility/qualityfeedback/qualityfeedbackhelper */ 309);\r\nvar colouredAnnotationsHelper = __webpack_require__(/*! ../utility/stamppanel/colouredannotationshelper */ 314);\r\nvar submitStore = __webpack_require__(/*! ../stores/submit/submitstore */ 293);\r\nvar worklistComponentHelper = __webpack_require__(/*! ./worklist/worklistcomponenthelper */ 373);\r\nvar submitHelper = __webpack_require__(/*! ./utility/submit/submithelper */ 282);\r\nvar targetHelper = __webpack_require__(/*! ../utility/target/targethelper */ 300);\r\nvar busyIndicatorActionCreator = __webpack_require__(/*! ../actions/busyindicator/busyindicatoractioncreator */ 279);\r\nvar busyIndicatorStore = __webpack_require__(/*! ../stores/busyindicator/busyindicatorstore */ 326);\r\nvar messagingActionCreator = __webpack_require__(/*! ../actions/messaging/messagingactioncreator */ 268);\r\nvar messageHelper = __webpack_require__(/*! ./utility/message/messagehelper */ 283);\r\nvar stdSetupPermissionHelper = __webpack_require__(/*! ../utility/standardisationsetup/standardisationsetuppermissionhelper */ 332);\r\nvar responseHelper = __webpack_require__(/*! ./utility/responsehelper/responsehelper */ 249);\r\nvar standardisationSetupFactory = __webpack_require__(/*! ../utility/standardisationsetup/standardisationsetupfactory */ 336);\r\n/* tslint:disable:variable-name */\r\nvar IdleTimer = __webpack_require__(/*! react-idle-timer */ 43).default;\r\nvar applicationStore = __webpack_require__(/*! ../stores/applicationoffline/applicationstore */ 247);\r\nvar submitActionCreator = __webpack_require__(/*! ../actions/submit/submitactioncreator */ 297);\r\nvar responseStore = __webpack_require__(/*! ../stores/response/responsestore */ 235);\r\nvar storageAdapterHelper = __webpack_require__(/*! ../dataservices/storageadapters/storageadapterhelper */ 269);\r\nvar teamManagementStore = __webpack_require__(/*! ../stores/teammanagement/teammanagementstore */ 245);\r\nvar userInfoActionCreator = __webpack_require__(/*! ../actions/userinfo/userinfoactioncreator */ 255);\r\nvar loadContainerActionCreator = __webpack_require__(/*! ../actions/navigation/loadcontaineractioncreator */ 397);\r\nvar operationModeHelper = __webpack_require__(/*! ./utility/userdetails/userinfo/operationmodehelper */ 289);\r\nvar worklistHistoryInfo = __webpack_require__(/*! ../utility/breadcrumb/worklisthistoryinfo */ 456);\r\nvar teamManagementHistoryInfo = __webpack_require__(/*! ../utility/breadcrumb/teammanagementhistoryinfo */ 455);\r\nvar historyItem = __webpack_require__(/*! ../utility/breadcrumb/historyitem */ 454);\r\nvar teamManagementActionCreator = __webpack_require__(/*! ../actions/teammanagement/teammanagementactioncreator */ 263);\r\nvar markingCheckActionCreator = __webpack_require__(/*! ../actions/markingcheck/markingcheckactioncreator */ 311);\r\nvar rememberQig = __webpack_require__(/*! ../stores/useroption/typings/rememberqig */ 446);\r\nvar userOptionKeys = __webpack_require__(/*! ../utility/useroption/useroptionkeys */ 264);\r\nvar WarningMessagePopup = __webpack_require__(/*! ./teammanagement/warningmessagepopup */ 407);\r\nvar LocksInQigPopup = __webpack_require__(/*! ./qigselector/locksinqigpopup */ 399);\r\nvar ccActionCreator = __webpack_require__(/*! ../actions/configurablecharacteristics/configurablecharacteristicsactioncreator */ 310);\r\nvar Promise = __webpack_require__(/*! es6-promise */ 41);\r\nvar stringHelper = __webpack_require__(/*! ../utility/generic/stringhelper */ 254);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar simulationModeHelper = __webpack_require__(/*! ../utility/simulation/simulationmodehelper */ 324);\r\nvar stringFormatHelper = __webpack_require__(/*! ../utility/stringformat/stringformathelper */ 250);\r\nvar ccStore = __webpack_require__(/*! ../stores/configurablecharacteristics/configurablecharacteristicsstore */ 341);\r\nvar ecourseworkHelper = __webpack_require__(/*! ./utility/ecoursework/ecourseworkhelper */ 238);\r\nvar ecourseworkFileStore = __webpack_require__(/*! ../stores/response/digital/ecourseworkfilestore */ 278);\r\nvar acetatesActionCreator = __webpack_require__(/*! ../actions/acetates/acetatesactioncreator */ 393);\r\nvar configurableCharacteristicHelper = __webpack_require__(/*! ../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicNames = __webpack_require__(/*! ../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar targetSummaryStore = __webpack_require__(/*! ../stores/worklist/targetsummarystore */ 305);\r\nvar imageZoneStore = __webpack_require__(/*! ../stores/imagezones/imagezonestore */ 376);\r\nvar auditLoggingHelper = __webpack_require__(/*! ./utility/auditlogger/auditlogginghelper */ 298);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar MultiOptionConfirmationDialog = __webpack_require__(/*! ./utility/multioptionconfirmationdialog */ 338);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../actions/standardisationsetup/standardisationactioncreator */ 251);\r\nvar userinfostore = __webpack_require__(/*! ../stores/userinfo/userinfostore */ 244);\r\nvar genericRadioButtonItems = __webpack_require__(/*! ./utility/genericradiobuttonitems */ 363);\r\nvar GenericPopupWithRadioButton = __webpack_require__(/*! ./utility/genericpopupwithradiobuttons */ 362);\r\nvar genericCheckBoxItems = __webpack_require__(/*! ./utility/genericcheckboxitems */ 409);\r\nvar GenericPopupWithCheckBoxes = __webpack_require__(/*! ./utility/genericpopupwithcheckboxes */ 410);\r\nvar awardingHelper = __webpack_require__(/*! ./utility/awarding/awardinghelper */ 360);\r\nvar awardingStore = __webpack_require__(/*! ../stores/awarding/awardingstore */ 270);\r\nvar standardisationSetupHistoryInfo = __webpack_require__(/*! ../utility/breadcrumb/standardisationsetuphistoryinfo */ 418);\r\nvar Footer = /** @class */ (function (_super) {\r\n    __extends(Footer, _super);\r\n    /**\r\n     * Constructor\r\n     * @param {Props} props\r\n     * @param {State} state\r\n     */\r\n    function Footer(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        // Indicates if logout has been triggered\r\n        _this._onLogoutTriggered = false;\r\n        _this._failureReason = enums\r\n            .ResponseNavigateFailureReason.None;\r\n        _this.expiredMarkGroupId = 0;\r\n        _this.currentSaveMarksAndAnnotationTriggeringPoint = undefined;\r\n        // variable for save marks and annotations dialog contents\r\n        _this.saveMarksAndAnnotationsErrorDialogContents = new saveMarksAndAnnotationsNonRecoverableErrorDialogContents(false);\r\n        // variable to save examiner Approval status\r\n        _this.examinerApprovalStatus = enums\r\n            .SaveMarksAndAnnotationErrorCode.None;\r\n        //variable to know where the reponse is navigated to\r\n        _this.navigateReponse = enums.SaveAndNavigate.none;\r\n        // Holds the Pop data for displaying the contents of popup\r\n        _this.popUpData = {};\r\n        // Indicates if logout has been triggered through Idle TimeOut\r\n        _this._isAutoLogOut = false;\r\n        // Holds the idle time out value in milli seconds -- default:10 mins\r\n        _this._idleTimeOut = 600000;\r\n        //  This will hold the mandatory message checking trigger points\r\n        _this.mandatoryMessageTriggeringPoint = enums.TriggerPoint.None;\r\n        _this.isConcurrentSessionActive = false;\r\n        _this.storageAdapterHelper = new storageAdapterHelper();\r\n        _this.messageDetails = { messageHeader: '', messageString: '' };\r\n        _this.triggerPointAfterClose = 0;\r\n        _this.offlineErrorMessage = null;\r\n        _this.submitMessageErrorPopupContent = undefined;\r\n        _this.copyMarksAsDefinitiveSelected = true;\r\n        _this.classifyResponseDetails = undefined;\r\n        _this.reclassifyResponseDetails = undefined;\r\n        _this.reuseResponseDetails = undefined;\r\n        _this.isClassifyResponseOkButtonDisabled = true;\r\n        _this.concurrentSaveFailArea = enums.PageContainers.None;\r\n        /**\r\n         * Fires after email save\r\n         */\r\n        _this.userInfoSaved = function () {\r\n            _this.setState({\r\n                isSaveEmailMessageDisplaying: true\r\n            });\r\n        };\r\n        /**\r\n         * Email save success message ok click\r\n         */\r\n        _this.onOkClickOfEmailSucessMessage = function () {\r\n            _this.setState({\r\n                isSaveEmailMessageDisplaying: false\r\n            });\r\n        };\r\n        /**\r\n         * Method to be invoked when a ExamBody CC is loaded.\r\n         */\r\n        _this.onExamBodyCCLoaded = function () {\r\n            // show locks and simulation exited popup if it is not already shown and exambodycc is loaded\r\n            _this.setState({\r\n                reRenderLocksInQigPopUp: _this.state.reRenderLocksInQigPopUp && ccStore.instance.isExamBodyCCLoaded,\r\n                renderedOn: Date.now(),\r\n                showSimulationExitedPopup: _this.state.showSimulationExitedPopup && ccStore.instance.isExamBodyCCLoaded\r\n            });\r\n        };\r\n        /**\r\n         * Updates the Marker information panel.\r\n         */\r\n        _this.updateMarkerInformationPanel = function () {\r\n            // Check the Marker got with drawn from the QIG, If So show the message\r\n            if (examinerStore.instance.getMarkerInformation.approvalStatus ===\r\n                enums.ExaminerApproval.Withdrawn) {\r\n                if (qigStore.instance.getOverviewData) {\r\n                    var currentQig = qigStore.instance.getOverviewData.qigSummary\r\n                        .filter(function (qig) {\r\n                        return qig.examinerRoleId ===\r\n                            examinerStore.instance.getMarkerInformation.examinerRoleId;\r\n                    })\r\n                        .first();\r\n                    // removing entry from recent history\r\n                    teamManagementActionCreator.removeHistoryItem(currentQig ? currentQig.markSchemeGroupId : 0);\r\n                }\r\n                _this.setState({ isWithdrawnResponseError: true, isBusy: false });\r\n            }\r\n        };\r\n        /**\r\n         * Updates qig selector if the examiner session is closed for the qig.\r\n         */\r\n        _this.updateQigForSessionClose = function () {\r\n            // Check the Marker got with drawn from the QIG, If So show the message\r\n            _this.setState({ isQigsessionClosedError: true, isBusy: false });\r\n        };\r\n        /**\r\n         * On response submission started\r\n         */\r\n        _this.onSubmitResponseStarted = function () {\r\n            /**\r\n             * for submit all the markgroup id will always be zero\r\n             */\r\n            if (submitStore.instance.getMarkGroupId > 0) {\r\n                _this.submitConfirmationDialogueContent = localeStore.instance.TranslateText('marking.worklist.submit-response-dialog.body');\r\n                _this.submitConfirmationDialogueHeader = localeStore.instance.TranslateText('marking.worklist.submit-response-dialog.header');\r\n            }\r\n            else {\r\n                _this.submitConfirmationDialogueContent = localeStore.instance.TranslateText('marking.worklist.submit-all-responses-dialog.body');\r\n                _this.submitConfirmationDialogueHeader = localeStore.instance.TranslateText('marking.worklist.submit-all-responses-dialog.header');\r\n            }\r\n            _this.setConfirmationDialogueState(true);\r\n        };\r\n        /**\r\n         * Show busy indicator when submit is clicked in live open worklist\r\n         */\r\n        _this.setBusyIndicator = function () {\r\n            _this.setState({\r\n                isBusy: busyIndicatorStore.instance.getBusyIndicatorInvoker ===\r\n                    enums.BusyIndicatorInvoker.none\r\n                    ? false\r\n                    : true\r\n            });\r\n        };\r\n        /**\r\n         * hiding busy indicator\r\n         */\r\n        _this.resetBusyIndicator = function () {\r\n            _this.setState({\r\n                isBusy: busyIndicatorStore.instance.getBusyIndicatorInvoker !==\r\n                    enums.BusyIndicatorInvoker.none\r\n                    ? false\r\n                    : true\r\n            });\r\n        };\r\n        /**\r\n         * hiding busy indicator on ok click of validation of std setup\r\n         */\r\n        _this.resetBusyIndicatorStdSetupNotComplete = function () {\r\n            if (standardisationSetupStore.instance.iscompleteStandardisationSuccess === false) {\r\n                _this.setState({\r\n                    isBusy: busyIndicatorStore.instance.getBusyIndicatorInvoker ===\r\n                        enums.BusyIndicatorInvoker.none\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Marks retrieval event.\r\n         */\r\n        _this.marksRetrieved = function (markGroupId) {\r\n            if ((markingStore.instance.currentResponseMode === enums.ResponseMode.open ||\r\n                markingStore.instance.currentResponseMode === enums.ResponseMode.pending) &&\r\n                !markerOperationModeFactory.operationMode.isTeamManagementMode) {\r\n                var isColourUpdated = colouredAnnotationsHelper.updateAnnotationColourIfNeeded(markGroupId);\r\n                if (isColourUpdated) {\r\n                    // Updating the queue to let know the background process to save the dirty marks and annotations\r\n                    marksAndAnnotationsSaveHelper.updateMarksAndAnnotationsQueue();\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Handles the action event while message priority updation.\r\n         */\r\n        _this.messagePriorityUpdate = function () {\r\n            _this.setState({ doShowMandatoryMessageValidationPopup: false });\r\n        };\r\n        /**\r\n         * Updates user session data by changing the logged_out status to 1.\r\n         * logged_out status 1 means user logged out properly by clicking on the\r\n         * log out button.\r\n         */\r\n        _this.updateUserSession = function () {\r\n            /**\r\n             * Trigger save mark for the currently selected item when logging out\r\n             */\r\n            if (markingStore.instance.isMarkingInProgress) {\r\n                markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.toLogout);\r\n            }\r\n            else {\r\n                /**\r\n                 * navigating from a response which is in view mode doesn't require to call save marks\r\n                 */\r\n                var logoutData = new logoutArgument();\r\n                logoutData.MarkingSessionTrackingId = parseInt(loginSession.MARKING_SESSION_TRACKING_ID);\r\n                logoutActionCreator.updateUserSession(logoutData);\r\n            }\r\n        };\r\n        /**\r\n         * setting login invalid state.\r\n         */\r\n        _this.onConcurrentSessionActive = function () {\r\n            _this.isConcurrentSessionActive = true;\r\n            _this.clearSession();\r\n        };\r\n        /**\r\n         * Clears the session after user option saved and logged_out status updated.\r\n         */\r\n        _this.clearSession = function () {\r\n            window.removeEventListener('beforeunload', navigationHelper.onBeforeWindowUnload);\r\n            /* tslint:disable:no-string-literal */\r\n            if (_this.isConcurrentSessionActive) {\r\n                window.sessionStorage['invaliduser'] = 'true';\r\n            }\r\n            else if (_this._isAutoLogOut) {\r\n                window.sessionStorage['autologout'] = 'true';\r\n            }\r\n            /* tslint:enable:no-string-literal */\r\n            userOptionsHelper.resetTokensAndRedirect();\r\n            navigationHelper.loadLoginPage();\r\n        };\r\n        /**\r\n         *  clear marks and annotations queue entry and update isDirty fields\r\n         */\r\n        _this.onSaveMarksAndAnnotations = function (markGroupId, saveMarksAndAnnotationTriggeringPoint, queueOperation, isnetworkerror) {\r\n            var saveErrorCode = markingStore.instance.getSaveMarksAndAnnotationErrorCode(markGroupId);\r\n            // selectedQIGForMarkerOperation become undefined when the marker is withdrawn from the selected qig.\r\n            // so added undefined check as part of bug 57226.\r\n            if (qigStore.instance.selectedQIGForMarkerOperation &&\r\n                qigStore.instance.selectedQIGForMarkerOperation.currentMarkingTarget.markingMode ===\r\n                    enums.MarkingMode.Simulation &&\r\n                qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete) {\r\n                _this.triggerPointAfterClose = saveMarksAndAnnotationTriggeringPoint;\r\n                if (_this.triggerPointAfterClose ===\r\n                    enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Submit) {\r\n                    _this.triggerPointAfterClose =\r\n                        enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse;\r\n                }\r\n                saveMarksAndAnnotationTriggeringPoint =\r\n                    enums.SaveMarksAndAnnotationsProcessingTriggerPoint.BackgroundWorker;\r\n                saveErrorCode = enums.SaveMarksAndAnnotationErrorCode.None;\r\n                marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, enums.MarksAndAnnotationsQueueOperation.Remove);\r\n                _this.setState({\r\n                    showSimulationExitedPopup: true\r\n                });\r\n            }\r\n            if (saveMarksAndAnnotationTriggeringPoint !==\r\n                enums.SaveMarksAndAnnotationsProcessingTriggerPoint.None) {\r\n                // reset the saveinprogress flag when savingmarks has been completed\r\n                marksAndAnnotationsSaveHelper.resetSaveInProgress();\r\n                /**\r\n                 * set the current marks and annotations save triggering point.\r\n                 */\r\n                _this.currentSaveMarksAndAnnotationTriggeringPoint = saveMarksAndAnnotationTriggeringPoint;\r\n                if (saveErrorCode === enums.SaveMarksAndAnnotationErrorCode.ResponseRemoved) {\r\n                    worklistActionCreator.getWorklistMarkerProgressData(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation\r\n                        .isElectronicStandardisationTeamMember);\r\n                    _this.expiredMarkGroupId = markGroupId;\r\n                    marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, queueOperation);\r\n                    _this.setState({\r\n                        isDisplayingResponseRemovedError: markingStore.instance.currentResponseMode === enums.ResponseMode.pending,\r\n                        doShowSavingMarksAndAnnotationsIndicator: false\r\n                    });\r\n                }\r\n                else if (saveErrorCode === enums.SaveMarksAndAnnotationErrorCode.ClosedResponse) {\r\n                    worklistActionCreator.getWorklistMarkerProgressData(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation\r\n                        .isElectronicStandardisationTeamMember);\r\n                    _this.expiredMarkGroupId = markGroupId;\r\n                    marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, queueOperation);\r\n                    _this.setState({\r\n                        isDisplayingGraceResponseExpiredError: markingStore.instance.currentResponseMode === enums.ResponseMode.pending,\r\n                        doShowSavingMarksAndAnnotationsIndicator: false\r\n                    });\r\n                }\r\n                else if (saveErrorCode === enums.SaveMarksAndAnnotationErrorCode.WithdrawnResponse) {\r\n                    /**\r\n                     * Calling the helper method to update the marks and annotations queue\r\n                     */\r\n                    marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, queueOperation);\r\n                    _this.onWithdrawnResponse(enums.SaveMarksAndAnnotationErrorCode.WithdrawnResponse, markingStore.instance.navigateTo);\r\n                }\r\n                else if (saveErrorCode === enums.SaveMarksAndAnnotationErrorCode.UnallocatedResponse ||\r\n                    saveErrorCode === enums.SaveMarksAndAnnotationErrorCode.MarksAndAnnotationsOutOfDate) {\r\n                    /**\r\n                     * Calling the helper method to update the marks and annotations queue\r\n                     */\r\n                    marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, queueOperation);\r\n                    if (saveMarksAndAnnotationTriggeringPoint ===\r\n                        enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Submit) {\r\n                        /**\r\n                         * When there are errors in saving marks and annotations we have to hide the busy indicator\r\n                         */\r\n                        busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.none);\r\n                        _this.setState({\r\n                            doShowSavingMarksAndAnnotationsIndicator: false,\r\n                            nonRecoverableSaveMarksAndAnnotationsErrorMessage: true\r\n                        });\r\n                    }\r\n                    else {\r\n                        if (saveMarksAndAnnotationTriggeringPoint ===\r\n                            enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse) {\r\n                            _this.saveMarksAndAnnotationsWithNonRecoverableError(saveMarksAndAnnotationTriggeringPoint, markGroupId, queueOperation);\r\n                        }\r\n                        else {\r\n                            // hide the saving marks and annotations busy indicator\r\n                            if (_this.state.doShowSavingMarksAndAnnotationsIndicator) {\r\n                                _this.setState({\r\n                                    doShowSavingMarksAndAnnotationsIndicator: false\r\n                                });\r\n                            }\r\n                            navigationHelper.loadContainerIfNeeded(enums.PageContainers.WorkList, enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse);\r\n                            _this.initiateContentRefresh();\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    _this.saveMarksAndAnnotationsWithNonRecoverableError(saveMarksAndAnnotationTriggeringPoint, markGroupId, queueOperation);\r\n                }\r\n            }\r\n            _this.setState({\r\n                isOnline: !isnetworkerror\r\n            });\r\n        };\r\n        /**\r\n         * show the error message when a marker is withdrawn from background\r\n         */\r\n        _this.onWithdrawnResponse = function (saveMarksAndAnnotationErrorCode, navigatingTo) {\r\n            _this.examinerApprovalStatus = saveMarksAndAnnotationErrorCode;\r\n            _this.navigateReponse = navigatingTo;\r\n            var currentQig = qigStore.instance.getOverviewData.qigSummary\r\n                .filter(function (qig) {\r\n                return qig.examinerRoleId ===\r\n                    examinerStore.instance.getMarkerInformation.examinerRoleId;\r\n            })\r\n                .first();\r\n            // removes entry from recent history\r\n            teamManagementActionCreator.removeHistoryItem(currentQig ? currentQig.markSchemeGroupId : 0);\r\n            _this.setState({\r\n                doShowSavingMarksAndAnnotationsIndicator: false,\r\n                isWithdrawnResponseError: true,\r\n                isBusy: false\r\n            });\r\n        };\r\n        /**\r\n         *  This will remove the item from marksAndAnnotations save processing queue.\r\n         */\r\n        _this.onSetHasNonRecoverableError = function (markGroupId) {\r\n            // Calling the helper method to update the marks and annotations queue\r\n            var queueOperation = enums.MarksAndAnnotationsQueueOperation.Remove;\r\n            marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, queueOperation);\r\n        };\r\n        /**\r\n         * Method to show the busy indicator on triggering saving of marks and annotations\r\n         */\r\n        _this.onSaveMarksAndAnnotationsTriggered = function (saveMarksAndAnnotationTriggeringPoint) {\r\n            if (saveMarksAndAnnotationTriggeringPoint !==\r\n                enums.SaveMarksAndAnnotationsProcessingTriggerPoint.None &&\r\n                saveMarksAndAnnotationTriggeringPoint !==\r\n                    enums.SaveMarksAndAnnotationsProcessingTriggerPoint.BackgroundWorker) {\r\n                _this.setState({\r\n                    doShowSavingMarksAndAnnotationsIndicator: true\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Go to logout after saving mark if there is any\r\n         */\r\n        _this.navigateAwayFromResponse = function () {\r\n            if (markingStore.instance.navigateTo === enums.SaveAndNavigate.toLogout) {\r\n                var logoutData = new logoutArgument();\r\n                logoutData.MarkingSessionTrackingId = parseInt(loginSession.MARKING_SESSION_TRACKING_ID);\r\n                logoutActionCreator.updateUserSession(logoutData);\r\n            }\r\n            else {\r\n                // reset mark entry deactivators on navigating away from response.\r\n                keyDownHelper.instance.resetMarkEntryDeactivators();\r\n                // we are deactivating the keydown helper while message panel or exception panel is open. We are disabling that\r\n                // during the corresponding panel is close. If user is navigate away from response screen without closing the message panel\r\n                // then we've to activate the keydown helper\r\n                if (messageStore.instance.isMessagePanelVisible) {\r\n                    keyDownHelper.instance.DeActivate(enums.MarkEntryDeactivator.Messaging);\r\n                }\r\n                else if (exceptionStore.instance.isExceptionPanelVisible) {\r\n                    keyDownHelper.instance.DeActivate(enums.MarkEntryDeactivator.Exception);\r\n                }\r\n                else if (markingStore.instance.navigateTo === enums.SaveAndNavigate.toMenu) {\r\n                    markingActionCreator.removeMarkEntrySelection();\r\n                    keyDownHelper.instance.DeActivate(enums.MarkEntryDeactivator.Menu);\r\n                }\r\n                _this.copyMarksAsDefinitiveSelected = true;\r\n            }\r\n        };\r\n        /**\r\n         * Method to show the busy indicator on triggering saving of marks and annotations\r\n         */\r\n        _this.refreshState = function () {\r\n            switch (navigationStore.instance.containerPage) {\r\n                case enums.PageContainers.Login:\r\n                    _this.clearSession();\r\n                    break;\r\n            }\r\n        };\r\n        /*\r\n         * On Accept Quality Feedback Action completedF\r\n         */\r\n        _this.onAcceptQualityFeedbackActionCompleted = function () {\r\n            var responseModeBasedOnQualityFeedback = qualityFeedbackHelper.getResponseModeBasedOnQualityFeedback();\r\n            if (responseModeBasedOnQualityFeedback !== enums.ResponseMode.closed) {\r\n                var responseMode = responseModeBasedOnQualityFeedback !== undefined\r\n                    ? responseModeBasedOnQualityFeedback\r\n                    : enums.ResponseMode.open;\r\n                if (qigStore.instance.selectedQIGForMarkerOperation) {\r\n                    worklistActionCreator.notifyWorklistTypeChange(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId, worklistStore.instance.currentWorklistType, responseMode, worklistStore.instance.getRemarkRequestType, worklistStore.instance.isDirectedRemark, qigStore.instance.selectedQIGForMarkerOperation\r\n                        .isElectronicStandardisationTeamMember);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Show response in grace not fully marked message.\r\n         */\r\n        _this.showResponseInGraceNotFullyMarkedMessage = function (failureReason) {\r\n            _this._failureReason = failureReason;\r\n            _this.setState({ isDisplayingGraceResponseLessthan100PercentageError: true });\r\n        };\r\n        /**\r\n         * Show mandatory message popup\r\n         */\r\n        _this.showMandatoryMessagePopup = function (isUnreadMandatoryMessagePresent, triggerPoint) {\r\n            if (isUnreadMandatoryMessagePresent) {\r\n                _this.mandatoryMessageTriggeringPoint = triggerPoint;\r\n                _this.onPopUpDisplayEvent(enums.PopUpType.MandatoryMessage, enums.PopUpActionType.Show, null);\r\n            }\r\n        };\r\n        /**\r\n         * Display the corresponding popups\r\n         */\r\n        _this.onPopUpDisplayEvent = function (popUpType, popUpActionType, popUpData) {\r\n            _this.popUpData = popUpData;\r\n            if (popUpActionType === enums.PopUpActionType.Show) {\r\n                _this.setState({ popUpType: popUpType });\r\n            }\r\n        };\r\n        /**\r\n         * handle different popup actions\r\n         */\r\n        _this.handlePopUpAction = function (popUpType, popUpActionType) {\r\n            switch (popUpActionType) {\r\n                case enums.PopUpActionType.Show:\r\n                    break;\r\n                case enums.PopUpActionType.Yes:\r\n                    // when navigated from message panel the navigate action is called\r\n                    if (_this.messageNavigationArguments) {\r\n                        _this.messageNavigationArguments.canNavigate = true;\r\n                        messagingActionCreator.canMessageNavigate(_this.messageNavigationArguments);\r\n                        _this.messageNavigationArguments = undefined;\r\n                        messagingActionCreator.messageAction(enums.MessageViewAction.Close);\r\n                        _this.setState({ popUpType: undefined });\r\n                    }\r\n                    else {\r\n                        popUpDisplayActionCreator.popUpDisplay(popUpType, popUpActionType, messageStore.instance.navigateFrom, {});\r\n                        _this.setState({ popUpType: undefined });\r\n                    }\r\n                    break;\r\n                case enums.PopUpActionType.No:\r\n                    _this.messageNavigationArguments = undefined;\r\n                    popUpDisplayActionCreator.popUpDisplay(popUpType, popUpActionType, messageStore.instance.navigateFrom, {});\r\n                    _this.setState({ popUpType: undefined });\r\n                    break;\r\n                case enums.PopUpActionType.Ok:\r\n                    if (popUpType === enums.PopUpType.MandatoryMessage &&\r\n                        _this.props.footerType !== enums.FooterType.Message) {\r\n                        //Response displayed in Atypical worklist even after changing the response to 'On hold' in AI Image Management\r\n                        //so do refresh worklist content when mandatory message popup appears\r\n                        //This will affect all response types except live.\r\n                        _this.storageAdapterHelper.clearStorageArea('worklist');\r\n                        // redirecting to inbox screen, if user currently not in the message screen\r\n                        navigationHelper.loadMessagePage();\r\n                    }\r\n                    else if (popUpType === enums.PopUpType.MandatoryMessage &&\r\n                        _this.props.footerType === enums.FooterType.Message &&\r\n                        _this.mandatoryMessageTriggeringPoint !== enums.TriggerPoint.MessageStore) {\r\n                        // we don't need to refresh inbox tab if we found mandatory messages are available during message loading action\r\n                        // refresh the inbox tab with selected mandatory message\r\n                        messagingActionCreator.refreshMessageFolder(enums.MessageFolderType.Inbox);\r\n                    }\r\n                    _this.mandatoryMessageTriggeringPoint = enums.TriggerPoint.None;\r\n                    _this.setState({ popUpType: undefined });\r\n                    break;\r\n            }\r\n        };\r\n        /**\r\n         * On response submission completed\r\n         */\r\n        _this.onSubmitResponseCompleted = function (fromMarkScheme, submittedMarkGroupIds, selectedDisplayId) {\r\n            if (!_this._showShareLoadingIndicatorForPE) {\r\n                _this.submitMessageErrorPopupContent = worklistComponentHelper.showMessageOnSubmitResponse(submitStore.instance.getSubmittedResponsesCount());\r\n            }\r\n            //updating provisional response collection and navigating after sharing Provisional Response\r\n            if (_this._showShareLoadingIndicator && fromMarkScheme) {\r\n                var stdWorklistView = standardisationSetupStore.instance.isTotalMarksViewSelected ? enums.STDWorklistViewType.ViewTotalMarks :\r\n                    enums.STDWorklistViewType.ViewMarksByQuestion;\r\n                var isNextResponseAvailable = standardisationSetupStore.instance.isNextResponseAvailable(selectedDisplayId);\r\n                var nextResponseId = markerOperationModeFactory.operationMode.nextResponseId(responseStore.instance.selectedDisplayId.toString());\r\n                if (isNextResponseAvailable) {\r\n                    var responseData = standardisationSetupStore.instance.getResponseDetails(responseStore.instance.selectedDisplayId.toString());\r\n                    // remove shared response from provisional response worklist collection.\r\n                    standardisationActionCreator.updateStandardisationResponseCollection(responseData.esMarkGroupId, enums.StandardisationSetup.ProvisionalResponse);\r\n                    _this.setState({\r\n                        isBusy: false\r\n                    });\r\n                    navigationHelper.responseNavigation(enums.ResponseNavigation.next, false, parseInt(nextResponseId));\r\n                }\r\n                else {\r\n                    // if next response is not available then load worklist.\r\n                    navigationHelper.loadStandardisationSetup();\r\n                }\r\n                return;\r\n            }\r\n            /* Logging event in google analytics or application insights based on the configuration */\r\n            new auditLoggingHelper().logHelper.logEventOnSubmitResponse(submitStore.instance.getSubmittedResponsesCount(), submittedMarkGroupIds);\r\n            var messageKey = '';\r\n            var messageHeaderKey = undefined;\r\n            // If No validation Error, Check the whether to display the Quality Feedback Message\r\n            if (worklistComponentHelper.shouldShowQualityFeedbackMessage()) {\r\n                messageKey = localeStore.instance.TranslateText('marking.worklist.quality-feedback-dialog.body');\r\n                messageHeaderKey = localeStore.instance.TranslateText('marking.worklist.quality-feedback-dialog.header');\r\n            }\r\n            else if (submitStore.instance.getCurrentWorklistType === enums.WorklistType.standardisation ||\r\n                submitStore.instance.getCurrentWorklistType === enums.WorklistType.secondstandardisation) {\r\n                if (submitStore.instance.getSubmitResponseReturn.examinerApprovalStatus ===\r\n                    enums.ExaminerApproval.Approved) {\r\n                    messageKey = localeStore.instance.TranslateText(worklistComponentHelper.getAutoApprovalSecondaryContent(submittedMarkGroupIds.length));\r\n                    messageHeaderKey = localeStore.instance.TranslateText('marking.worklist.auto-approved-dialog.header');\r\n                }\r\n            }\r\n            if (messageKey !== '') {\r\n                _this.messageDetails = {\r\n                    messageHeader: messageHeaderKey,\r\n                    messageString: messageKey,\r\n                    submittedMarkGroupIds: submittedMarkGroupIds,\r\n                    displayId: selectedDisplayId,\r\n                    isFromMarkScheme: fromMarkScheme\r\n                };\r\n                _this.setState({\r\n                    doShowSavingMarksAndAnnotationsIndicator: false,\r\n                    isBusy: false,\r\n                    doShowPopup: true\r\n                });\r\n            }\r\n            else if (_this.submitMessageErrorPopupContent !== undefined) {\r\n                _this.setState({\r\n                    isSubmitErrorPopDisplaying: true,\r\n                    isBusy: false,\r\n                    doShowSavingMarksAndAnnotationsIndicator: false\r\n                });\r\n            }\r\n            else {\r\n                _this.navigateAfterSubmit(submittedMarkGroupIds, selectedDisplayId, fromMarkScheme);\r\n            }\r\n        };\r\n        /**\r\n         * Navigate after the submit\r\n         */\r\n        _this.navigateAfterSubmit = function (submittedMarkGroupIds, displayId, fromMarkScheme) {\r\n            // Inform response navigation module.\r\n            responseActionCreator.navigateAfterSubmit(submittedMarkGroupIds, displayId, fromMarkScheme);\r\n            // Navigate to corresponding worklist even if not in QualityFeedbackOutstanding,\r\n            // to ensure that the navigation happens correctly at the time of submition.\r\n            qualityFeedbackHelper.forceNavigationToWorklist(submitStore.instance.getSubmitResponseReturn.hasQualityFeedbackOutstanding);\r\n            // Refresh the worklist\r\n            _this.initiateContentRefresh();\r\n            // Clear the marks and annotations if needed for Reloading the DefinitiveMarks\r\n            submitHelper.clearMarksAndAnnotations(submittedMarkGroupIds);\r\n        };\r\n        /**\r\n         * This will display the unread mandatory message popup while user in message screen using background pulse\r\n         */\r\n        _this.onUpdateNotification = function (unreadMessageCount, isMessageReadCountChanged, unreadMandatoryMessageCount) {\r\n            // display unread mandatory messages are available popup while user in message screen and not composing a message\r\n            if (unreadMandatoryMessageCount > 0 &&\r\n                _this.props.footerType === enums.FooterType.Message &&\r\n                !messageStore.instance.isMessagePanelVisible) {\r\n                _this.mandatoryMessageTriggeringPoint = enums.TriggerPoint.BackgroundPulse;\r\n                _this.onPopUpDisplayEvent(enums.PopUpType.MandatoryMessage, enums.PopUpActionType.Show, null);\r\n            }\r\n        };\r\n        /**\r\n         * Show pop up if the message panel is edited on navigation\r\n         */\r\n        _this.onMessagePanelEdited = function (messageNavigationArgument) {\r\n            if (messageNavigationArgument.hasMessageContainsDirtyValue &&\r\n                !messageNavigationArgument.navigationConfirmed) {\r\n                _this.messageNavigationArguments = messageNavigationArgument;\r\n                _this.messageNavigationArguments.navigationConfirmed = true;\r\n                if (messageNavigationArgument.navigateTo === enums.MessageNavigation.newException ||\r\n                    messageNavigationArgument.navigateTo ===\r\n                        enums.MessageNavigation.exceptionWithInResponse) {\r\n                    _this.popUpData.popupContent = localeStore.instance.TranslateText('marking.response.discard-exception-dialog.body-open-another');\r\n                }\r\n                else if (messageNavigationArgument.navigateTo === enums.MessageNavigation.ChangeStatus) {\r\n                    _this.popUpData.popupContent = localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.body-start-new-message-while-composing');\r\n                }\r\n                else {\r\n                    _this.popUpData.popupContent = localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.body-navigated-away');\r\n                }\r\n                _this.setState({ popUpType: enums.PopUpType.DiscardMessageNavigateAway });\r\n            }\r\n        };\r\n        /**\r\n         * Show mandatory message validation popup\r\n         */\r\n        _this.mandatoryMessageValidationPopupVisibility = function () {\r\n            _this.setState({ doShowMandatoryMessageValidationPopup: true });\r\n        };\r\n        /**\r\n         * Check the QIG got withdrwan\r\n         */\r\n        _this.onResponseDataReceived = function (searchedResponseData) {\r\n            if (searchedResponseData.approvalStatusId === enums.ExaminerApproval.Withdrawn) {\r\n                teamManagementActionCreator.removeHistoryItem(searchedResponseData.markSchemeGroupId);\r\n                _this.setState({ isWithdrawnResponseError: true, isBusy: false });\r\n            }\r\n        };\r\n        /**\r\n         * show error popup on response search failed\r\n         */\r\n        _this.onResponseDataReceivedFailed = function (serviceFailed) {\r\n            // If this service failed then we dont know whether the response is available or not\r\n            if (!serviceFailed) {\r\n                return;\r\n            }\r\n            _this.setState({ isResponseSearchFailed: true, isBusy: false });\r\n        };\r\n        _this.handleErrorNavigationTeamManagement = function (failureCode, markSchemeGroupId) {\r\n            if (markSchemeGroupId === void 0) { markSchemeGroupId = 0; }\r\n            switch (failureCode) {\r\n                case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                case enums.FailureCode.HierarchyChanged:\r\n                    navigationHelper.loadTeamManagement();\r\n                    userInfoActionCreator.changeMenuVisibility(false);\r\n                    break;\r\n                case enums.FailureCode.Withdrawn:\r\n                    _this.storageAdapterHelper.clearCacheByKey('qigselector', 'overviewdata');\r\n                    navigationHelper.loadQigSelector();\r\n                    userInfoActionCreator.changeMenuVisibility(false);\r\n                    teamManagementActionCreator.removeHistoryItem(markSchemeGroupId);\r\n                    break;\r\n            }\r\n        };\r\n        /**\r\n         * Adding current items to history based upon the user's action\r\n         */\r\n        _this.addToRecentHistory = function () {\r\n            if (!worklistStore.instance.isMarkingCheckMode) {\r\n                _this.addSelectedQigDetailsToUserOption();\r\n            }\r\n            // If the container page is response we dont want to add that to the history\r\n            if (!qigStore.instance.selectedQIGForMarkerOperation ||\r\n                worklistStore.instance.isMarkingCheckMode ||\r\n                navigationStore.instance.containerPage === enums.PageContainers.Response) {\r\n                return;\r\n            }\r\n            var _historyItem = new historyItem();\r\n            // QIG Name based on string format CC\r\n            _historyItem.qigName = stringFormatHelper.formatAwardingBodyQIG(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupName, qigStore.instance.selectedQIGForMarkerOperation.assessmentCode, qigStore.instance.selectedQIGForMarkerOperation.sessionName, qigStore.instance.selectedQIGForMarkerOperation.componentId, qigStore.instance.selectedQIGForMarkerOperation.questionPaperName, qigStore.instance.selectedQIGForMarkerOperation.assessmentName, qigStore.instance.selectedQIGForMarkerOperation.componentName, stringFormatHelper.getOverviewQIGNameFormat());\r\n            _historyItem.qigId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n            _historyItem.timeStamp = Date.now();\r\n            // adding to history item based on Marker Operation Mode\r\n            if (markerOperationModeFactory.operationMode.isTeamManagementMode) {\r\n                var _teamManagementHistoryInfo = new teamManagementHistoryInfo();\r\n                _teamManagementHistoryInfo.worklistType = worklistStore.instance.currentWorklistType;\r\n                _teamManagementHistoryInfo.responseMode = worklistStore.instance.getResponseMode;\r\n                _teamManagementHistoryInfo.remarkRequestType =\r\n                    worklistStore.instance.getRemarkRequestType;\r\n                _teamManagementHistoryInfo.subordinateExaminerRoleID =\r\n                    navigationStore.instance.containerPage !== enums.PageContainers.TeamManagement\r\n                        ? teamManagementStore.instance.examinerDrillDownData\r\n                            ? teamManagementStore.instance.examinerDrillDownData.examinerRoleId\r\n                            : 0\r\n                        : 0;\r\n                _teamManagementHistoryInfo.subordinateExaminerID =\r\n                    navigationStore.instance.containerPage !== enums.PageContainers.TeamManagement\r\n                        ? teamManagementStore.instance.examinerDrillDownData\r\n                            ? teamManagementStore.instance.examinerDrillDownData.examinerId\r\n                            : 0\r\n                        : 0;\r\n                _teamManagementHistoryInfo.supervisorExaminerRoleID = teamManagementStore.instance\r\n                    .selectedExaminerRoleId\r\n                    ? teamManagementStore.instance.selectedExaminerRoleId\r\n                    : operationModeHelper.examinerRoleId;\r\n                _teamManagementHistoryInfo.selectedTab = teamManagementStore.instance\r\n                    .selectedTeamManagementTab\r\n                    ? teamManagementStore.instance.selectedTeamManagementTab\r\n                    : enums.TeamManagement.MyTeam;\r\n                _teamManagementHistoryInfo.currentContainer = navigationStore.instance.containerPage;\r\n                _historyItem.team = _teamManagementHistoryInfo;\r\n            }\r\n            else if (markerOperationModeFactory.operationMode.isStandardisationSetupMode) {\r\n                var _standardisationSetupHistoryInfo = new standardisationSetupHistoryInfo();\r\n                _standardisationSetupHistoryInfo.standardisationSetupWorklistType =\r\n                    standardisationSetupStore.instance.selectedStandardisationSetupWorkList;\r\n                _standardisationSetupHistoryInfo.timeStamp = Date.now();\r\n                _historyItem.standardisationSetup = _standardisationSetupHistoryInfo;\r\n            }\r\n            else {\r\n                var _worklistHistoryInfo = new worklistHistoryInfo();\r\n                _worklistHistoryInfo.worklistType = worklistStore.instance.currentWorklistType;\r\n                _worklistHistoryInfo.responseMode = worklistStore.instance.getResponseMode;\r\n                _worklistHistoryInfo.remarkRequestType = worklistStore.instance.getRemarkRequestType;\r\n                _historyItem.myMarking = _worklistHistoryInfo;\r\n            }\r\n            var _isMarkingEnabled = qigStore.instance.selectedQIGForMarkerOperation &&\r\n                qigStore.instance.selectedQIGForMarkerOperation.isMarkingEnabled;\r\n            _historyItem.markingMethodId =\r\n                qigStore.instance.selectedQIGForMarkerOperation.markingMethod;\r\n            _historyItem.isElectronicStandardisationTeamMember =\r\n                qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember;\r\n            // used for showing/hiding marking link in menu's histroy list under menu tab\r\n            _historyItem.isMarkingEnabled =\r\n                _isMarkingEnabled &&\r\n                    qigStore.instance.selectedQIGForMarkerOperation.examinerQigStatus !==\r\n                        enums.ExaminerQIGStatus.WaitingStandardisation &&\r\n                    qigStore.instance.selectedQIGForMarkerOperation.currentMarkingTarget != null;\r\n            // used for showing/hiding teammanagement link in menu's histroy list under menu tab\r\n            _historyItem.isTeamManagementEnabled =\r\n                qigStore.instance.selectedQIGForMarkerOperation &&\r\n                    qigStore.instance.selectedQIGForMarkerOperation.isTeamManagementEnabled;\r\n            // used for showing/hiding standardisation setup link in menu's history list under menu tab.\r\n            _historyItem.isStandardisationSetupEnabled =\r\n                (qigStore.instance.isStandardisationSetupButtonVisible(qigStore.instance.selectedQIGForMarkerOperation) ||\r\n                    qigStore.instance.isStandardisationSetupLinkVisible(qigStore.instance.selectedQIGForMarkerOperation));\r\n            _historyItem.questionPaperPartId =\r\n                qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId;\r\n            _historyItem.examinerRoleId = operationModeHelper.examinerRoleId;\r\n            loadContainerActionCreator.addToRecentHistory(_historyItem);\r\n        };\r\n        /**\r\n         * Show No Marking Check Available Popup\r\n         */\r\n        _this.showNoMarkingCheckAvailableMessage = function (popUpType, popUpActionType, popUpData) {\r\n            if (popUpActionType === enums.PopUpActionType.Show &&\r\n                popUpType === enums.PopUpType.NoMarkingCheckRequestPossible) {\r\n                _this.setState({\r\n                    popUpType: popUpType,\r\n                    doShowNoMarkingCheckAvailableMessage: true\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Navigate to team management\r\n         */\r\n        _this.onTeamManagementOpen = function (isFromHistory) {\r\n            if (isFromHistory === void 0) { isFromHistory = false; }\r\n            navigationHelper.loadTeamManagement(isFromHistory);\r\n        };\r\n        /**\r\n         * Marking Check Complete Button Clicked\r\n         */\r\n        _this.markCheckCompleteButtonEvent = function () {\r\n            _this.setState({ isMarkingCheckCompleteConfirmationPopupDisplaying: true });\r\n        };\r\n        /**\r\n         *  Marking Check Completed Event\r\n         */\r\n        _this.markCheckCompletedEvent = function () {\r\n            markingCheckActionCreator.getMarkCheckExaminers(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId);\r\n        };\r\n        /**\r\n         * Scroll view when focus comes to text box in android like in ipad\r\n         * Firefox is exclueded, scrollIntoViewIfNeeded is not supporting by browser #49184.\r\n         */\r\n        _this.scrollIntoViewOnEditingTextForAndroid = function () {\r\n            var activeElement = document.activeElement;\r\n            if (htmlUtilities.isAndroidDevice &&\r\n                !htmlUtilities.isAndroidFirefox &&\r\n                (activeElement.tagName === 'TEXTAREA' || activeElement.tagName === 'INPUT')) {\r\n                var that = _this;\r\n                setTimeout(function () {\r\n                    var el = $(activeElement)[0];\r\n                    el.scrollIntoViewIfNeeded(true);\r\n                }, 0);\r\n            }\r\n        };\r\n        /**\r\n         * Show locks in qig popup\r\n         */\r\n        _this.onShowLocksInQigsPopup = function (_locksInQigDetailsList) {\r\n            if (qigStore.instance.doShowLocksInQigPopUp &&\r\n                _locksInQigDetailsList.locksInQigDetailsList &&\r\n                _locksInQigDetailsList.locksInQigDetailsList.count()) {\r\n                _this.setState({\r\n                    reRenderLocksInQigPopUp: true\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * This method will render the pop up with no of locks and qig name\r\n         */\r\n        _this.renderLocksInQigPopUp = function () {\r\n            // If Exam body CC's not loaded yet, then do not show the locks popup\r\n            var locksPopup = ccStore.instance.isExamBodyCCLoaded ? (React.createElement(LocksInQigPopup, { showLocksInQigPopUp: _this.state.reRenderLocksInQigPopUp, fromLogout: qigStore.instance.isShowLocksFromLogout, onCancelClickOfLocksInQigPopup: _this.onCancelClickOfLocksInQigPopup, onLogoutClickOfLocksInQigPopup: _this.onLogoutClickOfLocksInQigPopup, id: 'LocksInQigPopup', key: 'LocksInQigPopup_key' })) : null;\r\n            return locksPopup;\r\n        };\r\n        /**\r\n         * Locks in qig list recieved event\r\n         */\r\n        _this.onQigSelectedFromLockedList = function (qigId) {\r\n            if (loginStore.instance.isAdminRemarker) {\r\n                // Invoking the action creator to retrieve the Admin remarkers QIG details.\r\n                qigActionCreator.getAdminRemarkerQIGSelectorData(true);\r\n            }\r\n            else {\r\n                // Invoking the action creator to retrieve the QIG list for the QIG Selector\r\n                qigActionCreator.getQIGSelectorData(qigId, true, false, false, true);\r\n            }\r\n        };\r\n        /**\r\n         * Cancel click on locks in qig popup\r\n         * @private\r\n         *\r\n         * @memberof Footer\r\n         */\r\n        _this.onCancelClickOfLocksInQigPopup = function () {\r\n            _this.setState({\r\n                reRenderLocksInQigPopUp: false\r\n            });\r\n        };\r\n        _this.onLogoutClickOfLocksInQigPopup = function () {\r\n            _this.onYesClickOfLogoutConfirmation(false);\r\n            _this.setState({\r\n                reRenderLocksInQigPopUp: false\r\n            });\r\n        };\r\n        _this.navigateToQigFromLockedList = function (isDataFromSearch, isDataFromHistory, isFromLocksInPopUp) {\r\n            if (isDataFromSearch === void 0) { isDataFromSearch = false; }\r\n            if (isDataFromHistory === void 0) { isDataFromHistory = false; }\r\n            if (isFromLocksInPopUp === void 0) { isFromLocksInPopUp = false; }\r\n            if (isFromLocksInPopUp) {\r\n                var changeOperationModePromise = userInfoActionCreator.changeOperationMode(enums.MarkerOperationMode.TeamManagement);\r\n                var markSchemeGroupCCPromise = ccActionCreator.getMarkSchemeGroupCCs(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId);\r\n                var openQIGPromise = void 0;\r\n                if (qigStore.instance.getOverviewData) {\r\n                    openQIGPromise = qigActionCreator.openQIG(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, false);\r\n                }\r\n                else {\r\n                    openQIGPromise = qigActionCreator.getQIGSelectorData(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId);\r\n                }\r\n                var that = _this;\r\n                Promise.Promise\r\n                    .all([changeOperationModePromise, markSchemeGroupCCPromise, openQIGPromise])\r\n                    .then(function (result) {\r\n                    teamManagementActionCreator.openTeamManagement(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, false, true);\r\n                });\r\n            }\r\n            _this.setState({\r\n                reRenderLocksInQigPopUp: false\r\n            });\r\n        };\r\n        _this.doLogoutPopup = function (isFromLogout, _locksInQigDetailsList) {\r\n            if (isFromLogout) {\r\n                if (_locksInQigDetailsList.locksInQigDetailsList &&\r\n                    _locksInQigDetailsList.locksInQigDetailsList.count() > 0) {\r\n                    qigActionCreator.showLocksInQigPopup(true, true);\r\n                }\r\n                else {\r\n                    userInfoActionCreator.showLogoutPopup();\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * show confirmation popup on submiting simulation response\r\n         */\r\n        _this.onshowSimulationResponseSubmitConfirmationPopup = function () {\r\n            /**\r\n             * for submit all the markgroup id will always be zero\r\n             */\r\n            if (submitStore.instance.getMarkGroupId > 0) {\r\n                _this.simulationResponseSubmitConfirmationDialogueContent = localeStore.instance.TranslateText('marking.worklist.submit-response-dialog.body-simulation');\r\n                _this.simulationResponseSubmitConfirmationDialogueHeader = localeStore.instance.TranslateText('marking.worklist.submit-response-dialog.header');\r\n            }\r\n            else {\r\n                _this.simulationResponseSubmitConfirmationDialogueContent = localeStore.instance.TranslateText('marking.worklist.submit-all-responses-dialog.body-simulation');\r\n                _this.simulationResponseSubmitConfirmationDialogueHeader = localeStore.instance.TranslateText('marking.worklist.submit-all-responses-dialog.header');\r\n            }\r\n            _this.setState({ showSimulationResponseSubmitConfirmationPopup: true });\r\n        };\r\n        /**\r\n         * call when share toggle button is turned off\r\n         */\r\n        _this.shareConfirmationPopup = function (clientToken, showSharePopup) {\r\n            _this.shareConfirmationClientToken = clientToken;\r\n            markingActionCreator.showOrHideRemoveContextMenu(false);\r\n            _this.setState({\r\n                isShared: showSharePopup,\r\n                doShowShareConfirmationPopup: true\r\n            });\r\n        };\r\n        /**\r\n         * Render simulation exited qigs in popup\r\n         */\r\n        _this.renderSimulationExitedQigsPopup = function () {\r\n            var secondaryContent = null;\r\n            var footerContent = null;\r\n            if (_this.state.showAllSimulationExitedQigs) {\r\n                secondaryContent = localeStore.instance.TranslateText('marking.worklist.exited-simulation-dialog.subheader-multiple-qigs');\r\n                footerContent = localeStore.instance.TranslateText('marking.worklist.exited-simulation-dialog.body-multiple-qigs');\r\n            }\r\n            else {\r\n                secondaryContent = localeStore.instance.TranslateText('marking.worklist.exited-simulation-dialog.subheader-single-qig');\r\n                footerContent = localeStore.instance.TranslateText('marking.worklist.exited-simulation-dialog.body-single-qig');\r\n            }\r\n            // If Exam body CC's not loaded yet, then do not show the simulation exited qigs popup\r\n            var simulationExitedQigsPopup = ccStore.instance.isExamBodyCCLoaded ? (React.createElement(GenericDialog, { content: null, multiLineContent: _this.getSimulationModeExitedQigs(), header: localeStore.instance.TranslateText('marking.worklist.exited-simulation-dialog.header'), secondaryContent: secondaryContent, displayPopup: _this.state.showSimulationExitedPopup, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: _this.onOKClickOfSimulationExitedQigsPopup.bind(_this), id: 'moveSimulation', key: 'moveSimulationMessage', popupDialogType: enums.PopupDialogType.SimulationExited, footerContent: footerContent })) : null;\r\n            return simulationExitedQigsPopup;\r\n        };\r\n        /**\r\n         * On Ok button click of simulation exited qigs popup\r\n         */\r\n        _this.onOKClickOfSimulationExitedQigsPopup = function () {\r\n            var currentContainer = navigationStore.instance.containerPage;\r\n            // When the popup is displayed in the qigselector\r\n            if (_this.state.showAllSimulationExitedQigs &&\r\n                currentContainer === enums.PageContainers.QigSelector) {\r\n                simulationModeHelper.clearCacheBeforBeforeSimulationTargetCompletion();\r\n                simulationModeHelper.handleSimulationTargetCompletion(true);\r\n            }\r\n            else {\r\n                // When only the current qig is shown in the popup\r\n                if (!_this.state.showAllSimulationExitedQigs) {\r\n                    simulationModeHelper.clearCacheBeforBeforeSimulationTargetCompletion();\r\n                    simulationModeHelper.handleSimulationTargetCompletion(false);\r\n                }\r\n            }\r\n            _this.processBasedOnSaveMarksAndAnnotationTriggeringPoint(_this.triggerPointAfterClose);\r\n            _this.triggerPointAfterClose = 0;\r\n        };\r\n        /**\r\n         * When standardisation setup is completed in background\r\n         */\r\n        _this.onStandardisationSetupCompletionInBackground = function () {\r\n            if (navigationStore.instance.containerPage === enums.PageContainers.WorkList) {\r\n                _this.setState({\r\n                    showSimulationExitedPopup: true,\r\n                    showAllSimulationExitedQigs: false\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * On simulation target completion\r\n         */\r\n        _this.onSimulationTargetCompletion = function () {\r\n            var navigateTo = qigStore.instance.navigateToAfterStdSetupCheck;\r\n            _this.setState({\r\n                showSimulationExitedPopup: false\r\n            });\r\n            if (!_this.state.showAllSimulationExitedQigs) {\r\n                if (navigateTo === enums.PageContainers.Message) {\r\n                    navigationHelper.loadMessagePage();\r\n                }\r\n                else if (navigateTo === enums.PageContainers.WorkList) {\r\n                    navigationHelper.loadWorklist();\r\n                }\r\n                else if (navigateTo === enums.PageContainers.TeamManagement) {\r\n                    navigationHelper.loadTeamManagement();\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * On getting the simulation exited qigs and locks in qigs data\r\n         */\r\n        _this.onSimulationExitedQigsAndLocksInQigsRecieved = function (isFromLogout) {\r\n            if (simulationModeHelper.isSimulationExitedQigDataAvailable) {\r\n                // If there are simulation exited qigs then show the popup\r\n                _this.setState({\r\n                    showSimulationExitedPopup: true,\r\n                    showAllSimulationExitedQigs: true\r\n                });\r\n            }\r\n            else if (simulationModeHelper.isLockInQigsDataAvailable) {\r\n                // Show locks if there is no simulation\r\n                qigActionCreator.showLocksInQigPopup(true, isFromLogout);\r\n            }\r\n        };\r\n        /**\r\n         * On standardisation setup completion\r\n         */\r\n        _this.onStandardisationSetupCompletion = function () {\r\n            if (qigStore.instance.isStandardisationsetupCompletedForTheQig &&\r\n                qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete) {\r\n                _this.setState({\r\n                    showSimulationExitedPopup: true,\r\n                    showAllSimulationExitedQigs: false\r\n                });\r\n            }\r\n            else if (qigStore.instance.navigateToAfterStdSetupCheck === enums.PageContainers.Login) {\r\n                // Checking whether there are any locked examiners currently, if the standardisation setup was not completed\r\n                // and the user was trying to logout.\r\n                qigActionCreator.getLocksInQigs(true);\r\n            }\r\n        };\r\n        /**\r\n         * On getting the simulation exited qigs data\r\n         */\r\n        _this.onSimulationExitedQigsRecieved = function () {\r\n            if (simulationModeHelper.isSimulationExitedQigDataAvailable) {\r\n                _this.setState({\r\n                    showSimulationExitedPopup: true,\r\n                    showAllSimulationExitedQigs: true\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Method to be invoked when browser is online.\r\n         */\r\n        _this.updateOnlineStatus = function () {\r\n            // sends ping to validate network is offline\r\n            applicationActionCreator.validateNetWorkStatus(true);\r\n        };\r\n        /**\r\n         * On ok click of submit response error popup\r\n         */\r\n        _this.onSubmitResponseErrorPopupOkClick = function () {\r\n            _this.setState({ isSubmitErrorPopDisplaying: false });\r\n            _this.initiateContentRefresh();\r\n            if (ecourseworkHelper.isECourseworkComponent) {\r\n                ecourseworkHelper.clearEcourseworkFileData();\r\n            }\r\n            else {\r\n                navigationHelper.loadWorklist();\r\n            }\r\n        };\r\n        /**\r\n         * On OK click of Autozoned message popup\r\n         */\r\n        _this.onAutozonedWarningMessageOkClick = function () {\r\n            //change the state to false to close the popup\r\n            _this.setState({ isAutozonedMessagePopupDisplaying: false });\r\n        };\r\n        /**\r\n         * On Ecoursework File data cleared\r\n         */\r\n        _this.onEcourseworkFileDataCleared = function () {\r\n            ecourseworkHelper.fetchECourseWorkCandidateScriptMetadata(null, true);\r\n            navigationHelper.loadWorklist();\r\n        };\r\n        /**\r\n         * on click select to mark popup in Std setup centre script\r\n         */\r\n        _this.onSelectStdSetupResponseToMark = function (popupType, provisionalQigDetails) {\r\n            var provisionalMarkingType = enums.ProvisionalMarkingType.None;\r\n            if (popupType === enums.PopUpType.SelectToMarkAsProvisional && _this.isCommonProvisionalStandardisationCcOn()) {\r\n                provisionalMarkingType = enums.ProvisionalMarkingType.AllocateToAll;\r\n            }\r\n            if (provisionalQigDetails) {\r\n                _this.populateCreateMultiQIGProvisionalsPopUpData(provisionalQigDetails);\r\n            }\r\n            _this.setState({ popUpType: popupType, provisionalMarkingType: provisionalMarkingType });\r\n        };\r\n        /**\r\n         * on cancel click of the select response to mark as provisional popup\r\n         */\r\n        _this.onCancelClickOfSelectResponseToMarkasProvisional = function () {\r\n            _this.setState({ popUpType: enums.PopUpType.None });\r\n        };\r\n        /**\r\n         * cancel click on mark as definitive popup.\r\n         */\r\n        _this.onCancelClickOnMarkAsDefinitivePopUp = function () {\r\n            _this.setState({ popUpType: enums.PopUpType.None });\r\n            _this.copyMarksAsDefinitiveSelected = true;\r\n        };\r\n        /**\r\n         * submit click on mark as definitive popup.\r\n         */\r\n        _this.submitClickOnMarkAsDefinitivePopUp = function () {\r\n            _this.setState({ popUpType: enums.PopUpType.None });\r\n            var standardisationResponseDataExaminerRoleId = 0;\r\n            var currentExaminerRoleId = 0;\r\n            var standardisationResponseData = standardisationSetupStore.instance.fetchStandardisationResponseData();\r\n            if (standardisationResponseData) {\r\n                standardisationResponseDataExaminerRoleId = standardisationResponseData.examinerRoleId;\r\n                currentExaminerRoleId = qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId;\r\n            }\r\n            standardisationActionCreator.copyMarksAndAnnotationsAsDefinitive(_this.copyMarksAsDefinitiveSelected, standardisationResponseDataExaminerRoleId !== currentExaminerRoleId, responseHelper.hasAdditionalObject);\r\n        };\r\n        /**\r\n         * on mark later clicked for select responses popup to move as provisional\r\n         */\r\n        _this.selectProvisionalMarkLaterClick = function () {\r\n            var markSchemeGroupIds = Array();\r\n            if (_this.multiQigCheckboxItems && _this.multiQigCheckboxItems.length > 1) {\r\n                _this.multiQigCheckboxItems.map(function (item) {\r\n                    if (item.isChecked) {\r\n                        markSchemeGroupIds.push(item.id);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                markSchemeGroupIds.push(standardisationSetupStore.instance.markSchemeGroupId);\r\n            }\r\n            standardisationActionCreator.createStandardisationRig(standardisationSetupStore.instance.examinerRoleId, standardisationSetupStore.instance.selectedResponseId, markSchemeGroupIds, enums.MarkingMode.PreStandardisation, false, _this.state.provisionalMarkingType);\r\n        };\r\n        /**\r\n         * on mark now clicked for select responses popup to move as provisional\r\n         */\r\n        _this.selectProvisionalMarkNowClick = function () {\r\n            var markSchemeGroupIds = Array();\r\n            if (_this.multiQigCheckboxItems && _this.multiQigCheckboxItems.length > 1) {\r\n                _this.multiQigCheckboxItems.map(function (item) {\r\n                    if (item.isChecked) {\r\n                        markSchemeGroupIds.push(item.id);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                markSchemeGroupIds.push(standardisationSetupStore.instance.markSchemeGroupId);\r\n            }\r\n            standardisationActionCreator.createStandardisationRig(standardisationSetupStore.instance.examinerRoleId, standardisationSetupStore.instance.selectedResponseId, markSchemeGroupIds, enums.MarkingMode.PreStandardisation, true, _this.state.provisionalMarkingType);\r\n        };\r\n        /**\r\n         * navigate to standardisation setup screen on mark later\r\n         */\r\n        _this.onStandardisationRigCreated = function (errorInRigCreation, doMarkNow) {\r\n            _this.setState({ popUpType: enums.PopUpType.None });\r\n            if (!errorInRigCreation) {\r\n                navigationHelper.loadStandardisationSetup();\r\n                // promise to get standardisation target details\r\n                var getStandardisationTargetDetails = standardisationActionCreator.getStandardisationTargetDetails(standardisationSetupStore.instance.markSchemeGroupId, standardisationSetupStore.instance.examinerRoleId);\r\n                getStandardisationTargetDetails.then(function (item) {\r\n                    // load select Responses details on coming from response\r\n                    var standardisationworlist = standardisationActionCreator.standardisationSetupWorkListSelection(doMarkNow ? enums.StandardisationSetup.ProvisionalResponse : enums.StandardisationSetup.SelectResponse, standardisationSetupStore.instance.markSchemeGroupId, standardisationSetupStore.instance.examinerRoleId);\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Reload unclassified worklist\r\n         */\r\n        _this.reRenderUnclassifiedWorklist = function (isFromResponse) {\r\n            // Update standardisation target details\r\n            _this.copyMarksAsDefinitiveSelected = true;\r\n            var getStandardisationTargetDetails = standardisationActionCreator.getStandardisationTargetDetails(standardisationSetupStore.instance.markSchemeGroupId, standardisationSetupStore.instance.examinerRoleId);\r\n            // Update unclassified worklist details\r\n            var standardisationWorklist = standardisationActionCreator.standardisationSetupWorkListSelection(enums.StandardisationSetup.UnClassifiedResponse, standardisationSetupStore.instance.markSchemeGroupId, standardisationSetupStore.instance.examinerRoleId);\r\n            // Response id in the unclassified worklist to which, the navigation should happen after classify action\r\n            var nextResponseId = markerOperationModeFactory.operationMode.nextResponseId(responseStore.instance.selectedDisplayId.toString());\r\n            // For classify actions from response scren\r\n            if (nextResponseId && isFromResponse) {\r\n                // Remember unclassified worklist view to go back after classify action\r\n                var stdWorklistView = standardisationSetupStore.instance.isTotalMarksViewSelected ?\r\n                    enums.STDWorklistViewType.ViewTotalMarks :\r\n                    enums.STDWorklistViewType.ViewMarksByQuestion;\r\n                var unclassifiedResponsesPromise = standardisationActionCreator.getUnClassifiedResponseDetails(standardisationSetupStore.instance.examinerRoleId, loginSession.EXAMINER_ID, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, false, stdWorklistView).then(function (item) {\r\n                    // On classifying response from response screen, navigate to next available response in the unclassified worklist\r\n                    navigationHelper.responseNavigation(enums.ResponseNavigation.next, false, parseInt(nextResponseId));\r\n                });\r\n                Promise.Promise.all([standardisationWorklist, unclassifiedResponsesPromise]).\r\n                    then(function () {\r\n                    _this.setState({ doShowClassifyResponseBusyIndicator: false });\r\n                });\r\n            }\r\n            else {\r\n                Promise.Promise.all([standardisationWorklist]).\r\n                    then(function () {\r\n                    _this.setState({ doShowClassifyResponseBusyIndicator: false });\r\n                });\r\n                // On classifying last response from response screen, navigate back to unclassified worklist.\r\n                navigationHelper.loadStandardisationSetup();\r\n            }\r\n        };\r\n        /**\r\n         * Reload provional worklist\r\n         */\r\n        _this.reRenderProvionalWorklist = function (fromMarkScheme) {\r\n            if (_this._showShareLoadingIndicatorForPE && fromMarkScheme) {\r\n                var stdWorklistView = standardisationSetupStore.instance.isTotalMarksViewSelected ? enums.STDWorklistViewType.ViewTotalMarks :\r\n                    enums.STDWorklistViewType.ViewMarksByQuestion;\r\n                var nextResponseId = markerOperationModeFactory.operationMode.nextResponseId(_this._shareResponseDetails.displayId.toString());\r\n                if (nextResponseId) {\r\n                    var responseData = standardisationSetupStore.instance.getResponseDetails(responseStore.instance.selectedDisplayId.toString());\r\n                    // remove shared response from provisional response worklist collection.\r\n                    standardisationActionCreator.updateStandardisationResponseCollection(responseData.esMarkGroupId, enums.StandardisationSetup.ProvisionalResponse);\r\n                    _this.setState({\r\n                        isBusy: false\r\n                    });\r\n                    navigationHelper.responseNavigation(enums.ResponseNavigation.next, false, parseInt(nextResponseId));\r\n                }\r\n                else {\r\n                    // if next response is not available then load worklist.\r\n                    navigationHelper.loadStandardisationSetup();\r\n                }\r\n                return;\r\n            }\r\n        };\r\n        /**\r\n         * on cancel click of reclassify multi option popup\r\n         */\r\n        _this.onCancelClickOfReclassifyMultiOptionPopUp = function () {\r\n            _this.reclassifyResponseDetails = undefined;\r\n            // Disable classify response 'OK button' while clicking on classify multi option popup 'cancel button'\r\n            if (_this.isUnclassifiedWorklistSelected()) {\r\n                _this.isClassifyResponseOkButtonDisabled = true;\r\n            }\r\n            _this.populateRecassifyMultiOptionPopUpData();\r\n            _this.setState({ popUpType: enums.PopUpType.None });\r\n        };\r\n        /**\r\n         * On cancel click of Reuse Rig action popup\r\n         */\r\n        _this.onCancelClickOfReuseRigPopup = function () {\r\n            _this.reuseRIGSelectedDisplayId = undefined;\r\n            _this.populateRecassifyMultiOptionPopUpData();\r\n            _this.populateReuseUnclassifyPopupItem();\r\n            _this.setState({ popUpType: enums.PopUpType.None });\r\n        };\r\n        /**\r\n         * On Ok mclick of ReuseRIG action popup\r\n         */\r\n        _this.onOKClickOfReuseRigpopup = function () {\r\n            var openedResponseDetails = standardisationSetupStore.instance.getReusableResponseDetails(_this.reuseRIGSelectedDisplayId.toString());\r\n            if (_this.reuseUnclassifyItem.filter(function (i) { return i.isChecked === true; })[0] === undefined) {\r\n                _this.currentMarkingMode = _this.items.filter(function (i) { return i.isChecked === true; })[0].id;\r\n            }\r\n            else {\r\n                _this.currentMarkingMode = enums.MarkingMode.PreStandardisation;\r\n            }\r\n            var documentId = openedResponseDetails.documentId;\r\n            var markGroupId = openedResponseDetails.esMarkGroupId;\r\n            var markSchemeGroupId = openedResponseDetails.markSchemeGroupId;\r\n            standardisationActionCreator.reuseRigAction(markGroupId, documentId, markSchemeGroupId, _this.currentMarkingMode);\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.None,\r\n                doShowReuseRigActionBusyIndicator: true\r\n            });\r\n        };\r\n        /**\r\n         * reclassify response to selected marking mode in popup\r\n         */\r\n        _this.onReclassifyResponse = function () {\r\n            // Fetch markSchemeGroupId\r\n            var markSchemeGroupId = standardisationSetupStore.instance.markSchemeGroupId;\r\n            // rig order update is not required for classify action\r\n            var rigOrderUpdateRequired = _this.isUnclassifiedWorklistSelected() ? false : true;\r\n            // Fetch the new marking mode id selected for reclassification\r\n            _this.currentMarkingMode = _this.items.filter(function (i) { return i.isChecked === true; })[0].id;\r\n            _this.previousMarkingMode = _this.reclassifyResponseDetails.markingModeId;\r\n            _this.displayId = _this.reclassifyResponseDetails.displayId;\r\n            // Construct the model for reclassifyResponseAction\r\n            var responseDetails = {\r\n                candidateScriptId: _this.reclassifyResponseDetails.candidateScriptId,\r\n                esCandidateScriptMarkSchemeGroupId: _this.reclassifyResponseDetails.esCandidateScriptMarkSchemeGroupId,\r\n                markSchemeGroupId: markSchemeGroupId,\r\n                markingModeId: _this.currentMarkingMode,\r\n                previousMarkingModeId: _this.reclassifyResponseDetails.markingModeId,\r\n                rigOrder: null,\r\n                isRigOrderUpdateRequired: rigOrderUpdateRequired,\r\n                displayId: _this.reclassifyResponseDetails.displayId,\r\n                totalMarkValue: _this.reclassifyResponseDetails.totalMarkValue,\r\n                oldRigOrder: _this.reclassifyResponseDetails.rigOrder,\r\n                assignNextRigOrder: _this.currentMarkingMode !== enums.MarkingMode.Seeding ? true : false,\r\n                esMarkGroupRowVersion: _this.reclassifyResponseDetails.esMarkGroupRowVersion\r\n            };\r\n            if (_this.isUnclassifiedWorklistSelected()) {\r\n                _this._classifyResponseDetails = responseDetails;\r\n                _this.isClassifyResponseOkButtonDisabled = true;\r\n                _this.setState({\r\n                    popUpType: enums.PopUpType.None,\r\n                    doShowClassifyResponseBusyIndicator: true\r\n                });\r\n                submitHelper.saveAndClassifyResponse(responseStore.instance.selectedMarkGroupId, _this._classifyResponseDetails);\r\n            }\r\n            else if (responseDetails.previousMarkingModeId !== responseDetails.markingModeId) {\r\n                // No need to call classify action if there are no changes in marking mode \r\n                // This reclassify action is being called when reclassify a response from response screen \r\n                standardisationActionCreator.reclassifyResponse(responseDetails, enums.PageContainers.Response);\r\n            }\r\n            // reset state \r\n            _this.reclassifyResponseDetails = undefined;\r\n            _this.populateRecassifyMultiOptionPopUpData();\r\n            var isBusy = !_this.isUnclassifiedWorklistSelected() ?\r\n                responseDetails.previousMarkingModeId !== responseDetails.markingModeId : false;\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.None,\r\n                doShowReclassifyResponseBusyIndicator: isBusy\r\n            });\r\n        };\r\n        /**\r\n         * Set the state of multi option popup type to Classify or Reclassify\r\n         */\r\n        _this.reclassifyMultiOptionPopupOpen = function (esMarkGroupId) {\r\n            _this.reclassifyResponseDetails =\r\n                standardisationSetupStore.instance.getResponseDetailsByEsMarkGroupIdBasedOnPermission(esMarkGroupId);\r\n            _this.populateRecassifyMultiOptionPopUpData(_this.reclassifyResponseDetails.markingModeId);\r\n            _this.setState({ popUpType: enums.PopUpType.ReclassifyMultiOption });\r\n        };\r\n        /**\r\n         * On clicking items in radio button popup\r\n         * @param item\r\n         */\r\n        _this.onCheckedChange = function (itemToBeUpdated) {\r\n            // set the isChecked property of the checked item to true\r\n            _this.items.map(function (i) {\r\n                i.isChecked = i.id === itemToBeUpdated.id ? true : false;\r\n            });\r\n            // Enable classify response OK button on selecting any of the classify response radio button options\r\n            if (_this.isUnclassifiedWorklistSelected) {\r\n                _this.isClassifyResponseOkButtonDisabled = false;\r\n            }\r\n            // If reuse popup then unchecked unclassify option when select classification\r\n            if (_this.reuseUnclassifyItem !== undefined) {\r\n                _this.reuseUnclassifyItem.map(function (i) {\r\n                    i.isChecked = false;\r\n                });\r\n            }\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * On clicking items in radio buton popup\r\n         */\r\n        _this.onReuseItemCheckedChange = function (itemToBeUpdated) {\r\n            _this.reuseUnclassifyItem.map(function (i) {\r\n                i.isChecked = i.id === itemToBeUpdated.id ? true : false;\r\n            });\r\n            // set the isChecked property of the not checked item to false\r\n            _this.items.map(function (i) {\r\n                i.isChecked = false;\r\n            });\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * Method called when reclassify popup open.\r\n         * @param reclassifiedResponseDetails\r\n         */\r\n        _this.reclassifyPopupOpen = function (reclassifiedResponseDetails) {\r\n            // Set the previous, current marking mode plus display id when we try to reclassify from worklist\r\n            // or within response.\r\n            _this.previousMarkingMode = reclassifiedResponseDetails.previousMarkingModeId;\r\n            _this.currentMarkingMode = reclassifiedResponseDetails.markingModeId;\r\n            _this.displayId = reclassifiedResponseDetails.displayId;\r\n        };\r\n        /**\r\n         * ReuseRIG action popup open\r\n         */\r\n        _this.reuseRigActionPopupOpen = function (displayId) {\r\n            _this.reuseRIGSelectedDisplayId = displayId;\r\n            _this.populateRecassifyMultiOptionPopUpData();\r\n            _this.populateReuseUnclassifyPopupItem();\r\n            var openedResponseDetails = standardisationSetupStore.instance.\r\n                getReusableResponseDetails(_this.reuseRIGSelectedDisplayId.toString());\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.ReuseRigAction\r\n            });\r\n        };\r\n        /**\r\n         * ReuseRIG action completed event\r\n         */\r\n        _this.reuseRigActionCompletedEvent = function () {\r\n            _this.reuseRIGSelectedDisplayId = undefined;\r\n            _this.populateRecassifyMultiOptionPopUpData();\r\n            _this.populateReuseUnclassifyPopupItem();\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.None,\r\n                doShowReuseRigActionBusyIndicator: false\r\n            });\r\n        };\r\n        /**\r\n         * Method to open Reclassify error popup\r\n         * whenever a fail in reclassify action.\r\n         */\r\n        _this.reclassifyErrorPopupOpen = function () {\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.ReclassifyError, doShowReclassifyResponseBusyIndicator: false\r\n            });\r\n        };\r\n        /**\r\n         * Method to hide Reclassify error popup on ok click.\r\n         */\r\n        _this.onReclassifyErrorMessageOkClick = function () {\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.None\r\n            });\r\n        };\r\n        /**\r\n         * Method to show the concurrent save fail popup\r\n         * while updating the same response marking mode by different user.\r\n         */\r\n        _this.concurrentSaveFailPopup = function (area) {\r\n            _this.concurrentSaveFailArea = area;\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.ConcurrentSaveFail,\r\n                doShowReclassifyResponseBusyIndicator: false,\r\n                doShowClassifyResponseBusyIndicator: false\r\n            });\r\n        };\r\n        /**\r\n         * Method to show the discard response fail popup while discarding the same response by different user.\r\n         */\r\n        _this.discardResponseFailPopup = function () {\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.DiscardResponseFail\r\n            });\r\n        };\r\n        /**\r\n         * Method to hide Concurrent Save Fail Popup on ok click.\r\n         */\r\n        _this.onConcurrentSaveFailPopupOkClick = function () {\r\n            // get the worklist view type.\r\n            var stdWorklistViewType = userOptionsHelper.getUserOptionByName(userOptionKeys.SELECTED_GRID_VIEW_OPTION)\r\n                === 'false' ? enums.STDWorklistViewType.ViewMarksByQuestion : enums.STDWorklistViewType.ViewTotalMarks;\r\n            if (_this.concurrentSaveFailArea === enums.PageContainers.Response) {\r\n                // when concurreny error occurs from response, navigate to ssu\r\n                navigationHelper.loadStandardisationSetup();\r\n            }\r\n            else {\r\n                if (standardisationSetupStore.instance.selectedStandardisationSetupWorkList\r\n                    === enums.StandardisationSetup.ClassifiedResponse) {\r\n                    // Refresh the Classified worklist grid with latest changes.\r\n                    standardisationActionCreator.getClassifiedResponseDetails(standardisationSetupStore.instance.examinerRoleId, loginSession.EXAMINER_ID, standardisationSetupStore.instance.markSchemeGroupId, false, stdWorklistViewType);\r\n                }\r\n                else {\r\n                    // Refresh the UnClassified worklist grid with latest changes.\r\n                    standardisationActionCreator.getUnClassifiedResponseDetails(standardisationSetupStore.instance.examinerRoleId, loginSession.EXAMINER_ID, standardisationSetupStore.instance.markSchemeGroupId, false, stdWorklistViewType);\r\n                }\r\n            }\r\n            // Reset concurrent Save Fail Area\r\n            _this.concurrentSaveFailArea = enums.PageContainers.None;\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.None\r\n            });\r\n        };\r\n        /**\r\n         * Method to hide discard response fail popup and navigate back to unclassified worklist with refreshed data.\r\n         */\r\n        _this.onDiscardResponseFailPopupOkClick = function () {\r\n            // get the worklist view type.\r\n            var stdWorklistViewType = userOptionsHelper.getUserOptionByName(userOptionKeys.SELECTED_GRID_VIEW_OPTION)\r\n                === 'false' ? enums.STDWorklistViewType.ViewMarksByQuestion : enums.STDWorklistViewType.ViewTotalMarks;\r\n            // Refresh the UnClassified worklist grid with latest data.\r\n            standardisationActionCreator.getUnClassifiedResponseDetails(standardisationSetupStore.instance.examinerRoleId, loginSession.EXAMINER_ID, standardisationSetupStore.instance.markSchemeGroupId, false, stdWorklistViewType);\r\n            navigationHelper.loadStandardisationSetup();\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.None\r\n            });\r\n        };\r\n        /**\r\n         * On clicking items in check box popup\r\n         * @param item\r\n         */\r\n        _this.onChecked = function (itemToBeUpdated) {\r\n            //// set the isChecked property of the checked item to true\r\n            _this.multiQigCheckboxItems.map(function (item) {\r\n                item.isChecked = item.id === itemToBeUpdated.id ? (item.isChecked ? false : true) : item.isChecked;\r\n            });\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * Popup element for note timestamp changed popup.\r\n         */\r\n        _this.onNoteTimeStampChangedPopupClose = function () {\r\n            _this.setState({ isNoteTimeStampChangedPopupVisible: false });\r\n        };\r\n        /**\r\n         * Popup element for response modified popup.\r\n         */\r\n        _this.onResponseModifiedPopupClose = function () {\r\n            _this.setState({ isResponseModifiedPopupVisibile: false });\r\n            navigationHelper.loadStandardisationSetup();\r\n        };\r\n        /**\r\n         * Sets the visibility of UnClassified response unavailable popup.\r\n         */\r\n        _this.unClassifiedScriptinStmUnavailable = function () {\r\n            _this.setState({\r\n                unClassifiedScriptinStmUnavailableVisible: true\r\n            });\r\n        };\r\n        /**\r\n         * Ok click action, on UnClassified unavailable popup.\r\n         */\r\n        _this.okClickOnUnavailablePopUp = function () {\r\n            _this.setState({\r\n                unClassifiedScriptinStmUnavailableVisible: false\r\n            });\r\n            navigationHelper.loadStandardisationSetup();\r\n        };\r\n        /**\r\n         *  Rerender rig not found pop up.\r\n         */\r\n        _this.showOrHideRigNotFoundPopup = function (showOrHideRigNotFound) {\r\n            _this.setState({ showRigNotFoundPopUp: showOrHideRigNotFound });\r\n        };\r\n        /**\r\n         *  Rerender Rig not found popup\r\n         */\r\n        _this.onRigNotFoundOkClick = function () {\r\n            _this.setState({ showRigNotFoundPopUp: false });\r\n        };\r\n        /**\r\n         *  Display confirmation dialog to share the response.\r\n         */\r\n        _this.shareResponsePopupOpen = function (shareResponseDetails, isSharedFromMarkScheme) {\r\n            // Set flag to display shareResponse Popup Or not.\r\n            _this._shareResponseDetails = shareResponseDetails;\r\n            _this._isSharedFromMarkScheme = isSharedFromMarkScheme;\r\n            _this._showShareLoadingIndicator = true;\r\n            _this.populateRecassifyMultiOptionPopUpData();\r\n            _this.populateShareForPEclassifyPopupItem();\r\n            if (standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.classify) {\r\n                _this._showShareLoadingIndicatorForPE = true;\r\n                _this.setState({\r\n                    isShareResponsePopupDisplayingForPE: true,\r\n                    isBusy: false\r\n                });\r\n            }\r\n            else {\r\n                _this.setState({\r\n                    isShareResponsePopupDisplaying: true,\r\n                    isBusy: false\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         *  Close Share Response dialog after clicking Cancel.\r\n         */\r\n        _this.shareResponsePopupClose = function () {\r\n            // Set flag to display shareResponse Popup Or not.\r\n            _this._showShareLoadingIndicator = false;\r\n            _this.setState({\r\n                isShareResponsePopupDisplaying: false,\r\n                isShareResponsePopupDisplayingForPE: false\r\n            });\r\n        };\r\n        /**\r\n         * share Provisional Response\r\n         */\r\n        _this.shareResponse = function () {\r\n            _this.setState({\r\n                isShareResponsePopupDisplaying: false,\r\n                isShareResponsePopupDisplayingForPE: false,\r\n                isBusy: true\r\n            });\r\n            var markingMode;\r\n            // Fetch markSchemeGroupId\r\n            var markSchemeGroupId = standardisationSetupStore.instance.markSchemeGroupId;\r\n            if (_this.IsShareAndClassifyOptionNeeded) {\r\n                markingMode = _this.items.filter(function (i) { return i.isChecked === true; })[0].id;\r\n            }\r\n            else {\r\n                markingMode = _this._shareResponseDetails.markingModeId;\r\n            }\r\n            /**\r\n             * mapping values on submit argument\r\n             */\r\n            _this._shareResponseArgument = {\r\n                markGroupIds: [_this._shareResponseDetails.esMarkGroupId],\r\n                markingMode: markingMode,\r\n                examinerRoleId: standardisationSetupStore.instance.examinerRoleId,\r\n                markSchemeGroupId: standardisationSetupStore.instance.markSchemeGroupId,\r\n                examinerApproval: examinerStore.instance.getMarkerInformation.approvalStatus,\r\n                isAdminRemarker: false\r\n            };\r\n            if (_this.IsShareAndClassifyOptionNeeded) {\r\n                if (_this._isSharedFromMarkScheme) {\r\n                    //invoke save and navigate Provisional Response\r\n                    markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.shareAndClassify);\r\n                }\r\n                else {\r\n                    submitActionCreator.shareAndClassifyResponse(_this._shareResponseArgument, _this._isSharedFromMarkScheme, _this._shareResponseDetails.displayId);\r\n                }\r\n            }\r\n            else {\r\n                if (_this._isSharedFromMarkScheme) {\r\n                    markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.submit);\r\n                }\r\n                else {\r\n                    submitActionCreator.submitResponse(_this._shareResponseArgument, standardisationSetupStore.instance.markSchemeGroupId, enums.WorklistType.none, enums.RemarkRequestType.Unknown, _this._isSharedFromMarkScheme, _this._shareResponseDetails.displayId);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * submitResponseFromMarkscheme will be called when the response is ready to navigate\r\n         */\r\n        _this.submitResponseFromMarkscheme = function () {\r\n            if (markingStore.instance.navigateTo === enums.SaveAndNavigate.shareAndClassify) {\r\n                submitHelper.saveAndShareAndClassifyResponse(_this._shareResponseArgument, _this._isSharedFromMarkScheme, _this._shareResponseDetails.displayId);\r\n            }\r\n        };\r\n        _this.state = {\r\n            doShowSavingMarksAndAnnotationsIndicator: false,\r\n            isNonRecoverableErrorPopupVisible: false,\r\n            isDisplayingGraceResponseLessthan100PercentageError: false,\r\n            isDisplayingGraceResponseExpiredError: false,\r\n            isDisplayingResponseRemovedError: false,\r\n            isOnline: applicationStore.instance.isOnline,\r\n            isBusy: false,\r\n            isApplicationOffline: false,\r\n            nonRecoverableSaveMarksAndAnnotationsErrorMessage: false,\r\n            isMarkingCheckCompleteConfirmationPopupDisplaying: false,\r\n            doShowPopup: false,\r\n            showSimulationResponseSubmitConfirmationPopup: false,\r\n            showSimulationExitedPopup: false,\r\n            showAllSimulationExitedQigs: false,\r\n            renderedOn: 0,\r\n            isShared: false,\r\n            doShowShareConfirmationPopup: false,\r\n            isQigsessionClosedError: false,\r\n            popUpType: enums.PopUpType.None,\r\n            isNoteTimeStampChangedPopupVisible: false,\r\n            isResponseModifiedPopupVisibile: false,\r\n            unClassifiedScriptinStmUnavailableVisible: false,\r\n            showRigNotFoundPopUp: false,\r\n            provisionalMarkingType: enums.ProvisionalMarkingType.None,\r\n            isSaveEmailMessageDisplaying: false,\r\n            isShareResponsePopupDisplaying: false,\r\n            isShareResponsePopupDisplayingForPE: false\r\n        };\r\n        _this.onYesClickOfLogoutConfirmation = _this.onYesClickOfLogoutConfirmation.bind(_this);\r\n        _this.onYesClickOfLogoutConfirmationAutoLogout = _this.onYesClickOfLogoutConfirmation.bind(_this, true);\r\n        _this.onNoClickOfLogoutConfirmation = _this.onNoClickOfLogoutConfirmation.bind(_this);\r\n        _this.onOkClickOfNonRecoverableErrorMessage = _this.onOkClickOfNonRecoverableErrorMessage.bind(_this);\r\n        _this.userActionInterrupted = _this.userActionInterrupted.bind(_this);\r\n        _this.onOkClickMandatoryMessageValidationPopup = _this.onOkClickMandatoryMessageValidationPopup.bind(_this);\r\n        _this.onPopupOkClick = _this.onPopupOkClick.bind(_this);\r\n        _this.ShowSupervisorSamplingCommentValidationPopup = _this.ShowSupervisorSamplingCommentValidationPopup.bind(_this);\r\n        _this.onOkClickOfResponseInGraceExpiredMessageOrResponseRemovedMessage =\r\n            _this.onOkClickOfResponseInGraceExpiredMessageOrResponseRemovedMessage.bind(_this);\r\n        /* setting submit confirmation yes/no functions to initialize. */\r\n        _this.onYesClickOfSubmitButton = _this.onYesClickOfSubmitButton.bind(_this);\r\n        _this.onNoClickOfSubmitButton = _this.onNoClickOfSubmitButton.bind(_this);\r\n        _this.onYesClickOfShareConfirmationPopup = _this.onYesClickOfShareConfirmationPopup.bind(_this);\r\n        _this.onNoClickOfShareConfirmationPopup = _this.onNoClickOfShareConfirmationPopup.bind(_this);\r\n        _this.OnOkClickOfMarkingCheckCompleteConfirmation = _this.OnOkClickOfMarkingCheckCompleteConfirmation.bind(_this);\r\n        _this.OnCancelClickOfMarkingCheckCompleteConfirmation = _this.OnCancelClickOfMarkingCheckCompleteConfirmation.bind(_this);\r\n        _this._boundOnlineStatusEvent = _this.updateOnlineStatus.bind(_this);\r\n        _this.isAutozonedMessagePopupVisible = _this.isAutozonedMessagePopupVisible.bind(_this);\r\n        _this.onSelectStdSetupResponseToMark = _this.onSelectStdSetupResponseToMark.bind(_this);\r\n        _this.onCompleteStandardisationSetup = _this.onCompleteStandardisationSetup.bind(_this);\r\n        _this.onOkClickofStandardisationSetupValidate = _this.onOkClickofStandardisationSetupValidate.bind(_this);\r\n        _this.resetBusyIndicatorStdSetupNotComplete = _this.resetBusyIndicatorStdSetupNotComplete.bind(_this);\r\n        _this.OnCancelClickOfCompleteStandardisationConfirmation = _this.OnCancelClickOfCompleteStandardisationConfirmation.bind(_this);\r\n        _this.OnOkClickOfCompleteStandardisationConfirmation = _this.OnOkClickOfCompleteStandardisationConfirmation.bind(_this);\r\n        _this.onResponseDataRecievedAfterRefresh = _this.onResponseDataRecievedAfterRefresh.bind(_this);\r\n        _this.onNoteTimeStampChangedPopupClose = _this.onNoteTimeStampChangedPopupClose.bind(_this);\r\n        _this.displayNoteSaveFailedPopup = _this.displayNoteSaveFailedPopup.bind(_this);\r\n        _this.reRenderUnclassifiedWorklist = _this.reRenderUnclassifiedWorklist.bind(_this);\r\n        _this.reRenderOnClassifiedResponseReceived = _this.reRenderOnClassifiedResponseReceived.bind(_this);\r\n        _this.shareResponse = _this.shareResponse.bind(_this);\r\n        _this.onOKClickOfReuseRigpopup = _this.onOKClickOfReuseRigpopup.bind(_this);\r\n        _this.populateReuseUnclassifyPopupItem = _this.populateReuseUnclassifyPopupItem.bind(_this);\r\n        _this.onReuseItemCheckedChange = _this.onReuseItemCheckedChange.bind(_this);\r\n        _this.onCancelClickOfReuseRigPopup = _this.onCancelClickOfReuseRigPopup.bind(_this);\r\n        _this.onCheckedChange = _this.onCheckedChange.bind(_this);\r\n        _this.shareResponsePopupOpen = _this.shareResponsePopupOpen.bind(_this);\r\n        _this.onSubmitResponseCompleted = _this.onSubmitResponseCompleted.bind(_this);\r\n        _this.reRenderProvionalWorklist = _this.reRenderProvionalWorklist.bind(_this);\r\n        _this.submitResponseFromMarkscheme = _this.submitResponseFromMarkscheme.bind(_this);\r\n        if (config.general.IDLE_TIMEOUT) {\r\n            _this._idleTimeOut = config.general.IDLE_TIMEOUT;\r\n        }\r\n        // One Issue noticed that the footer compoent is taking time to load sometimes. \r\n        // Because of this, some of the events are already passed. Recheck for the first time for one of the event.\r\n        if (qigStore.instance.getOverviewData === undefined) {\r\n            _this.onSimulationExitedQigsAndLocksInQigsRecieved(false);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    Footer.prototype.render = function () {\r\n        var isAskOnLogOutEnabled;\r\n        var confirmationDialog;\r\n        var busyIndicator;\r\n        var submitConfirmationDialog = (React.createElement(ConfirmationDialog, { content: this.submitConfirmationDialogueContent, header: this.submitConfirmationDialogueHeader, displayPopup: this.state.isSubmitConfirmationPopupDisplaying, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('generic.logout-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('generic.logout-dialog.yes-button'), onYesClick: this.onYesClickOfSubmitButton, onNoClick: this.onNoClickOfSubmitButton, isKeyBoardSupportEnabled: true, dialogType: enums.PopupDialogType.LogoutConfirmation }));\r\n        var shareConfirmationPopup = this.state.isShared ? (React.createElement(ConfirmationDialog, { content: localeStore.instance.TranslateText('marking.response.share-confirmation-popup.content'), header: null, displayPopup: this.state.doShowShareConfirmationPopup, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('marking.response.share-confirmation-popup.no-button'), yesButtonText: localeStore.instance.TranslateText('marking.response.share-confirmation-popup.yes-button'), onYesClick: this.onYesClickOfShareConfirmationPopup.bind(this), onNoClick: this.onNoClickOfShareConfirmationPopup.bind(this), dialogType: enums.PopupDialogType.ShareConfirmationPopup, isKeyBoardSupportEnabled: true })) : null;\r\n        var mandatoryMessageValidationPopup = (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('messaging.compose-message.mandatory-message-warning-dialog.body'), header: localeStore.instance.TranslateText('messaging.compose-message.mandatory-message-warning-dialog.header'), displayPopup: this.state.doShowMandatoryMessageValidationPopup, okButtonText: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.ok-button'), onOkClick: this.onOkClickMandatoryMessageValidationPopup.bind(this), id: 'mandatoryMessageValidationPopup', key: 'mandatoryMessageValidationPopup', popupDialogType: enums.PopupDialogType.none }));\r\n        var supervisorSamplingCommentValidationPopup = (React.createElement(GenericDialog, { content: this.messageDetails.messageString, header: this.messageDetails.messageHeader, displayPopup: this.state.doShowPopup, okButtonText: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.ok-button'), onOkClick: this.onPopupOkClick.bind(this), id: 'supervisorSamplingCommentValidationPopup', key: 'supervisorSamplingCommentValidationPopup', popupDialogType: enums.PopupDialogType.GenericMessage }));\r\n        var noteTimeStampChangedPopup = (React.createElement(GenericDialog, { content: this.messageDetails.messageString, header: this.messageDetails.messageHeader, displayPopup: this.state.isNoteTimeStampChangedPopupVisible, okButtonText: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.ok-button'), onOkClick: this.onNoteTimeStampChangedPopupClose.bind(this), id: 'noteTimeStampChangedPopup', key: 'noteTimeStampChangedPopup', popupDialogType: enums.PopupDialogType.GenericMessage }));\r\n        var responseModifiedPopup = (React.createElement(GenericDialog, { content: this.messageDetails.messageString, header: this.messageDetails.messageHeader, displayPopup: this.state.isResponseModifiedPopupVisibile, okButtonText: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.ok-button'), onOkClick: this.onResponseModifiedPopupClose.bind(this), id: 'responseMOdifiedPopup', key: 'responseMOdifiedPopup', popupDialogType: enums.PopupDialogType.GenericMessage }));\r\n        var simulationResponseSubmitConfirmationPopup = (React.createElement(ConfirmationDialog, { content: this.simulationResponseSubmitConfirmationDialogueContent, header: this.simulationResponseSubmitConfirmationDialogueHeader, displayPopup: this.state.showSimulationResponseSubmitConfirmationPopup, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('generic.logout-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('generic.logout-dialog.yes-button'), onYesClick: this.onYesClickOfSimulationResponseSubmitButton.bind(this), onNoClick: this.onNoClickOfSimulationResponseSubmitButton.bind(this), dialogType: enums.PopupDialogType.SimulationResponseSubmitConfirmation, isKeyBoardSupportEnabled: true }));\r\n        /** Getting Ask On LogOut value from user option */\r\n        isAskOnLogOutEnabled =\r\n            userOptionsHelper.getUserOptionByName(useroptionKeys.ASK_ON_LOG_OUT) === 'true'\r\n                ? true\r\n                : false;\r\n        /** this.props.isConfirmationPopupDisplaying check included here, in the initial load its value\r\n         *    will be false\r\n         */\r\n        if (!isAskOnLogOutEnabled &&\r\n            this.props.isLogoutConfirmationPopupDisplaying &&\r\n            !this.state.doShowSavingMarksAndAnnotationsIndicator &&\r\n            !this._onLogoutTriggered) {\r\n            this.onYesClickOfLogoutConfirmation();\r\n            /**this.props.isConfirmationPopupDisplaying check included here, if it is true will load the confirmation dialog\r\n             * content into confirmationDialog\r\n             */\r\n        }\r\n        else if (this.props.isLogoutConfirmationPopupDisplaying &&\r\n            !this.state.doShowSavingMarksAndAnnotationsIndicator &&\r\n            !this._onLogoutTriggered) {\r\n            confirmationDialog = (React.createElement(ConfirmationDialog, { content: localeStore.instance.TranslateText('generic.logout-dialog.body'), header: localeStore.instance.TranslateText('generic.logout-dialog.header'), displayPopup: this.props.isLogoutConfirmationPopupDisplaying, isCheckBoxVisible: true, noButtonText: localeStore.instance.TranslateText('generic.logout-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('generic.logout-dialog.yes-button'), onYesClick: this.onYesClickOfLogoutConfirmation, onNoClick: this.onNoClickOfLogoutConfirmation, dialogType: enums.PopupDialogType.LogoutConfirmation }));\r\n        }\r\n        if (this.state.isBusy) {\r\n            switch (busyIndicatorStore.instance.getBusyIndicatorInvoker) {\r\n                case enums.BusyIndicatorInvoker.submitInResponseScreen:\r\n                    busyIndicator = (React.createElement(BusyIndicator, { id: 'response_' +\r\n                            enums.BusyIndicatorInvoker.submitInResponseScreen.toString(), isBusy: this.state.isBusy, key: 'response_' +\r\n                            enums.BusyIndicatorInvoker.submitInResponseScreen.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.submitInResponseScreen, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n                    break;\r\n                case enums.BusyIndicatorInvoker.loadingHistoryDetails:\r\n                    busyIndicator = (React.createElement(BusyIndicator, { id: 'history_' +\r\n                            enums.BusyIndicatorInvoker.loadingHistoryDetails.toString(), isBusy: this.state.isBusy, key: 'history_' +\r\n                            enums.BusyIndicatorInvoker.loadingHistoryDetails.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.loadingHistoryDetails, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n                    break;\r\n                case enums.BusyIndicatorInvoker.validateStandardisationSetup:\r\n                    busyIndicator = (React.createElement(BusyIndicator, { id: 'std_' +\r\n                            enums.BusyIndicatorInvoker.validateStandardisationSetup.toString(), isBusy: this.state.isBusy, key: 'std_' +\r\n                            enums.BusyIndicatorInvoker.validateStandardisationSetup.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.validateStandardisationSetup, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n                    break;\r\n            }\r\n        }\r\n        if (this.state.isCompleteStandardisation && this.state.isBusy === true) {\r\n            busyIndicator = (React.createElement(BusyIndicator, { id: 'std_' +\r\n                    enums.BusyIndicatorInvoker.completingStandardisationSetup.toString(), isBusy: this.state.isBusy, key: 'std_' +\r\n                    enums.BusyIndicatorInvoker.completingStandardisationSetup.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.completingStandardisationSetup, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n        }\r\n        if (this.state.isBusy === true && (this._showShareLoadingIndicator || this._showShareLoadingIndicatorForPE)) {\r\n            busyIndicator = (React.createElement(BusyIndicator, { id: 'std_' +\r\n                    enums.BusyIndicatorInvoker.completingStandardisationSetup.toString(), isBusy: this.state.isBusy, key: 'std_' +\r\n                    enums.BusyIndicatorInvoker.completingStandardisationSetup.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.completingStandardisationSetup, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n        }\r\n        if (this.state.doShowSavingMarksAndAnnotationsIndicator) {\r\n            busyIndicator = (React.createElement(BusyIndicator, { id: 'response_' +\r\n                    enums.BusyIndicatorInvoker.savingMarksAndAnnotations.toString(), isBusy: this.state.doShowSavingMarksAndAnnotationsIndicator, key: 'response_' +\r\n                    enums.BusyIndicatorInvoker.savingMarksAndAnnotations.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.savingMarksAndAnnotations, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n        }\r\n        if (this.state.doShowReclassifyResponseBusyIndicator) {\r\n            busyIndicator = (React.createElement(BusyIndicator, { id: 'response_' +\r\n                    enums.BusyIndicatorInvoker.reclassifyResponse.toString(), isBusy: this.state.doShowReclassifyResponseBusyIndicator, key: 'response_' +\r\n                    enums.BusyIndicatorInvoker.reclassifyResponse.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.reclassifyResponse, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n        }\r\n        if (this.state.doShowReuseRigActionBusyIndicator) {\r\n            busyIndicator = (React.createElement(BusyIndicator, { id: 'response_' +\r\n                    enums.BusyIndicatorInvoker.reuseResponse.toString(), isBusy: this.state.doShowReuseRigActionBusyIndicator, key: 'response_' +\r\n                    enums.BusyIndicatorInvoker.reuseResponse.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.reuseResponse, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n        }\r\n        if (this.state.doShowClassifyResponseBusyIndicator) {\r\n            if (this.isUnclassifiedWorklistSelected()) {\r\n                busyIndicator = (React.createElement(BusyIndicator, { id: 'response_' +\r\n                        enums.BusyIndicatorInvoker.classifyResponse.toString(), isBusy: this.state.doShowClassifyResponseBusyIndicator, key: 'response_' +\r\n                        enums.BusyIndicatorInvoker.classifyResponse.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.classifyResponse, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n            }\r\n        }\r\n        var nonRecoverableErrorMessage = (React.createElement(GenericDialog, { content: this.saveMarksAndAnnotationsErrorDialogContents.content, header: this.saveMarksAndAnnotationsErrorDialogContents.header, multiLineContent: this.saveMarksAndAnnotationsErrorDialogContents.tableContent, displayPopup: this.state.isNonRecoverableErrorPopupVisible, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfNonRecoverableErrorMessage, id: 'nonRecoverableErrorMessge', key: 'marksAndAnnotationsErrorMessge', popupDialogType: enums.PopupDialogType.NonRecoverableDetailedError }));\r\n        var nonRecoverableSaveMarksAndAnnotationsErrorMessage = (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('marking.worklist.response-submission-error-dialog.body-single-response-not-submitted'), header: localeStore.instance.TranslateText('marking.worklist.response-submission-error-dialog.header'), displayPopup: this.state.nonRecoverableSaveMarksAndAnnotationsErrorMessage, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfNonRecoverableErrorMessage, id: 'nonRecoverableSaveMarksAndAnnotationErrorMessge', key: 'saveMarksAndAnnotationsErrorMessge', popupDialogType: enums.PopupDialogType.AllPageNotAnnotated }));\r\n        var gracePeriodResponseUnmarkedDialog = this.state\r\n            .isDisplayingGraceResponseLessthan100PercentageError ? this._failureReason ===\r\n            enums.ResponseNavigateFailureReason.MarksMissingInGracePeriodResponse ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.body-cannot-leave-response-partially-marked-in-grace'), header: localeStore.instance.TranslateText('marking.response.leaving-response-warning-dialog.header'), displayPopup: this.state.isDisplayingGraceResponseLessthan100PercentageError, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfResponseInGraceMessage.bind(this), id: 'responseInGraceMessage', key: 'responseInGraceMessageMessge', popupDialogType: enums.PopupDialogType.GracePeriodWarning })) : (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.body-must-annotate-all-pages-in-grace'), header: localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.header-must-annotate-all-pages-in-grace'), displayPopup: this.state.isDisplayingGraceResponseLessthan100PercentageError, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfResponseInGraceMessage.bind(this), id: 'responseInGraceMessage', key: 'responseInGraceMessageMessge', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var gracePeriodExpiredErrorDialog = this.state.isDisplayingGraceResponseExpiredError ? (React.createElement(GenericDialog, { content: this.getGracePeriodExpiredMessageBody(), header: localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.header-grace-period-expired'), displayPopup: this.state.isDisplayingGraceResponseExpiredError, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfResponseInGraceExpiredMessageOrResponseRemovedMessage, id: 'responseInGraceMessage', key: 'responseInGraceMessageMessge', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var responseRemovedErrorDialog = this.state.isDisplayingResponseRemovedError ? (React.createElement(GenericDialog, { content: this.getResponseRemovedErrorDialogMessageBody(), header: localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.header-response-removed-from-worklist'), displayPopup: this.state.isDisplayingResponseRemovedError, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfResponseInGraceExpiredMessageOrResponseRemovedMessage, id: 'response-removed-error-message', key: 'key-response-removed-error-message', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var confirmationDialogContent;\r\n        if (this.state.popUpType === enums.PopUpType.DiscardMessage) {\r\n            confirmationDialogContent = localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.body-discard');\r\n        }\r\n        else if (this.state.popUpType === enums.PopUpType.DiscardMessageNavigateAway) {\r\n            if (this.popUpData.popupContent) {\r\n                confirmationDialogContent = this.popUpData.popupContent;\r\n            }\r\n            else {\r\n                confirmationDialogContent = localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.body-navigated-away');\r\n            }\r\n        }\r\n        else {\r\n            confirmationDialogContent = localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.body-start-new-message-while-composing');\r\n        }\r\n        var discardMessageDialog = this.state.popUpType === enums.PopUpType.DiscardMessage ||\r\n            this.state.popUpType === enums.PopUpType.DiscardMessageNavigateAway ||\r\n            this.state.popUpType === enums.PopUpType.DiscardOnNewMessageButtonClick ? (React.createElement(ConfirmationDialog, { content: this.popUpData.popupContent ? (this.popUpData.popupContent) : (confirmationDialogContent), header: localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.header'), displayPopup: true, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.yes-button'), onYesClick: this.handlePopUpAction.bind(this, this.state.popUpType, enums.PopUpActionType.Yes), onNoClick: this.handlePopUpAction.bind(this, this.state.popUpType, enums.PopUpActionType.No), dialogType: enums.PopupDialogType.Message, isKeyBoardSupportEnabled: true })) : null;\r\n        var confirmationHeaderContent;\r\n        switch (this.state.popUpType) {\r\n            case enums.PopUpType.DiscardMessageOnNewException:\r\n            case enums.PopUpType.DiscardMessageOnViewExceptionButtonClick:\r\n                confirmationHeaderContent = localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.header');\r\n                break;\r\n            case enums.PopUpType.DiscardExceptionNavigateAway:\r\n                confirmationHeaderContent = localeStore.instance.TranslateText('marking.response.discard-exception-dialog.header');\r\n                confirmationDialogContent = localeStore.instance.TranslateText('marking.response.discard-exception-dialog.body-navigate-away');\r\n                break;\r\n            case enums.PopUpType.CloseException:\r\n                confirmationHeaderContent = localeStore.instance.TranslateText('marking.response.close-exception-dialog.header');\r\n                break;\r\n            default:\r\n                confirmationHeaderContent = localeStore.instance.TranslateText('marking.response.discard-exception-dialog.header');\r\n                confirmationDialogContent = localeStore.instance.TranslateText('marking.response.discard-exception-dialog.body-raise-new');\r\n                break;\r\n        }\r\n        var discardExceptionDialog = this.state.popUpType === enums.PopUpType.DiscardException ||\r\n            this.state.popUpType === enums.PopUpType.DiscardExceptionNavigateAway ||\r\n            this.state.popUpType === enums.PopUpType.DiscardOnNewExceptionButtonClick ||\r\n            this.state.popUpType === enums.PopUpType.DiscardMessageOnViewExceptionButtonClick ||\r\n            this.state.popUpType === enums.PopUpType.DiscardExceptionOnViewExceptionButtonClick ||\r\n            this.state.popUpType === enums.PopUpType.DiscardExceptionOnViewMessage ||\r\n            this.state.popUpType === enums.PopUpType.DiscardMessageOnNewException ||\r\n            this.state.popUpType === enums.PopUpType.DiscardExceptionOnNewMessage ||\r\n            this.state.popUpType === enums.PopUpType.CloseException ? (React.createElement(ConfirmationDialog, { content: this.popUpData.popupContent ? (this.popUpData.popupContent) : (confirmationDialogContent), header: confirmationHeaderContent, displayPopup: true, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('marking.response.discard-exception-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('marking.response.discard-exception-dialog.yes-button'), onYesClick: this.handlePopUpAction.bind(this, this.state.popUpType, enums.PopUpActionType.Yes), onNoClick: this.handlePopUpAction.bind(this, this.state.popUpType, enums.PopUpActionType.No), dialogType: enums.PopupDialogType.Exception, isKeyBoardSupportEnabled: true })) : null;\r\n        var mandatoryMessageDialog = this.state.popUpType === enums.PopUpType.MandatoryMessage ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('messaging.mandatory-message-dialog.body'), header: localeStore.instance.TranslateText('messaging.mandatory-message-dialog.header'), displayPopup: true, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.handlePopUpAction.bind(this, this.state.popUpType, enums.PopUpActionType.Ok), id: 'id_mandatory_message_dialog', key: 'key_mandatory_message_dialog', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var withdrawErrorDialog = this.state.isWithdrawnResponseError ? (React.createElement(GenericDialog, { content: this.getWithdrawnResponseErrorMessage(), header: localeStore.instance.TranslateText('marking.worklist.response-allocation-error-dialog.response-allocation-error-header-withdrawnMarker'), displayPopup: this.state.isWithdrawnResponseError, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfWithDrawErrorMessage.bind(this), id: 'withdrawResponseMessage', key: 'withdrawResponseMessageMessage', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var sessionClosedErrorDilaog = this.state.isQigsessionClosedError ? (React.createElement(GenericDialog, { content: this.getSessionClosedErrorMessage(), header: localeStore.instance.TranslateText('marking.worklist.request-marking-check-error-dialog.header-session-closed'), displayPopup: this.state.isQigsessionClosedError, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfWithDrawErrorMessage.bind(this), id: 'sessionClosedResponseMessage', key: 'sessionClosedResponseMessageMessage', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var responseSearchFailedErrorDialog = this.state.isResponseSearchFailed ? (React.createElement(GenericDialog, { content: this.getResponseSearchFailedErrorMessage(), header: localeStore.instance.TranslateText('generic.error-dialog.header'), displayPopup: this.state.isResponseSearchFailed, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfResponseSearchFailedErrorMessage.bind(this), id: 'removedResponseMessage', key: 'removedResponseMessageMessage', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var applicationOffLineErrorMessage = this.state.isApplicationOffline ? (React.createElement(GenericDialog, { content: this.offlineErrorMessage, header: localeStore.instance.TranslateText('generic.offline-dialog.header'), displayPopup: this.state.isApplicationOffline, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onApplicationErrorMessagePopUpClicked.bind(this), id: 'offlineErrorMessge', key: 'offlineErrorMessge', popupDialogType: enums.PopupDialogType.OffLineWarning })) : null;\r\n        var idleTimer = this.state.isOnline ? (React.createElement(IdleTimer, { idleAction: this.onYesClickOfLogoutConfirmationAutoLogout, timeout: this._idleTimeOut })) : null;\r\n        var noMarkingCheckAvailableMessage = this.state.popUpType === enums.PopUpType.NoMarkingCheckRequestPossible ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('marking.worklist.request-marking-check-error-dialog.body-no-examiners-available'), header: localeStore.instance.TranslateText('marking.worklist.request-marking-check-error-dialog.header-no-examiners-available'), displayPopup: this.state.doShowNoMarkingCheckAvailableMessage, okButtonText: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.ok-button'), onOkClick: this.handlePopUpAction.bind(this, this.state.popUpType, enums.PopUpActionType.Ok), id: 'id_no_marking_check_message', key: 'key_no_marking_check_message', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var markingCheckCompleteConfirmationPopup = this.state\r\n            .isMarkingCheckCompleteConfirmationPopupDisplaying ? (React.createElement(ConfirmationDialog, { content: localeStore.instance\r\n                .TranslateText('marking.worklist.perform-marking-check-confirmation-dialog.body')\r\n                .replace('{0}', worklistStore.instance.selectedMarkingCheckExaminer.toExaminer.fullName), header: localeStore.instance.TranslateText('marking.worklist.perform-marking-check-confirmation-dialog.header'), displayPopup: true, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('generic.user-menu.profile-section.cancel-email-button'), yesButtonText: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.ok-button'), onYesClick: this.OnOkClickOfMarkingCheckCompleteConfirmation, onNoClick: this.OnCancelClickOfMarkingCheckCompleteConfirmation, dialogType: enums.PopupDialogType.CompleteMarkingCheck, isKeyBoardSupportEnabled: true })) : null;\r\n        var warningMessagePopup = (React.createElement(WarningMessagePopup, { id: 'id_warning_message_popup', key: 'key_warning_message_popup', buttonText: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.ok-button') }));\r\n        var submitErrorPopup = this.state.isSubmitErrorPopDisplaying ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText(this.submitMessageErrorPopupContent.messageContent), header: localeStore.instance.TranslateText(this.submitMessageErrorPopupContent.messageHeader), displayPopup: this.state.isSubmitErrorPopDisplaying, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onSubmitResponseErrorPopupOkClick, id: 'submitErrorMessge', key: 'submitErrorMessge', popupDialogType: enums.PopupDialogType.SubmitResponseError })) : null;\r\n        //Pop up for displaying warning message on opening a QIG in an autozoned question paper\r\n        var autozonedWarningMessage = this.state.isAutozonedMessagePopupDisplaying ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('marking.worklist.autozoned-warning-dialog.body'), header: localeStore.instance.TranslateText('marking.worklist.autozoned-warning-dialog.header'), displayPopup: this.state.isAutozonedMessagePopupDisplaying, okButtonText: localeStore.instance.TranslateText('marking.worklist.autozoned-warning-dialog.ok-button'), onOkClick: this.onAutozonedWarningMessageOkClick, id: 'id_autozonedWarningMessage', key: 'key_autozonedWarningMessage', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        // popup when clicked on the select responses in Std setup - select to mark button\r\n        var selecttoMarkProvisionalDialog = this.state.popUpType === enums.PopUpType.SelectToMarkAsProvisional ? (React.createElement(MultiOptionConfirmationDialog, { content: this.getSelectToMarkProvisionalPopupContent, header: localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-header'), displayPopup: true, onCancelClick: this.onCancelClickOfSelectResponseToMarkasProvisional, onYesClick: this.selectProvisionalMarkNowClick, onNoClick: this.selectProvisionalMarkLaterClick, isKeyBoardSupportEnabled: true, selectedLanguage: this.props.selectedLanguage, popupSize: enums.PopupSize.Medium, popupType: enums.PopUpType.SelectToMarkAsProvisional, buttonCancelText: localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-button1'), buttonNoText: localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-button2'), buttonYesText: localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-button3'), displayNoButton: true })) : null;\r\n        var completeStandardisationPopup = this.props.isCompleteStandardisation && !this.state.isCompleteStandardisation ? (React.createElement(ConfirmationDialog, { content: localeStore.instance.TranslateText('standardisation-setup.left-panel.complete-standardisation-popup-body'), header: localeStore.instance.TranslateText('standardisation-setup.left-panel.complete-standardisation-popup-header'), displayPopup: true, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('generic.logout-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('generic.logout-dialog.yes-button'), onYesClick: this.OnOkClickOfCompleteStandardisationConfirmation, onNoClick: this.OnCancelClickOfCompleteStandardisationConfirmation, dialogType: enums.PopupDialogType.none, isKeyBoardSupportEnabled: true })) : null;\r\n        var completeStandardisationSetupPopup = this.state.popUpType === enums.PopUpType.CompleteStandardisationValidate ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('standardisation-setup.left-panel.complete-standardisation-validate-body'), header: localeStore.instance.TranslateText('standardisation-setup.left-panel.complete-standardisation-validate-header'), displayPopup: this.state.popUpType === enums.PopUpType.CompleteStandardisationValidate ? true : false, okButtonText: localeStore.instance.TranslateText('marking.worklist.autozoned-warning-dialog.ok-button'), onOkClick: this.onOkClickofStandardisationSetupValidate, id: 'id_standardisationsetupvalidate', key: 'key_autozonedWarningMessage', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var markAsDefinitiveDialog = this.state.popUpType === enums.PopUpType.MarkAsDefinitive ? (React.createElement(MultiOptionConfirmationDialog, { content: this.getMarkAsDefinitivePopupContent, header: localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-header'), displayPopup: true, onCancelClick: this.onCancelClickOnMarkAsDefinitivePopUp, onYesClick: this.submitClickOnMarkAsDefinitivePopUp, isKeyBoardSupportEnabled: true, selectedLanguage: this.props.selectedLanguage, popupSize: enums.PopupSize.Medium, popupType: enums.PopUpType.MarkAsDefinitive, buttonCancelText: localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-button1'), buttonYesText: localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-submit-button'), displayNoButton: false })) : null;\r\n        var header = this.isUnclassifiedWorklistSelected() ?\r\n            'standardisation-setup.standardisation-setup-worklist.classify-multioption-popup.header' :\r\n            'standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.header';\r\n        var reusepopupHeader = 'standardisation-setup.previous-session.reuse-action-popup.header';\r\n        var reuseRigActionMultiOptionDialog = this.state.popUpType === enums.PopUpType.ReuseRigAction ? (React.createElement(MultiOptionConfirmationDialog, { content: this.getReUseActionMultiOptionPopupContent, header: localeStore.instance.TranslateText(reusepopupHeader), displayPopup: true, isClassifyResponseOkButtonDisabled: false, onCancelClick: this.onCancelClickOfReuseRigPopup, onYesClick: this.onOKClickOfReuseRigpopup, isKeyBoardSupportEnabled: true, selectedLanguage: this.props.selectedLanguage, popupSize: enums.PopupSize.Medium, popupType: enums.PopUpType.ReuseRigAction, buttonCancelText: localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.cancel-button'), buttonYesText: localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.ok-button'), displayNoButton: false, key: 'key_reuseRigActionMultiOptionDialog' })) : null;\r\n        // Popup when clicked on unclassified worklsit 'classify' or classified worklsit 'reclassify' of a response\r\n        var reclassifyResponseMultiOptionDialog = this.state.popUpType === enums.PopUpType.ReclassifyMultiOption ? (React.createElement(MultiOptionConfirmationDialog, { content: this.getReclassificationMultiOptionPopupContent, header: localeStore.instance.TranslateText(header), displayPopup: true, isClassifyResponseOkButtonDisabled: this.isUnclassifiedWorklistSelected() ?\r\n                this.isClassifyResponseOkButtonDisabled : false, onCancelClick: this.onCancelClickOfReclassifyMultiOptionPopUp, onYesClick: this.onReclassifyResponse, isKeyBoardSupportEnabled: true, selectedLanguage: this.props.selectedLanguage, popupSize: enums.PopupSize.Medium, popupType: enums.PopUpType.ReclassifyMultiOption, buttonCancelText: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.cancel-button'), buttonYesText: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.ok-button'), displayNoButton: false, key: 'key_reclassifyResponseMultiOptionDialog' })) : null;\r\n        // Popup Dialog to notify user above reclassify failure.\r\n        var reclassifyErrorPopupDialog = (this.state.popUpType === enums.PopUpType.ReclassifyError ?\r\n            React.createElement(GenericDialog, { content: this.getReclassifyErrorPopupContent(), multiLineContent: null, header: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassifyerror-popup.header'), secondaryContent: null, displayPopup: true, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onReclassifyErrorMessageOkClick, id: 'reclassifyError', key: 'reclassifyErrorMessage', popupDialogType: enums.PopupDialogType.ReclassifyError, footerContent: null }) : null);\r\n        // Popup Dialog to notify user above concurrent save fail.\r\n        var concurrentSaveFailPopup = (this.state.popUpType === enums.PopUpType.ConcurrentSaveFail ?\r\n            React.createElement(GenericDialog, { content: this.classifyOrReclassifySaveFailPopUpContent, header: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.concurrent-esmarkingmode-save-fail-popup.header'), secondaryContent: null, displayPopup: true, okButtonText: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.concurrent-esmarkingmode-save-fail-popup.ok-button'), onOkClick: this.onConcurrentSaveFailPopupOkClick, id: 'concurrentSaveFailError', key: 'concurrentSaveFailErrorMessage', popupDialogType: enums.PopupDialogType.ConcurrentSaveFail, footerContent: null }) : null);\r\n        // Popup dialog to notify user that the current response has already been discarded.\r\n        var discardResponseFailPopup = (this.state.popUpType === enums.PopUpType.DiscardResponseFail ?\r\n            React.createElement(GenericDialog, { content: this.discardResponseFailPopUpContent, header: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.response-already-discarded-popup.header'), secondaryContent: null, displayPopup: true, okButtonText: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.response-already-discarded-popup.ok-button'), onOkClick: this.onDiscardResponseFailPopupOkClick, id: 'discardResponseFailError', key: 'concurrentSaveFailErrorMessage', popupDialogType: enums.PopupDialogType.DiscardResponse, footerContent: null }) : null);\r\n        // Popup Dialog to notify user above concurrent save fail.\r\n        var unClassifiedScriptinStmUnavailablePopup = (this.state.unClassifiedScriptinStmUnavailableVisible === true ?\r\n            React.createElement(GenericDialog, { content: stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.unclassified-script-unavailable-popup.content'), [responseStore.instance.selectedDisplayId.toString()]), header: localeStore.instance.TranslateText('standardisation-setup.unclassified-script-unavailable-popup.header'), secondaryContent: null, okButtonText: localeStore.instance.TranslateText('standardisation-setup.unclassified-script-unavailable-popup.ok-button'), onOkClick: this.okClickOnUnavailablePopUp, displayPopup: this.state.unClassifiedScriptinStmUnavailableVisible, id: 'unclassifiedscriptunavailable', key: 'unclassifiedscriptunavailableKey', popupDialogType: enums.PopupDialogType.none, footerContent: null }) : null);\r\n        var rigNotFoundDialog = this.state.showRigNotFoundPopUp ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('search-response.search-rig-not-found-content'), header: localeStore.instance.TranslateText('search-response.search-rig-not-found-title'), displayPopup: this.state.showRigNotFoundPopUp, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onRigNotFoundOkClick, id: 'rigNotFoundPopup', key: 'rigNotFoundPopup', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var saveEmailMessage = stringHelper.format(localeStore.instance.TranslateText('generic.user-menu.email-address-saved-dialog.body'), [String(String.fromCharCode(179))]);\r\n        var emailSaveMessage = (React.createElement(GenericDialog, { content: saveEmailMessage, header: localeStore.instance.TranslateText('generic.user-menu.email-address-saved-dialog.header'), displayPopup: this.state.isSaveEmailMessageDisplaying, okButtonText: localeStore.instance.TranslateText('marking.worklist.response-allocation-error-dialog.ok-button'), onOkClick: this.onOkClickOfEmailSucessMessage, id: 'emailSaveMessage', key: 'emailSaveMessage', popupDialogType: enums.PopupDialogType.ResponseAllocationError }));\r\n        var shareResponsePopup = this.state.isShareResponsePopupDisplayingForPE || this.state.isShareResponsePopupDisplaying ? (React.createElement(MultiOptionConfirmationDialog, { content: this.state.isShareResponsePopupDisplayingForPE ?\r\n                this.getShareResponsePopupContentForPE : this.getShareResponsePopupContent(), header: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.header'), displayPopup: true, onCancelClick: this.shareResponsePopupClose, onYesClick: this.shareResponse, onNoClick: null, isKeyBoardSupportEnabled: true, selectedLanguage: this.props.selectedLanguage, popupSize: enums.PopupSize.Medium, popupType: enums.PopUpType.ShareResponse, buttonCancelText: localeStore.instance\r\n                .TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.cancel-button'), buttonYesText: localeStore.instance\r\n                .TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.share-button'), buttonNoText: null, displayNoButton: false })) : null;\r\n        return (React.createElement(\"div\", null,\r\n            selecttoMarkProvisionalDialog,\r\n            markAsDefinitiveDialog,\r\n            completeStandardisationPopup,\r\n            completeStandardisationSetupPopup,\r\n            autozonedWarningMessage,\r\n            submitConfirmationDialog,\r\n            mandatoryMessageValidationPopup,\r\n            confirmationDialog,\r\n            busyIndicator,\r\n            nonRecoverableErrorMessage,\r\n            gracePeriodResponseUnmarkedDialog,\r\n            responseRemovedErrorDialog,\r\n            gracePeriodExpiredErrorDialog,\r\n            discardMessageDialog,\r\n            discardExceptionDialog,\r\n            withdrawErrorDialog,\r\n            mandatoryMessageDialog,\r\n            idleTimer,\r\n            nonRecoverableSaveMarksAndAnnotationsErrorMessage,\r\n            noMarkingCheckAvailableMessage,\r\n            markingCheckCompleteConfirmationPopup,\r\n            supervisorSamplingCommentValidationPopup,\r\n            warningMessagePopup,\r\n            this.renderSimulationExitedQigsPopup(),\r\n            this.renderLocksInQigPopUp(),\r\n            applicationOffLineErrorMessage,\r\n            responseSearchFailedErrorDialog,\r\n            simulationResponseSubmitConfirmationPopup,\r\n            submitErrorPopup,\r\n            shareConfirmationPopup,\r\n            sessionClosedErrorDilaog,\r\n            reclassifyResponseMultiOptionDialog,\r\n            reclassifyErrorPopupDialog,\r\n            concurrentSaveFailPopup,\r\n            noteTimeStampChangedPopup,\r\n            responseModifiedPopup,\r\n            unClassifiedScriptinStmUnavailablePopup,\r\n            rigNotFoundDialog,\r\n            emailSaveMessage,\r\n            shareResponsePopup,\r\n            reuseRigActionMultiOptionDialog,\r\n            discardResponseFailPopup));\r\n    };\r\n    /**\r\n     * componentDidMount\r\n     */\r\n    Footer.prototype.componentDidMount = function () {\r\n        userOptionStore.instance.addListener(userOptionStore.UseroptionStore.USER_OPTION_SAVE_ON_LOGOUT_EVENT, this.updateUserSession);\r\n        loginStore.instance.addListener(loginStore.LoginStore.UPDATE_SESSION_ON_LOGOUT_EVENT, this.clearSession);\r\n        loginStore.instance.addListener(loginStore.LoginStore.CONCURRENT_SESSION_ACTIVE, this.onConcurrentSessionActive);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.SAVE_MARKS_AND_ANNOTATIONS_EVENT, this.onSaveMarksAndAnnotations);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.READY_TO_NAVIGATE, this.navigateAwayFromResponse);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.TRIGGER_SAVING_MARKS_AND_ANNOTATIONS_EVENT, this.onSaveMarksAndAnnotationsTriggered);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.SET_NON_RECOVERABLE_ERROR_EVENT, this.onSetHasNonRecoverableError);\r\n        window.addEventListener('online', this._boundOnlineStatusEvent);\r\n        window.addEventListener('offline', this._boundOnlineStatusEvent);\r\n        window.addEventListener('beforeunload', navigationHelper.onBeforeWindowUnload);\r\n        window.addEventListener('resize', this.scrollIntoViewOnEditingTextForAndroid);\r\n        submitStore.instance.addListener(submitStore.SubmitStore.SUBMIT_RESPONSE_COMPLETED, this.onSubmitResponseCompleted);\r\n        submitStore.instance.addListener(submitStore.SubmitStore.SHARE_AND_CLASSIFY_RESPONSE_COMPLETED, this.reRenderProvionalWorklist);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_NAVIGATION_EVENT, this.onMessagePanelEdited);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.MARKINGMODE_CHANGED_IN_PROVISIONAL_RESPONSE_EVENT, this.unClassifiedScriptinStmUnavailable);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.SHOW_GRACE_PERIOD_NOT_FULLY_MARKED_MESSAGE, this.showResponseInGraceNotFullyMarkedMessage);\r\n        messageStore.instance.addListener(messageStore.MessageStore.POPUP_DISPLAY_EVENT, this.onPopUpDisplayEvent);\r\n        exceptionStore.instance.addListener(exceptionStore.ExceptionStore.EXCEPTION_DISCARD_POPUP_DISPLAY_EVENT, this.onPopUpDisplayEvent);\r\n        qigStore.instance.addListener(qigStore.QigStore.ACCEPT_QUALITY_ACTION_COMPLETED, this.onAcceptQualityFeedbackActionCompleted);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.RETRIEVE_MARKS_EVENT, this.marksRetrieved);\r\n        busyIndicatorStore.instance.addListener(busyIndicatorStore.BusyIndicatorStore.BUSY_INDICATOR, this.setBusyIndicator);\r\n        messageStore.instance.addListener(messageStore.MessageStore.UNREAD_MANDATORY_MESSAGE_STATUS_UPDATED, this.showMandatoryMessagePopup);\r\n        messageStore.instance.addListener(messageStore.MessageStore.UPDATE_NOTIFICATION_TRIGGERED_EVENT, this.onUpdateNotification);\r\n        applicationStore.instance.addListener(applicationStore.ApplicationStore.ACTION_INTERRUPTED_EVENT, this.userActionInterrupted);\r\n        submitStore.instance.addListener(submitStore.SubmitStore.SUBMIT_RESPONSE_STARTED, this.onSubmitResponseStarted);\r\n        examinerStore.instance.addListener(examinerStore.ExaminerStore.MARKER_INFO_UPDATED_EVENT, this.updateMarkerInformationPanel);\r\n        examinerStore.instance.addListener(examinerStore.ExaminerStore.QIG_SESSION_CLOSED_EVENT, this.updateQigForSessionClose);\r\n        messageStore.instance.addListener(messageStore.MessageStore.RESPONSE_DATA_RECEIVED_EVENT, this.onResponseDataReceived);\r\n        navigationStore.instance.addListener(navigationStore.NavigationStore.CONTAINER_CHANGE__EVENT, this.refreshState);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MANDATORY_MESSAGE_VALIDATION_POPUP_EVENT, this.mandatoryMessageValidationPopupVisibility);\r\n        messageStore.instance.addListener(messageStore.MessageStore.UPDATE_MESSAGE_PRIORITY_EVENT, this.messagePriorityUpdate);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.WORKLIST_MARKING_MODE_CHANGE, this.addToRecentHistory);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.WORKLIST_MARKING_MODE_CHANGE, this.resetBusyIndicator);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.NO_MARKING_CHECK_AVAILABLE_MESSAGE, this.showNoMarkingCheckAvailableMessage);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.OPEN_TEAM_MANAGEMENT_EVENT, this.onTeamManagementOpen);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.MY_TEAM_DATA_LOADED_EVENT, this.isAutozonedMessagePopupVisible);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.TEAM_EXCEPTIONS_DATA_LOADED_EVENT, this.isAutozonedMessagePopupVisible);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.HELP_EXAMINERS_DATA_RECEIVED, this.isAutozonedMessagePopupVisible);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.ADD_TO_HISTORY_EVENT, this.addToRecentHistory);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.MARKING_CHECK_COMPLETE_BUTTON_EVENT, this.markCheckCompleteButtonEvent);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.MARKING_CHECK_COMPLETED_EVENT, this.markCheckCompletedEvent);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.SAMPLING_STATUS_CHANGED_EVENT, this.ShowSupervisorSamplingCommentValidationPopup);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.EXAMINER_DRILL_DOWN_DATA_UPDATED, this.addToRecentHistory);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.FAILURE_WHILE_FETCHING_TEAM_DATA_EVENT, this.handleErrorNavigationTeamManagement);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.MY_TEAM_DATA_LOADED_EVENT, this.resetBusyIndicator);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.TEAM_EXCEPTIONS_DATA_LOADED_EVENT, this.resetBusyIndicator);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.HELP_EXAMINERS_DATA_RECEIVED, this.resetBusyIndicator);\r\n        qigStore.instance.addListener(qigStore.QigStore.SHOW_LOCKS_IN_QIG_POPUP, this.onShowLocksInQigsPopup);\r\n        qigStore.instance.addListener(qigStore.QigStore.QIG_SELECTED_FROM_LOCKED_LIST, this.onQigSelectedFromLockedList);\r\n        qigStore.instance.addListener(qigStore.QigStore.QIG_SELECTED_EVENT, this.navigateToQigFromLockedList);\r\n        qigStore.instance.addListener(qigStore.QigStore.LOCKS_IN_QIG_DATA_RETRIEVED, this.doLogoutPopup);\r\n        messageStore.instance.addListener(messageStore.MessageStore.RESPONSE_DATA_RECEIVED_FAILED_EVENT, this.onResponseDataReceivedFailed);\r\n        submitStore.instance.addListener(submitStore.SubmitStore.SHOW_SIMULATION_RESPONSE_SUBMIT_CONFIRMATION_EVENT, this.onshowSimulationResponseSubmitConfirmationPopup);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.STANDARDISATION_SETUP_COMPLETED_IN_BACKGROUND, this.onStandardisationSetupCompletionInBackground);\r\n        qigStore.instance.addListener(qigStore.QigStore.SIMULATION_EXITED_QIGS_AND_LOCKS_IN_QIGS_RETRIEVED, this.onSimulationExitedQigsAndLocksInQigsRecieved);\r\n        qigStore.instance.addListener(qigStore.QigStore.SIMULATION_TARGET_COMPLETED, this.onSimulationTargetCompletion);\r\n        qigStore.instance.addListener(qigStore.QigStore.STANDARDISATION_SETUP_COMPLETED_EVENT, this.onStandardisationSetupCompletion);\r\n        qigStore.instance.addListener(qigStore.QigStore.SIMULATION_EXITED_QIGS_RETRIEVED, this.onSimulationExitedQigsRecieved);\r\n        ccStore.instance.addListener(ccStore.ConfigurableCharacteristicsStore.EXAM_BODY_CC_GET, this.onExamBodyCCLoaded);\r\n        ecourseworkFileStore.instance.addListener(ecourseworkFileStore.ECourseWorkFileStore.ECOURSEWORK_FILE_DATA_CLEARED_EVENT, this.onEcourseworkFileDataCleared);\r\n        qigStore.instance.addListener(qigStore.QigStore.SAVE_ACETATES_DATA_ACTION_COMPLETED, this.resetAcetateSaveInProgressStatus);\r\n        qigStore.instance.addListener(qigStore.QigStore.SHARE_CONFIRMATION_EVENT, this.shareConfirmationPopup);\r\n        qigStore.instance.addListener(qigStore.QigStore.RESET_SHARED_ACETATES_COMPLETED, this.resetAcetateSaveInProgressStatus);\r\n        qigStore.instance.addListener(qigStore.QigStore.RESET_ACETATE_SAVE_IN_PROGRESS_STATUS_COMPLETED, this.onResetAcetatesSaveInProgressReceived);\r\n        targetSummaryStore.instance.addListener(targetSummaryStore.TargetSummaryStore.WORKLIST_INITIALISATION_COMPLETED, this.isAutozonedMessagePopupVisible);\r\n        imageZoneStore.instance.addListener(imageZoneStore.ImageZoneStore.EBOOK_IMAGEZONE_LOADED_EVENT, this.isAutozonedMessagePopupVisible);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .POPUP_OPEN_SELECT_TO_MARK_BUTTON_EVENT, this.onSelectStdSetupResponseToMark);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .STANDARDISATION_RIG_CREATED_EVENT, this.onStandardisationRigCreated);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .COMPLETE_STANDARDISATION_SETUP_EVENT, this.onCompleteStandardisationSetup);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .GET_STANDARDISATION_TARGET_DETAILS_EVENT, this.resetBusyIndicatorStdSetupNotComplete);\r\n        userinfostore.instance.addListener(userinfostore.UserInfoStore.SWITCH_USER_BUTTON_CLICK, this.switchUserButtonClick);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .STANDARDISATION_RESPONSE_DATA_UPDATED_EVENT, this.onResponseDataRecievedAfterRefresh);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .GET_STANDARDISATION_CENTRE_DETAILS_EVENT, this.onResponseDataRecievedAfterRefresh);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .MULTI_OPTION_POPUP_OPEN_RECLASSIFY_POPUP_EVENT, this.reclassifyMultiOptionPopupOpen);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.STANDARDISATION_SETUP_LEFT_PANEL_SELECT_EVENT, this.addToRecentHistory);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.POPUP_OPEN_RECLASSIFY_POPUP_EVENT, this.reclassifyPopupOpen);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .POPUP_OPEN_RECLASSIFY_ERROR_POPUP_EVENT, this.reclassifyErrorPopupOpen);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .CONCURRENT_SAVE_FAIL_EVENT, this.concurrentSaveFailPopup);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.CLASSIFY_RESPONSE_EVENT, this.reRenderUnclassifiedWorklist);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.SAVE_NOTE_COMPLETED_ACTION_EVENT, this.displayNoteSaveFailedPopup);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.RECLASSIFIED_RESPONSE_EVENT, this.reRenderOnClassifiedResponseReceived);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.DECLASSIFY_RESPONSE_EVENT, this.reRenderOnClassifiedResponseReceived);\r\n        responseStore.instance.addListener(responseStore.ResponseStore.RIG_NOT_FOUND_EVENT, this.showOrHideRigNotFoundPopup);\r\n        userinfostore.instance.addListener(userinfostore.UserInfoStore.USERINFO_SAVE, this.userInfoSaved);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.STANDARDISATION_SHARE_RESPONSE_POPUP_DISPLAY, this.shareResponsePopupOpen);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.REUSE_RIG_POPUP_DISPLAY_ACTION_EVENT, this.reuseRigActionPopupOpen);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.REUSE_RIG_ACTION_COMPLETED_EVENT, this.reuseRigActionCompletedEvent);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.RESPONSE_ALREADY_DISCARDED_EVENT, this.discardResponseFailPopup);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.READY_TO_NAVIGATE, this.submitResponseFromMarkscheme);\r\n    };\r\n    /**\r\n     * componentWillUnmount\r\n     */\r\n    Footer.prototype.componentWillUnmount = function () {\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.READY_TO_NAVIGATE, this.submitResponseFromMarkscheme);\r\n        userOptionStore.instance.removeListener(userOptionStore.UseroptionStore.USER_OPTION_SAVE_ON_LOGOUT_EVENT, this.updateUserSession);\r\n        loginStore.instance.removeListener(loginStore.LoginStore.UPDATE_SESSION_ON_LOGOUT_EVENT, this.clearSession);\r\n        loginStore.instance.removeListener(loginStore.LoginStore.CONCURRENT_SESSION_ACTIVE, this.onConcurrentSessionActive);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.SAVE_MARKS_AND_ANNOTATIONS_EVENT, this.onSaveMarksAndAnnotations);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.READY_TO_NAVIGATE, this.navigateAwayFromResponse);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.TRIGGER_SAVING_MARKS_AND_ANNOTATIONS_EVENT, this.onSaveMarksAndAnnotationsTriggered);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.SET_NON_RECOVERABLE_ERROR_EVENT, this.onSetHasNonRecoverableError);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.MARKINGMODE_CHANGED_IN_PROVISIONAL_RESPONSE_EVENT, this.unClassifiedScriptinStmUnavailable);\r\n        window.removeEventListener('online', this._boundOnlineStatusEvent);\r\n        window.removeEventListener('offline', this._boundOnlineStatusEvent);\r\n        window.removeEventListener('beforeunload', navigationHelper.onBeforeWindowUnload);\r\n        window.removeEventListener('resize', this.scrollIntoViewOnEditingTextForAndroid);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.SHOW_GRACE_PERIOD_NOT_FULLY_MARKED_MESSAGE, this.showResponseInGraceNotFullyMarkedMessage);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.POPUP_DISPLAY_EVENT, this.onPopUpDisplayEvent);\r\n        exceptionStore.instance.removeListener(exceptionStore.ExceptionStore.EXCEPTION_DISCARD_POPUP_DISPLAY_EVENT, this.onPopUpDisplayEvent);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.RETRIEVE_MARKS_EVENT, this.marksRetrieved);\r\n        qigStore.instance.removeListener(qigStore.QigStore.ACCEPT_QUALITY_ACTION_COMPLETED, this.onAcceptQualityFeedbackActionCompleted);\r\n        submitStore.instance.removeListener(submitStore.SubmitStore.SUBMIT_RESPONSE_COMPLETED, this.onSubmitResponseCompleted);\r\n        submitStore.instance.removeListener(submitStore.SubmitStore.SHARE_AND_CLASSIFY_RESPONSE_COMPLETED, this.reRenderProvionalWorklist);\r\n        busyIndicatorStore.instance.removeListener(busyIndicatorStore.BusyIndicatorStore.BUSY_INDICATOR, this.setBusyIndicator);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.UNREAD_MANDATORY_MESSAGE_STATUS_UPDATED, this.showMandatoryMessagePopup);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.UPDATE_NOTIFICATION_TRIGGERED_EVENT, this.onUpdateNotification);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_NAVIGATION_EVENT, this.onMessagePanelEdited);\r\n        applicationStore.instance.removeListener(applicationStore.ApplicationStore.ACTION_INTERRUPTED_EVENT, this.userActionInterrupted);\r\n        submitStore.instance.removeListener(submitStore.SubmitStore.SUBMIT_RESPONSE_STARTED, this.onSubmitResponseStarted);\r\n        examinerStore.instance.removeListener(examinerStore.ExaminerStore.MARKER_INFO_UPDATED_EVENT, this.updateMarkerInformationPanel);\r\n        examinerStore.instance.removeListener(examinerStore.ExaminerStore.QIG_SESSION_CLOSED_EVENT, this.updateQigForSessionClose);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.RESPONSE_DATA_RECEIVED_EVENT, this.onResponseDataReceived);\r\n        navigationStore.instance.removeListener(navigationStore.NavigationStore.CONTAINER_CHANGE__EVENT, this.refreshState);\r\n        //timerHelper.clearInterval();\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MANDATORY_MESSAGE_VALIDATION_POPUP_EVENT, this.mandatoryMessageValidationPopupVisibility);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.UPDATE_MESSAGE_PRIORITY_EVENT, this.messagePriorityUpdate);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.WORKLIST_MARKING_MODE_CHANGE, this.addToRecentHistory);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.WORKLIST_MARKING_MODE_CHANGE, this.resetBusyIndicator);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.NO_MARKING_CHECK_AVAILABLE_MESSAGE, this.showNoMarkingCheckAvailableMessage);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.OPEN_TEAM_MANAGEMENT_EVENT, this.onTeamManagementOpen);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.MY_TEAM_DATA_LOADED_EVENT, this.isAutozonedMessagePopupVisible);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.TEAM_EXCEPTIONS_DATA_LOADED_EVENT, this.isAutozonedMessagePopupVisible);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.HELP_EXAMINERS_DATA_RECEIVED, this.isAutozonedMessagePopupVisible);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.ADD_TO_HISTORY_EVENT, this.addToRecentHistory);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.MARKING_CHECK_COMPLETE_BUTTON_EVENT, this.markCheckCompleteButtonEvent);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.MARKING_CHECK_COMPLETED_EVENT, this.markCheckCompletedEvent);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.SAMPLING_STATUS_CHANGED_EVENT, this.ShowSupervisorSamplingCommentValidationPopup);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.EXAMINER_DRILL_DOWN_DATA_UPDATED, this.addToRecentHistory);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.FAILURE_WHILE_FETCHING_TEAM_DATA_EVENT, this.handleErrorNavigationTeamManagement);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.MY_TEAM_DATA_LOADED_EVENT, this.resetBusyIndicator);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.TEAM_EXCEPTIONS_DATA_LOADED_EVENT, this.resetBusyIndicator);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.HELP_EXAMINERS_DATA_RECEIVED, this.resetBusyIndicator);\r\n        qigStore.instance.removeListener(qigStore.QigStore.SHOW_LOCKS_IN_QIG_POPUP, this.onShowLocksInQigsPopup);\r\n        qigStore.instance.removeListener(qigStore.QigStore.QIG_SELECTED_FROM_LOCKED_LIST, this.onQigSelectedFromLockedList);\r\n        qigStore.instance.removeListener(qigStore.QigStore.QIG_SELECTED_EVENT, this.navigateToQigFromLockedList);\r\n        qigStore.instance.removeListener(qigStore.QigStore.LOCKS_IN_QIG_DATA_RETRIEVED, this.doLogoutPopup);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.RESPONSE_DATA_RECEIVED_FAILED_EVENT, this.onResponseDataReceivedFailed);\r\n        submitStore.instance.removeListener(submitStore.SubmitStore.SHOW_SIMULATION_RESPONSE_SUBMIT_CONFIRMATION_EVENT, this.onshowSimulationResponseSubmitConfirmationPopup);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.STANDARDISATION_SETUP_COMPLETED_IN_BACKGROUND, this.onStandardisationSetupCompletionInBackground);\r\n        qigStore.instance.removeListener(qigStore.QigStore.SIMULATION_EXITED_QIGS_AND_LOCKS_IN_QIGS_RETRIEVED, this.onSimulationExitedQigsAndLocksInQigsRecieved);\r\n        qigStore.instance.removeListener(qigStore.QigStore.SIMULATION_TARGET_COMPLETED, this.onSimulationTargetCompletion);\r\n        qigStore.instance.removeListener(qigStore.QigStore.STANDARDISATION_SETUP_COMPLETED_EVENT, this.onStandardisationSetupCompletion);\r\n        qigStore.instance.removeListener(qigStore.QigStore.SIMULATION_EXITED_QIGS_RETRIEVED, this.onSimulationExitedQigsRecieved);\r\n        ccStore.instance.removeListener(ccStore.ConfigurableCharacteristicsStore.EXAM_BODY_CC_GET, this.onExamBodyCCLoaded);\r\n        ecourseworkFileStore.instance.removeListener(ecourseworkFileStore.ECourseWorkFileStore.ECOURSEWORK_FILE_DATA_CLEARED_EVENT, this.onEcourseworkFileDataCleared);\r\n        qigStore.instance.removeListener(qigStore.QigStore.SAVE_ACETATES_DATA_ACTION_COMPLETED, this.resetAcetateSaveInProgressStatus);\r\n        qigStore.instance.removeListener(qigStore.QigStore.SHARE_CONFIRMATION_EVENT, this.shareConfirmationPopup);\r\n        qigStore.instance.removeListener(qigStore.QigStore.RESET_SHARED_ACETATES_COMPLETED, this.resetAcetateSaveInProgressStatus);\r\n        qigStore.instance.removeListener(qigStore.QigStore.RESET_ACETATE_SAVE_IN_PROGRESS_STATUS_COMPLETED, this.onResetAcetatesSaveInProgressReceived);\r\n        targetSummaryStore.instance.removeListener(targetSummaryStore.TargetSummaryStore.WORKLIST_INITIALISATION_COMPLETED, this.isAutozonedMessagePopupVisible);\r\n        imageZoneStore.instance.removeListener(imageZoneStore.ImageZoneStore.EBOOK_IMAGEZONE_LOADED_EVENT, this.isAutozonedMessagePopupVisible);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .POPUP_OPEN_SELECT_TO_MARK_BUTTON_EVENT, this.onSelectStdSetupResponseToMark);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .STANDARDISATION_RIG_CREATED_EVENT, this.onStandardisationRigCreated);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .COMPLETE_STANDARDISATION_SETUP_EVENT, this.onCompleteStandardisationSetup);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .GET_STANDARDISATION_TARGET_DETAILS_EVENT, this.resetBusyIndicatorStdSetupNotComplete);\r\n        userinfostore.instance.removeListener(userinfostore.UserInfoStore.SWITCH_USER_BUTTON_CLICK, this.switchUserButtonClick);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .STANDARDISATION_RESPONSE_DATA_UPDATED_EVENT, this.onResponseDataRecievedAfterRefresh);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .GET_STANDARDISATION_CENTRE_DETAILS_EVENT, this.onResponseDataRecievedAfterRefresh);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .MULTI_OPTION_POPUP_OPEN_RECLASSIFY_POPUP_EVENT, this.reclassifyMultiOptionPopupOpen);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.STANDARDISATION_SETUP_LEFT_PANEL_SELECT_EVENT, this.addToRecentHistory);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.POPUP_OPEN_RECLASSIFY_POPUP_EVENT, this.reclassifyPopupOpen);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .POPUP_OPEN_RECLASSIFY_ERROR_POPUP_EVENT, this.reclassifyErrorPopupOpen);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .CONCURRENT_SAVE_FAIL_EVENT, this.concurrentSaveFailPopup);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.CLASSIFY_RESPONSE_EVENT, this.reRenderUnclassifiedWorklist);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.SAVE_NOTE_COMPLETED_ACTION_EVENT, this.displayNoteSaveFailedPopup);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.RECLASSIFIED_RESPONSE_EVENT, this.reRenderOnClassifiedResponseReceived);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.DECLASSIFY_RESPONSE_EVENT, this.reRenderOnClassifiedResponseReceived);\r\n        responseStore.instance.removeListener(responseStore.ResponseStore.RIG_NOT_FOUND_EVENT, this.showOrHideRigNotFoundPopup);\r\n        userinfostore.instance.removeListener(userinfostore.UserInfoStore.USERINFO_SAVE, this.userInfoSaved);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.STANDARDISATION_SHARE_RESPONSE_POPUP_DISPLAY, this.shareResponsePopupOpen);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.REUSE_RIG_POPUP_DISPLAY_ACTION_EVENT, this.reuseRigActionPopupOpen);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.REUSE_RIG_ACTION_COMPLETED_EVENT, this.reuseRigActionCompletedEvent);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.RESPONSE_ALREADY_DISCARDED_EVENT, this.discardResponseFailPopup);\r\n    };\r\n    /**\r\n     * Set the confirmation dialogue state\r\n     * @param stateValue The state value\r\n     */\r\n    Footer.prototype.setConfirmationDialogueState = function (stateValue) {\r\n        this.setState({\r\n            isSubmitConfirmationPopupDisplaying: stateValue\r\n        });\r\n    };\r\n    /**\r\n     * On yes click of submit response confirmation pop up\r\n     */\r\n    Footer.prototype.onYesClickOfSubmitButton = function () {\r\n        this.setConfirmationDialogueState(false);\r\n        this.submitResponse();\r\n    };\r\n    /**\r\n     * submit response/s\r\n     */\r\n    Footer.prototype.submitResponse = function () {\r\n        var busyIndicatorInvoker;\r\n        var submitResponseArgument;\r\n        /**\r\n         * if markgroupid is greater than zero, then its single response submit\r\n         */\r\n        busyIndicatorInvoker =\r\n            submitStore.instance.getMarkGroupId > 0\r\n                ? enums.BusyIndicatorInvoker.submit\r\n                : enums.BusyIndicatorInvoker.submitAll;\r\n        /**\r\n         * Show busy indicator on submitting response\r\n         */\r\n        busyIndicatorActionCreator.setBusyIndicatorInvoker(busyIndicatorInvoker);\r\n        /**\r\n         * Submitting  responses initiated\r\n         * Select the mark group list based on the current response mode\r\n         */\r\n        var markGroupIdList = worklistComponentHelper.getMarkgroupIdCollectionForSubmit(targetHelper.getSelectedQigMarkingMode());\r\n        var qiglist = qigStore.instance.relatedQigList;\r\n        var examinerRoleIdList = new Array();\r\n        qiglist\r\n            ? qiglist.map(function (x) {\r\n                examinerRoleIdList.push(x.examinerRoleId);\r\n            })\r\n            : (examinerRoleIdList = null);\r\n        var markSchemeGroupIds = new Array();\r\n        qiglist\r\n            ? qiglist.map(function (x) {\r\n                markSchemeGroupIds.push(x.markSchemeGroupId);\r\n            })\r\n            : (markSchemeGroupIds = null);\r\n        /**\r\n         * mapping  values on submit argument\r\n         */\r\n        submitResponseArgument = {\r\n            markGroupIds: markGroupIdList,\r\n            markingMode: targetHelper.getSelectedQigMarkingMode(),\r\n            examinerRoleId: qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId,\r\n            markSchemeGroupId: qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId,\r\n            examinerApproval: examinerStore.instance.getMarkerInformation.approvalStatus,\r\n            isAdminRemarker: loginStore.instance.isAdminRemarker\r\n        };\r\n        var worklistType = worklistStore.instance.currentWorklistType;\r\n        var remarkRequestType = worklistComponentHelper.getRemarkRequestType(worklistType);\r\n        /**\r\n         * calling to send data to server\r\n         */\r\n        var displayId = submitStore.instance.isSubmitFromMarkScheme\r\n            ? responseStore.instance.selectedDisplayId.toString()\r\n            : undefined;\r\n        submitActionCreator.submitResponse(submitResponseArgument, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, worklistType, remarkRequestType, submitStore.instance.isSubmitFromMarkScheme, displayId, examinerRoleIdList, markSchemeGroupIds);\r\n    };\r\n    /**\r\n     * On no click of submit response confirmation pop up\r\n     */\r\n    Footer.prototype.onNoClickOfSubmitButton = function () {\r\n        this.setConfirmationDialogueState(false);\r\n    };\r\n    /**\r\n     * this function is called on \"yes\" click of logout confirmation popup. This will trigger logout.\r\n     */\r\n    Footer.prototype.onYesClickOfLogoutConfirmation = function (isAutoLogOut) {\r\n        if (isAutoLogOut === void 0) { isAutoLogOut = false; }\r\n        /**\r\n         * Setting to true as the logout has been triggered\r\n         */\r\n        this._onLogoutTriggered = true;\r\n        /**\r\n         * Setting the value to identify whether it is from idle timeout\r\n         */\r\n        this._isAutoLogOut = isAutoLogOut;\r\n        switch (navigationStore.instance.containerPage) {\r\n            case enums.PageContainers.QigSelector:\r\n            case enums.PageContainers.Message:\r\n            case enums.PageContainers.Reports:\r\n                var _rememberQig = new rememberQig();\r\n                _rememberQig.qigId = 0;\r\n                _rememberQig.area = enums.QigArea.QigSelector;\r\n                userOptionsHelper.save(userOptionKeys.REMEMBER_PREVIOUS_QIG, JSON.stringify(_rememberQig));\r\n                break;\r\n        }\r\n        /**\r\n         * Saving changed user options if any of them changed\r\n         */\r\n        if (userOptionsHelper.hasUserOptionsChanged) {\r\n            userOptionsHelper.InitiateSaveUserOption(true);\r\n        }\r\n        else {\r\n            this.updateUserSession();\r\n        }\r\n    };\r\n    /**\r\n     * to update message priority\r\n     */\r\n    Footer.prototype.onOkClickMandatoryMessageValidationPopup = function () {\r\n        messagingActionCreator.updateMessagePriority();\r\n    };\r\n    /**\r\n     * Return true if the selected standardisation tab is unclassified\r\n     */\r\n    Footer.prototype.isUnclassifiedWorklistSelected = function () {\r\n        return standardisationSetupStore.instance.selectedStandardisationSetupWorkList === enums.StandardisationSetup.UnClassifiedResponse;\r\n    };\r\n    /**\r\n     * hides the popup\r\n     */\r\n    Footer.prototype.onPopupOkClick = function () {\r\n        this.setState({ doShowPopup: false });\r\n        // If the object has the mark group Id, Call navigate method for completing actions.\r\n        if (this.messageDetails.submittedMarkGroupIds &&\r\n            this.messageDetails.submittedMarkGroupIds.length > 0) {\r\n            this.navigateAfterSubmit(this.messageDetails.submittedMarkGroupIds, this.messageDetails.displayId, this.messageDetails.isFromMarkScheme);\r\n            this.messageDetails.submittedMarkGroupIds = [];\r\n        }\r\n    };\r\n    /**\r\n     * shows the popup\r\n     */\r\n    Footer.prototype.ShowSupervisorSamplingCommentValidationPopup = function (supervisorSamplingCommentReturn) {\r\n        if (supervisorSamplingCommentReturn.isSampled) {\r\n            this.messageDetails = {\r\n                messageHeader: localeStore.instance.TranslateText('team-management.response.sampling-error-dialog-already-sampled.body'),\r\n                messageString: localeStore.instance.TranslateText('team-management.response.sampling-error-dialog-already-sampled.header')\r\n            };\r\n            this.setState({ doShowPopup: true });\r\n        }\r\n    };\r\n    /**\r\n     * this function is called on 'No' click of logout confirmation popup.This will call a method in the container.\r\n     */\r\n    Footer.prototype.onNoClickOfLogoutConfirmation = function () {\r\n        this.props.resetLogoutConfirmationSatus();\r\n    };\r\n    /**\r\n     * Non-Recoverable marks and annotation save error message ok click\r\n     */\r\n    Footer.prototype.onOkClickOfNonRecoverableErrorMessage = function () {\r\n        // close the non-recoverable error popup on submit if it is already open.\r\n        if (this.state.nonRecoverableSaveMarksAndAnnotationsErrorMessage) {\r\n            this.setState({\r\n                nonRecoverableSaveMarksAndAnnotationsErrorMessage: false\r\n            });\r\n        }\r\n        // close the non-recoverable error popup.\r\n        if (this.state.isNonRecoverableErrorPopupVisible) {\r\n            this.setState({\r\n                isNonRecoverableErrorPopupVisible: false\r\n            });\r\n        }\r\n        // This will clear the marks and annotations with non-recoverable error from store collection.\r\n        // This will reload by background call or while opening the response.\r\n        marksAndAnnotationsSaveHelper.clearMarksAndAnnotationsForNonRecoverableErrors();\r\n        // Calling the processBasedOnSaveMarksAndAnnotationTriggeringPoint on Submit will make the DB call.\r\n        // refresh and navigate to worklist if there is an error.\r\n        if (this.currentSaveMarksAndAnnotationTriggeringPoint ===\r\n            enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Submit) {\r\n            navigationHelper.loadContainerIfNeeded(enums.PageContainers.WorkList, enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse);\r\n            this.initiateContentRefresh();\r\n        }\r\n        else {\r\n            this.processBasedOnSaveMarksAndAnnotationTriggeringPoint(this.currentSaveMarksAndAnnotationTriggeringPoint);\r\n        }\r\n    };\r\n    /**\r\n     * This method will handle the navigation based on the triggering point.\r\n     * @param saveMarksAndAnnotationTriggeringPoint\r\n     * @param markGroupId\r\n     */\r\n    Footer.prototype.processBasedOnSaveMarksAndAnnotationTriggeringPoint = function (saveMarksAndAnnotationTriggeringPoint, markGroupId) {\r\n        switch (saveMarksAndAnnotationTriggeringPoint) {\r\n            case enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse:\r\n                navigationHelper.loadContainerIfNeeded(navigationStore.instance.containerPage, enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse, this.context);\r\n                break;\r\n            case enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Inbox:\r\n                navigationHelper.loadContainerIfNeeded(navigationStore.instance.containerPage, enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Inbox, this.context);\r\n                break;\r\n            case enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Logout:\r\n                /* Trigger save mark for the currently selected item when logging out */\r\n                markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.toLogout);\r\n                break;\r\n            case enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Submit:\r\n                submitHelper.saveAndSubmitResponse(markGroupId ? markGroupId : submitStore.instance.getMarkGroupId);\r\n                break;\r\n            case enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Classify:\r\n                // Update MarkGroupRowVersion after save\r\n                this._classifyResponseDetails.esMarkGroupRowVersion = markingStore.instance.getUpdatedRowVersionOnSaveAndClassify;\r\n                // Trigger classify response action with updated MarkGroupRowVersion\r\n                standardisationActionCreator.classifyResponse(this._classifyResponseDetails, navigationStore.instance.containerPage);\r\n                break;\r\n            case enums.SaveMarksAndAnnotationsProcessingTriggerPoint.ShareAndClassify:\r\n                submitActionCreator.shareAndClassifyResponse(this._shareResponseArgument, this._isSharedFromMarkScheme, this._shareResponseDetails.displayId);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Method to get Grace Period Expired Message Body\r\n     * @returns\r\n     */\r\n    Footer.prototype.getGracePeriodExpiredMessageBody = function () {\r\n        var errorBody = localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.body-grace-period-expired-changes-not-saved');\r\n        return errorBody.replace('{0}', worklistStore.instance.displayIdOfMarkGroup(this.expiredMarkGroupId));\r\n    };\r\n    /**\r\n     * Method to get Response removed error dialog Message Body\r\n     * @returns\r\n     */\r\n    Footer.prototype.getResponseRemovedErrorDialogMessageBody = function () {\r\n        var errorBody = localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.body-response-removed-from-worklist');\r\n        return errorBody.replace('{0}', worklistStore.instance.displayIdOfMarkGroup(this.expiredMarkGroupId));\r\n    };\r\n    /**\r\n     * Just hide the response in grace message on ok click.\r\n     */\r\n    Footer.prototype.onOkClickOfResponseInGraceMessage = function () {\r\n        this.setState({\r\n            isDisplayingGraceResponseLessthan100PercentageError: false\r\n        });\r\n        if (this._failureReason === enums.ResponseNavigateFailureReason.AllPagesNotAnnotatedInGrace) {\r\n            // Closing the user information panel, if the popup is triggered due to logout button action.\r\n            // moving to full response view.\r\n            markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.toFullResponseview);\r\n            this._failureReason = enums.ResponseNavigateFailureReason.None;\r\n        }\r\n    };\r\n    /**\r\n     * Just hide the response in grace message on ok click.\r\n     */\r\n    Footer.prototype.onOkClickOfResponseInGraceExpiredMessageOrResponseRemovedMessage = function () {\r\n        if (this.currentSaveMarksAndAnnotationTriggeringPoint ===\r\n            enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Logout) {\r\n            this.updateUserSession();\r\n        }\r\n        else {\r\n            // This will clear the marks and annotations with mark save errors\r\n            // This will reload by background call or while opening the response.\r\n            marksAndAnnotationsSaveHelper.clearMarksAndAnnotationsForMarkSaveErrors();\r\n            navigationHelper.loadWorklist();\r\n        }\r\n    };\r\n    /**\r\n     * Get the error message that has to be shown while a marker is withdrawn in the background\r\n     */\r\n    Footer.prototype.getWithdrawnResponseErrorMessage = function () {\r\n        var errorBody = localeStore.instance.TranslateText('marking.worklist.response-allocation-error-dialog.response-allocation-error-withdrawnMarker');\r\n        return errorBody;\r\n    };\r\n    /**\r\n     * Get the error message that has to be shown while a marker is withdrawn in the background\r\n     */\r\n    Footer.prototype.getSessionClosedErrorMessage = function () {\r\n        var errorBody = localeStore.instance.TranslateText('marking.worklist.request-marking-check-error-dialog.body-session-closed');\r\n        return errorBody;\r\n    };\r\n    /**\r\n     * On cliking Ok button of the response trigger close response\r\n     */\r\n    Footer.prototype.onOkClickOfWithDrawErrorMessage = function () {\r\n        if (this.props.footerType === enums.FooterType.Response) {\r\n            if (this.navigateReponse === enums.SaveAndNavigate.toInboxMessagePage) {\r\n                this.processBasedOnSaveMarksAndAnnotationTriggeringPoint(enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Inbox);\r\n                navigationHelper.loadMessagePage();\r\n            }\r\n            else {\r\n                var updateNavigationPromise = markingActionCreator.updateNavigation(enums.SaveAndNavigate.toQigSelector, false);\r\n                var that_1 = this;\r\n                Promise.Promise.all([updateNavigationPromise]).then(function (result) {\r\n                    that_1.processBasedOnSaveMarksAndAnnotationTriggeringPoint(enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse);\r\n                    if (that_1.navigateReponse === enums.SaveAndNavigate.toLogout) {\r\n                        that_1.navigateAwayFromResponse();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ isWithdrawnResponseError: false, isBusy: false });\r\n            this.storageAdapterHelper.clearCacheByKey('qigselector', 'overviewdata');\r\n            if (qigStore.instance.getOverviewData) {\r\n                var currentQig = qigStore.instance.getOverviewData.qigSummary\r\n                    .filter(function (qig) {\r\n                    return qig.examinerRoleId ===\r\n                        examinerStore.instance.getMarkerInformation.examinerRoleId;\r\n                })\r\n                    .first();\r\n                teamManagementActionCreator.removeHistoryItem(currentQig ? currentQig.markSchemeGroupId : 0);\r\n            }\r\n            qigActionCreator.getQIGSelectorData(0);\r\n            loadContainerActionCreator.loadContainer(enums.PageContainers.QigSelector);\r\n        }\r\n    };\r\n    /**\r\n     * Start the content refresh\r\n     */\r\n    Footer.prototype.initiateContentRefresh = function () {\r\n        // Clear worklist cache and do content refresh\r\n        var markingMode = worklistStore.instance.getMarkingModeByWorkListType(worklistStore.instance.currentWorklistType);\r\n        if (qigStore.instance.selectedQIGForMarkerOperation) {\r\n            this.storageAdapterHelper.clearCache(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, markingMode, worklistStore.instance.getRemarkRequestType, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, worklistStore.instance.currentWorklistType);\r\n            // Load the marking progress\r\n            worklistActionCreator.getWorklistMarkerProgressData(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation\r\n                .isElectronicStandardisationTeamMember);\r\n        }\r\n    };\r\n    /**\r\n     * setting the timeout of application online check\r\n     * @param {type} interval\r\n     */\r\n    Footer.prototype.triggerApplicationOnlinePoll = function (forceStartPoll) {\r\n        if (forceStartPoll === void 0) { forceStartPoll = false; }\r\n        // If the application status has been changed update the call\r\n        if (forceStartPoll || this.state.isOnline !== applicationStore.instance.isOnline) {\r\n            if (userOptionsHelper.hasUserOptionsChanged) {\r\n                userOptionsHelper.InitiateSaveUserOption(false);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Closing application error poup message\r\n     */\r\n    Footer.prototype.onApplicationErrorMessagePopUpClicked = function () {\r\n        this.setState({\r\n            isApplicationOffline: false\r\n        });\r\n    };\r\n    /**\r\n     * User action has been interrupted\r\n     */\r\n    Footer.prototype.userActionInterrupted = function (_isFromLogout) {\r\n        if (_isFromLogout) {\r\n            this.offlineErrorMessage = localeStore.instance.TranslateText('generic.offline-dialog.body-user-options-changed');\r\n            this.props.resetLogoutConfirmationSatus();\r\n            this._onLogoutTriggered = false;\r\n        }\r\n        else {\r\n            this.offlineErrorMessage = stringHelper.format(localeStore.instance.TranslateText('generic.offline-dialog.body'), [String(String.fromCharCode(179))]);\r\n        }\r\n        /*Hiding the busy indicator if the application is offline and the busy indicator was showing at the time of being offline*/\r\n        if (this.state.isBusy && !applicationStore.instance.isOnline) {\r\n            this.setState({\r\n                isApplicationOffline: !applicationStore.instance.isOnline,\r\n                isBusy: false\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ isApplicationOffline: !applicationStore.instance.isOnline });\r\n        }\r\n    };\r\n    /**\r\n     * Adding current qig details to user option.\r\n     */\r\n    Footer.prototype.addSelectedQigDetailsToUserOption = function () {\r\n        var _rememberQig = new rememberQig();\r\n        if (qigStore.instance.selectedQIGForMarkerOperation) {\r\n            _rememberQig.qigId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n            _rememberQig.worklistType = worklistStore.instance.currentWorklistType;\r\n            _rememberQig.remarkRequestType = worklistStore.instance.getRemarkRequestType;\r\n            _rememberQig.questionPaperPartId =\r\n                qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId;\r\n            if (markerOperationModeFactory.operationMode.isTeamManagementMode) {\r\n                _rememberQig.area = enums.QigArea.TeamManagement;\r\n                if (teamManagementStore.instance.selectedTeamManagementTab ===\r\n                    enums.TeamManagement.MyTeam) {\r\n                    if (navigationStore.instance.containerPage === enums.PageContainers.WorkList) {\r\n                        _rememberQig.subordinateExaminerRoleID = teamManagementStore.instance\r\n                            .examinerDrillDownData\r\n                            ? teamManagementStore.instance.examinerDrillDownData.examinerRoleId\r\n                            : 0;\r\n                        _rememberQig.subordinateExaminerID = teamManagementStore.instance\r\n                            .examinerDrillDownData\r\n                            ? teamManagementStore.instance.examinerDrillDownData.examinerId\r\n                            : 0;\r\n                    }\r\n                    else {\r\n                        _rememberQig.subordinateExaminerRoleID = 0;\r\n                        _rememberQig.subordinateExaminerID = 0;\r\n                    }\r\n                }\r\n                _rememberQig.examinerRoleId = teamManagementStore.instance.selectedExaminerRoleId\r\n                    ? teamManagementStore.instance.selectedExaminerRoleId\r\n                    : operationModeHelper.examinerRoleId;\r\n                _rememberQig.tab = enums.TeamManagement.MyTeam;\r\n            }\r\n            else if (markerOperationModeFactory.operationMode.isStandardisationSetupMode) {\r\n                _rememberQig.area = enums.QigArea.StandardisationSetup;\r\n                _rememberQig.standardisationSetupWorklistType = standardisationSetupStore.instance.selectedStandardisationSetupWorkList;\r\n            }\r\n            else {\r\n                _rememberQig.area = enums.QigArea.Marking;\r\n            }\r\n            userOptionsHelper.save(userOptionKeys.REMEMBER_PREVIOUS_QIG, JSON.stringify(_rememberQig));\r\n        }\r\n    };\r\n    /**\r\n     * Action when the cancel button for Marking Check is clicked\r\n     * Cancel the popup\r\n     */\r\n    Footer.prototype.OnCancelClickOfMarkingCheckCompleteConfirmation = function () {\r\n        this.setState({ isMarkingCheckCompleteConfirmationPopupDisplaying: false });\r\n    };\r\n    /**\r\n     * Action when the ok button for Marking Check confirmation is clicked\r\n     */\r\n    Footer.prototype.OnOkClickOfMarkingCheckCompleteConfirmation = function () {\r\n        /* on marking check confirmation is clicked Send two messages\r\n           First Message to the marker so that it will appear in the inbox\r\n           the  second message with sysytem message priority so that the\r\n           marking check will be considered as complete*/\r\n        this.setState({ isMarkingCheckCompleteConfirmationPopupDisplaying: false });\r\n        var systemMessagePriority = 255;\r\n        var markingCheckToList = [\r\n            worklistStore.instance.selectedMarkingCheckExaminer.fromExaminerID\r\n        ];\r\n        var questionPaperId = qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId;\r\n        var markSchemeGroupId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n        messagingActionCreator.sendExaminerMessage(markingCheckToList, '', '', questionPaperId, null, enums.MessagePriority.Important, markSchemeGroupId, null, -1, -1, false, null, enums.SystemMessage.MarksChecked);\r\n        messagingActionCreator.sendExaminerMessage(markingCheckToList, '', '', questionPaperId, null, systemMessagePriority, markSchemeGroupId, null, -1, -1, false, null, enums.SystemMessage.MarksChecked);\r\n    };\r\n    /**\r\n     * On cliking Ok button of the response search failed popup\r\n     */\r\n    Footer.prototype.onOkClickOfResponseSearchFailedErrorMessage = function () {\r\n        this.setState({ isResponseSearchFailed: false });\r\n        this.storageAdapterHelper.clearStorageArea('messaging');\r\n        messagingActionCreator.refreshMessageFolder(enums.MessageFolderType.Inbox);\r\n    };\r\n    /**\r\n     * Get the error message that has to be shown on response search failed while a response is deallocated in the background\r\n     */\r\n    Footer.prototype.getResponseSearchFailedErrorMessage = function () {\r\n        var searchResponseData = messageStore.instance.searchResponseData;\r\n        var questionGroup = messageHelper.getDisplayText(messageStore.instance.getMessageData(searchResponseData.messageId));\r\n        var errorBodyParameter = [searchResponseData.displayId, questionGroup];\r\n        var errorBody = stringHelper.format(localeStore.instance.TranslateText('generic.error-dialog.body-response-removed'), errorBodyParameter);\r\n        return errorBody;\r\n    };\r\n    /**\r\n     * on clicking yes button of simulation response submit confirmation popup\r\n     */\r\n    Footer.prototype.onYesClickOfSimulationResponseSubmitButton = function () {\r\n        this.setState({ showSimulationResponseSubmitConfirmationPopup: false });\r\n        if (submitStore.instance.isSubmitFromMarkScheme) {\r\n            simulationModeHelper.checkStandardisationSetupCompletion(enums.PageContainers.None, enums.PageContainers.None);\r\n            busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.submitInResponseScreen);\r\n            markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.submit);\r\n        }\r\n        else {\r\n            // If simulation response submission happens from worklist, then submission\r\n            // needs to be blocked if standardisation setup is completed\r\n            var that_2 = this;\r\n            if (!qigStore.instance.getSelectedQIGForTheLoggedInUser.standardisationSetupComplete) {\r\n                var promise = qigActionCreator.checkStandardisationSetupCompleted(qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId, enums.PageContainers.WorkList, enums.PageContainers.WorkList);\r\n                Promise.Promise.all([promise]).then(function (data) {\r\n                    if (data[0] === true) {\r\n                        this.setState({\r\n                            showSimulationExitedPopup: true,\r\n                            showAllSimulationExitedQigs: false\r\n                        });\r\n                    }\r\n                    else {\r\n                        that_2.submitResponse();\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                that_2.submitResponse();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * on clicking no button of simulation response submit confirmation popup\r\n     */\r\n    Footer.prototype.onNoClickOfSimulationResponseSubmitButton = function () {\r\n        this.setState({ showSimulationResponseSubmitConfirmationPopup: false });\r\n    };\r\n    /**\r\n     * on clicking yes button of share confirmation popup\r\n     */\r\n    Footer.prototype.onYesClickOfShareConfirmationPopup = function () {\r\n        this.setState({ doShowShareConfirmationPopup: false });\r\n        acetatesActionCreator.shareAcetate(this.shareConfirmationClientToken);\r\n        this.shareConfirmationClientToken = undefined;\r\n    };\r\n    /**\r\n     * on clicking no button of share confirmation popup\r\n     */\r\n    Footer.prototype.onNoClickOfShareConfirmationPopup = function () {\r\n        this.setState({ doShowShareConfirmationPopup: false });\r\n        this.shareConfirmationClientToken = undefined;\r\n    };\r\n    /**\r\n     * Gets the name of simulation mode exited qigs\r\n     */\r\n    Footer.prototype.getSimulationModeExitedQigs = function () {\r\n        var qigNames = new Array();\r\n        if (this.state.showSimulationExitedPopup) {\r\n            // If all qigs need to be shown then. When navigating to qigselector.\r\n            if (this.state.showAllSimulationExitedQigs) {\r\n                var simulationModeExitedQigList_1 = Immutable.List();\r\n                simulationModeExitedQigList_1 =\r\n                    qigStore.instance.getSimulationModeExitedQigList === undefined\r\n                        ? undefined\r\n                        : qigStore.instance.getSimulationModeExitedQigList.qigList;\r\n                if (simulationModeExitedQigList_1) {\r\n                    simulationModeExitedQigList_1.map(function (_simulationModeExitedQig) {\r\n                        var qigNameToDisplay = stringFormatHelper.formatAwardingBodyQIG(_simulationModeExitedQig.markSchemeGroupName, _simulationModeExitedQig.assessmentCode, _simulationModeExitedQig.sessionName, _simulationModeExitedQig.componentId, _simulationModeExitedQig.questionPaperName, '', // TO DO: have to retrive ComponentName and AssessmentName on simulationQIg details.\r\n                        '', stringFormatHelper.getOverviewQIGNameFormat());\r\n                        qigNames.push(qigNameToDisplay);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                // Otherwise show only the currrent qig. When navigating from worklist/response to area other than\r\n                // qigselector\r\n                var qigData = qigStore.instance.getSelectedQIGForTheLoggedInUser;\r\n                var qigNameToDisplay = stringFormatHelper.formatAwardingBodyQIG(qigData.markSchemeGroupName, qigData.assessmentCode, qigData.sessionName, qigData.componentId, qigData.questionPaperName, '', // TO DO: have to retrive ComponentName and AssessmentName on simulationQIg details.\r\n                '', stringFormatHelper.getOverviewQIGNameFormat());\r\n                qigNames.push(qigNameToDisplay);\r\n            }\r\n        }\r\n        return qigNames;\r\n    };\r\n    /**\r\n     * Method to reset the acetate save inprogress status.\r\n     */\r\n    Footer.prototype.resetAcetateSaveInProgressStatus = function () {\r\n        // checking whether any addded/modified acetates are found in the acetatelist from store.\r\n        var modifiedAcetatesList = qigStore.instance.getModifiedAcetatesList();\r\n        if (modifiedAcetatesList && modifiedAcetatesList.size > 0) {\r\n            // Invoke action creator to set saveInProgress status to true before calling acetate save process.\r\n            acetatesActionCreator.resetAcetateSaveInProgressStatus(modifiedAcetatesList);\r\n        }\r\n    };\r\n    /**\r\n     * Reset acetates saveInProgress status received callback event.\r\n     */\r\n    Footer.prototype.onResetAcetatesSaveInProgressReceived = function (modifiedAcetatesList) {\r\n        var saveacetatesarguments = {\r\n            Tools: modifiedAcetatesList\r\n        };\r\n        // db call for saving the acetate list in database.\r\n        acetatesActionCreator.saveAcetates(saveacetatesarguments);\r\n    };\r\n    /**\r\n     * Complete Standardisation received callback event.\r\n     */\r\n    Footer.prototype.onCompleteStandardisationSetup = function () {\r\n        if (!standardisationSetupStore.instance.iscompleteStandardisationSuccess) {\r\n            this.setState({ popUpType: enums.PopUpType.CompleteStandardisationValidate, isBusy: false });\r\n        }\r\n    };\r\n    /**\r\n     * Checks whether the autozoned message should be displayed.\r\n     */\r\n    Footer.prototype.isAutozonedMessagePopupVisible = function () {\r\n        if (this.props.footerType !== enums.FooterType.Message) {\r\n            var selectedAwardingCandidateData = void 0;\r\n            var examSessionID = void 0;\r\n            if (markerOperationModeFactory.operationMode.isAwardingMode) {\r\n                selectedAwardingCandidateData = awardingHelper.awardingSelectedCandidateData();\r\n                examSessionID = selectedAwardingCandidateData.responseItemGroups[0].examSessionID;\r\n            }\r\n            //Checking the CC values\r\n            var isAutozoned = configurableCharacteristicHelper\r\n                .getExamSessionCCValue(configurableCharacteristicNames.AutoZoning, markerOperationModeFactory.operationMode.isAwardingMode\r\n                ? examSessionID\r\n                : qigStore.instance.selectedQIGForMarkerOperation.examSessionId)\r\n                .toLowerCase() === 'true' &&\r\n                configurableCharacteristicHelper\r\n                    .getExamSessionCCValue(configurableCharacteristicNames.DisplayAutozonedResponsesWarning, markerOperationModeFactory.operationMode.isAwardingMode\r\n                    ? examSessionID\r\n                    : qigStore.instance.selectedQIGForMarkerOperation.examSessionId)\r\n                    .toLowerCase() === 'true';\r\n            //getting the saved userOption value\r\n            var userOptionAutozonedValue = userOptionsHelper.getUserOptionByName(userOptionKeys.AUTOZONED_WARNING_MESSAGE, markerOperationModeFactory.operationMode.isAwardingMode\r\n                ? awardingStore.instance.selectedCandidateData.responseItemGroups[0].examinerRoleId\r\n                : qigStore.instance.getSelectedQIGForTheLoggedInUser.examinerRoleId) === 'true';\r\n            //set state to display Autozoned message popup\r\n            if (isAutozoned && userOptionAutozonedValue !== true) {\r\n                this.setState({\r\n                    isAutozonedMessagePopupDisplaying: true\r\n                });\r\n                //saving useroption for autozoned message popup\r\n                userOptionsHelper.save(userOptionKeys.AUTOZONED_WARNING_MESSAGE, JSON.stringify(true), true, true, false, true, markerOperationModeFactory.operationMode.isAwardingMode\r\n                    ? awardingStore.instance.selectedCandidateData.responseItemGroups[0].examinerRoleId\r\n                    : qigStore.instance.getSelectedQIGForTheLoggedInUser.examinerRoleId);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Action when the ok button for Marking Check confirmation is clicked\r\n     */\r\n    Footer.prototype.OnOkClickOfCompleteStandardisationConfirmation = function () {\r\n        this.setState({ isBusy: true, isCompleteStandardisation: true });\r\n        standardisationActionCreator.completeStandardisationSetup(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId);\r\n    };\r\n    /**\r\n     * Action when the ok button for Marking Check confirmation is clicked\r\n     */\r\n    Footer.prototype.OnCancelClickOfCompleteStandardisationConfirmation = function () {\r\n        this.props.OnClickingCancelofStdSetupPopup(true);\r\n    };\r\n    /**\r\n     * Action when the ok button for Marking Check confirmation is clicked\r\n     */\r\n    Footer.prototype.onOkClickofStandardisationSetupValidate = function () {\r\n        this.setState({\r\n            popUpType: enums.PopUpType.None,\r\n            isCompleteStandardisation: false\r\n        });\r\n        busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.validateStandardisationSetup);\r\n        standardisationActionCreator.getStandardisationTargetDetails(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId);\r\n        // get the worklist view type.\r\n        var stdWorklistViewType = userOptionsHelper.getUserOptionByName(userOptionKeys.SELECTED_GRID_VIEW_OPTION)\r\n            === 'false' ? enums.STDWorklistViewType.ViewMarksByQuestion : enums.STDWorklistViewType.ViewTotalMarks;\r\n        // Refresh the grid with latest changes.\r\n        standardisationActionCreator.getClassifiedResponseDetails(standardisationSetupStore.instance.examinerRoleId, loginSession.EXAMINER_ID, standardisationSetupStore.instance.markSchemeGroupId, false, stdWorklistViewType);\r\n    };\r\n    Object.defineProperty(Footer.prototype, \"getSelectToMarkProvisionalPopupContent\", {\r\n        /**\r\n         * pop up content on clicking select response to mark button\r\n         */\r\n        get: function () {\r\n            var content = [];\r\n            var scriptData = standardisationSetupStore.instance.fetchSelectedScriptDetails(standardisationSetupStore.instance.selectedResponseId);\r\n            var showMultiQigPopup = this.isMultiQigMarkingAvailable();\r\n            var centreCandidateDetails = stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-content-line2'), [\r\n                String(scriptData.candidateScriptId),\r\n                scriptData.centreNumber,\r\n                scriptData.centreCandidateNumber.toUpperCase()\r\n            ]);\r\n            var isCommonProvisionalStandardisationCcOn = configurableCharacteristicHelper.getCharacteristicValue(configurableCharacteristicNames.CommonProvisionalStandardisation, standardisationSetupStore.instance.markSchemeGroupId).toLowerCase() === 'true';\r\n            if (showMultiQigPopup) {\r\n                content.push(React.createElement(\"p\", { key: 'select-to-mark-popup-content-line2', className: 'dim-text padding-bottom-10' }, centreCandidateDetails));\r\n                content.push(React.createElement(\"p\", { key: 'select-to-mark-popup-content-line2' }, localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-multiqig-popup-content-line')));\r\n                content.push(React.createElement(GenericPopupWithCheckBoxes, { className: 'qig-item', id: 'popup-createprovisional-multiqig', items: this.multiQigCheckboxItems, selectedLanguage: this.props.selectedLanguage, onChecked: this.onChecked, key: 'popup-createprovisional-multiqig' }));\r\n            }\r\n            else {\r\n                content.push(React.createElement(\"p\", { key: 'select-to-mark-popup-content-line1' }, isCommonProvisionalStandardisationCcOn ? localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-content-line1-provisional')\r\n                    : localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-content-line1')));\r\n                content.push(React.createElement(\"p\", { key: 'select-to-mark-popup-content-line2', className: 'dim-text padding-top-10' }, centreCandidateDetails));\r\n            }\r\n            if (this.isCommonProvisionalStandardisationCcOn()) {\r\n                content.push(React.createElement(\"div\", { className: 'option-holder padding-top-10' },\r\n                    React.createElement(\"ul\", { className: 'options' },\r\n                        React.createElement(\"li\", { className: 'padding-top-10' },\r\n                            React.createElement(\"input\", { type: 'radio', value: 'selected', id: 'STMAllocate1', name: 'selectProvisionalSTM', checked: this.state.provisionalMarkingType === enums.ProvisionalMarkingType.AllocateToAll ?\r\n                                    true : false }),\r\n                            React.createElement(\"label\", { htmlFor: 'STMAllocate1', onClick: this.onOptionButtonClick.bind(this, enums.ProvisionalMarkingType.AllocateToAll) },\r\n                                React.createElement(\"span\", { className: 'radio-ui' }),\r\n                                React.createElement(\"span\", { className: 'label-text' }, localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-option-allocate-all')))),\r\n                        React.createElement(\"li\", { className: 'padding-top-10' },\r\n                            React.createElement(\"input\", { type: 'radio', value: 'selected', id: 'STMAllocate2', name: 'selectProvisionalSTM', checked: this.state.provisionalMarkingType === enums.ProvisionalMarkingType.AllocatedToMe ?\r\n                                    true : false }),\r\n                            React.createElement(\"label\", { htmlFor: 'STMAllocate2', onClick: this.onOptionButtonClick.bind(this, enums.ProvisionalMarkingType.AllocatedToMe) },\r\n                                React.createElement(\"span\", { className: 'radio-ui' }),\r\n                                React.createElement(\"span\", { className: 'label-text' }, localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-option-allocate-me'))))),\r\n                    React.createElement(\"p\", { className: 'padding-top-20', key: 'select-to-mark-popup-content-line3' }, localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-content-line3'))));\r\n            }\r\n            else {\r\n                content.push(React.createElement(\"p\", { className: 'padding-top-10', key: 'select-to-mark-popup-content-line3' }, localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-content-line3')));\r\n            }\r\n            return content;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Method to handle option button click\r\n     * @param isAllocateToMe\r\n     */\r\n    Footer.prototype.onOptionButtonClick = function (_provisionalMarkingType) {\r\n        this.setState({\r\n            renderedOn: Date.now(),\r\n            provisionalMarkingType: _provisionalMarkingType\r\n        });\r\n    };\r\n    Object.defineProperty(Footer.prototype, \"getMarkAsDefinitivePopupContent\", {\r\n        /**\r\n         * get mark as definitive popup content\r\n         */\r\n        get: function () {\r\n            var content = [];\r\n            var responseData = standardisationSetupStore.instance.fetchStandardisationResponseData(standardisationSetupStore.instance.selectedResponseId);\r\n            var markAsDefinitiveResponse = stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-content-line2'), [\r\n                String(responseData.displayId),\r\n                String(responseData.totalMarkValue)\r\n            ]);\r\n            content.push(React.createElement(\"p\", { key: 'mark-as-definitive-popup-content-line1' }, localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-content-line1')));\r\n            content.push(React.createElement(\"p\", { key: 'select-to-mark-popup-content-line2', className: 'dim-text padding-top-20' }, markAsDefinitiveResponse));\r\n            content.push(React.createElement(\"p\", { className: 'padding-top-20', key: 'select-to-mark-popup-content-line3' }, localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-content-line3')));\r\n            var radioButtonText = (React.createElement(\"div\", { className: 'option-holder padding-top-10' },\r\n                React.createElement(\"ul\", { className: 'options' },\r\n                    React.createElement(\"li\", { className: 'padding-top-10', onClick: this.onMarkAsDefinitiveContentClick.bind(this, true) },\r\n                        React.createElement(\"input\", { type: 'radio', value: 'selected', id: 'copyasDefinitive', defaultChecked: true, name: 'markasdefinitive' /* checked={this.copyMarksAsDefinitiveSelected === false ? false : true}*/ }),\r\n                        React.createElement(\"label\", { htmlFor: 'copyasDefinitive' },\r\n                            React.createElement(\"span\", { className: 'radio-ui' }),\r\n                            React.createElement(\"span\", { className: 'label-text', id: 'markAsDefinitivePopupRadioButton1' }, localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-radio-1')))),\r\n                    React.createElement(\"p\", { className: 'padding-top-10 option-content' }, localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-radio-1-desc')),\r\n                    React.createElement(\"li\", { className: 'padding-top-20', onClick: this.onMarkAsDefinitiveContentClick.bind(this, false) },\r\n                        React.createElement(\"input\", { type: 'radio', value: '', id: 'clearAllMark', name: 'markasdefinitive' /* checked={this.copyMarksAsDefinitiveSelected === false ? true : false} */ }),\r\n                        React.createElement(\"label\", { htmlFor: 'clearAllMark' },\r\n                            React.createElement(\"span\", { className: 'radio-ui' }),\r\n                            React.createElement(\"span\", { className: 'label-text', id: 'markAsDefinitivePopupRadioButton2' }, localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-radio-2')))),\r\n                    React.createElement(\"p\", { className: 'padding-top-10 padding-bottom-5 option-content' }, localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-radio-2-desc')))));\r\n            content.push(radioButtonText);\r\n            return content;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the copyMarksAsDefinitiveSelected flag, on Mark as definitve popup option click.\r\n     * @param isCopyMarksAndAnnotation\r\n     */\r\n    Footer.prototype.onMarkAsDefinitiveContentClick = function (isCopyMarksAndAnnotation) {\r\n        this.copyMarksAsDefinitiveSelected = isCopyMarksAndAnnotation;\r\n    };\r\n    /**\r\n     * conditions where the multiqig popup to be shown while select to mark button is clicked\r\n     */\r\n    Footer.prototype.isMultiQigMarkingAvailable = function () {\r\n        // The multiqig response pop will only show when the following conditions are true\r\n        // 1. WholeResponseProvisionalMarking should be ON.\r\n        // 2. Available QIGs for Provisional marking is more than one\r\n        var wholeResponseProvisionalMarking = configurableCharacteristicHelper.getExamSessionCCValue(configurableCharacteristicNames.WholeResponseProvisionalMarking, markerOperationModeFactory.operationMode.isAwardingMode\r\n            ? awardingStore.instance.selectedSession.examSessionId\r\n            : qigStore.instance.selectedQIGForMarkerOperation.examSessionId).toLowerCase() === 'true' ? true : false;\r\n        if (wholeResponseProvisionalMarking && this.multiQigCheckboxItems !== undefined && this.multiQigCheckboxItems.length > 1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * switch user button click\r\n     */\r\n    Footer.prototype.switchUserButtonClick = function () {\r\n        window.removeEventListener('beforeunload', navigationHelper.onBeforeWindowUnload);\r\n        /* tslint:disable:no-string-literal */\r\n        window.sessionStorage['adminsupport'] = 'true';\r\n        /* tslint:enable:no-string-literal */\r\n        window.open('?', '_self');\r\n    };\r\n    /**\r\n     * Complete Standardisation received callback event.\r\n     */\r\n    Footer.prototype.onResponseDataRecievedAfterRefresh = function () {\r\n        /*\r\n          Setting busy indicator to false on Standardisation Setup refresh on\r\n          completing standardisation setup\r\n        */\r\n        this.setState({ isBusy: false });\r\n    };\r\n    /**\r\n     * Populate recassify multioption popUp data\r\n     */\r\n    Footer.prototype.populateRecassifyMultiOptionPopUpData = function (selectedMarkingModeId) {\r\n        if (selectedMarkingModeId === void 0) { selectedMarkingModeId = 0; }\r\n        this.items = new Array();\r\n        var markSchemeGroupId = standardisationSetupStore.instance.markSchemeGroupId;\r\n        var ssuStmClassificationRestriction = stdSetupPermissionHelper.getSsuClassificationRestrictionByMarkSchemeGroupId(markSchemeGroupId);\r\n        var restictedText = localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.restricted');\r\n        this.standardisationSetupHelper = standardisationSetupFactory.\r\n            getStandardisationSetUpWorklistHelper(standardisationSetupStore.instance.selectedStandardisationSetupWorkList);\r\n        var restrictedTargets = this.standardisationSetupHelper.getRestrictedSSUTarget(markSchemeGroupId);\r\n        // Once std setup is completed, then show only 'seed' radio button in classify options\r\n        if (!qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete) {\r\n            if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.Practice)) {\r\n                this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.Practice, 1, selectedMarkingModeId, ssuStmClassificationRestriction.isPracticeRestrictedForAnyStm, restictedText));\r\n            }\r\n            if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.ES_TeamApproval)) {\r\n                this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.ES_TeamApproval, 2, selectedMarkingModeId, ssuStmClassificationRestriction.isStmStandardisationeRestrictedForAnyStm, restictedText));\r\n            }\r\n            if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.Approval)) {\r\n                this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.Approval, 3, selectedMarkingModeId, ssuStmClassificationRestriction.isStandardisationRestrictedForAnyStm, restictedText));\r\n            }\r\n            if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.Seeding)) {\r\n                this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.Seeding, 4, selectedMarkingModeId, ssuStmClassificationRestriction.isSeedingRestrictedForAnyStm, restictedText));\r\n            }\r\n        }\r\n        else {\r\n            /* #75081 : On classifying a response from Provisional/Unclassified worklist after SSU complete,\r\n             the Classification pop- up shall list only those targets which are not met OR\r\n            (where the target is met AND the type is not included in “RestrictStandardisationSetupTargets”). */\r\n            if (this.canListTargetInClassificationPopUp(enums.MarkingMode.Practice, restrictedTargets)) {\r\n                if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.Practice)) {\r\n                    this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.Practice, 1, selectedMarkingModeId, ssuStmClassificationRestriction.isPracticeRestrictedForAnyStm, restictedText));\r\n                }\r\n            }\r\n            if (this.canListTargetInClassificationPopUp(enums.MarkingMode.ES_TeamApproval, restrictedTargets)) {\r\n                if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.ES_TeamApproval)) {\r\n                    this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.ES_TeamApproval, 2, selectedMarkingModeId, ssuStmClassificationRestriction.isStmStandardisationeRestrictedForAnyStm, restictedText));\r\n                }\r\n            }\r\n            if (this.canListTargetInClassificationPopUp(enums.MarkingMode.Approval, restrictedTargets)) {\r\n                if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.Approval)) {\r\n                    this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.Approval, 3, selectedMarkingModeId, ssuStmClassificationRestriction.isStandardisationRestrictedForAnyStm, restictedText));\r\n                }\r\n            }\r\n            if (this.canListTargetInClassificationPopUp(enums.MarkingMode.Seeding, restrictedTargets)) {\r\n                if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.Seeding)) {\r\n                    this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.Seeding, 4, selectedMarkingModeId, ssuStmClassificationRestriction.isSeedingRestrictedForAnyStm, restictedText));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * To check whether the target can be displayed in Classification popup On\r\n     * classifying a response from Provisional/Unclassified worklist after SSU complete\r\n     */\r\n    Footer.prototype.canListTargetInClassificationPopUp = function (target, restrictedTargets) {\r\n        var standardisationTargetDetailList = standardisationSetupStore.instance.classificationSummaryTargetDetails;\r\n        if (standardisationTargetDetailList) {\r\n            var selectedTarget = standardisationTargetDetailList.\r\n                filter(function (x) { return x.markingModeId === target; }).first();\r\n            if (selectedTarget.count < selectedTarget.target ||\r\n                (!restrictedTargets.contains(target) && selectedTarget.target <= selectedTarget.count)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Create Generic Radio Button Item\r\n     * @param markingModeId\r\n     * @param sequenceNo\r\n     * @param selectedMarkingModeId\r\n     * @param isMarkingModeRestrictedForAnyStm\r\n     */\r\n    Footer.prototype.createGenericRadioButtonItem = function (markingModeId, sequenceNo, selectedMarkingModeId, isMarkingModeRestrictedForAnyStm, restictedText) {\r\n        var obj = new genericRadioButtonItems();\r\n        obj.sequenceNo = sequenceNo;\r\n        obj.id = markingModeId;\r\n        obj.isChecked = obj.id === selectedMarkingModeId ? true : false;\r\n        obj.name = localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.classification-type.' + enums.MarkingMode[markingModeId]);\r\n        obj.errorText = (isMarkingModeRestrictedForAnyStm ? ' - ' + restictedText : '');\r\n        return obj;\r\n    };\r\n    /**\r\n     * Create radio button for Reuse action popup\r\n     */\r\n    Footer.prototype.createReuseGenericRadioButtonItem = function (inputid, sequenceNo) {\r\n        var radioButonForPE = new genericRadioButtonItems();\r\n        radioButonForPE.sequenceNo = sequenceNo;\r\n        radioButonForPE.id = inputid;\r\n        radioButonForPE.isChecked = true;\r\n        radioButonForPE.name = 'Create copy and move to unclassified list';\r\n        radioButonForPE.errorText = '';\r\n        return radioButonForPE;\r\n    };\r\n    /**\r\n     * Populate radio button item for ReuseRIG pop up\r\n     */\r\n    Footer.prototype.populateReuseUnclassifyPopupItem = function () {\r\n        this.reuseUnclassifyItem = new Array();\r\n        this.reuseUnclassifyItem.push(this.createReuseGenericRadioButtonItem(enums.MarkingMode.PreStandardisation, 1));\r\n    };\r\n    Object.defineProperty(Footer.prototype, \"getReUseActionMultiOptionPopupContent\", {\r\n        /**\r\n         * get Reuse RIG popup action\r\n         */\r\n        get: function () {\r\n            var content = [];\r\n            var openedResponseDetails = standardisationSetupStore.instance.\r\n                getReusableResponseDetails(this.reuseRIGSelectedDisplayId.toString());\r\n            var reuseRIGSelectedCentreId = openedResponseDetails.centreNumber.toString();\r\n            var reuseRIGSelectedCandidateNo = openedResponseDetails.centreCandidateNumber.toString();\r\n            var reuseRIGSelectedScriptID = openedResponseDetails.candidateScriptId.toString();\r\n            content.push(React.createElement(\"span\", null,\r\n                React.createElement(\"p\", null, localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.reuse-content')),\r\n                React.createElement(\"p\", { className: 'dim-text padding-top-10' },\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.script-id'),\r\n                        React.createElement(\"span\", { id: 'reusescriptid' }, ': 1' + reuseRIGSelectedScriptID + ', ')),\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.Centre'),\r\n                        React.createElement(\"span\", { id: 'reusecentreid' }, ': ' + reuseRIGSelectedCentreId + ', ')),\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.Candidate'),\r\n                        React.createElement(\"span\", { id: 'reusecandidateid' }, ': ' + reuseRIGSelectedCandidateNo))),\r\n                React.createElement(\"div\", { className: 'option-holder padding-top-10' },\r\n                    React.createElement(GenericPopupWithRadioButton, { className: 'options', id: 'popup-reuserig-option-holder', items: this.reuseUnclassifyItem, selectedLanguage: this.props.selectedLanguage, onCheckedChange: this.onReuseItemCheckedChange, renderedOn: this.state.renderedOn, liClassName: 'padding-top-10', key: 'popup-reuse-unclassify-option' })),\r\n                React.createElement(\"p\", { className: 'padding-top-10' }, localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.reuse-classify-option')),\r\n                React.createElement(\"div\", { className: 'classify-options-holder padding-top-10 clearfix' },\r\n                    React.createElement(GenericPopupWithRadioButton, { className: 'option-items', id: 'popup-reclassify-multioption', items: this.items, selectedLanguage: this.props.selectedLanguage, onCheckedChange: this.onCheckedChange, renderedOn: this.state.renderedOn, liClassName: 'padding-top-10', key: 'popup-reuse-classify-option' }))));\r\n            return content;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Footer.prototype, \"getReclassificationMultiOptionPopupContent\", {\r\n        /**\r\n         * get reclassification Multi Option Popup Content\r\n         */\r\n        get: function () {\r\n            var content = [];\r\n            content.push(React.createElement(\"span\", null,\r\n                React.createElement(\"p\", { className: 'dim-text' },\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.response-id'),\r\n                        React.createElement(\"span\", { className: 'responseID' }, ' ' + this.reclassifyResponseDetails.displayId)),\r\n                    \",\",\r\n                    React.createElement(\"span\", null,\r\n                        ' ' + localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.total-mark'),\r\n                        React.createElement(\"span\", { className: 'total-mark' }, ' ' + this.reclassifyResponseDetails.totalMarkValue))),\r\n                React.createElement(\"p\", { className: 'padding-top-10' }, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.body')),\r\n                React.createElement(\"p\", { className: 'padding-top-10' }, localeStore.instance.TranslateText(qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete ?\r\n                    'standardisation-setup.standardisation-setup-worklist.classify-multioption-popup.body-complete-setup-message' :\r\n                    'standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.body-complete-setup-message')),\r\n                React.createElement(\"div\", { className: 'classify-options-holder padding-top-10 clearfix' },\r\n                    React.createElement(GenericPopupWithRadioButton, { className: 'option-items', id: 'popup-reclassify-multioption', items: this.items, selectedLanguage: this.props.selectedLanguage, onCheckedChange: this.onCheckedChange, renderedOn: this.state.renderedOn, liClassName: 'padding-top-10', key: 'popup-reclassify-multioption' }))));\r\n            return content;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Method to get the reclassified response error popup content.\r\n     */\r\n    Footer.prototype.getReclassifyErrorPopupContent = function () {\r\n        var previousMarkingMode = (localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.classification-type.'\r\n            + enums.MarkingMode[this.previousMarkingMode]));\r\n        var currentMarkingMode = (localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.classification-type.'\r\n            + enums.MarkingMode[this.currentMarkingMode]));\r\n        return stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassifyerror-popup.body'), [this.displayId,\r\n            previousMarkingMode,\r\n            currentMarkingMode\r\n        ]);\r\n    };\r\n    /**\r\n     * Method to get the share response popup content.\r\n     */\r\n    Footer.prototype.getShareResponsePopupContent = function () {\r\n        var popUpContent = [];\r\n        popUpContent.push(React.createElement(\"p\", null, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.body')));\r\n        popUpContent.push(React.createElement(\"p\", { className: 'dim-text padding-top-10' },\r\n            React.createElement(\"span\", null,\r\n                localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.response-id'),\r\n                React.createElement(\"span\", { className: 'responseID' }, this._shareResponseDetails.displayId)),\r\n            \",\",\r\n            React.createElement(\"span\", null,\r\n                localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.total-mark'),\r\n                React.createElement(\"span\", { className: 'total-mark' }, this._shareResponseDetails.totalMarkValue))));\r\n        popUpContent.push(React.createElement(\"p\", { className: 'padding-top-10' }, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.confirmation-text')));\r\n        return popUpContent;\r\n    };\r\n    Object.defineProperty(Footer.prototype, \"getShareResponsePopupContentForPE\", {\r\n        /**\r\n         * get Share Response Popup Content For PE\r\n         */\r\n        get: function () {\r\n            var content = [];\r\n            content.push(React.createElement(\"span\", null,\r\n                React.createElement(\"p\", { id: 'chose-message' }, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.chose-message')),\r\n                React.createElement(\"p\", { className: 'dim-text padding-top-10' },\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.response-id'),\r\n                        React.createElement(\"span\", { className: 'responseID' }, this._shareResponseDetails.displayId)),\r\n                    \",\",\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.total-mark'),\r\n                        React.createElement(\"span\", { className: 'total-mark' }, this._shareResponseDetails.totalMarkValue))),\r\n                React.createElement(\"div\", { className: 'option-holder padding-top-10' },\r\n                    React.createElement(GenericPopupWithRadioButton, { className: 'options', id: 'popup-share-response-option-holder', items: this.reuseUnclassifyItem, selectedLanguage: this.props.selectedLanguage, onCheckedChange: this.onReuseItemCheckedChange, renderedOn: this.state.renderedOn, liClassName: 'padding-top-10', key: 'popup-reuse-unclassify-option' })),\r\n                React.createElement(\"p\", { id: 'share-note', className: 'padding-top-10 option-content' }, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.share-note')),\r\n                React.createElement(\"p\", { id: 'classify-now', className: 'padding-top-10' },\r\n                    React.createElement(\"label\", null,\r\n                        React.createElement(\"span\", { className: 'label-text' }, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.classify-now')))),\r\n                React.createElement(\"p\", { id: 'annotation-note', className: 'padding-top-10' }, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.annotation-note')),\r\n                React.createElement(\"div\", { className: 'classify-options-holder padding-top-10 clearfix' },\r\n                    React.createElement(GenericPopupWithRadioButton, { className: 'option-items', id: 'popup-reclassify-multioption', items: this.items, selectedLanguage: this.props.selectedLanguage, onCheckedChange: this.onCheckedChange, renderedOn: this.state.renderedOn, liClassName: 'padding-top-10', key: 'popup-reuse-classify-option' }))));\r\n            return content;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Populate radio button item for Share and Classify pop up for PE\r\n     */\r\n    Footer.prototype.populateShareForPEclassifyPopupItem = function () {\r\n        this.reuseUnclassifyItem = new Array();\r\n        this.reuseUnclassifyItem.push(this.creatShareForPEGenericRadioButtonItem(enums.MarkingMode.PreStandardisation, 1));\r\n    };\r\n    /**\r\n     * Create radio button for Share and Classify\r\n     */\r\n    Footer.prototype.creatShareForPEGenericRadioButtonItem = function (inputid, sequenceNo) {\r\n        var radioButtonForSharePE = new genericRadioButtonItems();\r\n        radioButtonForSharePE.sequenceNo = sequenceNo;\r\n        radioButtonForSharePE.id = inputid;\r\n        radioButtonForSharePE.isChecked = radioButtonForSharePE.id === inputid ? true : false;\r\n        radioButtonForSharePE.name = localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.share-mark');\r\n        radioButtonForSharePE.errorText = '';\r\n        return radioButtonForSharePE;\r\n    };\r\n    /**\r\n     * Populate recassify multioption popUp data\r\n     */\r\n    Footer.prototype.populateCreateMultiQIGProvisionalsPopUpData = function (provisionalQigdetails) {\r\n        var _this = this;\r\n        this.multiQigCheckboxItems = new Array();\r\n        provisionalQigdetails.map(function (item) {\r\n            // Only show the QIGs which have MultiQIGProvisionalPermisson in the StandardisationSetupPermissions CC is ON\r\n            var standardisationSetupCCData = stdSetupPermissionHelper.generateSTDSetupPermissionData(item.stdSetupPermissionCCData, item.role);\r\n            if (standardisationSetupCCData && standardisationSetupCCData.role.permissions.multiQIGProvisionals) {\r\n                _this.multiQigCheckboxItems.push(_this.createGenericCheckBoxItem(item, item.markSchemeGroupId === standardisationSetupStore.instance.markSchemeGroupId));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Create Generic Check Box Item\r\n     * @param provisionalQigDetail\r\n     */\r\n    Footer.prototype.createGenericCheckBoxItem = function (provisionalQigDetail, ischecked) {\r\n        var obj = new genericCheckBoxItems();\r\n        obj.id = provisionalQigDetail.markSchemeGroupId;\r\n        obj.isChecked = ischecked;\r\n        obj.disabled = ischecked;\r\n        obj.labelContent = provisionalQigDetail.markSchemeGroupName;\r\n        obj.containerClassName = 'padding-top-10';\r\n        obj.className = 'text-middle checkbox';\r\n        obj.labelClassName = 'text-middle';\r\n        return obj;\r\n    };\r\n    /**\r\n     * display note modified in background popup\r\n     */\r\n    Footer.prototype.displayNoteSaveFailedPopup = function (saveNoteErrorCode) {\r\n        if (saveNoteErrorCode === enums.SaveNoteError.TimeStampChanged) {\r\n            this.messageDetails = {\r\n                messageHeader: localeStore.instance.TranslateText('standardisation-setup.left-panel.note-save-error-popup-header'),\r\n                messageString: localeStore.instance.TranslateText('standardisation-setup.left-panel.note-timestamp-changed-popup-body')\r\n            };\r\n            this.setState({ isNoteTimeStampChangedPopupVisible: true });\r\n        }\r\n        else if (saveNoteErrorCode === enums.SaveNoteError.MarkingModeChanged) {\r\n            this.messageDetails = {\r\n                messageHeader: localeStore.instance.TranslateText('standardisation-setup.left-panel.note-save-error-popup-header'),\r\n                messageString: localeStore.instance.TranslateText('standardisation-setup.left-panel.note-response-modified-popup-body')\r\n            };\r\n            this.setState({ isResponseModifiedPopupVisibile: true });\r\n        }\r\n    };\r\n    /**\r\n     *  Rerender classified worklist on declassify/reclassify scenario\r\n     */\r\n    Footer.prototype.reRenderOnClassifiedResponseReceived = function () {\r\n        var _this = this;\r\n        // Fetch the STDWorklistViewType from user options\r\n        var isStdTotalMarkView = userOptionsHelper.getUserOptionByName(userOptionKeys.SELECTED_GRID_VIEW_OPTION)\r\n            === 'false' ? false : true;\r\n        var gridType = isStdTotalMarkView ?\r\n            enums.STDWorklistViewType.ViewTotalMarks : enums.STDWorklistViewType.ViewMarksByQuestion;\r\n        // refresh the summary targets.\r\n        var getStandardisationTargetDetails = standardisationActionCreator.getStandardisationTargetDetails(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId);\r\n        getStandardisationTargetDetails.\r\n            then(function () {\r\n            // refresh the classification grid once we reclassify/declassify a response.\r\n            var getClassifiedResponseDetails = standardisationActionCreator.getClassifiedResponseDetails(standardisationSetupStore.instance.examinerRoleId, loginSession.EXAMINER_ID, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, false, gridType);\r\n            getClassifiedResponseDetails.\r\n                then(function () {\r\n                _this.setState({ doShowReclassifyResponseBusyIndicator: false });\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * save Marks And Annotations With Non Recoverable Error\r\n     * @param saveMarksAndAnnotationTriggeringPoint\r\n     * @param markGroupId\r\n     * @param queueOperation\r\n     */\r\n    Footer.prototype.saveMarksAndAnnotationsWithNonRecoverableError = function (saveMarksAndAnnotationTriggeringPoint, markGroupId, queueOperation) {\r\n        // Calling the helper method to update the marks and annotations queue\r\n        marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, queueOperation);\r\n        // If the queue is processed completely, have to hide the save marks and annotations busy indicator\r\n        if (marksAndAnnotationsSaveHelper.isQueueProcessedCompletely) {\r\n            if (marksAndAnnotationsSaveHelper.markGroupItemsWithNonRecoverableErrors\r\n                .length > 0) {\r\n                //When there are errors in saving marks and annotations we have to hide the busy indicator\r\n                busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.none);\r\n                // set appropriate error dialog contents\r\n                this.saveMarksAndAnnotationsErrorDialogContents = new saveMarksAndAnnotationsNonRecoverableErrorDialogContents(true);\r\n                if (this.state.doShowSavingMarksAndAnnotationsIndicator) {\r\n                    //logic for displaying error popup.\r\n                    this.setState({\r\n                        doShowSavingMarksAndAnnotationsIndicator: false,\r\n                        isNonRecoverableErrorPopupVisible: true\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                this.processBasedOnSaveMarksAndAnnotationTriggeringPoint(saveMarksAndAnnotationTriggeringPoint, markGroupId);\r\n            }\r\n            // Last Invoked Trigger point is stored in marking Store. Reset the variable after 'ALL Completed Save'\r\n            if (marksAndAnnotationsSaveHelper.count === 0) {\r\n                responseActionCreator.triggerSavingMarksAndAnnotations(enums.SaveMarksAndAnnotationsProcessingTriggerPoint.None);\r\n            }\r\n            // hide the saving marks and annotations busy indicator\r\n            if (this.state.doShowSavingMarksAndAnnotationsIndicator) {\r\n                this.setState({\r\n                    doShowSavingMarksAndAnnotationsIndicator: false\r\n                });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Footer.prototype, \"IsShareAndClassifyOptionNeeded\", {\r\n        /**\r\n         * Return IsShareAndClassifyOptionNeeded value\r\n         */\r\n        get: function () {\r\n            return standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.classify &&\r\n                this.reuseUnclassifyItem.filter(function (i) { return i.isChecked === true; })[0] === undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Footer.prototype, \"classifyOrReclassifySaveFailPopUpContent\", {\r\n        /**\r\n         * Returns the currentSaveFailPopUp content.\r\n         */\r\n        get: function () {\r\n            return this.isUnclassifiedWorklistSelected ?\r\n                stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.concurrent-esmarkingmode-save-fail-popup.body-with-response-id'), [this.displayId]) :\r\n                localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.concurrent-esmarkingmode-save-fail-popup.body');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns isCommonProvisionalStandardisationCcOn.\r\n     */\r\n    Footer.prototype.isCommonProvisionalStandardisationCcOn = function () {\r\n        return configurableCharacteristicHelper.getCharacteristicValue(configurableCharacteristicNames.CommonProvisionalStandardisation, standardisationSetupStore.instance.markSchemeGroupId).toLowerCase() === 'true';\r\n    };\r\n    Object.defineProperty(Footer.prototype, \"discardResponseFailPopUpContent\", {\r\n        /**\r\n         * Returns the discard response fail popup content with displayId.\r\n         */\r\n        get: function () {\r\n            return stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.response-already-discarded-popup.body-with-response-id'), [responseStore.instance.selectedDisplayId.toString()]);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Footer;\r\n}(pureRenderComponent));\r\nmodule.exports = Footer;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 42)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 383:
/* no static exports found */
/* all exports used */
/*!*************************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/classifyresponse.tsx ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n  React component for Classify response header\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar classifyResponse = function (props) {\r\n    var className = 'primary rounded popup-nav wl-classfy-btn button';\r\n    if (props.isDisabled) {\r\n        className = className + ' disabled';\r\n    }\r\n    var onClickHandler = function (event) {\r\n        if (props.onClickAction) {\r\n            props.onClickAction(props.esMarkGroupId);\r\n        }\r\n    };\r\n    var result = React.createElement(\"button\", { id: 'classifyResponse_' + props.id, key: 'classifyResponse_key_' + props.id, disabled: props.isDisabled ? true : false, title: '', className: className, onClick: onClickHandler }, localeStore.instance.TranslateText(props.buttonTextResourceKey));\r\n    return result;\r\n};\r\nmodule.exports = classifyResponse;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL2NsYXNzaWZ5cmVzcG9uc2UudHN4Pzc1ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgUmVhY3QgY29tcG9uZW50IGZvciBDbGFzc2lmeSByZXNwb25zZSBoZWFkZXJcbiovXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG4vKiB0c2xpbnQ6ZW5hYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xuaW1wb3J0IFB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcblxubGV0IGNsYXNzTmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5cbi8qKlxuICogUHJvcGVydGllcyBvZiBDbGFzc2lmeSBidXR0b25cbiAqL1xuaW50ZXJmYWNlIENsYXNzaWZ5UmVzcG9uc2VQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XG5cdGlzRGlzYWJsZWQ6IGJvb2xlYW47XG5cdHJlbmRlcmVkT24/OiBudW1iZXI7XG5cdGVzTWFya0dyb3VwSWQ/OiBudW1iZXI7XG5cdGJ1dHRvblRleHRSZXNvdXJjZUtleTogc3RyaW5nO1xuXHRvbkNsaWNrQWN0aW9uPzogRnVuY3Rpb247XG59XG5cbmNvbnN0IGNsYXNzaWZ5UmVzcG9uc2U6XG5cdFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDxDbGFzc2lmeVJlc3BvbnNlUHJvcHM+ID1cblx0KHByb3BzOiBDbGFzc2lmeVJlc3BvbnNlUHJvcHMpID0+IHtcblx0XHRsZXQgY2xhc3NOYW1lOiBzdHJpbmcgPSAncHJpbWFyeSByb3VuZGVkIHBvcHVwLW5hdiB3bC1jbGFzc2Z5LWJ0biBidXR0b24nO1xuXG5cdFx0aWYgKHByb3BzLmlzRGlzYWJsZWQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZSArICcgZGlzYWJsZWQnO1xuXHRcdH1cblxuXHRcdGNvbnN0IG9uQ2xpY2tIYW5kbGVyID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRpZiAocHJvcHMub25DbGlja0FjdGlvbikge1xuXHRcdFx0XHRwcm9wcy5vbkNsaWNrQWN0aW9uKHByb3BzLmVzTWFya0dyb3VwSWQpO1xuXHRcdFx0fVxuICAgIFx0fTtcblxuXHRcdGxldCByZXN1bHQgPSA8YnV0dG9uXG5cdFx0XHRpZD17J2NsYXNzaWZ5UmVzcG9uc2VfJyArIHByb3BzLmlkfVxuXHRcdFx0a2V5PXsnY2xhc3NpZnlSZXNwb25zZV9rZXlfJyArIHByb3BzLmlkfVxuXHRcdFx0ZGlzYWJsZWQ9e3Byb3BzLmlzRGlzYWJsZWQgPyB0cnVlIDogZmFsc2V9XG5cdFx0XHR0aXRsZT17Jyd9XG5cdFx0XHRjbGFzc05hbWU9e2NsYXNzTmFtZX1cblx0XHRcdG9uQ2xpY2s9e29uQ2xpY2tIYW5kbGVyfT5cblx0XHRcdHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KHByb3BzLmJ1dHRvblRleHRSZXNvdXJjZUtleSl9XG5cdFx0PC9idXR0b24+O1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnQgPSBjbGFzc2lmeVJlc3BvbnNlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9zdGFuZGFyZGlzYXRpb25zZXR1cC9zaGFyZWQvY2xhc3NpZnlyZXNwb25zZS50c3giXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUdBO0FBYUE7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQVVBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 384:
/* no static exports found */
/* all exports used */
/*!********************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/reusebutton.tsx ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for Reuse button header\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\nvar ReuseButton = /** @class */ (function (_super) {\r\n    __extends(ReuseButton, _super);\r\n    /**\r\n     * Constructor for ReuseButton\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function ReuseButton(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.state = {\r\n            reRender: Date.now()\r\n        };\r\n        _this.onReuseClick = _this.onReuseClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    ReuseButton.prototype.render = function () {\r\n        return (React.createElement(\"button\", { id: 'reuse_button_id_' + this.props.id, key: 'reuse_button_key_' + this.props.id, disabled: this.props.isDisabled ? true : false, title: (this.props.isDisabled ?\r\n                localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-button.disable-tooltip')\r\n                : localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-button.enable-tooltip')), className: 'primary button rounded popup-nav reusebtn', onClick: this.onReuseClick }, (this.props.isDisabled ? localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-button.disable')\r\n            : localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-button.enable'))));\r\n    };\r\n    /**\r\n     * On Reuse click\r\n     */\r\n    ReuseButton.prototype.onReuseClick = function () {\r\n        standardisationActionCreator.reuseRigActionPopupOpen(this.props.displayId);\r\n    };\r\n    return ReuseButton;\r\n}(PureRenderComponent));\r\nmodule.exports = ReuseButton;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3JldXNlYnV0dG9uLnRzeD9hMTYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gIFJlYWN0IGNvbXBvbmVudCBmb3IgUmV1c2UgYnV0dG9uIGhlYWRlclxuKi9cbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmltcG9ydCBQdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XG5pbXBvcnQgc3RhbmRhcmRpc2F0aW9uQWN0aW9uQ3JlYXRvciA9IHJlcXVpcmUoJy4uLy4uLy4uL2FjdGlvbnMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc3RhbmRhcmRpc2F0aW9uYWN0aW9uY3JlYXRvcicpO1xuXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xuICAgIGRpc3BsYXlJZD86IHN0cmluZztcbiAgICBpc0Rpc2FibGVkOiBib29sZWFuO1xuICAgIHJlbmRlcmVkT24/OiBudW1iZXI7XG59XG5cbi8qKlxuICogU3RhdGUgb2YgYSBSZXVzZUJ1dHRvblxuICovXG5pbnRlcmZhY2UgU3RhdGUge1xuICAgIHJlUmVuZGVyPzogbnVtYmVyO1xufVxuXG5jbGFzcyBSZXVzZUJ1dHRvbiBleHRlbmRzIFB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgUmV1c2VCdXR0b25cbiAgICAgKiBAcGFyYW0gcHJvcHNcbiAgICAgKiBAcGFyYW0gc3RhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBTdGF0ZSkge1xuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgcmVSZW5kZXI6IERhdGUubm93KClcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vblJldXNlQ2xpY2sgPSB0aGlzLm9uUmV1c2VDbGljay5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgLyoqXG4gICAgKiBSZW5kZXIgY29tcG9uZW50XG4gICAgKi9cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgaWQ9eydyZXVzZV9idXR0b25faWRfJyArIHRoaXMucHJvcHMuaWR9XG4gICAgICAgICAgICBrZXk9eydyZXVzZV9idXR0b25fa2V5XycgKyB0aGlzLnByb3BzLmlkfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuaXNEaXNhYmxlZCA/IHRydWUgOiBmYWxzZX1cbiAgICAgICAgICAgIHRpdGxlPXsodGhpcy5wcm9wcy5pc0Rpc2FibGVkID9cbiAgICAgICAgICAgICAgICBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdzdGFuZGFyZGlzYXRpb24tc2V0dXAucHJldmlvdXMtc2Vzc2lvbi5yZXVzZS1idXR0b24uZGlzYWJsZS10b29sdGlwJylcbiAgICAgICAgICAgICAgICA6IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ3N0YW5kYXJkaXNhdGlvbi1zZXR1cC5wcmV2aW91cy1zZXNzaW9uLnJldXNlLWJ1dHRvbi5lbmFibGUtdG9vbHRpcCcpKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17J3ByaW1hcnkgYnV0dG9uIHJvdW5kZWQgcG9wdXAtbmF2IHJldXNlYnRuJ31cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25SZXVzZUNsaWNrfT5cbiAgICAgICAgICAgICAgICB7KHRoaXMucHJvcHMuaXNEaXNhYmxlZCA/IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ3N0YW5kYXJkaXNhdGlvbi1zZXR1cC5wcmV2aW91cy1zZXNzaW9uLnJldXNlLWJ1dHRvbi5kaXNhYmxlJylcbiAgICAgICAgICAgICAgICA6IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ3N0YW5kYXJkaXNhdGlvbi1zZXR1cC5wcmV2aW91cy1zZXNzaW9uLnJldXNlLWJ1dHRvbi5lbmFibGUnKSl9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uIFJldXNlIGNsaWNrXG4gICAgICovXG4gICAgcHJpdmF0ZSBvblJldXNlQ2xpY2soKSB7XG4gICAgICAgIHN0YW5kYXJkaXNhdGlvbkFjdGlvbkNyZWF0b3IucmV1c2VSaWdBY3Rpb25Qb3B1cE9wZW4odGhpcy5wcm9wcy5kaXNwbGF5SWQpO1xuICAgIH1cbn1cbmV4cG9ydCA9IFJldXNlQnV0dG9uO1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3JldXNlYnV0dG9uLnRzeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFlQTtBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFJQTtBQUdBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 386:
/* no static exports found */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/components/worklist/shared/allfilesnotviewedindicator.tsx ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n  React component for All pages not viewed indicator\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * Stateless All files not viewed indicator component\r\n * @param props\r\n */\r\n/* tslint:disable:variable-name */\r\nvar AllFilesNotViewedIndicator = function (props) {\r\n    /* tslint:enable:variable-name */\r\n    if (props.isECourseworkComponent && !props.allFilesViewed &&\r\n        props.isMarkingCompleted) {\r\n        return ((!props.isTileView) ?\r\n            (React.createElement(\"div\", { className: 'col-inner' },\r\n                React.createElement(\"span\", { title: localeStore.instance.\r\n                        TranslateText('marking.worklist.response-data.not-all-files-viewed-icon-tooltip') },\r\n                    React.createElement(\"span\", { className: 'sprite-icon un-view-icon', id: 'allFilesNotViewed_' + props.id, key: 'allFilesNotViewed_' + props.id }, localeStore.instance.\r\n                        TranslateText('marking.worklist.response-data.not-all-files-viewed-icon-tooltip'))))) :\r\n            (React.createElement(\"div\", { className: 'icon-holder' },\r\n                React.createElement(\"div\", { className: 'col wl-view-indicator', title: localeStore.instance.\r\n                        TranslateText('marking.worklist.response-data.not-all-files-viewed-icon-tooltip') },\r\n                    React.createElement(\"div\", { className: 'col-inner' },\r\n                        React.createElement(\"span\", { id: 'allFilesNotViewed_' + props.id, key: 'allFilesNotViewed_' + props.id, className: 'sprite-icon un-view-icon' }, localeStore.instance.\r\n                            TranslateText('marking.worklist.response-data.not-all-files-viewed-icon-tooltip')))))));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\nmodule.exports = AllFilesNotViewedIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2FsbGZpbGVzbm90dmlld2VkaW5kaWNhdG9yLnRzeD85MGY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgUmVhY3QgY29tcG9uZW50IGZvciBBbGwgcGFnZXMgbm90IHZpZXdlZCBpbmRpY2F0b3JcclxuKi9cclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBlQ291cnNld29ya0hlbHBlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZWNvdXJzZXdvcmsvZWNvdXJzZXdvcmtoZWxwZXInKTtcclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIEFsbCBmaWxlcyBub3Qgdmlld2VkIGluZGljYXRvclxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIGFsbEZpbGVzVmlld2VkPzogYm9vbGVhbjtcclxuICAgIGlzTWFya2luZ0NvbXBsZXRlZDogYm9vbGVhbjtcclxuICAgIGlzVGlsZVZpZXc/OiBib29sZWFuO1xyXG4gICAgaXNFQ291cnNld29ya0NvbXBvbmVudD86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdGF0ZWxlc3MgQWxsIGZpbGVzIG5vdCB2aWV3ZWQgaW5kaWNhdG9yIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0gcHJvcHNcclxuICovXHJcbi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuY29uc3QgQWxsRmlsZXNOb3RWaWV3ZWRJbmRpY2F0b3IgPSAocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQgPT4ge1xyXG4gICAgLyogdHNsaW50OmVuYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcbiAgICBpZiAocHJvcHMuaXNFQ291cnNld29ya0NvbXBvbmVudCAmJiAhcHJvcHMuYWxsRmlsZXNWaWV3ZWQgJiZcclxuICAgICAgICBwcm9wcy5pc01hcmtpbmdDb21wbGV0ZWQpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAoIXByb3BzLmlzVGlsZVZpZXcpID9cclxuICAgICAgICAgICAgICAgICg8ZGl2IGNsYXNzTmFtZT0nY29sLWlubmVyJz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT17bG9jYWxlU3RvcmUuaW5zdGFuY2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5ub3QtYWxsLWZpbGVzLXZpZXdlZC1pY29uLXRvb2x0aXAnKSB9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3Nwcml0ZS1pY29uIHVuLXZpZXctaWNvbidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXsnYWxsRmlsZXNOb3RWaWV3ZWRfJyArIHByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXsnYWxsRmlsZXNOb3RWaWV3ZWRfJyArIHByb3BzLmlkfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LnJlc3BvbnNlLWRhdGEubm90LWFsbC1maWxlcy12aWV3ZWQtaWNvbi10b29sdGlwJykgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICApIDpcclxuICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naWNvbi1ob2xkZXInPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sIHdsLXZpZXctaW5kaWNhdG9yJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2xvY2FsZVN0b3JlLmluc3RhbmNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5ub3QtYWxsLWZpbGVzLXZpZXdlZC1pY29uLXRvb2x0aXAnKSB9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1pbm5lcic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9eydhbGxGaWxlc05vdFZpZXdlZF8nICsgcHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17J2FsbEZpbGVzTm90Vmlld2VkXycgKyBwcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdzcHJpdGUtaWNvbiB1bi12aWV3LWljb24nPntsb2NhbGVTdG9yZS5pbnN0YW5jZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5ub3QtYWxsLWZpbGVzLXZpZXdlZC1pY29uLXRvb2x0aXAnKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0ID0gQWxsRmlsZXNOb3RWaWV3ZWRJbmRpY2F0b3I7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9hbGxmaWxlc25vdHZpZXdlZGluZGljYXRvci50c3giXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQWFBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFLQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBSUE7QUFPQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 387:
/* no static exports found */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/components/worklist/shared/generictextcolumn.tsx ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n    React component for generic text column in list view\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:variable-name */\r\nvar GenericTextColumn = function (props) {\r\n    return (React.createElement(\"span\", { id: 'gen_' + props.id, className: 'dim-text txt-val small-text', title: (props.title) ? props.title : '' }, props.textValue));\r\n};\r\nmodule.exports = GenericTextColumn;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2dlbmVyaWN0ZXh0Y29sdW1uLnRzeD8yYTQ3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgICBSZWFjdCBjb21wb25lbnQgZm9yIGdlbmVyaWMgdGV4dCBjb2x1bW4gaW4gbGlzdCB2aWV3XHJcbiovXHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIGxhc3QgdXBkYXRlZCBkYXRlLlxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIHRleHRWYWx1ZT86IERhdGU7XHJcbiAgICB0aXRsZT86IHN0cmluZztcclxufVxyXG5cclxuLyogdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZSAqL1xyXG5jb25zdCBHZW5lcmljVGV4dENvbHVtbiA9IChwcm9wczogUHJvcHMpID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPHNwYW4gaWQ9eydnZW5fJyArIHByb3BzLmlkfSBjbGFzc05hbWU9J2RpbS10ZXh0IHR4dC12YWwgc21hbGwtdGV4dCdcclxuICAgICAgICAgICAgdGl0bGU9eyhwcm9wcy50aXRsZSkgPyBwcm9wcy50aXRsZSA6ICcnfT5cclxuICAgICAgICAgICAge3Byb3BzLnRleHRWYWx1ZX1cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0ID0gR2VuZXJpY1RleHRDb2x1bW47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9nZW5lcmljdGV4dGNvbHVtbi50c3giXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFNQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 388:
/* no static exports found */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/components/worklist/shared/lastupdatedcolumn.tsx ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n    React component for last updated date and time of a response.S\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar constants = __webpack_require__(/*! ../../utility/constants */ 241);\r\nvar GenericDate = __webpack_require__(/*! ./genericdate */ 315);\r\n/**\r\n * React component class for time to end the grace period\r\n */\r\nvar lastUpdatedColumn = function (props) {\r\n    if (props.dateType === enums.WorkListDateType.lastUpdatedDate || enums.WorkListDateType.submittedDate) {\r\n        /**\r\n         * Last updated date\r\n         */\r\n        var displayValue = void 0;\r\n        var formattedDate = void 0;\r\n        if (props.dateValue) {\r\n            formattedDate = (React.createElement(GenericDate, { dateValue: props.dateValue, id: 'dtup_' + props.id, key: 'dtup_' + props.id, className: constants.LASTUPDATED_COLUMN_STYLE }));\r\n        }\r\n        else {\r\n            /**\r\n             * If marking is not started the dateValue prop should be undefined , and shows marking not started text\r\n             */\r\n            formattedDate = (React.createElement(GenericDate, { id: 'dtup_' + props.id, key: 'dtup_' + props.id, className: constants.LASTUPDATED_COLUMN_STYLE, displayText: localeStore.instance.TranslateText('marking.worklist.response-data.marking-not-started') }));\r\n        }\r\n        return (React.createElement(\"div\", null, formattedDate));\r\n    }\r\n};\r\nmodule.exports = lastUpdatedColumn;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2xhc3R1cGRhdGVkY29sdW1uLnRzeD83Njk2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgICBSZWFjdCBjb21wb25lbnQgZm9yIGxhc3QgdXBkYXRlZCBkYXRlIGFuZCB0aW1lIG9mIGEgcmVzcG9uc2UuU1xyXG4qL1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IGxvY2FsZUhlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvbG9jYWxlL2xvY2FsZWhlbHBlcicpO1xyXG5pbXBvcnQgc3RyaW5nSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9nZW5lcmljL3N0cmluZ2hlbHBlcicpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2NvbnN0YW50cycpO1xyXG5pbXBvcnQgR2VuZXJpY0RhdGUgPSByZXF1aXJlKCcuL2dlbmVyaWNkYXRlJyk7XHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIGxhc3QgdXBkYXRlZCBkYXRlLlxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIGRhdGVWYWx1ZT86IERhdGU7XHJcbiAgICBkYXRlVHlwZTogZW51bXMuV29ya0xpc3REYXRlVHlwZTtcclxuICAgIGlzVGlsZVZpZXc/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogUmVhY3QgY29tcG9uZW50IGNsYXNzIGZvciB0aW1lIHRvIGVuZCB0aGUgZ3JhY2UgcGVyaW9kXHJcbiAqL1xyXG5jb25zdCBsYXN0VXBkYXRlZENvbHVtbiA9IChwcm9wczogUHJvcHMpID0+IHtcclxuXHJcbiAgICBpZiAocHJvcHMuZGF0ZVR5cGUgPT09IGVudW1zLldvcmtMaXN0RGF0ZVR5cGUubGFzdFVwZGF0ZWREYXRlIHx8IGVudW1zLldvcmtMaXN0RGF0ZVR5cGUuc3VibWl0dGVkRGF0ZSkge1xyXG4gICAgICAgIC8qKiBcclxuICAgICAgICAgKiBMYXN0IHVwZGF0ZWQgZGF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxldCBkaXNwbGF5VmFsdWU7XHJcbiAgICAgICAgbGV0IGZvcm1hdHRlZERhdGU6IEpTWC5FbGVtZW50O1xyXG4gICAgICAgIGlmIChwcm9wcy5kYXRlVmFsdWUpIHtcclxuICAgICAgICAgICAgZm9ybWF0dGVkRGF0ZSA9ICg8R2VuZXJpY0RhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlVmFsdWU9e3Byb3BzLmRhdGVWYWx1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD17J2R0dXBfJyArIHByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17J2R0dXBfJyArIHByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y29uc3RhbnRzLkxBU1RVUERBVEVEX0NPTFVNTl9TVFlMRX0gLz4pO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKiogXHJcbiAgICAgICAgICAgICAqIElmIG1hcmtpbmcgaXMgbm90IHN0YXJ0ZWQgdGhlIGRhdGVWYWx1ZSBwcm9wIHNob3VsZCBiZSB1bmRlZmluZWQgLCBhbmQgc2hvd3MgbWFya2luZyBub3Qgc3RhcnRlZCB0ZXh0XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBmb3JtYXR0ZWREYXRlID0gKDxHZW5lcmljRGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXsnZHR1cF8nICsgcHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXsnZHR1cF8nICsgcHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjb25zdGFudHMuTEFTVFVQREFURURfQ09MVU1OX1NUWUxFfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlUZXh0PXtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LnJlc3BvbnNlLWRhdGEubWFya2luZy1ub3Qtc3RhcnRlZCcpfSAvPik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2Pntmb3JtYXR0ZWREYXRlfTwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydCA9IGxhc3RVcGRhdGVkQ29sdW1uO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9zaGFyZWQvbGFzdHVwZGF0ZWRjb2x1bW4udHN4Il0sIm1hcHBpbmdzIjoiO0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFHQTtBQUNBO0FBQ0E7QUFVQTs7QUFFQTtBQUNBO0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFLQTtBQUVBO0FBR0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 389:
/* no static exports found */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/components/worklist/shared/linkedmessageindicator.tsx ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar localeHelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar markSchemeHelper = __webpack_require__(/*! ../../../utility/markscheme/markschemehelper */ 276);\r\nvar messageStore = __webpack_require__(/*! ../../../stores/message/messagestore */ 240);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../../actions/messaging/messagingactioncreator */ 268);\r\nvar responseHelper = __webpack_require__(/*! ../../utility/responsehelper/responsehelper */ 249);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../utility/ecoursework/ecourseworkhelper */ 238);\r\nvar applicationStore = __webpack_require__(/*! ../../../stores/applicationoffline/applicationstore */ 247);\r\nvar applicationActionCreator = __webpack_require__(/*! ../../../actions/applicationoffline/applicationactioncreator */ 256);\r\nvar makerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\n/**\r\n * LinkedMessageIndicator component.\r\n * @param {Props} props\r\n */\r\nvar LinkedMessageIndicator = /** @class */ (function (_super) {\r\n    __extends(LinkedMessageIndicator, _super);\r\n    /**\r\n     * Constructor fot LinkedMessageIndicator\r\n     * @param props\r\n     */\r\n    function LinkedMessageIndicator(props) {\r\n        var _this = _super.call(this, props, null) || this;\r\n        /**\r\n         * Open response message while clicking on linked message icon\r\n         */\r\n        _this.onClick = function (event) {\r\n            event.stopPropagation();\r\n            if (!applicationStore.instance.isOnline) {\r\n                applicationActionCreator.checkActionInterrupted();\r\n            }\r\n            else {\r\n                // open response\r\n                var actualDisplayId = void 0;\r\n                // Ideally marking mode should be read from the opened response,\r\n                // since multiple marking modes won't come in the same worklist now this will work.\r\n                var selectedMarkingMode = worklistStore.instance.getMarkingModeByWorkListType(worklistStore.instance.currentWorklistType);\r\n                if (selectedMarkingMode === enums.MarkingMode.LiveMarking) {\r\n                    actualDisplayId = _this.props.displayId.toString();\r\n                }\r\n                else {\r\n                    var contents = _this.props.displayId.split(' ');\r\n                    actualDisplayId = contents[contents.length - 1];\r\n                }\r\n                eCourseworkHelper.fetchECourseWorkCandidateScriptMetadata(parseInt(actualDisplayId));\r\n                if (!messageStore.instance.isMessagePanelActive) {\r\n                    var openedResponseDetails = makerOperationModeFactory.operationMode.openedResponseDetails(actualDisplayId);\r\n                    responseHelper.openResponse(parseFloat(actualDisplayId), enums.ResponseNavigation.specific, makerOperationModeFactory.operationMode.isStandardisationSetupMode ?\r\n                        enums.ResponseMode.open : worklistStore.instance.getResponseMode, makerOperationModeFactory.operationMode.isStandardisationSetupMode ?\r\n                        openedResponseDetails.esMarkGroupId : openedResponseDetails.markGroupId, enums.ResponseViewMode.zoneView, enums.TriggerPoint.WorkListResponseMessageIcon);\r\n                    markSchemeHelper.getMarks(parseInt(actualDisplayId), selectedMarkingMode);\r\n                }\r\n                else {\r\n                    var messageNavigationArguments = {\r\n                        responseId: parseInt(actualDisplayId),\r\n                        canNavigate: false,\r\n                        navigateTo: enums.MessageNavigation.toResponse,\r\n                        navigationConfirmed: false,\r\n                        hasMessageContainsDirtyValue: undefined,\r\n                        triggerPoint: enums.TriggerPoint.WorkListResponseMessageIcon\r\n                    };\r\n                    messagingActionCreator.canMessageNavigate(messageNavigationArguments);\r\n                }\r\n            }\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    LinkedMessageIndicator.prototype.render = function () {\r\n        var messageContent = this.getMessageContent();\r\n        if (messageContent === undefined && !this.props.isTileView) {\r\n            return null;\r\n        }\r\n        else {\r\n            return (React.createElement(\"div\", { className: 'col wl-message text-center', id: this.props.id + '_messgeIndicator' }, messageContent));\r\n        }\r\n    };\r\n    /**\r\n     * Get message content\r\n     */\r\n    LinkedMessageIndicator.prototype.getMessageContent = function () {\r\n        var messageText = '';\r\n        if (this.props.messageCount > 0) {\r\n            messageText = this.props.isTeamManagementMode ?\r\n                localeStore.instance.TranslateText('team-management.examiner-worklist.response-data.unread-messages-icon-tooltip') :\r\n                localeStore.instance.TranslateText('marking.worklist.response-data.unread-messages-icon-tooltip');\r\n        }\r\n        else if (this.props.hasMessages) {\r\n            messageText = this.props.isTeamManagementMode ?\r\n                localeStore.instance.TranslateText('team-management.examiner-worklist.response-data.messages-icon-tooltip') :\r\n                messageText = localeStore.instance.TranslateText('marking.worklist.response-data.messages-icon-tooltip');\r\n        }\r\n        var messageClass = 'message-icon sprite-icon';\r\n        var messageAltText = localeStore.instance.TranslateText('generic.navigation-bar.inbox');\r\n        var result = undefined;\r\n        if (!this.props.hasMessages) {\r\n            return result;\r\n        }\r\n        if (this.props.messageCount > 0) {\r\n            result = (this.props.isTileView) ? React.createElement(\"div\", { className: 'col-inner' },\r\n                React.createElement(\"a\", { title: messageText, className: 'resp-messages' },\r\n                    React.createElement(\"span\", { className: messageClass },\r\n                        \" \",\r\n                        messageAltText,\r\n                        \" \"),\r\n                    React.createElement(\"span\", { className: 'notification circle', id: this.props.id + '_messageNotification' }, localeHelper.toLocaleString(this.props.messageCount > 0 ? this.props.messageCount : '')))) :\r\n                React.createElement(\"div\", { className: 'wl-message' },\r\n                    React.createElement(\"a\", { title: messageText, className: 'resp-messages', onClick: this.onClick },\r\n                        React.createElement(\"span\", { className: messageClass },\r\n                            \" \",\r\n                            messageAltText,\r\n                            \" \"),\r\n                        React.createElement(\"span\", { className: 'notification circle', id: this.props.id + '_messageNotification' }, localeHelper.toLocaleString(this.props.messageCount > 0 ? this.props.messageCount : ''))));\r\n        }\r\n        else {\r\n            result = (this.props.isTileView) ? React.createElement(\"div\", { className: 'col-inner' },\r\n                React.createElement(\"a\", { title: messageText, className: 'resp-messages' },\r\n                    React.createElement(\"span\", { className: messageClass },\r\n                        \" \",\r\n                        messageAltText,\r\n                        \" \"))) :\r\n                React.createElement(\"div\", { className: 'wl-message' },\r\n                    React.createElement(\"a\", { title: messageText, className: 'resp-messages', onClick: this.onClick },\r\n                        React.createElement(\"span\", { className: messageClass },\r\n                            \" \",\r\n                            messageAltText,\r\n                            \" \")));\r\n        }\r\n        return result;\r\n    };\r\n    return LinkedMessageIndicator;\r\n}(PureRenderComponent));\r\nmodule.exports = LinkedMessageIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 390:
/* no static exports found */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/components/worklist/shared/totalmark.tsx ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar markingstore = __webpack_require__(/*! ../../../stores/marking/markingstore */ 236);\r\n/**\r\n * React component\r\n * @param {Props} props\r\n */\r\nvar TotalMark = /** @class */ (function (_super) {\r\n    __extends(TotalMark, _super);\r\n    /**\r\n     * Constructor for total mark\r\n     * @param props\r\n     */\r\n    function TotalMark(props) {\r\n        return _super.call(this, props, null) || this;\r\n    }\r\n    /**\r\n     * getTotalMarkOutput\r\n     */\r\n    TotalMark.prototype.getTotalMarkOutput = function () {\r\n        var result = React.createElement(\"span\", null);\r\n        var totalmark;\r\n        var hasComplexOptionality = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ComplexOptionality, markingstore.instance.selectedQIGMarkSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        if (this.props.markingProgress === 0) {\r\n            result = (React.createElement(\"span\", { className: 'large-text dark-link', id: 'totalMark_' + this.props.id }, \"--\"));\r\n        }\r\n        else if (this.props.isNonNumericMark) {\r\n            result = (React.createElement(\"span\", { className: 'large-text dark-link', id: 'totalMark_' + this.props.id }, \"N/A\"));\r\n        }\r\n        else if (hasComplexOptionality && this.props.markingProgress < 100) {\r\n            //Hide totalmark based on cc value and totalprogress.\r\n            totalmark = '...';\r\n            result = (React.createElement(\"span\", { title: this.getTranslated('marking.worklist.complex-optionality.total-marks'), className: 'large-text dark-link', id: 'totalMark_' + this.props.id }, totalmark));\r\n        }\r\n        else {\r\n            totalmark = this.props.totalMark.toLocaleString(localeStore.instance.Locale);\r\n            result = (React.createElement(\"span\", { className: 'large-text dark-link', id: 'totalMark_' + this.props.id }, totalmark));\r\n        }\r\n        return result;\r\n    };\r\n    Object.defineProperty(TotalMark.prototype, \"currentLocale\", {\r\n        /*\r\n         * Get the locale\r\n        */\r\n        get: function () {\r\n            return localeStore.instance.Locale;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Translate the text\r\n     * @param value\r\n     * @returns Localised string\r\n     */\r\n    TotalMark.prototype.getTranslated = function (value) {\r\n        return localeStore.instance.TranslateText(value);\r\n    };\r\n    return TotalMark;\r\n}(pureRenderComponent));\r\nmodule.exports = TotalMark;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3RvdGFsbWFyay50c3g/YzViYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpYy9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpY3NoZWxwZXInKTtcclxuaW1wb3J0IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpYy9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpY3NuYW1lcycpO1xyXG5pbXBvcnQgbWFya2luZ3N0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL21hcmtpbmcvbWFya2luZ3N0b3JlJyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBhIGNvbXBvbmVudFxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIGlzTm9uTnVtZXJpY01hcms6IGJvb2xlYW47XHJcbiAgICBtYXhpbXVtTWFyazogbnVtYmVyO1xyXG4gICAgdG90YWxNYXJrOiBudW1iZXI7XHJcbiAgICBtYXJraW5nUHJvZ3Jlc3M6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlYWN0IGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge1Byb3BzfSBwcm9wc1xyXG4gKi9cclxuY2xhc3MgVG90YWxNYXJrIGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgdG90YWwgbWFya1xyXG4gICAgICogQHBhcmFtIHByb3BzXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGdldFRvdGFsTWFya091dHB1dFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0VG90YWxNYXJrT3V0cHV0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IDxzcGFuPjwvc3Bhbj47XHJcbiAgICAgICAgbGV0IHRvdGFsbWFyaztcclxuICAgICAgICBsZXQgaGFzQ29tcGxleE9wdGlvbmFsaXR5ID0gY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzSGVscGVyLmdldENoYXJhY3RlcmlzdGljVmFsdWUoXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzLkNvbXBsZXhPcHRpb25hbGl0eSxcclxuICAgICAgICAgICAgbWFya2luZ3N0b3JlLmluc3RhbmNlLnNlbGVjdGVkUUlHTWFya1NjaGVtZUdyb3VwSWQpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJyA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5tYXJraW5nUHJvZ3Jlc3MgPT09IDApIHtcclxuXHJcbiAgICAgICAgICAgIHJlc3VsdCA9IChcclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nbGFyZ2UtdGV4dCBkYXJrLWxpbmsnIGlkPXsndG90YWxNYXJrXycgKyB0aGlzLnByb3BzLmlkfT4tLTwvc3Bhbj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuaXNOb25OdW1lcmljTWFyaykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSAoXHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2xhcmdlLXRleHQgZGFyay1saW5rJyBpZD17J3RvdGFsTWFya18nICsgdGhpcy5wcm9wcy5pZH0+Ti9BPC9zcGFuPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaGFzQ29tcGxleE9wdGlvbmFsaXR5ICYmIHRoaXMucHJvcHMubWFya2luZ1Byb2dyZXNzIDwgMTAwKSB7XHJcbiAgICAgICAgICAgIC8vSGlkZSB0b3RhbG1hcmsgYmFzZWQgb24gY2MgdmFsdWUgYW5kIHRvdGFscHJvZ3Jlc3MuXHJcbiAgICAgICAgICAgIHRvdGFsbWFyayA9ICcuLi4nO1xyXG4gICAgICAgICAgICByZXN1bHQgPSAoPHNwYW4gdGl0bGU9e3RoaXMuZ2V0VHJhbnNsYXRlZCgnbWFya2luZy53b3JrbGlzdC5jb21wbGV4LW9wdGlvbmFsaXR5LnRvdGFsLW1hcmtzJyl9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2xhcmdlLXRleHQgZGFyay1saW5rJyBpZD17J3RvdGFsTWFya18nICsgdGhpcy5wcm9wcy5pZH0+e3RvdGFsbWFya308L3NwYW4+KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0b3RhbG1hcmsgPSB0aGlzLnByb3BzLnRvdGFsTWFyay50b0xvY2FsZVN0cmluZyhsb2NhbGVTdG9yZS5pbnN0YW5jZS5Mb2NhbGUpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSAoPHNwYW4gY2xhc3NOYW1lPSdsYXJnZS10ZXh0IGRhcmstbGluaycgaWQ9eyd0b3RhbE1hcmtfJyArIHRoaXMucHJvcHMuaWR9Pnt0b3RhbG1hcmt9PC9zcGFuPik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG5cdC8qXHJcblx0ICogR2V0IHRoZSBsb2NhbGVcclxuXHQqL1xyXG5cdHByb3RlY3RlZCBnZXQgY3VycmVudExvY2FsZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIGxvY2FsZVN0b3JlLmluc3RhbmNlLkxvY2FsZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRyYW5zbGF0ZSB0aGUgdGV4dFxyXG5cdCAqIEBwYXJhbSB2YWx1ZVxyXG5cdCAqIEByZXR1cm5zIExvY2FsaXNlZCBzdHJpbmdcclxuXHQgKi9cclxuXHRwcm90ZWN0ZWQgZ2V0VHJhbnNsYXRlZCh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KHZhbHVlKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFRvdGFsTWFyaztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC90b3RhbG1hcmsudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWUE7OztBQUdBO0FBQ0E7QUFBQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBR0E7QUFBQTtBQUNBO0FBR0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 391:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/worklist/shared/totalmarkdetail.tsx ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar totalMark = __webpack_require__(/*! ./totalmark */ 390);\r\n/**\r\n * React component\r\n * @param {Props} props\r\n */\r\nvar TotalMarkDetail = /** @class */ (function (_super) {\r\n    __extends(TotalMarkDetail, _super);\r\n    /**\r\n     * Constructor for TotalMarkTile\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function TotalMarkDetail(props, state) {\r\n        return _super.call(this, props) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    TotalMarkDetail.prototype.render = function () {\r\n        return (this.getTotalMarkOutput());\r\n    };\r\n    return TotalMarkDetail;\r\n}(totalMark));\r\nmodule.exports = TotalMarkDetail;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3RvdGFsbWFya2RldGFpbC50c3g/MWQ1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IHRvdGFsTWFyayA9IHJlcXVpcmUoJy4vdG90YWxtYXJrJyk7XHJcblxyXG4vKipcclxuICogUmVhY3QgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7UHJvcHN9IHByb3BzXHJcbiAqL1xyXG5jbGFzcyBUb3RhbE1hcmtEZXRhaWwgZXh0ZW5kcyB0b3RhbE1hcmsge1xyXG5cclxuXHQvKipcclxuXHQgKiBDb25zdHJ1Y3RvciBmb3IgVG90YWxNYXJrVGlsZVxyXG5cdCAqIEBwYXJhbSBwcm9wc1xyXG5cdCAqIEBwYXJhbSBzdGF0ZVxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHByb3BzOiBhbnksIHN0YXRlOiBhbnkpIHtcclxuXHRcdHN1cGVyKHByb3BzKTtcclxuXHR9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgY29tcG9uZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5nZXRUb3RhbE1hcmtPdXRwdXQoKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFRvdGFsTWFya0RldGFpbDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC90b3RhbG1hcmtkZXRhaWwudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBO0FBRUE7OztBQUdBO0FBQ0E7QUFBQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 395:
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./src/actions/logout/logoutaction.ts ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar action = __webpack_require__(/*! ../base/action */ 229);\r\nvar dataRetrievalAction = __webpack_require__(/*! ../base/dataretrievalaction */ 239);\r\nvar actionType = __webpack_require__(/*! ../base/actiontypes */ 228);\r\nvar LogoutAction = /** @class */ (function (_super) {\r\n    __extends(LogoutAction, _super);\r\n    /**\r\n     * Logout action\r\n     * @param success\r\n     * @param errorJsonObject\r\n     */\r\n    function LogoutAction(success, errorJsonObject) {\r\n        var _this = _super.call(this, action.Source.View, actionType.USER_SESSION_UPDATE_ON_LOGOUT, success, errorJsonObject) || this;\r\n        _this.auditLog.logContent = _this.auditLog.logContent.replace(/{success}/g, success.toString());\r\n        return _this;\r\n    }\r\n    return LogoutAction;\r\n}(dataRetrievalAction));\r\nmodule.exports = LogoutAction;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvbG9nb3V0L2xvZ291dGFjdGlvbi50cz9jYWM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhY3Rpb24gPSByZXF1aXJlKCcuLi9iYXNlL2FjdGlvbicpO1xyXG5pbXBvcnQgZGF0YVJldHJpZXZhbEFjdGlvbiA9IHJlcXVpcmUoJy4uL2Jhc2UvZGF0YXJldHJpZXZhbGFjdGlvbicpO1xyXG5pbXBvcnQgYWN0aW9uQXVkaXRMb2dJbmZvID0gcmVxdWlyZSgnLi4vYmFzZS9hdWRpdGxvZ2luZm8vYWN0aW9uYXVkaXRsb2dpbmZvJyk7XHJcbmltcG9ydCBhY3Rpb25UeXBlID0gcmVxdWlyZSgnLi4vYmFzZS9hY3Rpb250eXBlcycpO1xyXG5cclxuY2xhc3MgTG9nb3V0QWN0aW9uIGV4dGVuZHMgZGF0YVJldHJpZXZhbEFjdGlvbiB7XHJcblxyXG4gICAvKipcclxuICAgICogTG9nb3V0IGFjdGlvblxyXG4gICAgKiBAcGFyYW0gc3VjY2Vzc1xyXG4gICAgKiBAcGFyYW0gZXJyb3JKc29uT2JqZWN0XHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc3VjY2VzczogYm9vbGVhbiwgZXJyb3JKc29uT2JqZWN0PzogYW55KSB7XHJcbiAgICAgICAgc3VwZXIoYWN0aW9uLlNvdXJjZS5WaWV3LCBhY3Rpb25UeXBlLlVTRVJfU0VTU0lPTl9VUERBVEVfT05fTE9HT1VULCBzdWNjZXNzLCBlcnJvckpzb25PYmplY3QpO1xyXG4gICAgICAgIHRoaXMuYXVkaXRMb2cubG9nQ29udGVudCA9IHRoaXMuYXVkaXRMb2cubG9nQ29udGVudC5yZXBsYWNlKC97c3VjY2Vzc30vZywgc3VjY2Vzcy50b1N0cmluZygpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gTG9nb3V0QWN0aW9uO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2FjdGlvbnMvbG9nb3V0L2xvZ291dGFjdGlvbi50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFFQTs7QUFDQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 396:
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/actions/logout/logoutactioncreator.ts ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar dispatcher = __webpack_require__(/*! ../../app/dispatcher */ 242);\r\nvar logoutAction = __webpack_require__(/*! ./logoutaction */ 395);\r\nvar authenticationDataService = __webpack_require__(/*! ../../dataservices/authentication/authenticationdataservice */ 453);\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar marksAndAnnotationsSaveHelper = __webpack_require__(/*! ../../utility/marking/marksandannotationssavehelper */ 295);\r\nvar base = __webpack_require__(/*! ../base/actioncreatorbase */ 280);\r\nvar userInfoStore = __webpack_require__(/*! ../../stores/userinfo/userinfostore */ 244);\r\n/**\r\n * Logout action creator helper class\r\n */\r\nvar LogoutActionCreator = /** @class */ (function (_super) {\r\n    __extends(LogoutActionCreator, _super);\r\n    function LogoutActionCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Update user session data\r\n     * @param logoutData\r\n     */\r\n    LogoutActionCreator.prototype.updateUserSession = function (logoutData) {\r\n        var that = this;\r\n        logoutData.isReportsPageAccessed = userInfoStore.instance.isReportsPageSelected;\r\n        marksAndAnnotationsSaveHelper.triggerMarksAndAnnotationsQueueProcessing(enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Logout, function () {\r\n            //needs to be save the pending items in the save marks and annotations queue.\r\n            authenticationDataService.updateUserSession(logoutData, function (success, json) {\r\n                // This will validate the call to find any network failure\r\n                // and is mandatory to add this.\r\n                if (that.validateCall(json, false, true, enums.WarningMessageAction.None, true)) {\r\n                    dispatcher.dispatch(new logoutAction(success, json));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return LogoutActionCreator;\r\n}(base));\r\nvar logoutActionCreator = new LogoutActionCreator();\r\nmodule.exports = logoutActionCreator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvbG9nb3V0L2xvZ291dGFjdGlvbmNyZWF0b3IudHM/MWYzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uLy4uL2FwcC9kaXNwYXRjaGVyJyk7XHJcbmltcG9ydCBsb2dvdXRBcmd1bWVudCA9IHJlcXVpcmUoJy4uLy4uL2RhdGFzZXJ2aWNlcy9hdXRoZW50aWNhdGlvbi9sb2dvdXRhcmd1bWVudCcpO1xyXG5pbXBvcnQgbG9nb3V0QWN0aW9uID0gcmVxdWlyZSgnLi9sb2dvdXRhY3Rpb24nKTtcclxuaW1wb3J0IGF1dGhlbnRpY2F0aW9uRGF0YVNlcnZpY2UgPSByZXF1aXJlKCcuLi8uLi9kYXRhc2VydmljZXMvYXV0aGVudGljYXRpb24vYXV0aGVudGljYXRpb25kYXRhc2VydmljZScpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IHJlc3BvbnNlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvcmVzcG9uc2UvcmVzcG9uc2VzdG9yZScpO1xyXG5pbXBvcnQgbWFya3NBbmRBbm5vdGF0aW9uc1NhdmVIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L21hcmtpbmcvbWFya3NhbmRhbm5vdGF0aW9uc3NhdmVoZWxwZXInKTtcclxuaW1wb3J0IGJhc2UgPSByZXF1aXJlKCcuLi9iYXNlL2FjdGlvbmNyZWF0b3JiYXNlJyk7XHJcbmltcG9ydCB1c2VySW5mb1N0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL3VzZXJpbmZvL3VzZXJpbmZvc3RvcmUnKTtcclxuXHJcbi8qKlxyXG4gKiBMb2dvdXQgYWN0aW9uIGNyZWF0b3IgaGVscGVyIGNsYXNzXHJcbiAqL1xyXG5jbGFzcyBMb2dvdXRBY3Rpb25DcmVhdG9yIGV4dGVuZHMgYmFzZSB7XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB1c2VyIHNlc3Npb24gZGF0YVxyXG4gICAgICogQHBhcmFtIGxvZ291dERhdGFcclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZVVzZXJTZXNzaW9uKGxvZ291dERhdGE6IGxvZ291dEFyZ3VtZW50KTogdm9pZCB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICBsb2dvdXREYXRhLmlzUmVwb3J0c1BhZ2VBY2Nlc3NlZCA9IHVzZXJJbmZvU3RvcmUuaW5zdGFuY2UuaXNSZXBvcnRzUGFnZVNlbGVjdGVkO1xyXG4gICAgICAgIG1hcmtzQW5kQW5ub3RhdGlvbnNTYXZlSGVscGVyLnRyaWdnZXJNYXJrc0FuZEFubm90YXRpb25zUXVldWVQcm9jZXNzaW5nKFxyXG4gICAgICAgICAgICBlbnVtcy5TYXZlTWFya3NBbmRBbm5vdGF0aW9uc1Byb2Nlc3NpbmdUcmlnZ2VyUG9pbnQuTG9nb3V0LFxyXG4gICAgICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vbmVlZHMgdG8gYmUgc2F2ZSB0aGUgcGVuZGluZyBpdGVtcyBpbiB0aGUgc2F2ZSBtYXJrcyBhbmQgYW5ub3RhdGlvbnMgcXVldWUuXHJcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvbkRhdGFTZXJ2aWNlLnVwZGF0ZVVzZXJTZXNzaW9uKGxvZ291dERhdGEsIGZ1bmN0aW9uIChzdWNjZXNzOiBib29sZWFuLCBqc29uPzogYW55KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCB2YWxpZGF0ZSB0aGUgY2FsbCB0byBmaW5kIGFueSBuZXR3b3JrIGZhaWx1cmVcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaXMgbWFuZGF0b3J5IHRvIGFkZCB0aGlzLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0LnZhbGlkYXRlQ2FsbChqc29uLCBmYWxzZSwgdHJ1ZSwgZW51bXMuV2FybmluZ01lc3NhZ2VBY3Rpb24uTm9uZSwgdHJ1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hlci5kaXNwYXRjaChuZXcgbG9nb3V0QWN0aW9uKHN1Y2Nlc3MsIGpzb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5sZXQgbG9nb3V0QWN0aW9uQ3JlYXRvciA9IG5ldyBMb2dvdXRBY3Rpb25DcmVhdG9yKCk7XHJcbmV4cG9ydCA9IGxvZ291dEFjdGlvbkNyZWF0b3I7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9hY3Rpb25zL2xvZ291dC9sb2dvdXRhY3Rpb25jcmVhdG9yLnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQUE7O0FBdUJBO0FBdEJBOzs7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 398:
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./src/components/base/customerror.ts ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/**\r\n * Class for custom error\r\n */\r\nvar CustomError = /** @class */ (function (_super) {\r\n    __extends(CustomError, _super);\r\n    /**\r\n     * Constructor CustomError\r\n     * @param module\r\n     * @param message\r\n     * @param header\r\n     * @param showErrorIcon\r\n     */\r\n    function CustomError(moduleName, message, header, showErrorIcon) {\r\n        var _this = _super.call(this, message) || this;\r\n        _this.moduleName = moduleName;\r\n        _this.message = message;\r\n        _this.headerText = header;\r\n        _this.showErrorIcon = showErrorIcon;\r\n        return _this;\r\n    }\r\n    return CustomError;\r\n}(Error));\r\nmodule.exports = CustomError;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmFzZS9jdXN0b21lcnJvci50cz9mMjRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDbGFzcyBmb3IgY3VzdG9tIGVycm9yXHJcbiAqL1xyXG5jbGFzcyBDdXN0b21FcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIC8qKiBUaGUgY29tcG9uZW50IG5hbWUgKi9cclxuICAgIHB1YmxpYyBtb2R1bGVOYW1lOiBzdHJpbmc7XHJcbiAgICAvKiogVGhlIGVycm9yIG1lc3NhZ2UgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgICAvKiBIZWFkZXIgc3RyaW5nIGZvciB0aGUgTWVzc2FnZSovXHJcbiAgICBwdWJsaWMgaGVhZGVyVGV4dDogc3RyaW5nO1xyXG4gICAgLyogYm9vbGVhbiB2YWx1ZSB0byBpbmRpY2F0ZSB3aGV0aGVyIHdlIGhhdmUgdG8gc2hvdyBlcnJvciBpY29uIG9yIG5vdCovXHJcbiAgICBwdWJsaWMgc2hvd0Vycm9ySWNvbjogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIEN1c3RvbUVycm9yXHJcbiAgICAgKiBAcGFyYW0gbW9kdWxlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVxyXG4gICAgICogQHBhcmFtIGhlYWRlclxyXG4gICAgICogQHBhcmFtIHNob3dFcnJvckljb25cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobW9kdWxlTmFtZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIGhlYWRlcjogc3RyaW5nLCBzaG93RXJyb3JJY29uOiBib29sZWFuKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5tb2R1bGVOYW1lID0gbW9kdWxlTmFtZTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIHRoaXMuaGVhZGVyVGV4dCA9IGhlYWRlcjtcclxuICAgICAgICB0aGlzLnNob3dFcnJvckljb24gPSBzaG93RXJyb3JJY29uO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBDdXN0b21FcnJvcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvYmFzZS9jdXN0b21lcnJvci50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQUE7QUFVQTs7Ozs7O0FBTUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 399:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/components/qigselector/locksinqigpopup.tsx ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar qigSelectorActionCreator = __webpack_require__(/*! ../../actions/qigselector/qigselectoractioncreator */ 253);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar stringFormatHelper = __webpack_require__(/*! ../../utility/stringformat/stringformathelper */ 250);\r\nvar locksInQigPopup = function (props) {\r\n    /**\r\n     * Handles the Click Event of locked qig\r\n     */\r\n    var openQigFromLockedList = function (qigId) {\r\n        qigSelectorActionCreator.qigSelectedFromLockedList(qigId);\r\n    };\r\n    if (props.showLocksInQigPopUp) {\r\n        return (React.createElement(\"div\", { className: 'popup medium popup-overlay fixed-hf examiner-locked open', id: 'examinerLocked', role: 'dialog' },\r\n            React.createElement(\"div\", { className: 'popup-wrap' },\r\n                React.createElement(\"div\", { className: 'popup-header' },\r\n                    React.createElement(\"h4\", { id: 'popup17Title' }, localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.header'))),\r\n                React.createElement(\"div\", { className: 'popup-content', id: 'popup16Desc' },\r\n                    React.createElement(\"p\", { className: 'login-nav-msg padding-bottom-10' }, localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.body')),\r\n                    React.createElement(\"p\", { className: 'login-nav-action padding-bottom-10' }, (props.fromLogout) ? localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.body-logout') : localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.select-a-qig')),\r\n                    getLocksInQigList()),\r\n                renderLogoutSection())));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the list of qigs with no of locks\r\n     */\r\n    function getLocksInQigList() {\r\n        var _this = this;\r\n        var locksInQigDetailsList = Immutable.List();\r\n        locksInQigDetailsList = qigStore.instance.getLocksInQigList.locksInQigDetailsList;\r\n        var toRender = locksInQigDetailsList.map(function (_locksInQigDetails, key) {\r\n            var formattedQigName = stringFormatHelper.formatAwardingBodyQIG(_locksInQigDetails.qigName, _locksInQigDetails.assessmentCode, _locksInQigDetails.sessionName, _locksInQigDetails.componentId, _locksInQigDetails.questionPaperName, _locksInQigDetails.assessmentName, _locksInQigDetails.componentName, stringFormatHelper.getOverviewQIGNameFormat());\r\n            return (React.createElement(\"a\", { key: 'lock-' + key, className: 'locked-link table-row', onClick: openQigFromLockedList.bind(_this, _locksInQigDetails.qigId) },\r\n                React.createElement(\"span\", { className: 'lock-msg table-cell bolder' },\r\n                    React.createElement(\"span\", { className: 'lock-count' }, _locksInQigDetails.noOfLocks),\r\n                    React.createElement(\"span\", { className: 'lock-text' }, (_locksInQigDetails.noOfLocks > 1) ? localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.locks-plural') : localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.lock-single'))),\r\n                React.createElement(\"span\", { className: 'lock-hyphen table-cell' }, \"-\"),\r\n                React.createElement(\"span\", { className: 'lock-qig-name table-cell' }, formattedQigName)));\r\n        });\r\n        return (React.createElement(\"div\", { className: 'lock-list-wrapper' },\r\n            React.createElement(\"div\", { id: 'lock-list-table', className: 'lock-list table' }, toRender)));\r\n    }\r\n    /**\r\n     * renders the logout button portion if needed\r\n     */\r\n    function renderLogoutSection() {\r\n        if (props.fromLogout) {\r\n            return (React.createElement(\"div\", { className: 'popup-footer text-right' },\r\n                React.createElement(\"button\", { id: 'lockslogoutbutton', className: 'button rounded', title: localeStore.instance.TranslateText('generic.user-menu.profile-section.logout-button'), onClick: function () { props.onLogoutClickOfLocksInQigPopup(); } }, localeStore.instance.TranslateText('generic.user-menu.profile-section.logout-button')),\r\n                React.createElement(\"button\", { id: 'lockscancelbutton', className: 'button primary rounded', title: localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.cancel-button'), onClick: function () { props.onCancelClickOfLocksInQigPopup(); } }, localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.cancel-button'))));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n};\r\nmodule.exports = locksInQigPopup;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 400:
/* no static exports found */
/* all exports used */
/*!******************************************************************!*\
  !*** ./src/components/standardisationsetup/declassifybutton.tsx ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for Generic button.\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\n/**\r\n * React component class for Generic button implementation.\r\n */\r\nvar DeclassifyButton = /** @class */ (function (_super) {\r\n    __extends(DeclassifyButton, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function DeclassifyButton(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.onClick = _this.onClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render method\r\n     */\r\n    DeclassifyButton.prototype.render = function () {\r\n        var buttonElement;\r\n        buttonElement = (React.createElement(\"a\", { title: this.props.title, className: this.props.anchorclassName, id: this.props.id, key: this.props.id, onClick: this.onClick },\r\n            React.createElement(\"span\", { className: this.props.spanclassName })));\r\n        return buttonElement;\r\n    };\r\n    /**\r\n     * Click event\r\n     * @param evnt\r\n     */\r\n    DeclassifyButton.prototype.onClick = function (evnt) {\r\n        standardisationActionCreator.declassifyPopupOpen(this.props.displayId, this.props.totalMarkValue, this.props.candidateScriptId, this.props.esCandidateScriptMarkSchemeGroupId, this.props.markingModeId, this.props.rigOrder, this.props.esMarkGroupRowVersion, this.props.markSchemeGroupId);\r\n    };\r\n    return DeclassifyButton;\r\n}(pureRenderComponent));\r\nmodule.exports = DeclassifyButton;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvZGVjbGFzc2lmeWJ1dHRvbi50c3g/MDFmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gIFJlYWN0IGNvbXBvbmVudCBmb3IgR2VuZXJpYyBidXR0b24uXHJcbiovXHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGFwcGxpY2F0aW9uU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvYXBwbGljYXRpb25vZmZsaW5lL2FwcGxpY2F0aW9uc3RvcmUnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9lbnVtcycpO1xyXG5pbXBvcnQgc3RhbmRhcmRpc2F0aW9uQWN0aW9uQ3JlYXRvciA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbnMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc3RhbmRhcmRpc2F0aW9uYWN0aW9uY3JlYXRvcicpO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICBhbmNob3JjbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgICBzcGFuY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGRpc3BsYXlJZDogc3RyaW5nO1xyXG5cdHRvdGFsTWFya1ZhbHVlOiBudW1iZXI7XHJcblx0Y2FuZGlkYXRlU2NyaXB0SWQ6IG51bWJlcjtcclxuICAgIGVzQ2FuZGlkYXRlU2NyaXB0TWFya1NjaGVtZUdyb3VwSWQ6IG51bWJlcjtcclxuICAgIG1hcmtTY2hlbWVHcm91cElkOiBudW1iZXI7XHJcblx0bWFya2luZ01vZGVJZDogbnVtYmVyO1xyXG4gICAgcmlnT3JkZXI6IG51bWJlcjtcclxuICAgIGVzTWFya0dyb3VwUm93VmVyc2lvbjogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogUmVhY3QgY29tcG9uZW50IGNsYXNzIGZvciBHZW5lcmljIGJ1dHRvbiBpbXBsZW1lbnRhdGlvbi5cclxuICovXHJcbmNsYXNzIERlY2xhc3NpZnlCdXR0b24gZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGNvbnN0cnVjdG9yXHJcbiAgICAgKiBAcGFyYW0gcHJvcHNcclxuICAgICAqIEBwYXJhbSBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xyXG4gICAgICAgIHRoaXMub25DbGljayA9IHRoaXMub25DbGljay5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIG1ldGhvZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBidXR0b25FbGVtZW50OiBKU1guRWxlbWVudDtcclxuICAgICAgICBidXR0b25FbGVtZW50ID0gKFxyXG4gICAgICAgICAgICA8YSB0aXRsZT17dGhpcy5wcm9wcy50aXRsZX1cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5hbmNob3JjbGFzc05hbWV9XHJcbiAgICAgICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgIGtleT17dGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DbGlja31cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXt0aGlzLnByb3BzLnNwYW5jbGFzc05hbWV9IC8+XHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBidXR0b25FbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xpY2sgZXZlbnRcclxuICAgICAqIEBwYXJhbSBldm50XHJcbiAgICAgKi9cclxuXHRwcml2YXRlIG9uQ2xpY2soZXZudDogYW55KSB7XHJcblx0XHRzdGFuZGFyZGlzYXRpb25BY3Rpb25DcmVhdG9yLmRlY2xhc3NpZnlQb3B1cE9wZW4odGhpcy5wcm9wcy5kaXNwbGF5SWQsIHRoaXMucHJvcHMudG90YWxNYXJrVmFsdWUsXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuY2FuZGlkYXRlU2NyaXB0SWQsIHRoaXMucHJvcHMuZXNDYW5kaWRhdGVTY3JpcHRNYXJrU2NoZW1lR3JvdXBJZCxcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5tYXJraW5nTW9kZUlkLCB0aGlzLnByb3BzLnJpZ09yZGVyLFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmVzTWFya0dyb3VwUm93VmVyc2lvbiwgdGhpcy5wcm9wcy5tYXJrU2NoZW1lR3JvdXBJZCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IERlY2xhc3NpZnlCdXR0b247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3N0YW5kYXJkaXNhdGlvbnNldHVwL2RlY2xhc3NpZnlidXR0b24udHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQWlCQTs7QUFFQTtBQUNBO0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFBQTtBQUVBOztBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUdBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 401:
/* no static exports found */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/bluebanner.tsx ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * StatelessComponent component for BlueBanner\r\n * @param props\r\n */\r\nvar blueBanner = function (props) {\r\n    return (React.createElement(\"div\", { className: 'message-bar' },\r\n        React.createElement(\"span\", { className: 'message-content' },\r\n            React.createElement(\"div\", { className: 'text-left', id: 'blue-banner-message' },\r\n                React.createElement(\"p\", null, props.blueBannerMessageKey !== '' || props.blueBannerMessageKey !== undefined\r\n                    ? localeStore.instance.TranslateText(props.blueBannerMessageKey) : null)))));\r\n};\r\nmodule.exports = blueBanner;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL2JsdWViYW5uZXIudHN4P2YyNWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvdXRpbGl0eS9lbnVtcycpO1xyXG5cclxuLyoqXHJcbiAqIFByb3BzXHJcbiAqIEBwYXJhbSB7UHJvcHN9IHByb3BzXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgYmx1ZUJhbm5lck1lc3NhZ2VLZXk6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFN0YXRlbGVzc0NvbXBvbmVudCBjb21wb25lbnQgZm9yIEJsdWVCYW5uZXJcclxuICogQHBhcmFtIHByb3BzXHJcbiAqL1xyXG5jb25zdCBibHVlQmFubmVyOiBSZWFjdC5TdGF0ZWxlc3NDb21wb25lbnQ8UHJvcHM+ID0gKHByb3BzOiBQcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWVzc2FnZS1iYXInPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J21lc3NhZ2UtY29udGVudCc+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndGV4dC1sZWZ0JyBpZD0nYmx1ZS1iYW5uZXItbWVzc2FnZSc+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5ibHVlQmFubmVyTWVzc2FnZUtleSAhPT0gJycgfHwgcHJvcHMuYmx1ZUJhbm5lck1lc3NhZ2VLZXkgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KHByb3BzLmJsdWVCYW5uZXJNZXNzYWdlS2V5KSA6IG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcbmV4cG9ydCA9IGJsdWVCYW5uZXI7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9zdGFuZGFyZGlzYXRpb25zZXR1cC9zaGFyZWQvYmx1ZWJhbm5lci50c3giXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBWUE7OztBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBT0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 402:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/rigorder.tsx ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * Stateless component for Script ID column in Standardisation Setup Grid\r\n * @param props\r\n */\r\nvar rigorder = function (props) {\r\n    /**\r\n     * This mehod will return the classification type header\r\n     * @param classificationType\r\n     */\r\n    function getHeaderBody(classificationType) {\r\n        var element;\r\n        if (classificationType) {\r\n            element = (React.createElement(\"div\", { id: props.id, className: props.className }, (localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.classification-type.'\r\n                + enums.MarkingMode[classificationType]))));\r\n        }\r\n        else {\r\n            element = (React.createElement(\"span\", { id: props.id, className: props.className }, props.rigOrder));\r\n        }\r\n        return element;\r\n    }\r\n    return (React.createElement(\"div\", { className: 'header-data cursor-move' },\r\n        props.classificationType === undefined ?\r\n            React.createElement(\"span\", { className: 'sprite-icon drag-icon', title: !qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete ? 'Drag to change the order.' : '' })\r\n            : null,\r\n        getHeaderBody(props.classificationType)));\r\n};\r\nmodule.exports = rigorder;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3JpZ29yZGVyLnRzeD81Y2Y5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgcWlnU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvcWlnc2VsZWN0b3IvcWlnc3RvcmUnKTtcclxuXHJcbmludGVyZmFjZSBSSUdPcmRlclByb3BzIGV4dGVuZHMgUHJvcHNCYXNlIHtcclxuICAgIGNsYXNzaWZpY2F0aW9uVHlwZT86IGVudW1zLk1hcmtpbmdNb2RlO1xyXG4gICAgcmlnT3JkZXI/OiBzdHJpbmc7XHJcbiAgICBjbGFzc05hbWU6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFN0YXRlbGVzcyBjb21wb25lbnQgZm9yIFNjcmlwdCBJRCBjb2x1bW4gaW4gU3RhbmRhcmRpc2F0aW9uIFNldHVwIEdyaWRcclxuICogQHBhcmFtIHByb3BzXHJcbiAqL1xyXG5jb25zdCByaWdvcmRlcjogUmVhY3QuU3RhdGVsZXNzQ29tcG9uZW50PFJJR09yZGVyUHJvcHM+ID0gKHByb3BzOiBSSUdPcmRlclByb3BzKSA9PiB7XHJcblxyXG4vKipcclxuICogVGhpcyBtZWhvZCB3aWxsIHJldHVybiB0aGUgY2xhc3NpZmljYXRpb24gdHlwZSBoZWFkZXJcclxuICogQHBhcmFtIGNsYXNzaWZpY2F0aW9uVHlwZVxyXG4gKi9cclxuICAgIGZ1bmN0aW9uIGdldEhlYWRlckJvZHkoY2xhc3NpZmljYXRpb25UeXBlOiBlbnVtcy5NYXJraW5nTW9kZSk6IEpTWC5FbGVtZW50IHtcclxuICAgICAgICBsZXQgZWxlbWVudDogSlNYLkVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKGNsYXNzaWZpY2F0aW9uVHlwZSkge1xyXG4gICAgICAgICAgICBlbGVtZW50ID0gKDxkaXYgaWQ9e3Byb3BzLmlkfSBjbGFzc05hbWU9e3Byb3BzLmNsYXNzTmFtZX0+eyhsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0XHJcbiAgICAgICAgICAgICAgICAoJ3N0YW5kYXJkaXNhdGlvbi1zZXR1cC5zdGFuZGFyZGlzYXRpb24tc2V0dXAtd29ya2xpc3QuY2xhc3NpZmljYXRpb24tdHlwZS4nXHJcbiAgICAgICAgICAgICAgICArIGVudW1zLk1hcmtpbmdNb2RlW2NsYXNzaWZpY2F0aW9uVHlwZV0pKX08L2Rpdj4pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSAoPHNwYW4gaWQ9e3Byb3BzLmlkfSBjbGFzc05hbWU9e3Byb3BzLmNsYXNzTmFtZX0+e3Byb3BzLnJpZ09yZGVyfTwvc3Bhbj4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdoZWFkZXItZGF0YSBjdXJzb3ItbW92ZSc+XHJcbiAgICAgICAgICAgIHtwcm9wcy5jbGFzc2lmaWNhdGlvblR5cGUgPT09IHVuZGVmaW5lZCA/XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3Nwcml0ZS1pY29uIGRyYWctaWNvbidcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17IXFpZ1N0b3JlLmluc3RhbmNlLnNlbGVjdGVkUUlHRm9yTWFya2VyT3BlcmF0aW9uLnN0YW5kYXJkaXNhdGlvblNldHVwQ29tcGxldGUgPyAnRHJhZyB0byBjaGFuZ2UgdGhlIG9yZGVyLicgOiAnJ31cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDogbnVsbH1cclxuICAgICAgICAgICAge2dldEhlYWRlckJvZHkocHJvcHMuY2xhc3NpZmljYXRpb25UeXBlKX1cclxuICAgICAgICA8L2Rpdj4pO1xyXG5cclxufTtcclxuZXhwb3J0ID0gcmlnb3JkZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3N0YW5kYXJkaXNhdGlvbnNldHVwL3NoYXJlZC9yaWdvcmRlci50c3giXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVFBOzs7QUFHQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFHQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 403:
/* no static exports found */
/* all exports used */
/*!****************************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/scriptidgridelement.tsx ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar stringHelper = __webpack_require__(/*! ../../../utility/generic/stringhelper */ 254);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar imageZoneActionCreator = __webpack_require__(/*! ../../../actions/imagezones/imagezoneactioncreator */ 439);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../utility/ecoursework/ecourseworkhelper */ 238);\r\nvar responseHelper = __webpack_require__(/*! ../../utility/responsehelper/responsehelper */ 249);\r\n/**\r\n * React component class for Script id\r\n */\r\nvar ScriptIdGridElement = /** @class */ (function (_super) {\r\n    __extends(ScriptIdGridElement, _super);\r\n    /**\r\n     * Constructor for ScriptIdGridElement\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function ScriptIdGridElement(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * This will initiate open response action\r\n         */\r\n        _this.handleScriptClick = function (candidateScriptId) {\r\n            var selectedScriptDetails = standardisationSetupStore.instance.fetchSelectedScriptDetails(parseInt(candidateScriptId));\r\n            // Indicates whether script available to mark as provisional\r\n            var isAvailable = selectedScriptDetails ? (!selectedScriptDetails.isAllocatedALive &&\r\n                !selectedScriptDetails.isUsedForProvisionalMarking) : false;\r\n            standardisationActionCreator.openStandardisationCentreScript(parseInt(candidateScriptId), isAvailable);\r\n            if (eCourseworkHelper.isECourseworkComponent) {\r\n                eCourseworkHelper.fetchECourseWorkCandidateScriptMetadata(parseInt(candidateScriptId), false, true);\r\n            }\r\n            imageZoneActionCreator.getImagezoneList(qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId, // QuestionPaperId\r\n            qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, // MarkSchemeGroupId\r\n            qigStore.instance.selectedQIGForMarkerOperation.markingMethod, true);\r\n            responseHelper.openResponse(parseInt(candidateScriptId), // CandidateScriptId\r\n            enums.ResponseNavigation.specific, enums.ResponseMode.closed, 0, // Passing MarkGroupId as 0, since we dont have markGroupId for the non-provisional response.\r\n            enums.ResponseViewMode.zoneView); // Default view mode is Zone View, even if the response has unmanaged SLAO's.\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    ScriptIdGridElement.prototype.render = function () {\r\n        var title = stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.response-data.script-id-tooltip'), [\r\n            this.props.displayText\r\n                ? String(this.props.displayText)\r\n                : String(this.props.displayId)\r\n        ]);\r\n        var displayContent;\r\n        if (this.props.displayText) {\r\n            displayContent = '1' + String(this.props.displayText);\r\n        }\r\n        else {\r\n            displayContent = '1' + String(this.props.displayId);\r\n        }\r\n        return (React.createElement(\"a\", { href: 'javascript:void(0)', id: 'script_' + this.props.id, key: 'res_key_' + this.props.id, title: title, onClick: this.handleScriptClick.bind(this, this.props.displayId) }, displayContent));\r\n    };\r\n    return ScriptIdGridElement;\r\n}(pureRenderComponent));\r\nmodule.exports = ScriptIdGridElement;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3NjcmlwdGlkZ3JpZGVsZW1lbnQudHN4PzE5NzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBzdHJpbmdIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2dlbmVyaWMvc3RyaW5naGVscGVyJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IGFwcGxpY2F0aW9uU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvYXBwbGljYXRpb25vZmZsaW5lL2FwcGxpY2F0aW9uc3RvcmUnKTtcclxuaW1wb3J0IGFwcGxpY2F0aW9uQWN0aW9uQ3JlYXRvciA9IHJlcXVpcmUoJy4uLy4uLy4uL2FjdGlvbnMvYXBwbGljYXRpb25vZmZsaW5lL2FwcGxpY2F0aW9uYWN0aW9uY3JlYXRvcicpO1xyXG5pbXBvcnQgc3RhbmRhcmRpc2F0aW9uQWN0aW9uQ3JlYXRvciA9IHJlcXVpcmUoJy4uLy4uLy4uL2FjdGlvbnMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc3RhbmRhcmRpc2F0aW9uYWN0aW9uY3JlYXRvcicpO1xyXG5pbXBvcnQgbWFya1NjaGVtZVN0cnVjdHVyZUFjdGlvbkNyZWF0b3IgPSByZXF1aXJlKCcuLi8uLi8uLi9hY3Rpb25zL21hcmtzY2hlbWVzdHJ1Y3R1cmUvbWFya3NjaGVtZXN0cnVjdHVyZWFjdGlvbmNyZWF0b3InKTtcclxuaW1wb3J0IHFpZ1N0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL3FpZ3NlbGVjdG9yL3FpZ3N0b3JlJyk7XHJcbmltcG9ydCBpbWFnZVpvbmVBY3Rpb25DcmVhdG9yID0gcmVxdWlyZSgnLi4vLi4vLi4vYWN0aW9ucy9pbWFnZXpvbmVzL2ltYWdlem9uZWFjdGlvbmNyZWF0b3InKTtcclxuaW1wb3J0IHNjcmlwdEFjdGlvbkNyZWF0b3IgPSByZXF1aXJlKCcuLi8uLi8uLi9hY3Rpb25zL3NjcmlwdC9zY3JpcHRhY3Rpb25jcmVhdG9yJyk7XHJcbmltcG9ydCBzdGFuZGFyZGlzYXRpb25TZXR1cFN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL3N0YW5kYXJkaXNhdGlvbnNldHVwL3N0YW5kYXJkaXNhdGlvbnNldHVwc3RvcmUnKTtcclxuaW1wb3J0IGNhbmRpZGF0ZVNjcmlwdEluZm8gPSByZXF1aXJlKCcuLi8uLi8uLi9kYXRhc2VydmljZXMvc2NyaXB0L3R5cGluZ3MvY2FuZGlkYXRlc2NyaXB0aW5mbycpO1xyXG5pbXBvcnQgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpYy9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpY3NoZWxwZXInKTtcclxuaW1wb3J0IGVDb3Vyc2V3b3JrSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9lY291cnNld29yay9lY291cnNld29ya2hlbHBlcicpO1xyXG5pbXBvcnQgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzTmFtZXMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljL2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljc25hbWVzJyk7XHJcbmltcG9ydCBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcclxuaW1wb3J0IFByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpO1xyXG5pbXBvcnQgcmVzcG9uc2VIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L3Jlc3BvbnNlaGVscGVyL3Jlc3BvbnNlaGVscGVyJyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiByZXNwb25zZSBpZCBjb2x1bW5cclxuICovXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcbiAgICBkaXNwbGF5SWQ/OiBzdHJpbmc7XHJcbiAgICBkaXNwbGF5VGV4dD86IHN0cmluZztcclxuICAgIGlzQ2xpY2thYmxlPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlYWN0IGNvbXBvbmVudCBjbGFzcyBmb3IgU2NyaXB0IGlkXHJcbiAqL1xyXG5jbGFzcyBTY3JpcHRJZEdyaWRFbGVtZW50IGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcbiAgICBwcml2YXRlIGFjdHVhbERpc3BsYXlJZDogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3IgZm9yIFNjcmlwdElkR3JpZEVsZW1lbnRcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcywgc3RhdGU6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBzdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgY29tcG9uZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xyXG4gICAgICAgIGxldCB0aXRsZSA9IHN0cmluZ0hlbHBlci5mb3JtYXQoXHJcbiAgICAgICAgICAgIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoXHJcbiAgICAgICAgICAgICAgICAnc3RhbmRhcmRpc2F0aW9uLXNldHVwLnN0YW5kYXJkaXNhdGlvbi1zZXR1cC13b3JrbGlzdC5yZXNwb25zZS1kYXRhLnNjcmlwdC1pZC10b29sdGlwJ1xyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BsYXlUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgPyBTdHJpbmcodGhpcy5wcm9wcy5kaXNwbGF5VGV4dClcclxuICAgICAgICAgICAgICAgICAgICA6IFN0cmluZyh0aGlzLnByb3BzLmRpc3BsYXlJZClcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGxldCBkaXNwbGF5Q29udGVudDogc3RyaW5nO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmRpc3BsYXlUZXh0KSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXlDb250ZW50ID0gJzEnICsgU3RyaW5nKHRoaXMucHJvcHMuZGlzcGxheVRleHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRpc3BsYXlDb250ZW50ID0gJzEnICsgU3RyaW5nKHRoaXMucHJvcHMuZGlzcGxheUlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGFcclxuICAgICAgICAgICAgICAgIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKSdcclxuICAgICAgICAgICAgICAgIGlkPXsnc2NyaXB0XycgKyB0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAga2V5PXsncmVzX2tleV8nICsgdGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgIHRpdGxlPXt0aXRsZX1cclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlU2NyaXB0Q2xpY2suYmluZCh0aGlzLCB0aGlzLnByb3BzLmRpc3BsYXlJZCl9PlxyXG4gICAgICAgICAgICAgICAge2Rpc3BsYXlDb250ZW50fVxyXG4gICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgd2lsbCBpbml0aWF0ZSBvcGVuIHJlc3BvbnNlIGFjdGlvblxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGhhbmRsZVNjcmlwdENsaWNrID0gKGNhbmRpZGF0ZVNjcmlwdElkOiBzdHJpbmcpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IHNlbGVjdGVkU2NyaXB0RGV0YWlsczogU3RhbmRhcmRpc2F0aW9uU2NyaXB0RGV0YWlscyA9IHN0YW5kYXJkaXNhdGlvblNldHVwU3RvcmUuaW5zdGFuY2UuZmV0Y2hTZWxlY3RlZFNjcmlwdERldGFpbHMoXHJcbiAgICAgICAgICAgIHBhcnNlSW50KGNhbmRpZGF0ZVNjcmlwdElkKVxyXG5cdFx0KTtcclxuXHJcblx0XHQvLyBJbmRpY2F0ZXMgd2hldGhlciBzY3JpcHQgYXZhaWxhYmxlIHRvIG1hcmsgYXMgcHJvdmlzaW9uYWxcclxuXHRcdGxldCBpc0F2YWlsYWJsZSA9IHNlbGVjdGVkU2NyaXB0RGV0YWlscyA/ICghc2VsZWN0ZWRTY3JpcHREZXRhaWxzLmlzQWxsb2NhdGVkQUxpdmUgJiZcclxuXHRcdFx0IXNlbGVjdGVkU2NyaXB0RGV0YWlscy5pc1VzZWRGb3JQcm92aXNpb25hbE1hcmtpbmcpIDogZmFsc2U7XHJcblxyXG4gICAgICAgIHN0YW5kYXJkaXNhdGlvbkFjdGlvbkNyZWF0b3Iub3BlblN0YW5kYXJkaXNhdGlvbkNlbnRyZVNjcmlwdChcclxuICAgICAgICAgICAgcGFyc2VJbnQoY2FuZGlkYXRlU2NyaXB0SWQpLFxyXG4gICAgICAgICAgICBpc0F2YWlsYWJsZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmIChlQ291cnNld29ya0hlbHBlci5pc0VDb3Vyc2V3b3JrQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIGVDb3Vyc2V3b3JrSGVscGVyLmZldGNoRUNvdXJzZVdvcmtDYW5kaWRhdGVTY3JpcHRNZXRhZGF0YShcclxuICAgICAgICAgICAgICAgIHBhcnNlSW50KGNhbmRpZGF0ZVNjcmlwdElkKSxcclxuICAgICAgICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW1hZ2Vab25lQWN0aW9uQ3JlYXRvci5nZXRJbWFnZXpvbmVMaXN0KFxyXG4gICAgICAgICAgICBxaWdTdG9yZS5pbnN0YW5jZS5zZWxlY3RlZFFJR0Zvck1hcmtlck9wZXJhdGlvbi5xdWVzdGlvblBhcGVyUGFydElkLCAvLyBRdWVzdGlvblBhcGVySWRcclxuICAgICAgICAgICAgcWlnU3RvcmUuaW5zdGFuY2Uuc2VsZWN0ZWRRSUdGb3JNYXJrZXJPcGVyYXRpb24ubWFya1NjaGVtZUdyb3VwSWQsIC8vIE1hcmtTY2hlbWVHcm91cElkXHJcbiAgICAgICAgICAgIHFpZ1N0b3JlLmluc3RhbmNlLnNlbGVjdGVkUUlHRm9yTWFya2VyT3BlcmF0aW9uLm1hcmtpbmdNZXRob2QsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICByZXNwb25zZUhlbHBlci5vcGVuUmVzcG9uc2UoXHJcbiAgICAgICAgICAgIHBhcnNlSW50KGNhbmRpZGF0ZVNjcmlwdElkKSwgLy8gQ2FuZGlkYXRlU2NyaXB0SWRcclxuICAgICAgICAgICAgZW51bXMuUmVzcG9uc2VOYXZpZ2F0aW9uLnNwZWNpZmljLFxyXG4gICAgICAgICAgICBlbnVtcy5SZXNwb25zZU1vZGUuY2xvc2VkLFxyXG4gICAgICAgICAgICAwLCAvLyBQYXNzaW5nIE1hcmtHcm91cElkIGFzIDAsIHNpbmNlIHdlIGRvbnQgaGF2ZSBtYXJrR3JvdXBJZCBmb3IgdGhlIG5vbi1wcm92aXNpb25hbCByZXNwb25zZS5cclxuICAgICAgICAgICAgZW51bXMuUmVzcG9uc2VWaWV3TW9kZS56b25lVmlld1xyXG4gICAgICAgICk7IC8vIERlZmF1bHQgdmlldyBtb2RlIGlzIFpvbmUgVmlldywgZXZlbiBpZiB0aGUgcmVzcG9uc2UgaGFzIHVubWFuYWdlZCBTTEFPJ3MuXHJcblxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0ID0gU2NyaXB0SWRHcmlkRWxlbWVudDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3N0YW5kYXJkaXNhdGlvbnNldHVwL3NoYXJlZC9zY3JpcHRpZGdyaWRlbGVtZW50LnRzeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUVBO0FBR0E7QUFJQTtBQVdBOztBQUVBO0FBQ0E7QUFBQTtBQUdBOzs7O0FBSUE7QUFDQTtBQUFBO0FBcUNBOztBQUVBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBS0E7QUFDQTtBQUtBO0FBRUE7QUFFQTtBQUNBO0FBSUE7QUFFQTtBQUdBO0FBR0E7O0FBNUVBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBVUE7QUE0Q0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 404:
/* no static exports found */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/scriptstatusgridelement.tsx ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * React component class for Script Status\r\n */\r\nvar ScriptStatusGridElement = /** @class */ (function (_super) {\r\n    __extends(ScriptStatusGridElement, _super);\r\n    /**\r\n     * Constructor for Script Status\r\n     * @param props Props\r\n     * @param state State\r\n     */\r\n    function ScriptStatusGridElement(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.classNameText = '';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    ScriptStatusGridElement.prototype.render = function () {\r\n        var parentClass = '';\r\n        var isAvailable = (!this.props.isAllocatedALive\r\n            && !this.props.isUsedForProvisionalMarking);\r\n        var available = (isAvailable) ? localeStore.instance.\r\n            TranslateText('standardisation-setup.right-container.available-status') : localeStore.instance.\r\n            TranslateText('standardisation-setup.right-container.not-available-status');\r\n        if (isAvailable) {\r\n            this.classNameText = 'sprite-icon success-small-icon text-middle';\r\n            parentClass = 'success';\r\n        }\r\n        else {\r\n            this.classNameText = 'sprite-icon not-small-black-icon text-middle';\r\n        }\r\n        return (React.createElement(\"span\", { className: parentClass, id: 'status_' + this.props.id },\r\n            React.createElement(\"span\", { className: this.classNameText }),\r\n            React.createElement(\"span\", { className: 'small-text padding-left-5' }, available)));\r\n    };\r\n    return ScriptStatusGridElement;\r\n}(pureRenderComponent));\r\nmodule.exports = ScriptStatusGridElement;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3NjcmlwdHN0YXR1c2dyaWRlbGVtZW50LnRzeD9hNmJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgc3RyaW5nSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9nZW5lcmljL3N0cmluZ2hlbHBlcicpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBhcHBsaWNhdGlvblN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2FwcGxpY2F0aW9ub2ZmbGluZS9hcHBsaWNhdGlvbnN0b3JlJyk7XHJcbmltcG9ydCBhcHBsaWNhdGlvbkFjdGlvbkNyZWF0b3IgPSByZXF1aXJlKCcuLi8uLi8uLi9hY3Rpb25zL2FwcGxpY2F0aW9ub2ZmbGluZS9hcHBsaWNhdGlvbmFjdGlvbmNyZWF0b3InKTtcclxuaW1wb3J0IEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xyXG5cclxuLyoqXHJcbiAqIFByb3BlcnRpZXMgb2YgU2NyaXB0IFN0YXR1cyBjb2x1bW5cclxuICovXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcblx0aXNBbGxvY2F0ZWRBTGl2ZTogYm9vbGVhbjtcclxuXHRpc1VzZWRGb3JQcm92aXNpb25hbE1hcmtpbmc6IGJvb2xlYW47XHJcbn1cclxuLyoqXHJcbiAqIFJlYWN0IGNvbXBvbmVudCBjbGFzcyBmb3IgU2NyaXB0IFN0YXR1c1xyXG4gKi9cclxuY2xhc3MgU2NyaXB0U3RhdHVzR3JpZEVsZW1lbnQgZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+e1xyXG5cdHByaXZhdGUgY2xhc3NOYW1lVGV4dDogc3RyaW5nID0gJyc7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnN0cnVjdG9yIGZvciBTY3JpcHQgU3RhdHVzXHJcblx0ICogQHBhcmFtIHByb3BzIFByb3BzXHJcblx0ICogQHBhcmFtIHN0YXRlIFN0YXRlXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IocHJvcHM6IFByb3BzLCBzdGF0ZTogYW55KSB7XHJcblx0XHRzdXBlcihwcm9wcywgc3RhdGUpO1xyXG5cdH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBjb21wb25lbnRcclxuICAgICAqL1xyXG5cdHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xyXG5cdFx0bGV0IHBhcmVudENsYXNzOiBzdHJpbmcgPSAnJztcclxuXHJcblx0XHRsZXQgaXNBdmFpbGFibGU6IGJvb2xlYW4gPSAoIXRoaXMucHJvcHMuaXNBbGxvY2F0ZWRBTGl2ZVxyXG5cdFx0XHQmJiAhdGhpcy5wcm9wcy5pc1VzZWRGb3JQcm92aXNpb25hbE1hcmtpbmcpO1xyXG5cclxuXHRcdGxldCBhdmFpbGFibGU6IHN0cmluZyA9IChpc0F2YWlsYWJsZSkgPyBsb2NhbGVTdG9yZS5pbnN0YW5jZS5cclxuXHRcdFx0VHJhbnNsYXRlVGV4dCgnc3RhbmRhcmRpc2F0aW9uLXNldHVwLnJpZ2h0LWNvbnRhaW5lci5hdmFpbGFibGUtc3RhdHVzJykgOiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5cclxuXHRcdFx0XHRUcmFuc2xhdGVUZXh0KCdzdGFuZGFyZGlzYXRpb24tc2V0dXAucmlnaHQtY29udGFpbmVyLm5vdC1hdmFpbGFibGUtc3RhdHVzJyk7XHJcblxyXG5cdFx0aWYgKGlzQXZhaWxhYmxlKSB7XHJcblx0XHRcdHRoaXMuY2xhc3NOYW1lVGV4dCA9ICdzcHJpdGUtaWNvbiBzdWNjZXNzLXNtYWxsLWljb24gdGV4dC1taWRkbGUnO1xyXG5cdFx0XHRwYXJlbnRDbGFzcyA9ICdzdWNjZXNzJztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuY2xhc3NOYW1lVGV4dCA9ICdzcHJpdGUtaWNvbiBub3Qtc21hbGwtYmxhY2staWNvbiB0ZXh0LW1pZGRsZSc7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PHNwYW4gY2xhc3NOYW1lPXtwYXJlbnRDbGFzc30gaWQ9eydzdGF0dXNfJyArIHRoaXMucHJvcHMuaWR9PlxyXG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17dGhpcy5jbGFzc05hbWVUZXh0fT48L3NwYW4+XHJcblx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPSdzbWFsbC10ZXh0IHBhZGRpbmctbGVmdC01Jz57YXZhaWxhYmxlfTwvc3Bhbj5cclxuXHRcdFx0PC9zcGFuPlxyXG5cdFx0KTtcclxuXHR9XHJcbn1cclxuZXhwb3J0ID0gU2NyaXB0U3RhdHVzR3JpZEVsZW1lbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3N0YW5kYXJkaXNhdGlvbnNldHVwL3NoYXJlZC9zY3JpcHRzdGF0dXNncmlkZWxlbWVudC50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWNBOztBQUVBO0FBQ0E7QUFBQTtBQUdBOzs7O0FBSUE7QUFDQTtBQUFBO0FBUEE7O0FBU0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 405:
/* no static exports found */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/sharedresponseindicator.tsx ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar SharedResponseIndicator = /** @class */ (function (_super) {\r\n    __extends(SharedResponseIndicator, _super);\r\n    /**\r\n     * Constructor for Accuracy indicator\r\n     * @param props\r\n     */\r\n    function SharedResponseIndicator(props) {\r\n        return _super.call(this, props, null) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    SharedResponseIndicator.prototype.render = function () {\r\n        if (this.props.isSharedProvisional) {\r\n            var toolTip = localeStore.instance.TranslateText('standardisation-setup.shared-response-indicator-tooltip.content');\r\n            var accuracy = (React.createElement(\"div\", { className: 'wl-share' },\r\n                React.createElement(\"span\", { title: toolTip, className: 'sprite-icon share-icon' }, \"Share\")));\r\n            return (accuracy);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return SharedResponseIndicator;\r\n}(PureRenderComponent));\r\nmodule.exports = SharedResponseIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3NoYXJlZHJlc3BvbnNlaW5kaWNhdG9yLnRzeD9jNDMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5pbXBvcnQgUHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgb2YgY29tcG9uZW50LlxuICogQHBhcmFtIHtQcm9wc30gcHJvcHNcbiAqL1xuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcbiAgICBpc1NoYXJlZFByb3Zpc2lvbmFsOiBib29sZWFuO1xufVxuXG5jbGFzcyBTaGFyZWRSZXNwb25zZUluZGljYXRvciBleHRlbmRzIFB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgZm9yIEFjY3VyYWN5IGluZGljYXRvclxuICAgICAqIEBwYXJhbSBwcm9wc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcywgbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIGNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzU2hhcmVkUHJvdmlzaW9uYWwpIHtcbiAgICAgICAgICAgIGxldCB0b29sVGlwOiBzdHJpbmcgPSBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdzdGFuZGFyZGlzYXRpb24tc2V0dXAuc2hhcmVkLXJlc3BvbnNlLWluZGljYXRvci10b29sdGlwLmNvbnRlbnQnKTtcbiAgICAgICAgICAgIGxldCBhY2N1cmFjeTogSlNYLkVsZW1lbnQgPVxuICAgICAgICAgICAgICAgICg8ZGl2IGNsYXNzTmFtZT0nd2wtc2hhcmUnPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT17dG9vbFRpcH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nc3ByaXRlLWljb24gc2hhcmUtaWNvbic+U2hhcmVcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2Pik7XG4gICAgICAgICAgICByZXR1cm4gKGFjY3VyYWN5KTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgPSBTaGFyZWRSZXNwb25zZUluZGljYXRvcjtcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3N0YW5kYXJkaXNhdGlvbnNldHVwL3NoYXJlZC9zaGFyZWRyZXNwb25zZWluZGljYXRvci50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBVUE7QUFBQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 406:
/* no static exports found */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/standardisationresponseid.tsx ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar ResponseIdGridElement = __webpack_require__(/*! ../../worklist/shared/responseidgridelement */ 370);\r\n/**\r\n * Stateless component for Note column in Classification Grid\r\n * @param props\r\n */\r\nvar stdResponseId = function (props) {\r\n    return (React.createElement(\"div\", { className: 'col wl-id' },\r\n        React.createElement(\"div\", { className: 'col-inner' },\r\n            React.createElement(ResponseIdGridElement, { selectedLanguage: props.selectedLanguage, displayId: props.displayId, isClickable: props.isResponseIdClickable, id: props.id, key: 'key_response_id_grid_element_' + props.id, isTileView: false, isReusableResponseView: props.isReusableResponseView ? props.isReusableResponseView : false, candidateScriptId: props.candidateScriptId ? props.candidateScriptId : '' }))));\r\n};\r\nmodule.exports = stdResponseId;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3N0YW5kYXJkaXNhdGlvbnJlc3BvbnNlaWQudHN4P2RhMmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IFJlc3BvbnNlSWRHcmlkRWxlbWVudCA9IHJlcXVpcmUoJy4uLy4uL3dvcmtsaXN0L3NoYXJlZC9yZXNwb25zZWlkZ3JpZGVsZW1lbnQnKTtcclxuXHJcbmludGVyZmFjZSBTdGRSZXNwb25zZUlkUHJvcHMgZXh0ZW5kcyBQcm9wc0Jhc2Uge1xyXG4gICAgZGlzcGxheUlkOiBzdHJpbmc7XHJcbiAgICBpc1Jlc3BvbnNlSWRDbGlja2FibGU6IGJvb2xlYW47XHJcbiAgICBzZWxlY3RlZExhbmd1YWdlOiBzdHJpbmc7XHJcbiAgICBpc1JldXNhYmxlUmVzcG9uc2VWaWV3PzogYm9vbGVhbjtcclxuICAgIGNhbmRpZGF0ZVNjcmlwdElkPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogU3RhdGVsZXNzIGNvbXBvbmVudCBmb3IgTm90ZSBjb2x1bW4gaW4gQ2xhc3NpZmljYXRpb24gR3JpZFxyXG4gKiBAcGFyYW0gcHJvcHNcclxuICovXHJcbmNvbnN0IHN0ZFJlc3BvbnNlSWQ6IFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDxTdGRSZXNwb25zZUlkUHJvcHM+ID0gKHByb3BzOiBTdGRSZXNwb25zZUlkUHJvcHMpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wgd2wtaWQnPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLWlubmVyJz5cclxuICAgICAgICAgICAgICAgIDxSZXNwb25zZUlkR3JpZEVsZW1lbnQgc2VsZWN0ZWRMYW5ndWFnZT17cHJvcHMuc2VsZWN0ZWRMYW5ndWFnZX1cclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5SWQ9e3Byb3BzLmRpc3BsYXlJZH0gaXNDbGlja2FibGU9e3Byb3BzLmlzUmVzcG9uc2VJZENsaWNrYWJsZX1cclxuICAgICAgICAgICAgICAgICAgICBpZD17cHJvcHMuaWR9IGtleT17J2tleV9yZXNwb25zZV9pZF9ncmlkX2VsZW1lbnRfJyArIHByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzVGlsZVZpZXc9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzUmV1c2FibGVSZXNwb25zZVZpZXc9e3Byb3BzLmlzUmV1c2FibGVSZXNwb25zZVZpZXcgPyBwcm9wcy5pc1JldXNhYmxlUmVzcG9uc2VWaWV3IDogZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlU2NyaXB0SWQ9e3Byb3BzLmNhbmRpZGF0ZVNjcmlwdElkID8gcHJvcHMuY2FuZGlkYXRlU2NyaXB0SWQgOiAnJ30vPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHQpO1xyXG59O1xyXG5leHBvcnQgPSBzdGRSZXNwb25zZUlkO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9zdGFuZGFyZGlzYXRpb25zZXR1cC9zaGFyZWQvc3RhbmRhcmRpc2F0aW9ucmVzcG9uc2VpZC50c3giXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBVUE7OztBQUdBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFTQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 407:
/* no static exports found */
/* all exports used */
/*!***************************************************************!*\
  !*** ./src/components/teammanagement/warningmessagepopup.tsx ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar GenericDialog = __webpack_require__(/*! ../utility/genericdialog */ 317);\r\nvar warningMessagePopupHelper = __webpack_require__(/*! ../../utility/teammanagement/helpers/warningmessagepopuphelper */ 419);\r\nvar warningMessageStore = __webpack_require__(/*! ../../stores/teammanagement/warningmessagestore */ 327);\r\nvar teamManagementActionCreator = __webpack_require__(/*! ../../actions/teammanagement/teammanagementactioncreator */ 263);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * WarningMessagePopup contain message content and ok button.\r\n * @param props\r\n * @param state\r\n */\r\nvar WarningMessagePopup = /** @class */ (function (_super) {\r\n    __extends(WarningMessagePopup, _super);\r\n    /**\r\n     * Constructor WarningMessagePopup\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function WarningMessagePopup(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * Method to handle the warning message actions.\r\n         */\r\n        _this.handleWarningMessageActions = function (failureCode, warningMessageAction, args) {\r\n            _this.failureCode = failureCode;\r\n            _this.warningMessageAction = warningMessageAction;\r\n            _this._warningMessagePopupHelper.bindWarningMessagePopupContent(failureCode);\r\n            _this.setState({ doShowWarningPopup: true });\r\n        };\r\n        // Set the default states\r\n        _this.state = {\r\n            doShowWarningPopup: false\r\n        };\r\n        _this._warningMessagePopupHelper = new warningMessagePopupHelper();\r\n        _this.onOkButtonClick = _this.onOkButtonClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    WarningMessagePopup.prototype.render = function () {\r\n        var genericWarningPopup = this.state.doShowWarningPopup ? (React.createElement(GenericDialog, { content: this._warningMessagePopupHelper.warningPopupContent, header: this._warningMessagePopupHelper.warningPopupTitle, displayPopup: this.state.doShowWarningPopup, okButtonText: this.props.buttonText, onOkClick: this.onOkButtonClick, id: this.props.id, key: this.props.id, popupDialogType: enums.PopupDialogType.none })) : null;\r\n        return (React.createElement(\"div\", null, genericWarningPopup));\r\n    };\r\n    /**\r\n     * Component did mount\r\n     */\r\n    WarningMessagePopup.prototype.componentDidMount = function () {\r\n        this.addEventListeners();\r\n    };\r\n    /**\r\n     * Component will unmount\r\n     */\r\n    WarningMessagePopup.prototype.componentWillUnmount = function () {\r\n        this.removeEventListeners();\r\n    };\r\n    /**\r\n     * Add all event listeners for warning message.\r\n     */\r\n    WarningMessagePopup.prototype.addEventListeners = function () {\r\n        warningMessageStore.instance.addListener(warningMessageStore.WarningMessageStore.WARNING_MESSAGE_EVENT, this.handleWarningMessageActions);\r\n    };\r\n    /**\r\n     * Remove all event listeners for warning message.\r\n     */\r\n    WarningMessagePopup.prototype.removeEventListeners = function () {\r\n        warningMessageStore.instance.removeListener(warningMessageStore.WarningMessageStore.WARNING_MESSAGE_EVENT, this.handleWarningMessageActions);\r\n    };\r\n    /**\r\n     * Ok button click event to handle the failure action navigation.\r\n     */\r\n    WarningMessagePopup.prototype.onOkButtonClick = function () {\r\n        if (this.failureCode === enums.FailureCode.Withdrawn) {\r\n            if (qigStore.instance.selectedQIGForMarkerOperation) {\r\n                teamManagementActionCreator.removeHistoryItem(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId);\r\n            }\r\n        }\r\n        teamManagementActionCreator.warningMessageNavigation(this.failureCode, this.warningMessageAction);\r\n        this.setState({ doShowWarningPopup: false });\r\n    };\r\n    return WarningMessagePopup;\r\n}(pureRenderComponent));\r\nmodule.exports = WarningMessagePopup;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdGVhbW1hbmFnZW1lbnQvd2FybmluZ21lc3NhZ2Vwb3B1cC50c3g/Zjk2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBHZW5lcmljRGlhbG9nID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9nZW5lcmljZGlhbG9nJyk7XHJcbmltcG9ydCB3YXJuaW5nTWVzc2FnZVBvcHVwSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS90ZWFtbWFuYWdlbWVudC9oZWxwZXJzL3dhcm5pbmdtZXNzYWdlcG9wdXBoZWxwZXInKTtcclxuaW1wb3J0IHdhcm5pbmdNZXNzYWdlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvdGVhbW1hbmFnZW1lbnQvd2FybmluZ21lc3NhZ2VzdG9yZScpO1xyXG5pbXBvcnQgdGVhbU1hbmFnZW1lbnRBY3Rpb25DcmVhdG9yID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy90ZWFtbWFuYWdlbWVudC90ZWFtbWFuYWdlbWVudGFjdGlvbmNyZWF0b3InKTtcclxuaW1wb3J0IHFpZ1N0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL3FpZ3NlbGVjdG9yL3FpZ3N0b3JlJyk7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgYnV0dG9uVGV4dDogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gICAgZG9TaG93V2FybmluZ1BvcHVwPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdhcm5pbmdNZXNzYWdlUG9wdXAgY29udGFpbiBtZXNzYWdlIGNvbnRlbnQgYW5kIG9rIGJ1dHRvbi5cclxuICogQHBhcmFtIHByb3BzXHJcbiAqIEBwYXJhbSBzdGF0ZVxyXG4gKi9cclxuY2xhc3MgV2FybmluZ01lc3NhZ2VQb3B1cCBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcblxyXG4gICAgLy9XYXJuaW5nIG1lc3NhZ2UgcG9wdXAgaGVscGVyXHJcbiAgICBwcml2YXRlIF93YXJuaW5nTWVzc2FnZVBvcHVwSGVscGVyOiB3YXJuaW5nTWVzc2FnZVBvcHVwSGVscGVyO1xyXG5cclxuICAgIC8vRmFpbHVyZSBjb2RlXHJcbiAgICBwcml2YXRlIGZhaWx1cmVDb2RlOiBlbnVtcy5GYWlsdXJlQ29kZTtcclxuXHJcbiAgICAvL1dhcm5pZyBtZXNzYWdlIGFjdGlvblxyXG4gICAgcHJpdmF0ZSB3YXJuaW5nTWVzc2FnZUFjdGlvbjogZW51bXMuV2FybmluZ01lc3NhZ2VBY3Rpb247XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBXYXJuaW5nTWVzc2FnZVBvcHVwXHJcbiAgICAgKiBAcGFyYW0gcHJvcHNcclxuICAgICAqIEBwYXJhbSBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBTdGF0ZSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBzdGF0ZSk7XHJcblxyXG4gICAgICAgIC8vIFNldCB0aGUgZGVmYXVsdCBzdGF0ZXNcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBkb1Nob3dXYXJuaW5nUG9wdXA6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5fd2FybmluZ01lc3NhZ2VQb3B1cEhlbHBlciA9IG5ldyB3YXJuaW5nTWVzc2FnZVBvcHVwSGVscGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbk9rQnV0dG9uQ2xpY2sgPSB0aGlzLm9uT2tCdXR0b25DbGljay5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIGNvbXBvbmVudFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XHJcbiAgICAgICAgbGV0IGdlbmVyaWNXYXJuaW5nUG9wdXAgPSB0aGlzLnN0YXRlLmRvU2hvd1dhcm5pbmdQb3B1cCA/IChcclxuICAgICAgICAgICAgPEdlbmVyaWNEaWFsb2dcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ9e3RoaXMuX3dhcm5pbmdNZXNzYWdlUG9wdXBIZWxwZXIud2FybmluZ1BvcHVwQ29udGVudH1cclxuICAgICAgICAgICAgICAgIGhlYWRlcj17dGhpcy5fd2FybmluZ01lc3NhZ2VQb3B1cEhlbHBlci53YXJuaW5nUG9wdXBUaXRsZX1cclxuICAgICAgICAgICAgICAgIGRpc3BsYXlQb3B1cD17dGhpcy5zdGF0ZS5kb1Nob3dXYXJuaW5nUG9wdXB9XHJcbiAgICAgICAgICAgICAgICBva0J1dHRvblRleHQ9e3RoaXMucHJvcHMuYnV0dG9uVGV4dCB9XHJcbiAgICAgICAgICAgICAgICBvbk9rQ2xpY2s9e3RoaXMub25Pa0J1dHRvbkNsaWNrfVxyXG4gICAgICAgICAgICAgICAgaWQ9IHt0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAga2V5PXt0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgcG9wdXBEaWFsb2dUeXBlPXtlbnVtcy5Qb3B1cERpYWxvZ1R5cGUubm9uZX0gLz5cclxuICAgICAgICApIDogbnVsbDtcclxuXHJcbiAgICAgICAgcmV0dXJuICg8ZGl2PlxyXG4gICAgICAgICAgICB7Z2VuZXJpY1dhcm5pbmdQb3B1cH1cclxuICAgICAgICA8L2Rpdj4pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tcG9uZW50IGRpZCBtb3VudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tcG9uZW50IHdpbGwgdW5tb3VudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGFsbCBldmVudCBsaXN0ZW5lcnMgZm9yIHdhcm5pbmcgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB3YXJuaW5nTWVzc2FnZVN0b3JlLmluc3RhbmNlLmFkZExpc3RlbmVyKFxyXG4gICAgICAgICAgICB3YXJuaW5nTWVzc2FnZVN0b3JlLldhcm5pbmdNZXNzYWdlU3RvcmUuV0FSTklOR19NRVNTQUdFX0VWRU5ULCB0aGlzLmhhbmRsZVdhcm5pbmdNZXNzYWdlQWN0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYWxsIGV2ZW50IGxpc3RlbmVycyBmb3Igd2FybmluZyBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHdhcm5pbmdNZXNzYWdlU3RvcmUuaW5zdGFuY2UucmVtb3ZlTGlzdGVuZXIoXHJcbiAgICAgICAgICAgIHdhcm5pbmdNZXNzYWdlU3RvcmUuV2FybmluZ01lc3NhZ2VTdG9yZS5XQVJOSU5HX01FU1NBR0VfRVZFTlQsIHRoaXMuaGFuZGxlV2FybmluZ01lc3NhZ2VBY3Rpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCB0byBoYW5kbGUgdGhlIHdhcm5pbmcgbWVzc2FnZSBhY3Rpb25zLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGhhbmRsZVdhcm5pbmdNZXNzYWdlQWN0aW9ucyA9IChmYWlsdXJlQ29kZTogZW51bXMuRmFpbHVyZUNvZGUsXHJcbiAgICAgICAgd2FybmluZ01lc3NhZ2VBY3Rpb246IGVudW1zLldhcm5pbmdNZXNzYWdlQWN0aW9uLCBhcmdzPzogYW55KTogdm9pZCA9PiB7XHJcblxyXG4gICAgICAgIHRoaXMuZmFpbHVyZUNvZGUgPSBmYWlsdXJlQ29kZTtcclxuICAgICAgICB0aGlzLndhcm5pbmdNZXNzYWdlQWN0aW9uID0gd2FybmluZ01lc3NhZ2VBY3Rpb247XHJcbiAgICAgICAgdGhpcy5fd2FybmluZ01lc3NhZ2VQb3B1cEhlbHBlci5iaW5kV2FybmluZ01lc3NhZ2VQb3B1cENvbnRlbnQoZmFpbHVyZUNvZGUpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZG9TaG93V2FybmluZ1BvcHVwOiB0cnVlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT2sgYnV0dG9uIGNsaWNrIGV2ZW50IHRvIGhhbmRsZSB0aGUgZmFpbHVyZSBhY3Rpb24gbmF2aWdhdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbk9rQnV0dG9uQ2xpY2soKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmFpbHVyZUNvZGUgPT09IGVudW1zLkZhaWx1cmVDb2RlLldpdGhkcmF3bil7XHJcbiAgICAgICAgICAgIGlmIChxaWdTdG9yZS5pbnN0YW5jZS5zZWxlY3RlZFFJR0Zvck1hcmtlck9wZXJhdGlvbikge1xyXG5cdFx0XHRcdHRlYW1NYW5hZ2VtZW50QWN0aW9uQ3JlYXRvci5yZW1vdmVIaXN0b3J5SXRlbShcclxuXHRcdFx0XHRcdHFpZ1N0b3JlLmluc3RhbmNlLnNlbGVjdGVkUUlHRm9yTWFya2VyT3BlcmF0aW9uLm1hcmtTY2hlbWVHcm91cElkXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG4gICAgICAgIH1cclxuICAgICAgICB0ZWFtTWFuYWdlbWVudEFjdGlvbkNyZWF0b3Iud2FybmluZ01lc3NhZ2VOYXZpZ2F0aW9uKFxyXG4gICAgICAgICAgICB0aGlzLmZhaWx1cmVDb2RlLCB0aGlzLndhcm5pbmdNZXNzYWdlQWN0aW9uKTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZG9TaG93V2FybmluZ1BvcHVwOiBmYWxzZSB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gV2FybmluZ01lc3NhZ2VQb3B1cDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdGVhbW1hbmFnZW1lbnQvd2FybmluZ21lc3NhZ2Vwb3B1cC50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVBOzs7O0FBSUE7QUFDQTtBQUFBO0FBV0E7Ozs7QUFJQTtBQUNBO0FBQUE7QUFnRUE7O0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUF4RUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOztBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQVlBO0FBR0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQWVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 409:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/components/utility/genericcheckboxitems.ts ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Check Box Items\r\n */\r\nvar GenericCheckBoxItems = /** @class */ (function () {\r\n    function GenericCheckBoxItems() {\r\n    }\r\n    return GenericCheckBoxItems;\r\n}());\r\nmodule.exports = GenericCheckBoxItems;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9nZW5lcmljY2hlY2tib3hpdGVtcy50cz9hMTdhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDaGVjayBCb3ggSXRlbXNcclxuICovXHJcbmNsYXNzIEdlbmVyaWNDaGVja0JveEl0ZW1zIHtcclxuXHRwdWJsaWMgbGFiZWxDb250ZW50OiBzdHJpbmc7XHJcblx0cHVibGljIGlkOiBudW1iZXI7XHJcblx0cHVibGljIGlzQ2hlY2tlZDogYm9vbGVhbjtcclxuXHRwdWJsaWMgZGlzYWJsZWQ6IGJvb2xlYW47XHJcblx0cHVibGljIGNsYXNzTmFtZT86IHN0cmluZztcclxuXHRwdWJsaWMgbGFiZWxDbGFzc05hbWU/OiBzdHJpbmc7XHJcblx0cHVibGljIGNvbnRhaW5lckNsYXNzTmFtZT86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0ID0gR2VuZXJpY0NoZWNrQm94SXRlbXM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ2VuZXJpY2NoZWNrYm94aXRlbXMudHMiXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBQUE7QUFRQTtBQUFBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 410:
/* no static exports found */
/* all exports used */
/*!***************************************************************!*\
  !*** ./src/components/utility/genericpopupwithcheckboxes.tsx ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar _this = this;\r\n/*\r\n  React component for Generic button.\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar GenericCheckbox = __webpack_require__(/*! ../utility/genericcheckbox */ 361);\r\n/**\r\n * React component class for Generic popup with check boxes implementation.\r\n */\r\nvar genericPopupWithCheckBoxes = function (props) {\r\n    var that = _this;\r\n    var toRender = (React.createElement(\"div\", { id: props.id, key: 'key_checkbox_genericpopup', className: props.className }, props.items && props.items.map(function (item) {\r\n        return React.createElement(GenericCheckbox, { id: 'checkbox_genericpopup_' + item.id, key: 'checkbox_genericpopup_key' + item.id, containerClassName: item.containerClassName, className: item.className, disabled: item.disabled, isChecked: item.isChecked, labelClassName: item.labelClassName, labelContent: item.labelContent, onSelectionChange: props.onChecked.bind(that, item) });\r\n    })));\r\n    return toRender;\r\n};\r\nmodule.exports = genericPopupWithCheckBoxes;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9nZW5lcmljcG9wdXB3aXRoY2hlY2tib3hlcy50c3g/ZTc4MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gIFJlYWN0IGNvbXBvbmVudCBmb3IgR2VuZXJpYyBidXR0b24uXHJcbiovXHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IGdlbmVyaWNDaGVja0JveEl0ZW1zID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9nZW5lcmljY2hlY2tib3hpdGVtcycpO1xyXG5pbXBvcnQgR2VuZXJpY0NoZWNrYm94ID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9nZW5lcmljY2hlY2tib3gnKTtcclxuXHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG5cdGNsYXNzTmFtZT86IHN0cmluZztcclxuXHRvbkNoZWNrZWQ/OiBGdW5jdGlvbjtcclxuXHRpdGVtcz86IEFycmF5PGdlbmVyaWNDaGVja0JveEl0ZW1zPjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlYWN0IGNvbXBvbmVudCBjbGFzcyBmb3IgR2VuZXJpYyBwb3B1cCB3aXRoIGNoZWNrIGJveGVzIGltcGxlbWVudGF0aW9uLlxyXG4gKi9cclxuY29uc3QgZ2VuZXJpY1BvcHVwV2l0aENoZWNrQm94ZXM6IFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDxQcm9wcz4gPSAocHJvcHM6IFByb3BzKSA9PiB7XHJcblx0bGV0IHRoYXQgPSB0aGlzO1xyXG5cdGxldCB0b1JlbmRlciA9ICg8ZGl2IGlkPXtwcm9wcy5pZH0ga2V5PSdrZXlfY2hlY2tib3hfZ2VuZXJpY3BvcHVwJyBjbGFzc05hbWU9e3Byb3BzLmNsYXNzTmFtZX0gPlxyXG5cdFx0e1xyXG5cdFx0XHRwcm9wcy5pdGVtcyAmJiBwcm9wcy5pdGVtcy5tYXAoKGl0ZW06IGdlbmVyaWNDaGVja0JveEl0ZW1zKSA9PlxyXG5cdFx0XHRcdDxHZW5lcmljQ2hlY2tib3hcclxuXHRcdFx0XHRcdGlkPXsnY2hlY2tib3hfZ2VuZXJpY3BvcHVwXycgKyBpdGVtLmlkfVxyXG5cdFx0XHRcdFx0a2V5PXsnY2hlY2tib3hfZ2VuZXJpY3BvcHVwX2tleScgKyBpdGVtLmlkfVxyXG5cdFx0XHRcdFx0Y29udGFpbmVyQ2xhc3NOYW1lPXtpdGVtLmNvbnRhaW5lckNsYXNzTmFtZX1cclxuXHRcdFx0XHRcdGNsYXNzTmFtZT17aXRlbS5jbGFzc05hbWV9XHJcblx0XHRcdFx0XHRkaXNhYmxlZD17aXRlbS5kaXNhYmxlZH1cclxuXHRcdFx0XHRcdGlzQ2hlY2tlZD17aXRlbS5pc0NoZWNrZWR9XHJcblx0XHRcdFx0XHRsYWJlbENsYXNzTmFtZT17aXRlbS5sYWJlbENsYXNzTmFtZX1cclxuXHRcdFx0XHRcdGxhYmVsQ29udGVudD17aXRlbS5sYWJlbENvbnRlbnR9XHJcblx0XHRcdFx0XHRvblNlbGVjdGlvbkNoYW5nZT17cHJvcHMub25DaGVja2VkLmJpbmQodGhhdCwgaXRlbSl9IC8+XHJcblx0XHRcdClcclxuXHRcdH1cclxuXHQ8L2Rpdj4pO1xyXG5cclxuXHRyZXR1cm4gdG9SZW5kZXI7XHJcbn07XHJcblxyXG5leHBvcnQgPSBnZW5lcmljUG9wdXBXaXRoQ2hlY2tCb3hlcztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ2VuZXJpY3BvcHVwd2l0aGNoZWNrYm94ZXMudHN4Il0sIm1hcHBpbmdzIjoiO0FBSUE7QUFKQTs7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQVNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQWNBO0FBQ0E7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 411:
/* no static exports found */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/components/utility/grid/standardisationsetuphelpers/classifiedhelper.ts ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar jsonRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar standardisationSetupHelperBase = __webpack_require__(/*! ./standardisationsetuphelperbase */ 292);\r\nvar standardisationSetupGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/standardisationsetupgridcolumns.json */ 273);\r\n/**\r\n * Helper class for Classified grid view\r\n */\r\nvar ClassifiedHelper = /** @class */ (function (_super) {\r\n    __extends(ClassifiedHelper, _super);\r\n    function ClassifiedHelper() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        // Get the worklists that should be hide when the Standardisation Permission CC Configured.\r\n        _this._hiddenStdWorklists = standardisationSetupStore.instance.getHiddenWorklists();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Generate row definition for myTeam and Help other examiners tab\r\n     * @param classifedResponseData\r\n     * @param tabSelection\r\n     * @param gridType\r\n     */\r\n    ClassifiedHelper.prototype.generateStandardisationRowDefinion = function (comparerName, sortDirection, tabSelection, gridType) {\r\n        this._stdSetUpWorkListCollection = Immutable.List();\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        this._stdSetUpWorkListCollection = this.getRowDefinition(tabSelection, gridType);\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Returns the row definition for classifed worklist\r\n     * @param tabSelection\r\n     * @param gridType\r\n     */\r\n    ClassifiedHelper.prototype.getRowDefinition = function (tabSelection, gridType) {\r\n        var index = 0;\r\n        var _classifiedRowCollection = Array();\r\n        var _classifiedRowHeaderCellcollection = Array();\r\n        var _classifiedResponseListData;\r\n        var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, tabSelection, false, gridType);\r\n        var _stdSetupResponseDetails = standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses;\r\n        var marksCount = Immutable.List(_stdSetupResponseDetails).count() > 0 && _stdSetupResponseDetails.first().standardisationMarks ?\r\n            Immutable.List(_stdSetupResponseDetails.first().standardisationMarks).count() : 0;\r\n        // 1. PRACTICE\r\n        // Add response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists &&\r\n                !this._hiddenStdWorklists.contains(enums.MarkingMode.Practice))) {\r\n            // Creating the grid row collection.\r\n            _classifiedRowCollection.push(this.getGridRow('2', this.getEmptyRows(gridColumns, marksCount, gridType), null, 'classify-items-row'));\r\n            // Sort Response based on  rig order.\r\n            _classifiedResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.Practice);\r\n            // Check whether data exist, if not add empty row.\r\n            if (_classifiedResponseListData.count() > 0) {\r\n                _classifiedRowCollection =\r\n                    _classifiedRowCollection.concat(this.getRowData(_classifiedResponseListData, gridColumns, gridType, index, enums.StandardisationSetup.ClassifiedResponse));\r\n                index = index + _classifiedResponseListData.count();\r\n            }\r\n            else {\r\n                _classifiedRowCollection.push(this.getGridRow('2', this.getEmptyRows(gridColumns, marksCount, gridType), undefined, 'placeholder-row'));\r\n            }\r\n        }\r\n        // 2. APPROVAL\r\n        // Add response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists &&\r\n                !this._hiddenStdWorklists.contains(enums.MarkingMode.Approval))) {\r\n            // Creating the grid row collection.\r\n            _classifiedRowCollection.push(this.getGridRow('3', this.getEmptyRows(gridColumns, marksCount, gridType), null, 'classify-items-row'));\r\n            // Sort Response based on  rig order.\r\n            _classifiedResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.Approval);\r\n            // Check whether data exist, if not add empty row.\r\n            if (_classifiedResponseListData.count() > 0) {\r\n                _classifiedRowCollection =\r\n                    _classifiedRowCollection.concat(this.getRowData(_classifiedResponseListData, gridColumns, gridType, index, enums.StandardisationSetup.ClassifiedResponse));\r\n                index = index + _classifiedResponseListData.count();\r\n            }\r\n            else {\r\n                _classifiedRowCollection.push(this.getGridRow('3', this.getEmptyRows(gridColumns, marksCount, gridType), undefined, 'placeholder-row'));\r\n            }\r\n        }\r\n        // 3. ES TEAM APPROVAL\r\n        // Add response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists &&\r\n                !this._hiddenStdWorklists.contains(enums.MarkingMode.ES_TeamApproval))) {\r\n            // Creating the grid row collection.\r\n            _classifiedRowCollection.push(this.getGridRow('4', this.getEmptyRows(gridColumns, marksCount, gridType), null, 'classify-items-row'));\r\n            // Sort Response based on  rig order.\r\n            _classifiedResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.ES_TeamApproval);\r\n            // Check whether data exist, if not add empty row.\r\n            if (_classifiedResponseListData.count() > 0) {\r\n                _classifiedRowCollection =\r\n                    _classifiedRowCollection.concat(this.getRowData(_classifiedResponseListData, gridColumns, gridType, index, enums.StandardisationSetup.ClassifiedResponse));\r\n                index = index + _classifiedResponseListData.count();\r\n            }\r\n            else {\r\n                _classifiedRowCollection.push(this.getGridRow('4', this.getEmptyRows(gridColumns, marksCount, gridType), undefined, 'placeholder-row'));\r\n            }\r\n        }\r\n        // 4. SEED\r\n        // Add response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists &&\r\n                !this._hiddenStdWorklists.contains(enums.MarkingMode.Seeding))) {\r\n            // Creating the grid row collection.\r\n            _classifiedRowCollection.push(this.getGridRow('70', this.getEmptyRows(gridColumns, marksCount, gridType), null, 'classify-items-row'));\r\n            // Sort Response based on  rig order.\r\n            _classifiedResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.Seeding);\r\n            // Check whether data exist, if not add empty row.\r\n            if (_classifiedResponseListData.count() > 0) {\r\n                _classifiedRowCollection =\r\n                    _classifiedRowCollection.concat(this.getRowData(_classifiedResponseListData, gridColumns, gridType, index, enums.StandardisationSetup.ClassifiedResponse));\r\n                index = index + _classifiedResponseListData.count();\r\n            }\r\n            else {\r\n                _classifiedRowCollection.push(this.getGridRow('70', this.getEmptyRows(gridColumns, marksCount, gridType), undefined, 'placeholder-row'));\r\n            }\r\n        }\r\n        // Return the complete row collection.\r\n        this._classifiedListCollection = Immutable.fromJS(_classifiedRowCollection);\r\n        return this._classifiedListCollection;\r\n    };\r\n    /**\r\n     * generateStandardisationFrozenRowBody is used for generating row collection for STD WorkList Grid\r\n     * @param standardisationSetupType\r\n     * @param gridType\r\n     */\r\n    ClassifiedHelper.prototype.generateStandardisationFrozenRowBody = function (comparerName, sortDirection, standardisationSetupType, gridType) {\r\n        // Get frozen column collection.\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        // Get the Frozen row body for STD Worklist\r\n        var _stdWorkListFrozenRowBodyCollection = this.getFrozenRowBody(standardisationSetupType, gridType);\r\n        return _stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Method for getting the frozen row body for STD worklist\r\n     * @param standardisationSetupType\r\n     * @param gridType\r\n     */\r\n    ClassifiedHelper.prototype.getFrozenRowBody = function (standardisationSetupType, gridType) {\r\n        var index = 0;\r\n        var _stdWorkListRowHeaderCellcollection = Array();\r\n        var _stdWorkListRowCollection = Array();\r\n        var _stdWorkListCell;\r\n        var _stdResponseListData;\r\n        var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, enums.StandardisationSetup.ClassifiedResponse, true, gridType);\r\n        // Flag to check whether target exceeded.\r\n        var overClassified = false;\r\n        // 1. PRACTICE\r\n        // Add practice response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists && !this._hiddenStdWorklists.contains(enums.MarkingMode.Practice))) {\r\n            // Sort Response based on Rig order.\r\n            _stdResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.Practice).toArray();\r\n            _stdWorkListRowHeaderCellcollection = new Array();\r\n            // Add Empty banner for Practice\r\n            _stdWorkListRowCollection.push(this.getFrozenEmptyBannerForClassificationType(enums.MarkingMode.Practice));\r\n            if (_stdResponseListData.length > 0) {\r\n                // Loop through response details.\r\n                for (var pracResponseCount = 0; pracResponseCount < _stdResponseListData.length; pracResponseCount++) {\r\n                    // Getting the std worklist data row     \r\n                    var stdResponseData = _stdResponseListData[pracResponseCount];\r\n                    // Check whetehr the classifcation type exceeded the current target,\r\n                    // and Practice available in restricted target.\r\n                    // if so highlight the exceeded last rows with amber color.\r\n                    overClassified =\r\n                        this.isSSUTargetsOverClassified(standardisationSetupType, enums.MarkingMode.Practice, stdResponseData.rigOrder);\r\n                    // Creating the table row collection.\r\n                    _stdWorkListRowCollection.push(this.getFrozenRowData(stdResponseData, gridType, gridColumns, index, overClassified));\r\n                    index++;\r\n                }\r\n            }\r\n            else {\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumns.length; gridColumnCount++) {\r\n                    _stdWorkListCell = new gridCell();\r\n                    var cellStyle = gridColumns[gridColumnCount].GridColumn === 'ResponseIdColumn' ?\r\n                        'col-response header-col' : 'col-std-classify-items header-col';\r\n                    _stdWorkListCell.setCellStyle(cellStyle);\r\n                    _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                }\r\n                // Creating the table row collection.\r\n                _stdWorkListRowCollection.push(this.getGridRow('2', _stdWorkListRowHeaderCellcollection, undefined, 'placeholder-row'));\r\n            }\r\n            // Reset to false.\r\n            overClassified = false;\r\n        }\r\n        // 2. APPROVAL\r\n        // Add standardisation response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists && !this._hiddenStdWorklists.contains(enums.MarkingMode.Approval))) {\r\n            // Sort Response based on Rig order.\r\n            _stdResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.Approval).toArray();\r\n            _stdWorkListRowHeaderCellcollection = new Array();\r\n            // Add Empty banner for Approval\r\n            _stdWorkListRowCollection.push(this.getFrozenEmptyBannerForClassificationType(enums.MarkingMode.Approval));\r\n            if (_stdResponseListData.length > 0) {\r\n                // Loop through response details.\r\n                for (var approvalResponseCount = 0; approvalResponseCount < _stdResponseListData.length; approvalResponseCount++) {\r\n                    // Getting the std worklist data row     \r\n                    var stdResponseData = _stdResponseListData[approvalResponseCount];\r\n                    // Check whetehr the classifcation type exceeded the current target,\r\n                    // and Standardisation available in restricted target.\r\n                    // if so highlight the exceeded last rows with amber color.\r\n                    overClassified =\r\n                        this.isSSUTargetsOverClassified(standardisationSetupType, enums.MarkingMode.Approval, stdResponseData.rigOrder);\r\n                    // Creating the table row collection.\r\n                    _stdWorkListRowCollection.push(this.getFrozenRowData(stdResponseData, gridType, gridColumns, index, overClassified));\r\n                    index++;\r\n                }\r\n            }\r\n            else {\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumns.length; gridColumnCount++) {\r\n                    _stdWorkListCell = new gridCell();\r\n                    var cellStyle = gridColumns[gridColumnCount].GridColumn === 'ResponseIdColumn' ?\r\n                        'col-response header-col' : 'col-std-classify-items header-col';\r\n                    _stdWorkListCell.setCellStyle(cellStyle);\r\n                    _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                }\r\n                // Creating the table row collection.\r\n                _stdWorkListRowCollection.push(this.getGridRow('3', _stdWorkListRowHeaderCellcollection, undefined, 'placeholder-row'));\r\n            }\r\n            // Reset to false.\r\n            overClassified = false;\r\n        }\r\n        // 3. ES TEAM APPROVAL\r\n        // Add STM standardisation response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists && !this._hiddenStdWorklists.contains(enums.MarkingMode.ES_TeamApproval))) {\r\n            // Sort Response based on Rig order.\r\n            _stdResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.ES_TeamApproval)\r\n                    .toArray();\r\n            _stdWorkListRowHeaderCellcollection = new Array();\r\n            // Add Empty banner for ES_TeamApproval\r\n            _stdWorkListRowCollection.push(this.getFrozenEmptyBannerForClassificationType(enums.MarkingMode.ES_TeamApproval));\r\n            if (_stdResponseListData.length > 0) {\r\n                // Loop through response details.\r\n                for (var esTeamResponseCount = 0; esTeamResponseCount < _stdResponseListData.length; esTeamResponseCount++) {\r\n                    // Getting the std worklist data row     \r\n                    var stdResponseData = _stdResponseListData[esTeamResponseCount];\r\n                    // Check whetehr the classifcation type exceeded the current target,\r\n                    // and STM Standardisation available in restricted target.\r\n                    // if so highlight the exceeded last rows with amber color.\r\n                    overClassified =\r\n                        this.isSSUTargetsOverClassified(standardisationSetupType, enums.MarkingMode.ES_TeamApproval, stdResponseData.rigOrder);\r\n                    // Creating the table row collection.\r\n                    _stdWorkListRowCollection.push(this.getFrozenRowData(stdResponseData, gridType, gridColumns, index, overClassified));\r\n                    index++;\r\n                }\r\n            }\r\n            else {\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumns.length; gridColumnCount++) {\r\n                    _stdWorkListCell = new gridCell();\r\n                    var cellStyle = gridColumns[gridColumnCount].GridColumn === 'ResponseIdColumn' ?\r\n                        'col-response header-col' : 'col-std-classify-items header-col';\r\n                    _stdWorkListCell.setCellStyle(cellStyle);\r\n                    _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                }\r\n                // Creating the table row collection.\r\n                _stdWorkListRowCollection.push(this.getGridRow('4', _stdWorkListRowHeaderCellcollection, undefined, 'placeholder-row'));\r\n            }\r\n            // Reset to false.\r\n            overClassified = false;\r\n        }\r\n        // 4. SEED\r\n        // Add Seed response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists && !this._hiddenStdWorklists.contains(enums.MarkingMode.Seeding))) {\r\n            _stdResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.Seeding).toArray();\r\n            _stdWorkListRowHeaderCellcollection = new Array();\r\n            // Add Empty banner for Seeding\r\n            _stdWorkListRowCollection.push(this.getFrozenEmptyBannerForClassificationType(enums.MarkingMode.Seeding));\r\n            if (_stdResponseListData.length > 0) {\r\n                // Loop through response details.\r\n                for (var seedResponseCount = 0; seedResponseCount < _stdResponseListData.length; seedResponseCount++) {\r\n                    // Getting the std worklist data row     \r\n                    var stdResponseData = _stdResponseListData[seedResponseCount];\r\n                    // Creating the table row collection.\r\n                    _stdWorkListRowCollection.push(this.getFrozenRowData(stdResponseData, gridType, gridColumns, index, false));\r\n                    index++;\r\n                }\r\n            }\r\n            else {\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumns.length; gridColumnCount++) {\r\n                    _stdWorkListCell = new gridCell();\r\n                    var cellStyle = gridColumns[gridColumnCount].GridColumn === 'ResponseIdColumn' ?\r\n                        'col-response header-col' : 'col-std-classify-items header-col';\r\n                    _stdWorkListCell.setCellStyle(cellStyle);\r\n                    _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                }\r\n                // Creating the table row collection.\r\n                _stdWorkListRowCollection.push(this.getGridRow('70', _stdWorkListRowHeaderCellcollection, undefined, 'placeholder-row'));\r\n            }\r\n            // Reset to false.\r\n            overClassified = false;\r\n        }\r\n        // Return the complete row collection.\r\n        var _stdWorkListFrozenRowBodyCollection = Immutable.fromJS(_stdWorkListRowCollection);\r\n        return _stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Method to create empty banner for Different classification Type.\r\n     * @param classificationType\r\n     */\r\n    ClassifiedHelper.prototype.getFrozenEmptyBannerForClassificationType = function (classificationType) {\r\n        var className;\r\n        var _stdWorkListCell;\r\n        var key;\r\n        var _stdWorkListRowHeaderCellcollection = new Array();\r\n        // Go through classification Type and create corresponding Banner.\r\n        switch (classificationType) {\r\n            case enums.MarkingMode.Practice:\r\n                _stdWorkListCell = new gridCell();\r\n                key = 'Empty_Banner_Practice';\r\n                className = 'header-data classify-item-text dark-link';\r\n                _stdWorkListCell.columnElement = this.getRIGOrderColumnElement(key, className, classificationType, undefined);\r\n                break;\r\n            case enums.MarkingMode.Approval:\r\n                _stdWorkListCell = new gridCell();\r\n                key = 'Empty_Banner_Standardisation';\r\n                className = 'header-data classify-item-text dark-link';\r\n                _stdWorkListCell.columnElement = this.getRIGOrderColumnElement(key, className, classificationType, undefined);\r\n                break;\r\n            case enums.MarkingMode.ES_TeamApproval:\r\n                _stdWorkListCell = new gridCell();\r\n                key = 'Empty_Banner_STM_Standardisation';\r\n                className = 'header-data classify-item-text dark-link';\r\n                _stdWorkListCell.columnElement = this.getRIGOrderColumnElement(key, className, classificationType, undefined);\r\n                break;\r\n            case enums.MarkingMode.Seeding:\r\n                _stdWorkListCell = new gridCell();\r\n                key = 'Empty_Banner_Seed';\r\n                className = 'header-data classify-item-text dark-link';\r\n                _stdWorkListCell.columnElement = this.getRIGOrderColumnElement(key, className, classificationType, undefined);\r\n                break;\r\n        }\r\n        _stdWorkListCell.setCellStyle('col-std-classify-items header-col');\r\n        _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n        // Logic to create empty frozen column for Practice/Seed/STM/Qualifcation Labels.\r\n        var emptygridCell;\r\n        emptygridCell = new gridCell();\r\n        emptygridCell.setCellStyle('col-response header-col');\r\n        _stdWorkListRowHeaderCellcollection.push(emptygridCell);\r\n        var cssClass = 'classify-items-row';\r\n        // Creating the table row collection.\r\n        return this.getGridRow(classificationType.toString(), _stdWorkListRowHeaderCellcollection, undefined, cssClass);\r\n    };\r\n    /**\r\n     * Get Unfrozen Empty Rows for Practice/Approval/STD.. Banners.\r\n     * @param gridColumns\r\n     * @param noOfQuestions\r\n     */\r\n    ClassifiedHelper.prototype.getEmptyRows = function (gridColumns, noOfQuestions, gridType) {\r\n        var _classifiedCell;\r\n        var _classifiedRowHeaderCellcollection = new Array();\r\n        // Create cells for Columns returned from JSON File.\r\n        for (var gridColumnCount = 0; gridColumnCount < gridColumns.length; gridColumnCount++) {\r\n            _classifiedCell = new gridCell();\r\n            var cellStyle = gridColumns[gridColumnCount].CssClass ? gridColumns[gridColumnCount].CssClass : '';\r\n            _classifiedCell.setCellStyle(cellStyle);\r\n            _classifiedRowHeaderCellcollection.push(_classifiedCell);\r\n        }\r\n        // Create cells for individual questions.\r\n        for (var gridColumnCount = 0; gridColumnCount < noOfQuestions; gridColumnCount++) {\r\n            _classifiedCell = new gridCell();\r\n            var cellStyle = 'col-question-item';\r\n            _classifiedCell.setCellStyle(cellStyle);\r\n            _classifiedRowHeaderCellcollection.push(_classifiedCell);\r\n        }\r\n        if (gridType === enums.GridType.markByQuestion) {\r\n            //Adding the 'last-cell' column as this column is not added to classified worklst by default\r\n            _classifiedCell = new gridCell();\r\n            var cellStyle = 'last-cell';\r\n            _classifiedCell.setCellStyle(cellStyle);\r\n            _classifiedRowHeaderCellcollection.push(_classifiedCell);\r\n        }\r\n        // return the cell Collection.\r\n        return _classifiedRowHeaderCellcollection;\r\n    };\r\n    return ClassifiedHelper;\r\n}(standardisationSetupHelperBase));\r\nmodule.exports = ClassifiedHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 412:
/* no static exports found */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/components/utility/grid/standardisationsetuphelpers/provisionalhelper.ts ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar standardisationsetuphelperbase = __webpack_require__(/*! ./standardisationsetuphelperbase */ 292);\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar jsonRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar standardisationSetupGridColumnsJson = __webpack_require__(/*! ../standardisationsetupgridcolumns.json */ 273);\r\nvar comparerList = __webpack_require__(/*! ../../../../utility/sorting/sortbase/comparerlist */ 262);\r\nvar sortHelper = __webpack_require__(/*! ../../../../utility/sorting/sorthelper */ 272);\r\n/**\r\n * Helper class for Classified grid view\r\n */\r\nvar ProvisionalHelper = /** @class */ (function (_super) {\r\n    __extends(ProvisionalHelper, _super);\r\n    function ProvisionalHelper() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * generateStandardisationFrozenRowBody is used for generating row collection for STD WorkList Grid\r\n     * @param standardisationSetupType\r\n     * @param gridType\r\n     */\r\n    ProvisionalHelper.prototype.generateStandardisationFrozenRowBody = function (comparerName, sortDirection, standardisationSetupType, gridType) {\r\n        // Get frozen column collection.\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        return this.generateFrozenRowBody(standardisationSetupStore.instance.standardisationSetupDetails, standardisationSetupType, gridType, comparerName, sortDirection);\r\n    };\r\n    /**\r\n     * Gets Grid rows\r\n     * @param tabSelection\r\n     * @param gridType\r\n     */\r\n    ProvisionalHelper.prototype.generateStandardisationRowDefinion = function (comparerName, sortDirection, tabSelection, gridType) {\r\n        this._stdSetUpWorkListCollection = Immutable.List();\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        this._stdSetUpWorkListCollection = this.getRowDefinion(tabSelection, gridType, comparerName, sortDirection);\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Returns the row definition for provisional worklist\r\n     * @param tabSelection\r\n     * @param gridType\r\n     */\r\n    ProvisionalHelper.prototype.getRowDefinion = function (tabSelection, gridType, comparerName, sortDirection) {\r\n        var sortedData;\r\n        var _provisionalRowCollection = Array();\r\n        var _provisionalRowHeaderCellcollection = Array();\r\n        var _provisionalResponseListData;\r\n        var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, tabSelection, false, gridType);\r\n        var _stdSetupResponseDetails = standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses;\r\n        var marksCount = _stdSetupResponseDetails.first().standardisationMarks ?\r\n            Immutable.List(_stdSetupResponseDetails.first().standardisationMarks).count() : 0;\r\n        _provisionalResponseListData = Immutable.List(standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses);\r\n        sortedData = Immutable.List(sortHelper.sort(_provisionalResponseListData.toArray(), comparerList[comparerName]));\r\n        _provisionalResponseListData = sortedData;\r\n        if (_provisionalResponseListData.count() > 0) {\r\n            _provisionalRowCollection =\r\n                _provisionalRowCollection.concat(this.getRowData(_provisionalResponseListData, gridColumns, gridType, 0, enums.StandardisationSetup.ProvisionalResponse));\r\n        }\r\n        // Return the complete row collection.\r\n        this._provisionalListCollection = Immutable.fromJS(_provisionalRowCollection);\r\n        return this._provisionalListCollection;\r\n    };\r\n    return ProvisionalHelper;\r\n}(standardisationsetuphelperbase));\r\nmodule.exports = ProvisionalHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL3N0YW5kYXJkaXNhdGlvbnNldHVwaGVscGVycy9wcm92aXNpb25hbGhlbHBlci50cz85Mzk1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBzdGFuZGFyZGlzYXRpb25zZXR1cGhlbHBlcmJhc2UgPSByZXF1aXJlKCcuL3N0YW5kYXJkaXNhdGlvbnNldHVwaGVscGVyYmFzZScpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi9lbnVtcycpO1xyXG5pbXBvcnQgZ3JpZFJvdyA9IHJlcXVpcmUoJy4uL2dyaWRyb3cnKTtcclxuaW1wb3J0IGpzb25SZWZSZXNvbHZlciA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3V0aWxpdHkvanNvbnJlZnJlc29sdmVyL2pvc25yZWZyZXNvbHZlcicpO1xyXG5pbXBvcnQgZ3JpZENlbGwgPSByZXF1aXJlKCcuLi9ncmlkY2VsbCcpO1xyXG5pbXBvcnQgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XHJcbmltcG9ydCBzdGFuZGFyZGlzYXRpb25TZXR1cFN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vc3RvcmVzL3N0YW5kYXJkaXNhdGlvbnNldHVwL3N0YW5kYXJkaXNhdGlvbnNldHVwc3RvcmUnKTtcclxubGV0IHN0YW5kYXJkaXNhdGlvblNldHVwR3JpZENvbHVtbnNKc29uID0gcmVxdWlyZSgnLi4vc3RhbmRhcmRpc2F0aW9uc2V0dXBncmlkY29sdW1ucy5qc29uJyk7XHJcbmltcG9ydCBjb21wYXJlckxpc3QgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlsaXR5L3NvcnRpbmcvc29ydGJhc2UvY29tcGFyZXJsaXN0Jyk7XHJcbmltcG9ydCBzb3J0SGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vdXRpbGl0eS9zb3J0aW5nL3NvcnRoZWxwZXInKTtcclxuXHJcblxyXG4vKipcclxuICogSGVscGVyIGNsYXNzIGZvciBDbGFzc2lmaWVkIGdyaWQgdmlld1xyXG4gKi9cclxuY2xhc3MgUHJvdmlzaW9uYWxIZWxwZXIgZXh0ZW5kcyBzdGFuZGFyZGlzYXRpb25zZXR1cGhlbHBlcmJhc2Uge1xyXG5cclxuICAgIC8qIEdyaWQgcm93cyBjb2xsZWN0aW9uICovXHJcbiAgICBwdWJsaWMgX3Byb3Zpc2lvbmFsTGlzdENvbGxlY3Rpb246IEltbXV0YWJsZS5MaXN0PGdyaWRSb3c+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2VuZXJhdGVTdGFuZGFyZGlzYXRpb25Gcm96ZW5Sb3dCb2R5IGlzIHVzZWQgZm9yIGdlbmVyYXRpbmcgcm93IGNvbGxlY3Rpb24gZm9yIFNURCBXb3JrTGlzdCBHcmlkXHJcbiAgICAgKiBAcGFyYW0gc3RhbmRhcmRpc2F0aW9uU2V0dXBUeXBlIFxyXG4gICAgICogQHBhcmFtIGdyaWRUeXBlIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2VuZXJhdGVTdGFuZGFyZGlzYXRpb25Gcm96ZW5Sb3dCb2R5KGNvbXBhcmVyTmFtZTogc3RyaW5nLCBzb3J0RGlyZWN0aW9uOiBlbnVtcy5Tb3J0RGlyZWN0aW9uLFxyXG4gICAgICAgIHN0YW5kYXJkaXNhdGlvblNldHVwVHlwZTogZW51bXMuU3RhbmRhcmRpc2F0aW9uU2V0dXAsXHJcbiAgICAgICAgZ3JpZFR5cGU6IGVudW1zLkdyaWRUeXBlKTogSW1tdXRhYmxlLkxpc3Q8Z3JpZFJvdz4ge1xyXG4gICAgICAgIC8vIEdldCBmcm96ZW4gY29sdW1uIGNvbGxlY3Rpb24uXHJcbiAgICAgICAgdGhpcy5yZXNvbHZlZEdyaWRDb2x1bW5zSnNvbiA9IGpzb25SZWZSZXNvbHZlci5yZXNvbHZlUmVmcyhzdGFuZGFyZGlzYXRpb25TZXR1cEdyaWRDb2x1bW5zSnNvbik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlRnJvemVuUm93Qm9keShcclxuICAgICAgICAgICAgc3RhbmRhcmRpc2F0aW9uU2V0dXBTdG9yZS5pbnN0YW5jZS5zdGFuZGFyZGlzYXRpb25TZXR1cERldGFpbHMsXHJcbiAgICAgICAgICAgIHN0YW5kYXJkaXNhdGlvblNldHVwVHlwZSxcclxuICAgICAgICAgICAgZ3JpZFR5cGUsXHJcbiAgICAgICAgICAgIGNvbXBhcmVyTmFtZSxcclxuICAgICAgICAgICAgc29ydERpcmVjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIEdyaWQgcm93c1xyXG4gICAgICogQHBhcmFtIHRhYlNlbGVjdGlvbiBcclxuICAgICAqIEBwYXJhbSBncmlkVHlwZSBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdlbmVyYXRlU3RhbmRhcmRpc2F0aW9uUm93RGVmaW5pb24oY29tcGFyZXJOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgc29ydERpcmVjdGlvbjogZW51bXMuU29ydERpcmVjdGlvbixcclxuICAgICAgICB0YWJTZWxlY3Rpb246IGVudW1zLlN0YW5kYXJkaXNhdGlvblNldHVwLFxyXG4gICAgICAgIGdyaWRUeXBlOiBlbnVtcy5HcmlkVHlwZSk6IEltbXV0YWJsZS5MaXN0PGdyaWRSb3c+IHtcclxuICAgICAgICB0aGlzLl9zdGRTZXRVcFdvcmtMaXN0Q29sbGVjdGlvbiA9IEltbXV0YWJsZS5MaXN0PGdyaWRSb3c+KCk7XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlZEdyaWRDb2x1bW5zSnNvbiA9IGpzb25SZWZSZXNvbHZlci5yZXNvbHZlUmVmcyhzdGFuZGFyZGlzYXRpb25TZXR1cEdyaWRDb2x1bW5zSnNvbik7XHJcbiAgICAgICAgdGhpcy5fc3RkU2V0VXBXb3JrTGlzdENvbGxlY3Rpb24gPSB0aGlzLmdldFJvd0RlZmluaW9uKHRhYlNlbGVjdGlvbiwgZ3JpZFR5cGUsIGNvbXBhcmVyTmFtZSwgc29ydERpcmVjdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0ZFNldFVwV29ya0xpc3RDb2xsZWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgcm93IGRlZmluaXRpb24gZm9yIHByb3Zpc2lvbmFsIHdvcmtsaXN0XHJcbiAgICAgKiBAcGFyYW0gdGFiU2VsZWN0aW9uIFxyXG4gICAgICogQHBhcmFtIGdyaWRUeXBlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0Um93RGVmaW5pb24odGFiU2VsZWN0aW9uOiBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cCxcclxuICAgICAgICBncmlkVHlwZTogZW51bXMuR3JpZFR5cGUsXHJcbiAgICAgICAgY29tcGFyZXJOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgc29ydERpcmVjdGlvbjogZW51bXMuU29ydERpcmVjdGlvbik6IEltbXV0YWJsZS5MaXN0PGdyaWRSb3c+IHtcclxuICAgICAgICBsZXQgc29ydGVkRGF0YTogSW1tdXRhYmxlLkxpc3Q8U3RhbmRhcmRpc2F0aW9uUmVzcG9uc2VEZXRhaWxzPjtcclxuICAgICAgICBsZXQgX3Byb3Zpc2lvbmFsUm93Q29sbGVjdGlvbiA9IEFycmF5PGdyaWRSb3c+KCk7XHJcbiAgICAgICAgbGV0IF9wcm92aXNpb25hbFJvd0hlYWRlckNlbGxjb2xsZWN0aW9uID0gQXJyYXk8Z3JpZENlbGw+KCk7XHJcbiAgICAgICAgbGV0IF9wcm92aXNpb25hbFJlc3BvbnNlTGlzdERhdGE6IEltbXV0YWJsZS5MaXN0PFN0YW5kYXJkaXNhdGlvblJlc3BvbnNlRGV0YWlscz47XHJcbiAgICAgICAgbGV0IGdyaWRDb2x1bW5zID0gdGhpcy5nZXRHcmlkQ29sdW1ucyh0aGlzLnJlc29sdmVkR3JpZENvbHVtbnNKc29uLCB0YWJTZWxlY3Rpb24sIGZhbHNlLCBncmlkVHlwZSk7XHJcbiAgICAgICAgbGV0IF9zdGRTZXR1cFJlc3BvbnNlRGV0YWlsczogSW1tdXRhYmxlLkxpc3Q8U3RhbmRhcmRpc2F0aW9uUmVzcG9uc2VEZXRhaWxzPiA9XHJcbiAgICAgICAgICAgIHN0YW5kYXJkaXNhdGlvblNldHVwU3RvcmUuaW5zdGFuY2Uuc3RhbmRhcmRpc2F0aW9uU2V0VXBSZXNwb25zZWRldGFpbHMuc3RhbmRhcmRpc2F0aW9uUmVzcG9uc2VzO1xyXG4gICAgICAgIGxldCBtYXJrc0NvdW50ID0gX3N0ZFNldHVwUmVzcG9uc2VEZXRhaWxzLmZpcnN0KCkuc3RhbmRhcmRpc2F0aW9uTWFya3MgP1xyXG4gICAgICAgICAgICBJbW11dGFibGUuTGlzdDxSZXNwb25zZU1hcmtEZXRhaWxzPihfc3RkU2V0dXBSZXNwb25zZURldGFpbHMuZmlyc3QoKS5zdGFuZGFyZGlzYXRpb25NYXJrcykuY291bnQoKSA6IDA7XHJcblxyXG4gICAgICAgIF9wcm92aXNpb25hbFJlc3BvbnNlTGlzdERhdGEgPSBJbW11dGFibGUuTGlzdDxTdGFuZGFyZGlzYXRpb25SZXNwb25zZURldGFpbHM+XHJcbiAgICAgICAgICAgIChzdGFuZGFyZGlzYXRpb25TZXR1cFN0b3JlLmluc3RhbmNlLnN0YW5kYXJkaXNhdGlvblNldFVwUmVzcG9uc2VkZXRhaWxzLnN0YW5kYXJkaXNhdGlvblJlc3BvbnNlcyk7XHJcbiAgICAgICAgc29ydGVkRGF0YSA9IEltbXV0YWJsZS5MaXN0PFN0YW5kYXJkaXNhdGlvblJlc3BvbnNlRGV0YWlscz4oXHJcbiAgICAgICAgICAgIHNvcnRIZWxwZXIuc29ydChfcHJvdmlzaW9uYWxSZXNwb25zZUxpc3REYXRhLnRvQXJyYXkoKSwgY29tcGFyZXJMaXN0W2NvbXBhcmVyTmFtZV0pKTtcclxuICAgICAgICBfcHJvdmlzaW9uYWxSZXNwb25zZUxpc3REYXRhID0gc29ydGVkRGF0YTtcclxuICAgICAgICBpZiAoX3Byb3Zpc2lvbmFsUmVzcG9uc2VMaXN0RGF0YS5jb3VudCgpID4gMCkge1xyXG4gICAgICAgICAgICBfcHJvdmlzaW9uYWxSb3dDb2xsZWN0aW9uID1cclxuICAgICAgICAgICAgICAgIF9wcm92aXNpb25hbFJvd0NvbGxlY3Rpb24uY29uY2F0KFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0Um93RGF0YShfcHJvdmlzaW9uYWxSZXNwb25zZUxpc3REYXRhLCBncmlkQ29sdW1ucywgZ3JpZFR5cGUsIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudW1zLlN0YW5kYXJkaXNhdGlvblNldHVwLlByb3Zpc2lvbmFsUmVzcG9uc2UpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiB0aGUgY29tcGxldGUgcm93IGNvbGxlY3Rpb24uXHJcbiAgICAgICAgdGhpcy5fcHJvdmlzaW9uYWxMaXN0Q29sbGVjdGlvbiA9IEltbXV0YWJsZS5mcm9tSlMoX3Byb3Zpc2lvbmFsUm93Q29sbGVjdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3Zpc2lvbmFsTGlzdENvbGxlY3Rpb247XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0ID0gUHJvdmlzaW9uYWxIZWxwZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ3JpZC9zdGFuZGFyZGlzYXRpb25zZXR1cGhlbHBlcnMvcHJvdmlzaW9uYWxoZWxwZXIudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOztBQUVBO0FBQ0E7QUFBQTtBQUFBOztBQTBFQTtBQXJFQTs7OztBQUlBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFNQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 413:
/* no static exports found */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/components/utility/grid/standardisationsetuphelpers/selectresponsehelper.ts ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar gridRow = __webpack_require__(/*! ../../../utility/grid/gridrow */ 296);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../../../stores/locale/localestore */ 226);\r\nvar standardisationsetuphelperbase = __webpack_require__(/*! ./standardisationsetuphelperbase */ 292);\r\nvar josnRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar standardisationGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/standardisationsetupgridcolumns.json */ 273);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar scriptStatusGridElement = __webpack_require__(/*! ../../../standardisationsetup/shared/scriptstatusgridelement */ 404);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar ReuseButton = __webpack_require__(/*! ../../../standardisationsetup/shared/reusebutton */ 384);\r\nvar ToggleButton = __webpack_require__(/*! ../../../utility/togglebutton */ 308);\r\nvar comparerList = __webpack_require__(/*! ../../../../utility/sorting/sortbase/comparerlist */ 262);\r\nvar sortHelper = __webpack_require__(/*! ../../../../utility/sorting/sorthelper */ 272);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../../../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\n/**\r\n * Helper class for select response grid view\r\n */\r\nvar SelectResponseHelper = /** @class */ (function (_super) {\r\n    __extends(SelectResponseHelper, _super);\r\n    function SelectResponseHelper() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Generate Centre Row Definition\r\n     * @param standardisationCentreList\r\n     */\r\n    SelectResponseHelper.prototype.generateCentreRowDefinition = function (standardisationCentreList) {\r\n        this.resolvedGridColumnsJson = josnRefResolver.resolveRefs(standardisationGridColumnsJson);\r\n        this._stdSetUpWorkListCollection = Immutable.List();\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        var isSeedResponse;\r\n        if (standardisationCentreList != null) {\r\n            var gridSeq = standardisationCentreList.centreList.keySeq();\r\n            var _responseListData = standardisationCentreList.centreList.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.standardisationsetup.SelectResponse.Centre.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.Centre:\r\n                            key = gridSeq.get(responseListCount) + '_Centre_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreNumber, key));\r\n                            break;\r\n                        case gridColumnNames.Scripts:\r\n                            key = gridSeq.get(responseListCount) + '_Scripts_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.totalScripts.toString(), key));\r\n                            break;\r\n                        case gridColumnNames.ScriptsAvailable:\r\n                            key = gridSeq.get(responseListCount) + '_ScriptsAvailable_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.availableScripts.toString(), key));\r\n                            break;\r\n                        case gridColumnNames.FirstScanned:\r\n                            key = gridSeq.get(responseListCount) + '_FirstScanned_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericFormattedDateElement(responseData.firstScanned, key));\r\n                            break;\r\n                        default:\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                _workListRowCollection.push(this.getGridRow(responseData.uniqueId.toString(), _workListRowHeaderCellcollection, undefined, standardisationSetupStore.instance.selectedCentreId === responseData.uniqueId ? 'row selected' : 'row'));\r\n            }\r\n        }\r\n        this._stdSetUpWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Method for getting the frozen row body for STD worklist\r\n     * @param standardisationResponseData\r\n     */\r\n    SelectResponseHelper.prototype.generateStandardisationFrozenRowBodyReusableGrid = function (reusableResponsesList, comparerName, sortDirection) {\r\n        var _stdWorkListRowHeaderCellcollection = Array();\r\n        var _stdWorkListRowCollection = Array();\r\n        var _reusableResponseListData;\r\n        var _stdResponseColumn;\r\n        var componentPropsJson;\r\n        var _stdWorkListCell;\r\n        var key;\r\n        var cssClass;\r\n        _reusableResponseListData = reusableResponsesList.toArray();\r\n        var _comparerName = (sortDirection === enums.SortDirection.Ascending) ? comparerName : comparerName + 'Desc';\r\n        var sortedData = Immutable.List(sortHelper.sort(_reusableResponseListData, comparerList[_comparerName]));\r\n        _reusableResponseListData = sortedData.toArray();\r\n        if (_reusableResponseListData != null) {\r\n            var previousMarkingMode = enums.MarkingMode.None;\r\n            var gridSeq = Immutable.List(_reusableResponseListData).keySeq();\r\n            var responseListLength = _reusableResponseListData.length;\r\n            for (var stdResponseCount = 0; stdResponseCount < responseListLength; stdResponseCount++) {\r\n                // Getting the std worklist data row\r\n                _stdWorkListRowHeaderCellcollection = new Array();\r\n                // instead of accessing _standardisationResponseListData[standardisationResponseListCount]\r\n                // collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var stdResponseData = _reusableResponseListData[stdResponseCount];\r\n                var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, enums.StandardisationSetup.SelectResponse, true, null, enums.StandardisationSessionTab.PreviousSession);\r\n                var gridColumnLength = gridColumns.length;\r\n                // Getting the STD worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _stdResponseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _stdWorkListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    //Switch statement for adding frozen columns in future.\r\n                    switch (_stdResponseColumn) {\r\n                        case gridColumnNames.ScriptId:\r\n                            key = gridSeq.get(stdResponseCount) + '_ScriptId_' + stdResponseCount;\r\n                            _stdWorkListCell.columnElement =\r\n                                this.getResponseIdColumnElement(stdResponseData, key, true, true, stdResponseData.candidateScriptId.toString());\r\n                            _stdWorkListCell.setCellStyle('col-script-id header-col');\r\n                            _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                            break;\r\n                        case gridColumnNames.Status:\r\n                            key = 'reusableresponse' + '_Is_Reused_' + stdResponseCount;\r\n                            var responseStatuses = Immutable.List();\r\n                            _stdWorkListCell.columnElement = this.reuseButton(stdResponseData.reUsedQIG, stdResponseCount, stdResponseData.displayId);\r\n                            _stdWorkListCell.setCellStyle('col-re-use');\r\n                            _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                            break;\r\n                        case gridColumnNames.OrginalSession:\r\n                            key = gridSeq.get(stdResponseCount) + '_Orginal_Session_' + stdResponseCount;\r\n                            _stdWorkListCell.columnElement = (this.getGenericTextElement(stdResponseData.originalSession.toString(), key));\r\n                            _stdWorkListCell.setCellStyle('col-org-session');\r\n                            _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                            break;\r\n                        case gridColumnNames.OrginalClassification:\r\n                            key = gridSeq.get(stdResponseCount) + '_Orginal_Classification_' + stdResponseCount;\r\n                            _stdWorkListCell.columnElement = (this.getGenericTextElement(stdResponseData.originalClassification.toString(), key));\r\n                            _stdWorkListCell.setCellStyle('col-org-classification');\r\n                            _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                            break;\r\n                    }\r\n                }\r\n                // Creating the table row collection.\r\n                _stdWorkListRowCollection.push(this.getGridRow(stdResponseData.displayId.toString(), _stdWorkListRowHeaderCellcollection));\r\n            }\r\n        }\r\n        var _stdWorkListFrozenRowBodyCollection = Immutable.fromJS(_stdWorkListRowCollection);\r\n        return _stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Reuse button return\r\n     * @param isDisabled\r\n     * @param id\r\n     * @param displayId\r\n     */\r\n    SelectResponseHelper.prototype.reuseButton = function (isDisabled, id, displayId) {\r\n        var componentProps;\r\n        componentProps = {\r\n            isDisabled: isDisabled,\r\n            id: id,\r\n            renderedOn: Date.now(),\r\n            displayId: displayId\r\n        };\r\n        return React.createElement(ReuseButton, componentProps);\r\n    };\r\n    /**\r\n     * Onclick hide response\r\n     */\r\n    SelectResponseHelper.prototype.hideResponse = function (isChecked, displayID, key) {\r\n        var componentProps;\r\n        componentProps = {\r\n            id: key + '_id',\r\n            key: key + '_key',\r\n            isChecked: isChecked,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            index: 0,\r\n            onChange: this.onHideResponseToggleChange,\r\n            style: null,\r\n            className: 'form-component',\r\n            title: 'Hide Response',\r\n            isDisabled: false,\r\n            onText: localeStore.instance.TranslateText('generic.toggle-button-states.yes'),\r\n            offText: localeStore.instance.TranslateText('generic.toggle-button-states.no'),\r\n            displayId: displayID\r\n        };\r\n        return React.createElement(ToggleButton, componentProps);\r\n    };\r\n    /**\r\n     * for handling the hide response toggle change event.\r\n     */\r\n    SelectResponseHelper.prototype.onHideResponseToggleChange = function (evt, isChecked, displayId) {\r\n        standardisationActionCreator.updateHideResponseStatus(!isChecked, displayId);\r\n    };\r\n    /**\r\n     * Generate reusable response row definition\r\n     * @param reusableResponsesList\r\n     */\r\n    SelectResponseHelper.prototype.generateReusableResponsesRowDefinition = function (reusableResponsesList, comparerName, sortDirection) {\r\n        this.resolvedGridColumnsJson = josnRefResolver.resolveRefs(standardisationGridColumnsJson);\r\n        this._stdSetUpWorkListCollection = Immutable.List();\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        var _reusableResponseListData = reusableResponsesList.toArray();\r\n        var _comparerName = (sortDirection === enums.SortDirection.Ascending) ? comparerName : comparerName + 'Desc';\r\n        var sortedData = Immutable.List(sortHelper.sort(_reusableResponseListData, comparerList[_comparerName]));\r\n        _reusableResponseListData = sortedData.toArray();\r\n        var responseListLength = _reusableResponseListData.length;\r\n        for (var reusableResponseCount = 0; reusableResponseCount < responseListLength; reusableResponseCount++) {\r\n            // Getting the worklist data row\r\n            var gridColumns = this.resolvedGridColumnsJson.standardisationsetup.PreviousSession.ReusableResponse.GridColumns;\r\n            var gridColumnLength = gridColumns.length;\r\n            _workListRowHeaderCellcollection = new Array();\r\n            _worklistRow = new gridRow();\r\n            // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n            // outside the loop globally\r\n            var responseData = _reusableResponseListData[reusableResponseCount];\r\n            for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                _workListCell = new gridCell();\r\n                switch (_responseColumn) {\r\n                    case gridColumnNames.Centre:\r\n                        key = 'reusableresponse' + '_Centre_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getGenericTextElement(responseData.centreNumber.toString(), key));\r\n                        break;\r\n                    case gridColumnNames.CentreCandidateNum:\r\n                        key = 'reusableresponse' + '_Candidate_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getGenericTextElement(responseData.centreCandidateNumber.toString(), key));\r\n                        break;\r\n                    case gridColumnNames.Mark:\r\n                        key = 'reusableresponse' + '_Mark_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getGenericTextElement(responseData.totalMarkValue.toString(), key));\r\n                        break;\r\n                    case gridColumnNames.OrginalMarksUpdated:\r\n                        key = 'reusableresponse' + '_Orginal_Marks_Updated_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getConvertTextElement(responseData.originalMarksUpdated.toString(), key));\r\n                        break;\r\n                    case gridColumnNames.HideResponse:\r\n                        key = 'reusableresponse' + '_HideResponse_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.hideResponse(responseData.hidden, responseData.displayId, key));\r\n                        break;\r\n                    case gridColumnNames.Totaltimereused:\r\n                        key = 'reusableresponse' + '_Totaltimereused_' + reusableResponseCount;\r\n                        var toolTip = this.getToolTipTotalTimeReused(responseData.reusedComponentTooltipData, false);\r\n                        _workListCell.columnElement = (this.getGenericTextElement(responseData.timesReUsed.toString(), key, toolTip));\r\n                        break;\r\n                    case gridColumnNames.LastUsed:\r\n                        key = 'reusableresponse' + '_LastUsed_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getGenericTextElement(responseData.lastUsed.toString(), key));\r\n                        break;\r\n                    case gridColumnNames.TimesReusedInThisSession:\r\n                        key = 'reusableresponse' + '_Times_Reused_In_This_Session_' + reusableResponseCount;\r\n                        var sessionToolTip = this.getToolTipTotalTimeReused(responseData.reusedSessionTooltipData, true);\r\n                        _workListCell.columnElement =\r\n                            (this.getGenericTextElement(responseData.timesReUsedSession.toString(), key, sessionToolTip));\r\n                        break;\r\n                    case gridColumnNames.UpdatePending:\r\n                        key = 'reusableresponse' + '_Update_Pending_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getConvertTextElement(responseData.updatesPending.toString(), key));\r\n                        break;\r\n                    case gridColumnNames.IsReusedInThisQIG:\r\n                        key = 'reusableresponse' + '_Is_Reused_In_This_QIG' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getConvertTextElement(responseData.reUsedQIG.toString(), key));\r\n                        break;\r\n                    default:\r\n                }\r\n                var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                _workListCell.setCellStyle(cellStyle);\r\n                _workListRowHeaderCellcollection.push(_workListCell);\r\n            }\r\n            _workListRowCollection.push(this.getGridRow(responseData.candidateScriptId.toString(), _workListRowHeaderCellcollection, undefined));\r\n        }\r\n        this._stdSetUpWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Get Tooltip for total time reused coulumn\r\n     * @param totalTimesReusedTooltip\r\n     */\r\n    SelectResponseHelper.prototype.getToolTipTotalTimeReused = function (totalTimesReusedTooltip, isTooltipForthisSession) {\r\n        var toolTipData = localeStore.instance.TranslateText('standardisation-setup.previous-session.reused-tooltip.not-reused');\r\n        var toolTipList = Immutable.List(totalTimesReusedTooltip).toArray();\r\n        var toolTipListLength = toolTipList.length;\r\n        if (toolTipListLength !== null && toolTipListLength > 0) {\r\n            toolTipData = isTooltipForthisSession ?\r\n                localeStore.instance.TranslateText('standardisation-setup.previous-session.reused-tooltip.reused-in-this-session-tooltip') :\r\n                localeStore.instance.TranslateText('standardisation-setup.previous-session.reused-tooltip.reused-overall-tooltip');\r\n            for (var a = 0; a < toolTipListLength; a++) {\r\n                var rr = toolTipList[a];\r\n                if (rr.marking_Mode === 'ES Team Approval') {\r\n                    rr.marking_Mode = 'ES_TeamApproval';\r\n                }\r\n                else if (rr.marking_Mode === 'Pre_Standardisation' || rr.marking_Mode === 'Pre Standardisation') {\r\n                    rr.marking_Mode = 'PreStandardisation';\r\n                }\r\n                toolTipData = toolTipData + ' '\r\n                    + localeStore.instance.TranslateText('standardisation-setup.previous-session.reused-tooltip.' + rr.marking_Mode)\r\n                    + '(' + rr.timesUsed\r\n                    + (isTooltipForthisSession ? (')') : ('/' + rr.session + ')'))\r\n                    + (a < toolTipListLength - 1 ? ',' : '');\r\n            }\r\n        }\r\n        return toolTipData;\r\n    };\r\n    /**\r\n     * generate Script Row definition\r\n     * @param standardisationScriptList\r\n     */\r\n    SelectResponseHelper.prototype.generateScriptRowDefinition = function (standardisationScriptList) {\r\n        this.resolvedGridColumnsJson = josnRefResolver.resolveRefs(standardisationGridColumnsJson);\r\n        this._stdSetUpWorkListCollection = Immutable.List();\r\n        var _rowCollection = Array();\r\n        var _rowHeaderCellcollection = Array();\r\n        var _row;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _cell;\r\n        var key;\r\n        var isSeedResponse;\r\n        if (standardisationScriptList != null) {\r\n            var gridSeq = standardisationScriptList.centreScriptList.keySeq();\r\n            var _responseListData = standardisationScriptList.centreScriptList.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.standardisationsetup.SelectResponse.Script.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _rowHeaderCellcollection = new Array();\r\n                _row = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _cell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.CentreCandidateNum:\r\n                            key = gridSeq.get(responseListCount) + '_CentreCandidateNo_' + gridColumnCount;\r\n                            _cell.columnElement = (this.getGenericTextElement(responseData.centreCandidateNumber, key));\r\n                            break;\r\n                        case gridColumnNames.Status:\r\n                            key = gridSeq.get(responseListCount) + '_Status_' + gridColumnCount;\r\n                            _cell.columnElement = this.getScriptStatusElement(responseData, key);\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _cell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, false, false));\r\n                            break;\r\n                        case gridColumnNames.QuestionItems:\r\n                            if (configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.eBookmarking).toLowerCase() === 'true' ? true : false) {\r\n                                key = gridSeq.get(responseListCount) + '_QuestionItems_' + gridColumnCount;\r\n                                _cell.columnElement = (this.getGenericTextElement(responseData.questionItems.toString(), key));\r\n                            }\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _cell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _cell.setCellStyle(cellStyle);\r\n                    _rowHeaderCellcollection.push(_cell);\r\n                }\r\n                _rowCollection.push(this.getGridRow(responseData.candidateScriptId.toString(), _rowHeaderCellcollection, undefined));\r\n            }\r\n        }\r\n        this._stdSetUpWorkListCollection = Immutable.fromJS(_rowCollection);\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * get Script status element for worklist\r\n     * @param standardisationScriptDetails Get the script status element\r\n     * @param seq\r\n     */\r\n    SelectResponseHelper.prototype.getScriptStatusElement = function (standardisationScriptDetails, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            isAllocatedALive: standardisationScriptDetails.isAllocatedALive,\r\n            isUsedForProvisionalMarking: standardisationScriptDetails.isUsedForProvisionalMarking,\r\n            selectedLanguage: localeStore.instance.Locale\r\n        };\r\n        return React.createElement(scriptStatusGridElement, componentProps);\r\n    };\r\n    return SelectResponseHelper;\r\n}(standardisationsetuphelperbase));\r\nmodule.exports = SelectResponseHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 414:
/* no static exports found */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/components/utility/grid/standardisationsetuphelpers/unclassifiedhelper.ts ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar standardisationsetuphelperbase = __webpack_require__(/*! ./standardisationsetuphelperbase */ 292);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar jsonRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar standardisationsetuptGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/standardisationsetupgridcolumns.json */ 273);\r\nvar standardisationSetupGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/standardisationsetupgridcolumns.json */ 273);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar stdSetupPermissionHelper = __webpack_require__(/*! ../../../../utility/standardisationsetup/standardisationsetuppermissionhelper */ 332);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\nvar comparerList = __webpack_require__(/*! ../../../../utility/sorting/sortbase/comparerlist */ 262);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar sortHelper = __webpack_require__(/*! ../../../../utility/sorting/sorthelper */ 272);\r\nvar submitHelper = __webpack_require__(/*! ../../submit/submithelper */ 282);\r\n/**\r\n * Helper class for UnClassified grid view\r\n */\r\nvar UnClassifiedHelper = /** @class */ (function (_super) {\r\n    __extends(UnClassifiedHelper, _super);\r\n    function UnClassifiedHelper() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this._stdSetupPermissionCCValue = stdSetupPermissionHelper\r\n            .getSTDSetupPermissionCCValueByMarkSchemeGroupId(qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId);\r\n        return _this;\r\n    }\r\n    /**\r\n     * generateUnClassifiedFrozenRowBody is used for generating row collection for STD WorkList Grid\r\n     * @param standardisationResponseListData\r\n     * @param standardisationSetupType\r\n     * @param gridType\r\n     */\r\n    UnClassifiedHelper.prototype.generateStandardisationFrozenRowBody = function (comparerName, sortDirection, standardisationSetupType, gridType) {\r\n        // Get frozen column collection.\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        // Get the Frozen row body for STD Worklist\r\n        var _stdWorkListFrozenRowBodyCollection = this.getFrozenRowBody(standardisationSetupType, gridType, comparerName);\r\n        return _stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Method for getting the frozen row body for STD worklist\r\n     * @param comparerName\r\n     * @param standardisationSetupType\r\n     * @param gridType\r\n     */\r\n    UnClassifiedHelper.prototype.getFrozenRowBody = function (standardisationSetupType, gridType, comparerName) {\r\n        var _stdWorkListRowHeaderCellcollection = Array();\r\n        var _stdWorkListRowCollection = Array();\r\n        var _stdResponseListData;\r\n        var _stdResponseColumn;\r\n        var componentPropsJson;\r\n        var _stdWorkListCell;\r\n        var key;\r\n        var cssClass;\r\n        var submitResponseHelper = new submitHelper();\r\n        _stdResponseListData = Immutable.List(standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses);\r\n        if (_stdResponseListData != null) {\r\n            var sortedUnclassifiedData = Immutable.List(sortHelper.sort(_stdResponseListData.toArray(), comparerList[comparerName]));\r\n            var previousMarkingMode = enums.MarkingMode.None;\r\n            var gridSeq_1 = Immutable.List(_stdResponseListData).keySeq();\r\n            var that_1 = this;\r\n            _stdResponseListData = sortedUnclassifiedData;\r\n            sortedUnclassifiedData.forEach(function (stdResponseData, index) {\r\n                // Getting the std worklist data row\r\n                _stdWorkListRowHeaderCellcollection = new Array();\r\n                // collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var gridColumns = that_1.getGridColumns(that_1.resolvedGridColumnsJson, standardisationSetupType, true, gridType);\r\n                var gridColumnLength = gridColumns.length;\r\n                // Getting the STD worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _stdResponseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _stdWorkListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    //Switch statement for adding frozen columns in future.\r\n                    switch (_stdResponseColumn) {\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq_1.get(index) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _stdWorkListCell.columnElement = that_1.getResponseIdColumnElement(stdResponseData, key, true);\r\n                            _stdWorkListCell.setCellStyle('col-response header-col');\r\n                            _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                            break;\r\n                    }\r\n                }\r\n                if (stdResponseData) {\r\n                    // Classify button enabling/disabling in unclassified worklist\r\n                    var responseStatuses = submitResponseHelper.\r\n                        submitButtonValidate(stdResponseData, stdResponseData.markingProgress, false, false);\r\n                    // Creating the table row collection.\r\n                    _stdWorkListRowCollection.push(that_1.getGridRow(stdResponseData.displayId.toString(), _stdWorkListRowHeaderCellcollection, undefined, undefined, responseStatuses));\r\n                }\r\n            });\r\n        }\r\n        var _stdWorkListFrozenRowBodyCollection = Immutable.fromJS(_stdWorkListRowCollection);\r\n        return _stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Generate row definition for myTeam and Help other examiners tab\r\n     * @param comparerName\r\n     * @param sortDirection\r\n     * @param tabSelection\r\n     * @param gridType\r\n     */\r\n    UnClassifiedHelper.prototype.generateStandardisationRowDefinion = function (comparerName, sortDirection, tabSelection, gridType) {\r\n        this._stdSetUpWorkListCollection = Immutable.List();\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationsetuptGridColumnsJson);\r\n        this._stdSetUpWorkListCollection = this.getRowDefinition(tabSelection, gridType, comparerName);\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Returns the row definition for unclassifed worklist\r\n     * @param tabSelection\r\n     * @param gridType\r\n     * @param comparerName\r\n     */\r\n    UnClassifiedHelper.prototype.getRowDefinition = function (tabSelection, gridType, comparerName) {\r\n        var _unClassifiedRowCollection = Array();\r\n        var index = 0;\r\n        var _unClassifiedData;\r\n        var sortedData;\r\n        var _unClassifiedResponseListData;\r\n        var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, tabSelection, false, gridType);\r\n        _unClassifiedData = standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses;\r\n        _unClassifiedResponseListData = Immutable.List(_unClassifiedData);\r\n        sortedData = Immutable.List(sortHelper.sort(_unClassifiedData, comparerList[comparerName]));\r\n        if (_unClassifiedResponseListData.count() > 0) {\r\n            _unClassifiedRowCollection = this.getRowData(sortedData, gridColumns, gridType, index, enums.StandardisationSetup.UnClassifiedResponse);\r\n        }\r\n        this._unClassifiedListCollection = Immutable.fromJS(_unClassifiedRowCollection);\r\n        return this._unClassifiedListCollection;\r\n    };\r\n    /**\r\n     * Change json object to immutable list\r\n     * @param data\r\n     */\r\n    UnClassifiedHelper.prototype.getImmutableUnclassifiedList = function (data) {\r\n        var immutableList = Immutable.List(data);\r\n        data = immutableList;\r\n        return data;\r\n    };\r\n    return UnClassifiedHelper;\r\n}(standardisationsetuphelperbase));\r\nmodule.exports = UnClassifiedHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 415:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/components/worklist/shared/markscolumn.tsx ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n    React component for marks column in marks by question view.\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:variable-name */\r\nvar MarksColumn = function (props) {\r\n    var className = (props.usedInTotal || props.textValue === '-') ?\r\n        'dim-text txt-val small-text' : 'small-text strike-out dim-text';\r\n    return (React.createElement(\"span\", { id: 'gen_' + props.id, className: className }, props.textValue));\r\n};\r\nmodule.exports = MarksColumn;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL21hcmtzY29sdW1uLnRzeD85ODgyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgICBSZWFjdCBjb21wb25lbnQgZm9yIG1hcmtzIGNvbHVtbiBpbiBtYXJrcyBieSBxdWVzdGlvbiB2aWV3LlxyXG4qL1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBtYXJrcyBjb2x1bW4uXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgdGV4dFZhbHVlPzogc3RyaW5nO1xyXG4gICAgdXNlZEluVG90YWw6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuY29uc3QgTWFya3NDb2x1bW4gPSAocHJvcHM6IFByb3BzKSA9PiB7XHJcbiAgICBsZXQgY2xhc3NOYW1lOiBzdHJpbmcgPSAocHJvcHMudXNlZEluVG90YWwgfHwgcHJvcHMudGV4dFZhbHVlID09PSAnLScpID9cclxuICAgICAgICAnZGltLXRleHQgdHh0LXZhbCBzbWFsbC10ZXh0JyA6ICdzbWFsbC10ZXh0IHN0cmlrZS1vdXQgZGltLXRleHQnO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8c3BhbiBpZD17J2dlbl8nICsgcHJvcHMuaWR9IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cclxuICAgICAgICAgICAge3Byb3BzLnRleHRWYWx1ZX1cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0ID0gTWFya3NDb2x1bW47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9tYXJrc2NvbHVtbi50c3giXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 416:
/* no static exports found */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/dataservices/authentication/logoutargument.ts ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Logout argument class.\r\n */\r\nvar LogoutArgument = /** @class */ (function () {\r\n    function LogoutArgument() {\r\n    }\r\n    return LogoutArgument;\r\n}());\r\nmodule.exports = LogoutArgument;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2RhdGFzZXJ2aWNlcy9hdXRoZW50aWNhdGlvbi9sb2dvdXRhcmd1bWVudC50cz9kMjhhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBMb2dvdXQgYXJndW1lbnQgY2xhc3MuXHJcbiAqL1xyXG5jbGFzcyBMb2dvdXRBcmd1bWVudCB7XHJcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcblxyXG4gICAgcHVibGljIE1hcmtpbmdTZXNzaW9uVHJhY2tpbmdJZDogbnVtYmVyO1xyXG4gICAgcHVibGljIGlzUmVwb3J0c1BhZ2VBY2Nlc3NlZDogYm9vbGVhbjtcclxuXHJcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcbn1cclxuXHJcbmV4cG9ydCA9IExvZ291dEFyZ3VtZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvZGF0YXNlcnZpY2VzL2F1dGhlbnRpY2F0aW9uL2xvZ291dGFyZ3VtZW50LnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7O0FBRUE7QUFDQTtBQUFBO0FBT0E7QUFBQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 418:
/* no static exports found */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/utility/breadcrumb/standardisationsetuphistoryinfo.ts ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar historyBase = __webpack_require__(/*! ./historybase */ 447);\r\nvar StandardisationSetupHistoryInfo = /** @class */ (function (_super) {\r\n    __extends(StandardisationSetupHistoryInfo, _super);\r\n    function StandardisationSetupHistoryInfo() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return StandardisationSetupHistoryInfo;\r\n}(historyBase));\r\nmodule.exports = StandardisationSetupHistoryInfo;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvYnJlYWRjcnVtYi9zdGFuZGFyZGlzYXRpb25zZXR1cGhpc3RvcnlpbmZvLnRzPzg3OGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2VudW1zJyk7XG5pbXBvcnQgaGlzdG9yeUJhc2UgPSByZXF1aXJlKCcuL2hpc3RvcnliYXNlJyk7XG5cbmNsYXNzIFN0YW5kYXJkaXNhdGlvblNldHVwSGlzdG9yeUluZm8gZXh0ZW5kcyBoaXN0b3J5QmFzZSB7XG4gICAgcHVibGljIHN0YW5kYXJkaXNhdGlvblNldHVwV29ya2xpc3RUeXBlOiBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cDtcbiAgICBwdWJsaWMgdGltZVN0YW1wOiBudW1iZXI7XG59XG5cbmV4cG9ydCA9IFN0YW5kYXJkaXNhdGlvblNldHVwSGlzdG9yeUluZm87XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy91dGlsaXR5L2JyZWFkY3J1bWIvc3RhbmRhcmRpc2F0aW9uc2V0dXBoaXN0b3J5aW5mby50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTtBQUVBO0FBQUE7QUFBQTs7QUFHQTtBQUFBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 419:
/* no static exports found */
/* all exports used */
/*!*************************************************************************!*\
  !*** ./src/utility/teammanagement/helpers/warningmessagepopuphelper.ts ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../../components/utility/enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * Helper class for warning message popup\r\n */\r\nvar WarningMessagePopupHelper = /** @class */ (function () {\r\n    function WarningMessagePopupHelper() {\r\n    }\r\n    /**\r\n     * Method to bind the warning message popup content.\r\n     */\r\n    WarningMessagePopupHelper.prototype.bindWarningMessagePopupContent = function (failureCode) {\r\n        switch (failureCode) {\r\n            case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.subordinate-withdrawn-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.SubordinateExaminerWithdrawn] + '-content');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.subordinate-withdrawn-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.SubordinateExaminerWithdrawn] + '-title');\r\n                break;\r\n            case enums.FailureCode.Withdrawn:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.withdrawn-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.Withdrawn] + '-content');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.withdrawn-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.Withdrawn] + '-title');\r\n                break;\r\n            case enums.FailureCode.HierarchyChanged:\r\n            case enums.FailureCode.NotASeniorExaminer:\r\n            case enums.FailureCode.NotTeamLead:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.hierarchy-changed-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.HierarchyChanged] + '-content');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.hierarchy-changed-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.HierarchyChanged] + '-title');\r\n                break;\r\n            case enums.FailureCode.ExaminerStatusAlreadyChanged:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.subordinate-status-already-changed-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.ExaminerStatusAlreadyChanged] + '-content');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.subordinate-status-already-changed-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.ExaminerStatusAlreadyChanged] + '-title');\r\n                break;\r\n            case enums.FailureCode.Suspended:\r\n            case enums.FailureCode.NotApproved:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.suspended-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.Suspended] + '-content');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.suspended-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.Suspended] + '-title');\r\n                break;\r\n            case enums.FailureCode.InvalidPriority:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.hierarchy-changed-dialog.body-priority-changed');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.hierarchy-changed-dialog.HierarchyChanged-title');\r\n                break;\r\n            case enums.FailureCode.AlreadyLocked:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-failure-dialog.body');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-failure-dialog.ExaminerAlreadyLocked-title');\r\n                break;\r\n            case enums.FailureCode.NotInLockStatus:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-failure-dialog.body');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-failure-dialog.ExaminerAlreadyunlocked-title');\r\n                break;\r\n            case enums.FailureCode.LockLimitMet:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-limit-reached-dialog.LockLimitReached-content');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-limit-reached-dialog.LockLimitReached-title');\r\n                break;\r\n            case enums.FailureCode.LockIsRequired:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-failure-dialog.body');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-failure-dialog.header-lock-removed');\r\n                break;\r\n        }\r\n    };\r\n    Object.defineProperty(WarningMessagePopupHelper.prototype, \"warningPopupContent\", {\r\n        /**\r\n         * Returns the warning message popup content\r\n         */\r\n        get: function () {\r\n            return this._warningPopupContent;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WarningMessagePopupHelper.prototype, \"warningPopupTitle\", {\r\n        /**\r\n         * Returns the warning message popup title\r\n         */\r\n        get: function () {\r\n            return this._warningPopupTitle;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return WarningMessagePopupHelper;\r\n}());\r\nmodule.exports = WarningMessagePopupHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 420:
/* no static exports found */
/* all exports used */
/*!***************************************************************************!*\
  !*** ./src/utility/worklistvalidators/directedremarkworklistvalidator.ts ***!
  \***************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../components/utility/ecoursework/ecourseworkhelper */ 238);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * Directed remark worklist concrete implementation of WorkListValidatorSchema\r\n */\r\nvar DirectedRemarkWorklistValidator = /** @class */ (function () {\r\n    function DirectedRemarkWorklistValidator() {\r\n    }\r\n    /**\r\n     * Logic to show marking progress/submit button/blocking exception warning\r\n     * @param response\r\n     */\r\n    DirectedRemarkWorklistValidator.prototype.submitButtonValidate = function (response) {\r\n        this.responseStatuses = Immutable.List();\r\n        this.responseStatuses.clear();\r\n        switch (worklistStore.instance.getResponseMode) {\r\n            case enums.ResponseMode.open:\r\n                this.responseStatuses = this.openResponseValidation(response);\r\n                break;\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    /**\r\n     * get supervisor remark decision visibility\r\n     * @param response\r\n     */\r\n    DirectedRemarkWorklistValidator.prototype.isSupervisorRemarkDecisionVisible = function (response) {\r\n        var markSchemeGroupId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n        var isSupervisorRemarkDecisionCCOn = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SupervisorRemarkDecision, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        return (isSupervisorRemarkDecisionCCOn\r\n            && worklistStore.instance.getRemarkRequestType === enums.RemarkRequestType.SupervisorRemark\r\n            && response.markingProgress === 100);\r\n    };\r\n    /**\r\n     * Open directed remark worklist validation for marking progress/submit button\r\n     * @param response\r\n     */\r\n    DirectedRemarkWorklistValidator.prototype.openResponseValidation = function (response) {\r\n        response.isSubmitEnabled = false;\r\n        /** if the marking has started */\r\n        if (response.markingProgress > 0) {\r\n            /** if the marking is completed */\r\n            if (response.markingProgress === 100) {\r\n                // Avoid ForceAnnotationOnEachPage CC while opening single response in multiQig\r\n                // Apply ForceAnnotationOnEachPage CC for all QIGs in the whole response when it turned on for at least one QIG\r\n                var markSchemeGroupId = (response.isWholeResponse &&\r\n                    response.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                /** taking the cc from cc helper */\r\n                var isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                var isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                /** if slao annotated cc is on and all pages are not annotated OR all pages annotated cc is on\r\n                 *  and all pages are not annotated if both CCs are on, all pages annotated cc has\r\n                 *  the higher priority.\r\n                 */\r\n                if ((!isAllPagesAnnotatedCC && isAllSLAOAnnotatedCC && response.hasAllPagesAnnotated === false)\r\n                    || (isAllPagesAnnotatedCC && response.hasAllPagesAnnotated === false)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllPagesAnnotated);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    if (response.hasBlockingExceptions) {\r\n                        this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    }\r\n                }\r\n                else if (response.hasBlockingExceptions ||\r\n                    (eCourseworkHelper.isECourseworkComponent && !response.allFilesViewed)) {\r\n                    /** if the marking is completed and blocking exceptions are there, show both. */\r\n                    /* For an ecoursework component, enable submit button only if all files are viewed in the response.\r\n                       If not all files are viewed then the response view in the worklist will be shown in amber color along with\r\n                       marking progress indicator.\r\n                    */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    if (eCourseworkHelper.isECourseworkComponent && !response.allFilesViewed) {\r\n                        this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllFilesViewed);\r\n                    }\r\n                }\r\n                else if (response.hasZoningExceptions) {\r\n                    /** if the marking is completed and zoning exceptions are there, show both. */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasZoningException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if (response.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown\r\n                    && response.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Accurate\r\n                    && response.markChangeReasonVisible && !response.markChangeReason) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markChangeReasonNotExist);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if ((response.supervisorRemarkFinalMarkSetID === 0 || response.supervisorRemarkMarkChangeReasonID === 0)\r\n                    && this.isSupervisorRemarkDecisionVisible(response)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.supervisorRemarkDecisionNotSelected);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else {\r\n                    /** if all pages annotated cc is off and if no blocking exceptions are there, show ready to submit button */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.readyToSubmit);\r\n                    response.isSubmitEnabled = true;\r\n                }\r\n            }\r\n            else if (response.hasBlockingExceptions) {\r\n                /** if the marking is in progress and blocking exceptions are there, show both. */\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n            else {\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n        }\r\n        else {\r\n            /** if marking not started show the same */\r\n            this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingNotStarted);\r\n            if (response.hasBlockingExceptions) {\r\n                /** if the marking is not started and blocking exceptions are there, show amber. */\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n            }\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    return DirectedRemarkWorklistValidator;\r\n}());\r\nmodule.exports = DirectedRemarkWorklistValidator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 421:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/utility/worklistvalidators/liveworklistvalidator.ts ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../components/utility/ecoursework/ecourseworkhelper */ 238);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar markeroperationmodefactory = __webpack_require__(/*! ../../components/utility/markeroperationmode/markeroperationmodefactory */ 232);\r\n/**\r\n * Live worklist concrete implementation of WorkListValidatorSchema\r\n */\r\nvar LiveWorklistValidator = /** @class */ (function () {\r\n    function LiveWorklistValidator() {\r\n    }\r\n    /**\r\n     * Logic to show marking progress/submit button/blocking exception warning\r\n     * @param response\r\n     */\r\n    LiveWorklistValidator.prototype.submitButtonValidate = function (response) {\r\n        this.responseStatuses = Immutable.List();\r\n        this.responseStatuses.clear();\r\n        switch (worklistStore.instance.getResponseMode) {\r\n            case enums.ResponseMode.open:\r\n                this.responseStatuses = this.openResponseValidation(response);\r\n                break;\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    /**\r\n     * Open live worklist validation for marking progress/submit button\r\n     * @param response\r\n     */\r\n    LiveWorklistValidator.prototype.openResponseValidation = function (response) {\r\n        response.isSubmitEnabled = false;\r\n        /** if the marking has started */\r\n        if (response.markingProgress > 0) {\r\n            /** if the marking is completed */\r\n            if (response.markingProgress === 100) {\r\n                // Avoid ForceAnnotationOnEachPage CC while opening single response in multiQig\r\n                // Apply ForceAnnotationOnEachPage CC for all QIGs in the whole response when it turned on for at least one QIG\r\n                var markSchemeGroupId = (response.isWholeResponse &&\r\n                    response.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                /** taking the cc from cc helper */\r\n                var isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                var isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                /** if slao annotated cc is on and all pages are not annotated OR all pages annotated cc is on\r\n                 *  and all pages are not annotated if both CCs are on, all pages annotated cc has\r\n                 *  the higher priority.\r\n                 */\r\n                if ((!isAllPagesAnnotatedCC && isAllSLAOAnnotatedCC && response.hasAllPagesAnnotated === false\r\n                    && response.hasAdditionalObjects)\r\n                    || (isAllPagesAnnotatedCC && response.hasAllPagesAnnotated === false)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllPagesAnnotated);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    if (response.hasBlockingExceptions) {\r\n                        this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    }\r\n                }\r\n                else if (response.hasBlockingExceptions ||\r\n                    (eCourseworkHelper.isECourseworkComponent && !response.allFilesViewed)) {\r\n                    /** if the marking is completed and blocking exceptions are there, show both. */\r\n                    /* For an ecoursework component, enable submit button only if all files are viewed in the response.\r\n                       If not all files are viewed then the response view in the worklist will be shown in amber color along with\r\n                       marking progress indicator .\r\n                    */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    if (eCourseworkHelper.isECourseworkComponent && !response.allFilesViewed) {\r\n                        this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllFilesViewed);\r\n                    }\r\n                }\r\n                if (response.hasZoningExceptions) {\r\n                    /** if the marking is completed and zoning exceptions are there, show both. */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasZoningException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if (response.isWholeResponse && !markeroperationmodefactory.operationMode.isSubmitDisabled(enums.WorklistType.live)\r\n                    && ((!qigStore.instance.isWholeResponseAvailable &&\r\n                        worklistStore.instance.currentWorklistType === enums.WorklistType.live)\r\n                        || (!qigStore.instance.isAtypicalAvailable &&\r\n                            worklistStore.instance.currentWorklistType === enums.WorklistType.atypical))) {\r\n                    //// if permission is changed for whole response in any of the qigs then submit is hidden\r\n                    ////  markeroperationmodefactory.operationMode.isSubmitDisabled - current qig submit disable logic\r\n                    ////  isAtypicalAvailable - for checking if atypical submit available\r\n                    ////  isWholeResponseAvailable - for checking if whole response submit available\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.wholeResponseNotAvailable);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if (this.responseStatuses.count() === 0) {\r\n                    /** if all pages annotated cc is off and if no blocking exceptions are there, show ready to submit button */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.readyToSubmit);\r\n                    response.isSubmitEnabled = true;\r\n                }\r\n            }\r\n            else if (response.hasBlockingExceptions) {\r\n                /** if the marking is in progress and blocking exceptions are there, show both. */\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n            else {\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n        }\r\n        else {\r\n            /** if marking not started show the same */\r\n            this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingNotStarted);\r\n            if (response.hasBlockingExceptions) {\r\n                /** if the marking is not started and blocking exceptions are there, show amber. */\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n            }\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    return LiveWorklistValidator;\r\n}());\r\nmodule.exports = LiveWorklistValidator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 422:
/* no static exports found */
/* all exports used */
/*!*********************************************************************!*\
  !*** ./src/utility/worklistvalidators/practiceworklistvalidator.ts ***!
  \*********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../components/utility/ecoursework/ecourseworkhelper */ 238);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * Practice worklist concrete implementation of WorkListValidatorSchema\r\n */\r\nvar PracticeWorklistValidator = /** @class */ (function () {\r\n    function PracticeWorklistValidator() {\r\n    }\r\n    /**\r\n     * Logic to show marking progress/submit button/blocking exception warning\r\n     * @param response\r\n     */\r\n    PracticeWorklistValidator.prototype.submitButtonValidate = function (response) {\r\n        this.responseStatuses = Immutable.List();\r\n        this.responseStatuses.clear();\r\n        switch (worklistStore.instance.getResponseMode) {\r\n            case enums.ResponseMode.open:\r\n                this.responseStatuses = this.openResponseValidation(response);\r\n                break;\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    /**\r\n     * Open Practice worklist validation for marking progress/submit button\r\n     * @param response\r\n     */\r\n    PracticeWorklistValidator.prototype.openResponseValidation = function (response) {\r\n        response.isSubmitEnabled = false;\r\n        /** if the marking has started */\r\n        if (response.markingProgress > 0) {\r\n            /** if the marking is completed */\r\n            if (response.markingProgress === 100) {\r\n                // Avoid ForceAnnotationOnEachPage CC while opening single response in multiQig\r\n                // Apply ForceAnnotationOnEachPage CC for all QIGs in the whole response when it turned on for at least one QIG\r\n                var markSchemeGroupId = qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                /** taking the cc from cc helper */\r\n                var isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                var isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                /** if slao annotated cc is on and all pages are not annotated OR all pages annotated cc is on\r\n                 *  and all pages are not annotated if both CCs are on, all pages annotated cc has\r\n                 *  the higher priority.\r\n                 */\r\n                if ((!isAllPagesAnnotatedCC && isAllSLAOAnnotatedCC && response.hasAllPagesAnnotated === false)\r\n                    || (isAllPagesAnnotatedCC && response.hasAllPagesAnnotated === false)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllPagesAnnotated);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if (eCourseworkHelper.isECourseworkComponent && !response.allFilesViewed) {\r\n                    /* For an ecoursework component, enable submit button only if all files are viewed in the response.\r\n                       If not all files are viewed then the response view in the worklist will be shown in amber color along with\r\n                       marking progress indicator.\r\n                    */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllFilesViewed);\r\n                }\r\n                else {\r\n                    /** if all pages annotated cc is off show ready to submit button */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.readyToSubmit);\r\n                    response.isSubmitEnabled = true;\r\n                }\r\n            }\r\n            else {\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n        }\r\n        else {\r\n            /** if marking not started show the same */\r\n            this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingNotStarted);\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    return PracticeWorklistValidator;\r\n}());\r\nmodule.exports = PracticeWorklistValidator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvd29ya2xpc3R2YWxpZGF0b3JzL3ByYWN0aWNld29ya2xpc3R2YWxpZGF0b3IudHM/MjE3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IHdvcmtMaXN0VmFsaWRhdG9yU2NoZW1hID0gcmVxdWlyZSgnLi93b3JrbGlzdHZhbGlkYXRvcnNjaGVtYScpO1xyXG5pbXBvcnQgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XHJcbmltcG9ydCB3b3JrbGlzdFN0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL3dvcmtsaXN0L3dvcmtsaXN0c3RvcmUnKTtcclxuaW1wb3J0IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc0hlbHBlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWMvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWNzaGVscGVyJyk7XHJcbmltcG9ydCBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NOYW1lcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWMvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWNzbmFtZXMnKTtcclxuaW1wb3J0IGVDb3Vyc2V3b3JrSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2Vjb3Vyc2V3b3JrL2Vjb3Vyc2V3b3JraGVscGVyJyk7XHJcbmltcG9ydCBxaWdTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy9xaWdzZWxlY3Rvci9xaWdzdG9yZScpO1xyXG4vKipcclxuICogUHJhY3RpY2Ugd29ya2xpc3QgY29uY3JldGUgaW1wbGVtZW50YXRpb24gb2YgV29ya0xpc3RWYWxpZGF0b3JTY2hlbWFcclxuICovXHJcbmNsYXNzIFByYWN0aWNlV29ya2xpc3RWYWxpZGF0b3IgaW1wbGVtZW50cyB3b3JrTGlzdFZhbGlkYXRvclNjaGVtYSB7XHJcbiAgICBwcml2YXRlIHJlc3BvbnNlU3RhdHVzZXM6IEltbXV0YWJsZS5MaXN0PGVudW1zLlJlc3BvbnNlU3RhdHVzPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExvZ2ljIHRvIHNob3cgbWFya2luZyBwcm9ncmVzcy9zdWJtaXQgYnV0dG9uL2Jsb2NraW5nIGV4Y2VwdGlvbiB3YXJuaW5nXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN1Ym1pdEJ1dHRvblZhbGlkYXRlKHJlc3BvbnNlOiBSZXNwb25zZUJhc2UpIHtcclxuXHJcbiAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gSW1tdXRhYmxlLkxpc3Q8ZW51bXMuUmVzcG9uc2VTdGF0dXM+KCk7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzLmNsZWFyKCk7XHJcbiAgICAgICAgc3dpdGNoICh3b3JrbGlzdFN0b3JlLmluc3RhbmNlLmdldFJlc3BvbnNlTW9kZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLlJlc3BvbnNlTW9kZS5vcGVuOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gdGhpcy5vcGVuUmVzcG9uc2VWYWxpZGF0aW9uKHJlc3BvbnNlIGFzIFByYWN0aWNlT3BlblJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25zZVN0YXR1c2VzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3BlbiBQcmFjdGljZSB3b3JrbGlzdCB2YWxpZGF0aW9uIGZvciBtYXJraW5nIHByb2dyZXNzL3N1Ym1pdCBidXR0b25cclxuICAgICAqIEBwYXJhbSByZXNwb25zZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9wZW5SZXNwb25zZVZhbGlkYXRpb24ocmVzcG9uc2U6IFByYWN0aWNlT3BlblJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmVzcG9uc2UuaXNTdWJtaXRFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgLyoqIGlmIHRoZSBtYXJraW5nIGhhcyBzdGFydGVkICovXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLm1hcmtpbmdQcm9ncmVzcyA+IDApIHtcclxuICAgICAgICAgICAgLyoqIGlmIHRoZSBtYXJraW5nIGlzIGNvbXBsZXRlZCAqL1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UubWFya2luZ1Byb2dyZXNzID09PSAxMDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBGb3JjZUFubm90YXRpb25PbkVhY2hQYWdlIENDIHdoaWxlIG9wZW5pbmcgc2luZ2xlIHJlc3BvbnNlIGluIG11bHRpUWlnXHJcbiAgICAgICAgICAgICAgICAvLyBBcHBseSBGb3JjZUFubm90YXRpb25PbkVhY2hQYWdlIENDIGZvciBhbGwgUUlHcyBpbiB0aGUgd2hvbGUgcmVzcG9uc2Ugd2hlbiBpdCB0dXJuZWQgb24gZm9yIGF0IGxlYXN0IG9uZSBRSUdcclxuICAgICAgICAgICAgICAgIGxldCBtYXJrU2NoZW1lR3JvdXBJZDogbnVtYmVyID1cclxuICAgICAgICAgICAgICAgICAgICBxaWdTdG9yZS5pbnN0YW5jZS5nZXRTZWxlY3RlZFFJR0ZvclRoZUxvZ2dlZEluVXNlci5tYXJrU2NoZW1lR3JvdXBJZDtcclxuXHJcbiAgICAgICAgICAgICAgICAvKiogdGFraW5nIHRoZSBjYyBmcm9tIGNjIGhlbHBlciAqL1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzQWxsUGFnZXNBbm5vdGF0ZWRDQyA9IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc0hlbHBlci5nZXRDaGFyYWN0ZXJpc3RpY1ZhbHVlKFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzLkZvcmNlQW5ub3RhdGlvbk9uRWFjaFBhZ2UsIG1hcmtTY2hlbWVHcm91cElkKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNBbGxTTEFPQW5ub3RhdGVkQ0MgPSBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NIZWxwZXIuZ2V0Q2hhcmFjdGVyaXN0aWNWYWx1ZShcclxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NOYW1lcy5TTEFPRm9yY2VkQW5ub3RhdGlvbnMsIG1hcmtTY2hlbWVHcm91cElkKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAvKiogaWYgc2xhbyBhbm5vdGF0ZWQgY2MgaXMgb24gYW5kIGFsbCBwYWdlcyBhcmUgbm90IGFubm90YXRlZCBPUiBhbGwgcGFnZXMgYW5ub3RhdGVkIGNjIGlzIG9uXHJcbiAgICAgICAgICAgICAgICAgKiAgYW5kIGFsbCBwYWdlcyBhcmUgbm90IGFubm90YXRlZCBpZiBib3RoIENDcyBhcmUgb24sIGFsbCBwYWdlcyBhbm5vdGF0ZWQgY2MgaGFzXHJcbiAgICAgICAgICAgICAgICAgKiAgdGhlIGhpZ2hlciBwcmlvcml0eS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKCghaXNBbGxQYWdlc0Fubm90YXRlZENDICYmIGlzQWxsU0xBT0Fubm90YXRlZENDICYmIHJlc3BvbnNlLmhhc0FsbFBhZ2VzQW5ub3RhdGVkID09PSBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICB8fCAoaXNBbGxQYWdlc0Fubm90YXRlZENDICYmIHJlc3BvbnNlLmhhc0FsbFBhZ2VzQW5ub3RhdGVkID09PSBmYWxzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLnJlc3BvbnNlU3RhdHVzZXMucHVzaChlbnVtcy5SZXNwb25zZVN0YXR1cy5ub3RBbGxQYWdlc0Fubm90YXRlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gdGhpcy5yZXNwb25zZVN0YXR1c2VzLnB1c2goZW51bXMuUmVzcG9uc2VTdGF0dXMubWFya2luZ0luUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlQ291cnNld29ya0hlbHBlci5pc0VDb3Vyc2V3b3JrQ29tcG9uZW50ICYmICFyZXNwb25zZS5hbGxGaWxlc1ZpZXdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qIEZvciBhbiBlY291cnNld29yayBjb21wb25lbnQsIGVuYWJsZSBzdWJtaXQgYnV0dG9uIG9ubHkgaWYgYWxsIGZpbGVzIGFyZSB2aWV3ZWQgaW4gdGhlIHJlc3BvbnNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgIElmIG5vdCBhbGwgZmlsZXMgYXJlIHZpZXdlZCB0aGVuIHRoZSByZXNwb25zZSB2aWV3IGluIHRoZSB3b3JrbGlzdCB3aWxsIGJlIHNob3duIGluIGFtYmVyIGNvbG9yIGFsb25nIHdpdGhcclxuICAgICAgICAgICAgICAgICAgICAgICBtYXJraW5nIHByb2dyZXNzIGluZGljYXRvci5cclxuICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLmhhc0V4Y2VwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gdGhpcy5yZXNwb25zZVN0YXR1c2VzLnB1c2goZW51bXMuUmVzcG9uc2VTdGF0dXMubWFya2luZ0luUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLm5vdEFsbEZpbGVzVmlld2VkKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyoqIGlmIGFsbCBwYWdlcyBhbm5vdGF0ZWQgY2MgaXMgb2ZmIHNob3cgcmVhZHkgdG8gc3VibWl0IGJ1dHRvbiAqL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLnJlYWR5VG9TdWJtaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmlzU3VibWl0RW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLnJlc3BvbnNlU3RhdHVzZXMucHVzaChlbnVtcy5SZXNwb25zZVN0YXR1cy5tYXJraW5nSW5Qcm9ncmVzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKiogaWYgbWFya2luZyBub3Qgc3RhcnRlZCBzaG93IHRoZSBzYW1lICovXHJcbiAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLm1hcmtpbmdOb3RTdGFydGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlU3RhdHVzZXM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0ID0gUHJhY3RpY2VXb3JrbGlzdFZhbGlkYXRvcjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy91dGlsaXR5L3dvcmtsaXN0dmFsaWRhdG9ycy9wcmFjdGljZXdvcmtsaXN0dmFsaWRhdG9yLnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQUE7QUF1RUE7QUFwRUE7OztBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 423:
/* no static exports found */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/utility/worklistvalidators/simulationworklistvalidator.ts ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\n/**\r\n * Simulation worklist concrete implementation of WorkListValidatorSchema\r\n */\r\nvar SimualtionWorklistValidator = /** @class */ (function () {\r\n    function SimualtionWorklistValidator() {\r\n    }\r\n    /**\r\n     * Logic to show marking progress/submit button/blocking exception warning\r\n     * @param response\r\n     */\r\n    SimualtionWorklistValidator.prototype.submitButtonValidate = function (response) {\r\n        this.responseStatuses = Immutable.List();\r\n        this.responseStatuses.clear();\r\n        switch (worklistStore.instance.getResponseMode) {\r\n            case enums.ResponseMode.open:\r\n                this.responseStatuses = this.openResponseValidation(response);\r\n                break;\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    /**\r\n     * Open simulation worklist validation for marking progress/submit button\r\n     * @param response\r\n     */\r\n    SimualtionWorklistValidator.prototype.openResponseValidation = function (response) {\r\n        response.isSubmitEnabled = false;\r\n        /** if the marking has started */\r\n        if (response.markingProgress > 0) {\r\n            /** if the marking is completed */\r\n            if (response.markingProgress === 100) {\r\n                // Avoid ForceAnnotationOnEachPage CC while opening single response in multiQig\r\n                // Apply ForceAnnotationOnEachPage CC for all QIGs in the whole response when it turned on for at least one QIG\r\n                var markSchemeGroupId = qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                /** taking the cc from cc helper */\r\n                var isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, markSchemeGroupId).toLowerCase() === 'true';\r\n                var isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, markSchemeGroupId).toLowerCase() === 'true';\r\n                /** if slao annotated cc is on and all pages are not annotated OR all pages annotated cc is on\r\n                 *  and all pages are not annotated if both CCs are on, all pages annotated cc has\r\n                 *  the higher priority.\r\n                 */\r\n                if ((!isAllPagesAnnotatedCC && isAllSLAOAnnotatedCC && response.hasAllPagesAnnotated === false)\r\n                    || (isAllPagesAnnotatedCC && response.hasAllPagesAnnotated === false)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllPagesAnnotated);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else {\r\n                    /** if all pages annotated cc is off and if no blocking exceptions are there, show ready to submit button */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.readyToSubmit);\r\n                    response.isSubmitEnabled = true;\r\n                }\r\n            }\r\n            else {\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n        }\r\n        else {\r\n            /** if marking not started show the same */\r\n            this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingNotStarted);\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    return SimualtionWorklistValidator;\r\n}());\r\nmodule.exports = SimualtionWorklistValidator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvd29ya2xpc3R2YWxpZGF0b3JzL3NpbXVsYXRpb253b3JrbGlzdHZhbGlkYXRvci50cz9lYWM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvdXRpbGl0eS9lbnVtcycpO1xyXG5pbXBvcnQgd29ya0xpc3RWYWxpZGF0b3JTY2hlbWEgPSByZXF1aXJlKCcuL3dvcmtsaXN0dmFsaWRhdG9yc2NoZW1hJyk7XHJcbmltcG9ydCBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcclxuaW1wb3J0IHdvcmtsaXN0U3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvd29ya2xpc3Qvd29ya2xpc3RzdG9yZScpO1xyXG5pbXBvcnQgcWlnU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvcWlnc2VsZWN0b3IvcWlnc3RvcmUnKTtcclxuaW1wb3J0IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc0hlbHBlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWMvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWNzaGVscGVyJyk7XHJcbmltcG9ydCBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NOYW1lcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWMvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWNzbmFtZXMnKTtcclxuLyoqXHJcbiAqIFNpbXVsYXRpb24gd29ya2xpc3QgY29uY3JldGUgaW1wbGVtZW50YXRpb24gb2YgV29ya0xpc3RWYWxpZGF0b3JTY2hlbWFcclxuICovXHJcbmNsYXNzIFNpbXVhbHRpb25Xb3JrbGlzdFZhbGlkYXRvciBpbXBsZW1lbnRzIHdvcmtMaXN0VmFsaWRhdG9yU2NoZW1hIHtcclxuICAgIHByaXZhdGUgcmVzcG9uc2VTdGF0dXNlczogSW1tdXRhYmxlLkxpc3Q8ZW51bXMuUmVzcG9uc2VTdGF0dXM+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9naWMgdG8gc2hvdyBtYXJraW5nIHByb2dyZXNzL3N1Ym1pdCBidXR0b24vYmxvY2tpbmcgZXhjZXB0aW9uIHdhcm5pbmdcclxuICAgICAqIEBwYXJhbSByZXNwb25zZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3VibWl0QnV0dG9uVmFsaWRhdGUocmVzcG9uc2U6IFJlc3BvbnNlQmFzZSkge1xyXG5cclxuICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSBJbW11dGFibGUuTGlzdDxlbnVtcy5SZXNwb25zZVN0YXR1cz4oKTtcclxuICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMuY2xlYXIoKTtcclxuICAgICAgICBzd2l0Y2ggKHdvcmtsaXN0U3RvcmUuaW5zdGFuY2UuZ2V0UmVzcG9uc2VNb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuUmVzcG9uc2VNb2RlLm9wZW46XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLm9wZW5SZXNwb25zZVZhbGlkYXRpb24ocmVzcG9uc2UgYXMgU2ltdWxhdGlvbk9wZW5SZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2VTdGF0dXNlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wZW4gc2ltdWxhdGlvbiB3b3JrbGlzdCB2YWxpZGF0aW9uIGZvciBtYXJraW5nIHByb2dyZXNzL3N1Ym1pdCBidXR0b25cclxuICAgICAqIEBwYXJhbSByZXNwb25zZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9wZW5SZXNwb25zZVZhbGlkYXRpb24ocmVzcG9uc2U6IFNpbXVsYXRpb25PcGVuUmVzcG9uc2UpIHtcclxuICAgICAgICByZXNwb25zZS5pc1N1Ym1pdEVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAvKiogaWYgdGhlIG1hcmtpbmcgaGFzIHN0YXJ0ZWQgKi9cclxuICAgICAgICBpZiAocmVzcG9uc2UubWFya2luZ1Byb2dyZXNzID4gMCkge1xyXG4gICAgICAgICAgICAvKiogaWYgdGhlIG1hcmtpbmcgaXMgY29tcGxldGVkICovXHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5tYXJraW5nUHJvZ3Jlc3MgPT09IDEwMCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEF2b2lkIEZvcmNlQW5ub3RhdGlvbk9uRWFjaFBhZ2UgQ0Mgd2hpbGUgb3BlbmluZyBzaW5nbGUgcmVzcG9uc2UgaW4gbXVsdGlRaWdcclxuICAgICAgICAgICAgICAgIC8vIEFwcGx5IEZvcmNlQW5ub3RhdGlvbk9uRWFjaFBhZ2UgQ0MgZm9yIGFsbCBRSUdzIGluIHRoZSB3aG9sZSByZXNwb25zZSB3aGVuIGl0IHR1cm5lZCBvbiBmb3IgYXQgbGVhc3Qgb25lIFFJR1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hcmtTY2hlbWVHcm91cElkOiBudW1iZXIgPVxyXG4gICAgICAgICAgICAgICAgICAgIHFpZ1N0b3JlLmluc3RhbmNlLmdldFNlbGVjdGVkUUlHRm9yVGhlTG9nZ2VkSW5Vc2VyLm1hcmtTY2hlbWVHcm91cElkO1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKiB0YWtpbmcgdGhlIGNjIGZyb20gY2MgaGVscGVyICovXHJcbiAgICAgICAgICAgICAgICBsZXQgaXNBbGxQYWdlc0Fubm90YXRlZENDID0gY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzSGVscGVyLmdldENoYXJhY3RlcmlzdGljVmFsdWUoXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzTmFtZXMuRm9yY2VBbm5vdGF0aW9uT25FYWNoUGFnZSwgbWFya1NjaGVtZUdyb3VwSWQpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcclxuICAgICAgICAgICAgICAgIGxldCBpc0FsbFNMQU9Bbm5vdGF0ZWRDQyA9IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc0hlbHBlci5nZXRDaGFyYWN0ZXJpc3RpY1ZhbHVlKFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzLlNMQU9Gb3JjZWRBbm5vdGF0aW9ucywgbWFya1NjaGVtZUdyb3VwSWQpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcclxuICAgICAgICAgICAgICAgIC8qKiBpZiBzbGFvIGFubm90YXRlZCBjYyBpcyBvbiBhbmQgYWxsIHBhZ2VzIGFyZSBub3QgYW5ub3RhdGVkIE9SIGFsbCBwYWdlcyBhbm5vdGF0ZWQgY2MgaXMgb25cclxuICAgICAgICAgICAgICAgICAqICBhbmQgYWxsIHBhZ2VzIGFyZSBub3QgYW5ub3RhdGVkIGlmIGJvdGggQ0NzIGFyZSBvbiwgYWxsIHBhZ2VzIGFubm90YXRlZCBjYyBoYXNcclxuICAgICAgICAgICAgICAgICAqICB0aGUgaGlnaGVyIHByaW9yaXR5LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBpZiAoKCFpc0FsbFBhZ2VzQW5ub3RhdGVkQ0MgJiYgaXNBbGxTTEFPQW5ub3RhdGVkQ0MgJiYgcmVzcG9uc2UuaGFzQWxsUGFnZXNBbm5vdGF0ZWQgPT09IGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHx8IChpc0FsbFBhZ2VzQW5ub3RhdGVkQ0MgJiYgcmVzcG9uc2UuaGFzQWxsUGFnZXNBbm5vdGF0ZWQgPT09IGZhbHNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLm5vdEFsbFBhZ2VzQW5ub3RhdGVkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLnJlc3BvbnNlU3RhdHVzZXMucHVzaChlbnVtcy5SZXNwb25zZVN0YXR1cy5tYXJraW5nSW5Qcm9ncmVzcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qKiBpZiBhbGwgcGFnZXMgYW5ub3RhdGVkIGNjIGlzIG9mZiBhbmQgaWYgbm8gYmxvY2tpbmcgZXhjZXB0aW9ucyBhcmUgdGhlcmUsIHNob3cgcmVhZHkgdG8gc3VibWl0IGJ1dHRvbiAqL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLnJlYWR5VG9TdWJtaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmlzU3VibWl0RW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLnJlc3BvbnNlU3RhdHVzZXMucHVzaChlbnVtcy5SZXNwb25zZVN0YXR1cy5tYXJraW5nSW5Qcm9ncmVzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKiogaWYgbWFya2luZyBub3Qgc3RhcnRlZCBzaG93IHRoZSBzYW1lICovXHJcbiAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLm1hcmtpbmdOb3RTdGFydGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlU3RhdHVzZXM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0ID0gU2ltdWFsdGlvbldvcmtsaXN0VmFsaWRhdG9yO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL3V0aWxpdHkvd29ya2xpc3R2YWxpZGF0b3JzL3NpbXVsYXRpb253b3JrbGlzdHZhbGlkYXRvci50cyJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFBQTtBQStEQTtBQTVEQTs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 424:
/* no static exports found */
/* all exports used */
/*!****************************************************************************!*\
  !*** ./src/utility/worklistvalidators/standardisationworklistvalidator.ts ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../components/utility/ecoursework/ecourseworkhelper */ 238);\r\n/**\r\n * Standardisation worklist concrete implementation of WorkListValidatorSchema\r\n */\r\nvar StandardisationWorklistValidator = /** @class */ (function () {\r\n    function StandardisationWorklistValidator() {\r\n    }\r\n    /**\r\n     * Logic to show marking progress/submit button/blocking exception warning\r\n     * @param response\r\n     */\r\n    StandardisationWorklistValidator.prototype.submitButtonValidate = function (response) {\r\n        this.responseStatuses = Immutable.List();\r\n        this.responseStatuses.clear();\r\n        switch (worklistStore.instance.getResponseMode) {\r\n            case enums.ResponseMode.open:\r\n                this.responseStatuses = this.openResponseValidation(response);\r\n                break;\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    /**\r\n     * Open Standardisation worklist validation for marking progress/submit button\r\n     * @param response\r\n     */\r\n    StandardisationWorklistValidator.prototype.openResponseValidation = function (response) {\r\n        response.isSubmitEnabled = false;\r\n        /** if the marking has started */\r\n        if (response.markingProgress > 0) {\r\n            /** if the marking is completed */\r\n            if (response.markingProgress === 100) {\r\n                // Avoid ForceAnnotationOnEachPage CC while opening single response in multiQig\r\n                // Apply ForceAnnotationOnEachPage CC for all QIGs in the whole response when it turned on for at least one QIG\r\n                var markSchemeGroupId = qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                /** taking the cc from cc helper */\r\n                var isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                var isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                /** if slao annotated cc is on and all pages are not annotated OR all pages annotated cc is on\r\n                 *  and all pages are not annotated if both CCs are on, all pages annotated cc has\r\n                 *  the higher priority.\r\n                 */\r\n                if ((!isAllPagesAnnotatedCC && isAllSLAOAnnotatedCC && response.hasAllPagesAnnotated === false)\r\n                    || (isAllPagesAnnotatedCC && response.hasAllPagesAnnotated === false)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllPagesAnnotated);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if (eCourseworkHelper.isECourseworkComponent && !response.allFilesViewed) {\r\n                    /* For an ecoursework component, enable submit button only if all files are viewed in the response.\r\n                       If not all files are viewed then the response view in the worklist will be shown in amber color along with\r\n                       marking progress indicator.\r\n                    */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllFilesViewed);\r\n                }\r\n                else {\r\n                    /** if all pages annotated cc is off show ready to submit button */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.readyToSubmit);\r\n                    response.isSubmitEnabled = true;\r\n                }\r\n            }\r\n            else {\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n        }\r\n        else {\r\n            /** if marking not started show the same */\r\n            this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingNotStarted);\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    return StandardisationWorklistValidator;\r\n}());\r\nmodule.exports = StandardisationWorklistValidator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvd29ya2xpc3R2YWxpZGF0b3JzL3N0YW5kYXJkaXNhdGlvbndvcmtsaXN0dmFsaWRhdG9yLnRzPzNiZjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCB3b3JrTGlzdFZhbGlkYXRvclNjaGVtYSA9IHJlcXVpcmUoJy4vd29ya2xpc3R2YWxpZGF0b3JzY2hlbWEnKTtcclxuaW1wb3J0IEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xyXG5pbXBvcnQgd29ya2xpc3RTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy93b3JrbGlzdC93b3JrbGlzdHN0b3JlJyk7XHJcbmltcG9ydCBxaWdTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy9xaWdzZWxlY3Rvci9xaWdzdG9yZScpO1xyXG5pbXBvcnQgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpYy9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpY3NoZWxwZXInKTtcclxuaW1wb3J0IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpYy9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpY3NuYW1lcycpO1xyXG5pbXBvcnQgZUNvdXJzZXdvcmtIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZWNvdXJzZXdvcmsvZWNvdXJzZXdvcmtoZWxwZXInKTtcclxuLyoqXHJcbiAqIFN0YW5kYXJkaXNhdGlvbiB3b3JrbGlzdCBjb25jcmV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBXb3JrTGlzdFZhbGlkYXRvclNjaGVtYVxyXG4gKi9cclxuY2xhc3MgU3RhbmRhcmRpc2F0aW9uV29ya2xpc3RWYWxpZGF0b3IgaW1wbGVtZW50cyB3b3JrTGlzdFZhbGlkYXRvclNjaGVtYSB7XHJcbiAgICBwcml2YXRlIHJlc3BvbnNlU3RhdHVzZXM6IEltbXV0YWJsZS5MaXN0PGVudW1zLlJlc3BvbnNlU3RhdHVzPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExvZ2ljIHRvIHNob3cgbWFya2luZyBwcm9ncmVzcy9zdWJtaXQgYnV0dG9uL2Jsb2NraW5nIGV4Y2VwdGlvbiB3YXJuaW5nXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN1Ym1pdEJ1dHRvblZhbGlkYXRlKHJlc3BvbnNlOiBSZXNwb25zZUJhc2UpIHtcclxuXHJcbiAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gSW1tdXRhYmxlLkxpc3Q8ZW51bXMuUmVzcG9uc2VTdGF0dXM+KCk7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzLmNsZWFyKCk7XHJcbiAgICAgICAgc3dpdGNoICh3b3JrbGlzdFN0b3JlLmluc3RhbmNlLmdldFJlc3BvbnNlTW9kZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLlJlc3BvbnNlTW9kZS5vcGVuOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gdGhpcy5vcGVuUmVzcG9uc2VWYWxpZGF0aW9uKHJlc3BvbnNlIGFzIFN0YW5kYXJkaXNhdGlvbk9wZW5SZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2VTdGF0dXNlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wZW4gU3RhbmRhcmRpc2F0aW9uIHdvcmtsaXN0IHZhbGlkYXRpb24gZm9yIG1hcmtpbmcgcHJvZ3Jlc3Mvc3VibWl0IGJ1dHRvblxyXG4gICAgICogQHBhcmFtIHJlc3BvbnNlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb3BlblJlc3BvbnNlVmFsaWRhdGlvbihyZXNwb25zZTogU3RhbmRhcmRpc2F0aW9uT3BlblJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmVzcG9uc2UuaXNTdWJtaXRFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgLyoqIGlmIHRoZSBtYXJraW5nIGhhcyBzdGFydGVkICovXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLm1hcmtpbmdQcm9ncmVzcyA+IDApIHtcclxuICAgICAgICAgICAgLyoqIGlmIHRoZSBtYXJraW5nIGlzIGNvbXBsZXRlZCAqL1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UubWFya2luZ1Byb2dyZXNzID09PSAxMDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBGb3JjZUFubm90YXRpb25PbkVhY2hQYWdlIENDIHdoaWxlIG9wZW5pbmcgc2luZ2xlIHJlc3BvbnNlIGluIG11bHRpUWlnXHJcbiAgICAgICAgICAgICAgICAvLyBBcHBseSBGb3JjZUFubm90YXRpb25PbkVhY2hQYWdlIENDIGZvciBhbGwgUUlHcyBpbiB0aGUgd2hvbGUgcmVzcG9uc2Ugd2hlbiBpdCB0dXJuZWQgb24gZm9yIGF0IGxlYXN0IG9uZSBRSUdcclxuICAgICAgICAgICAgICAgIGxldCBtYXJrU2NoZW1lR3JvdXBJZDogbnVtYmVyID1cclxuICAgICAgICAgICAgICAgICAgICBxaWdTdG9yZS5pbnN0YW5jZS5nZXRTZWxlY3RlZFFJR0ZvclRoZUxvZ2dlZEluVXNlci5tYXJrU2NoZW1lR3JvdXBJZDtcclxuXHJcbiAgICAgICAgICAgICAgICAvKiogdGFraW5nIHRoZSBjYyBmcm9tIGNjIGhlbHBlciAqL1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzQWxsUGFnZXNBbm5vdGF0ZWRDQyA9IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc0hlbHBlci5nZXRDaGFyYWN0ZXJpc3RpY1ZhbHVlKFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzLkZvcmNlQW5ub3RhdGlvbk9uRWFjaFBhZ2UsIG1hcmtTY2hlbWVHcm91cElkKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNBbGxTTEFPQW5ub3RhdGVkQ0MgPSBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NIZWxwZXIuZ2V0Q2hhcmFjdGVyaXN0aWNWYWx1ZShcclxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NOYW1lcy5TTEFPRm9yY2VkQW5ub3RhdGlvbnMsIG1hcmtTY2hlbWVHcm91cElkKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAvKiogaWYgc2xhbyBhbm5vdGF0ZWQgY2MgaXMgb24gYW5kIGFsbCBwYWdlcyBhcmUgbm90IGFubm90YXRlZCBPUiBhbGwgcGFnZXMgYW5ub3RhdGVkIGNjIGlzIG9uXHJcbiAgICAgICAgICAgICAgICAgKiAgYW5kIGFsbCBwYWdlcyBhcmUgbm90IGFubm90YXRlZCBpZiBib3RoIENDcyBhcmUgb24sIGFsbCBwYWdlcyBhbm5vdGF0ZWQgY2MgaGFzXHJcbiAgICAgICAgICAgICAgICAgKiAgdGhlIGhpZ2hlciBwcmlvcml0eS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKCghaXNBbGxQYWdlc0Fubm90YXRlZENDICYmIGlzQWxsU0xBT0Fubm90YXRlZENDICYmIHJlc3BvbnNlLmhhc0FsbFBhZ2VzQW5ub3RhdGVkID09PSBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICB8fCAoaXNBbGxQYWdlc0Fubm90YXRlZENDICYmIHJlc3BvbnNlLmhhc0FsbFBhZ2VzQW5ub3RhdGVkID09PSBmYWxzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLnJlc3BvbnNlU3RhdHVzZXMucHVzaChlbnVtcy5SZXNwb25zZVN0YXR1cy5ub3RBbGxQYWdlc0Fubm90YXRlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gdGhpcy5yZXNwb25zZVN0YXR1c2VzLnB1c2goZW51bXMuUmVzcG9uc2VTdGF0dXMubWFya2luZ0luUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlQ291cnNld29ya0hlbHBlci5pc0VDb3Vyc2V3b3JrQ29tcG9uZW50ICYmICFyZXNwb25zZS5hbGxGaWxlc1ZpZXdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qIEZvciBhbiBlY291cnNld29yayBjb21wb25lbnQsIGVuYWJsZSBzdWJtaXQgYnV0dG9uIG9ubHkgaWYgYWxsIGZpbGVzIGFyZSB2aWV3ZWQgaW4gdGhlIHJlc3BvbnNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgIElmIG5vdCBhbGwgZmlsZXMgYXJlIHZpZXdlZCB0aGVuIHRoZSByZXNwb25zZSB2aWV3IGluIHRoZSB3b3JrbGlzdCB3aWxsIGJlIHNob3duIGluIGFtYmVyIGNvbG9yIGFsb25nIHdpdGhcclxuICAgICAgICAgICAgICAgICAgICAgICBtYXJraW5nIHByb2dyZXNzIGluZGljYXRvci5cclxuICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLmhhc0V4Y2VwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gdGhpcy5yZXNwb25zZVN0YXR1c2VzLnB1c2goZW51bXMuUmVzcG9uc2VTdGF0dXMubWFya2luZ0luUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLm5vdEFsbEZpbGVzVmlld2VkKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyoqIGlmIGFsbCBwYWdlcyBhbm5vdGF0ZWQgY2MgaXMgb2ZmIHNob3cgcmVhZHkgdG8gc3VibWl0IGJ1dHRvbiAqL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLnJlYWR5VG9TdWJtaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmlzU3VibWl0RW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLnJlc3BvbnNlU3RhdHVzZXMucHVzaChlbnVtcy5SZXNwb25zZVN0YXR1cy5tYXJraW5nSW5Qcm9ncmVzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKiogaWYgbWFya2luZyBub3Qgc3RhcnRlZCBzaG93IHRoZSBzYW1lICovXHJcbiAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLm1hcmtpbmdOb3RTdGFydGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlU3RhdHVzZXM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0ID0gU3RhbmRhcmRpc2F0aW9uV29ya2xpc3RWYWxpZGF0b3I7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS93b3JrbGlzdHZhbGlkYXRvcnMvc3RhbmRhcmRpc2F0aW9ud29ya2xpc3R2YWxpZGF0b3IudHMiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFBQTtBQXVFQTtBQXBFQTs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 548:
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/components/message/messagecontainer.tsx ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\n/**\r\n * Add new dependencies in loadDependencies() method unless your dependencies are not using in constructor\r\n */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar immutable = __webpack_require__(/*! immutable */ 40);\r\nvar loginSession = __webpack_require__(/*! ../../app/loginsession */ 252);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar Footer = __webpack_require__(/*! ../footer */ 382);\r\nvar BusyIndicator = __webpack_require__(/*! ../utility/busyindicator/busyindicator */ 312);\r\nvar applicationStore = __webpack_require__(/*! ../../stores/applicationoffline/applicationstore */ 247);\r\nvar applicationActionCreator = __webpack_require__(/*! ../../actions/applicationoffline/applicationactioncreator */ 256);\r\n/**\r\n * Add new dependencies in loadDependencies() method unless your dependencies are not using in constructor\r\n */\r\n/* tslint:disable:variable-name no-multiple-var-decl */\r\nvar navigationHelper, Header, notificationCount, MessageLeftPanel, MessageRightPanel, MessageTabItem, messageStore, ccStore, localeStore, MessagePopup, messagingActionCreator, GenericButton, stringFormatHelper, messageHelper, popUpDisplayActionCreator, popupHelper, markingHelper, ConfirmationDialog, responseStore, responseSearchHelper, responseActionCreator, messageTranslationHelper, GenericDialog, navigationStore, userInfoActionCreator, qigStore, userInfoStore, htmlUtilities, urls;\r\n/**\r\n * Class to Display the Left Side Section\r\n */\r\nvar MessageContainer = /** @class */ (function (_super) {\r\n    __extends(MessageContainer, _super);\r\n    /**\r\n     * Constructor Messagecontainer\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function MessageContainer(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        // this variable will hold the message panel visiblity status.\r\n        _this.isMessagePopupVisible = false;\r\n        _this.selectedMsgDetails = null;\r\n        _this.selectedMsgReadStatus = 1;\r\n        // message type\r\n        _this.currentMessageType = enums.MessageType.InboxCompose;\r\n        _this.subject = '';\r\n        _this.priorityDropdownSelectedItem = enums.MessagePriority.Standard;\r\n        _this.isReplyOrForwardClicked = false;\r\n        _this.searchData = { isVisible: true, isSearching: undefined, searchText: '' };\r\n        // contains qigId: number, isOpen: boolean\r\n        _this.inboxTabExpandOrCollapseDetails = immutable.Map();\r\n        _this.sentTabExpandOrCollapseDetails = immutable.Map();\r\n        _this.deletedTabExpandOrCollapseDetails = immutable.Map();\r\n        _this.isLoadingDataFailed = false;\r\n        _this.messageType = enums.MessageType.None;\r\n        _this.isMessageClicked = false;\r\n        /**\r\n         * This method will call on new message button click\r\n         */\r\n        _this.onNewMessageClick = function () {\r\n            // check online status before proceed\r\n            _this.checkOnlineStatusAndDoMessageAction(enums.MessageType.InboxCompose);\r\n        };\r\n        /**\r\n         * Callback function for message panel close\r\n         */\r\n        _this.onCloseMessagePopup = function () {\r\n            _this.isMessagePopupVisible = false;\r\n            _this.isReplyOrForwardClicked = false;\r\n            _this.currentMessageType = enums.MessageType.InboxCompose;\r\n            messagingActionCreator.messageAction(enums.MessageViewAction.Close);\r\n            /* Defect:24608 - seting focus back to subject on message close for fixing cursor and onscreen keyboard displaying issue in ipad */\r\n            if (htmlUtilities.isIPadDevice) {\r\n                htmlUtilities.setFocusToElement('message-subject');\r\n                htmlUtilities.blurElement('message-subject');\r\n            }\r\n            // if selected tab is sent then update the message folder\r\n            if (_this.selectedTab === enums.MessageFolderType.Sent) {\r\n                // Load the messages\r\n                _this.getMessagesForTheSelectedTab();\r\n            }\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Invoked when the selection changed in messages.\r\n         */\r\n        _this.onMessageClick = function (newlySelectedMsg) {\r\n            _this.isMessageClicked = true;\r\n            //DefectFix:#65417 Checking the online status, otherwise a blank screen will be shown in right panel\r\n            if (!applicationStore.instance.isOnline) {\r\n                applicationActionCreator.checkActionInterrupted();\r\n            }\r\n            else {\r\n                // If the currently selected Item is Unread, Update the collection for updating the QIG group unread message count\r\n                if (_this.selectedMsg.status === enums.MessageReadStatus.New) {\r\n                    var messagesForGrouping = _this.filteredMessages;\r\n                    if (_this.searchData.searchText !== '') {\r\n                        // update the read status of previous message\r\n                        _this.updateReadStatus(_this.selectedMsg);\r\n                        // update the collection with read status to reflect the changes in view, otherwise it won't update due to delay\r\n                        // in action creator call\r\n                        messagesForGrouping.filter(function (x) { return x.examinerMessageId === _this.selectedMsg.examinerMessageId; }).first().status =\r\n                            enums.MessageReadStatus.Read;\r\n                    }\r\n                    _this.messageGroupDetails = messageHelper.getGroupedMessageObject(messagesForGrouping, _this.expandOrCollapseDetails);\r\n                    _this.updateNotification();\r\n                }\r\n                // we don't need to reflect the read status current message in UI untill to click on another message or navigate away.\r\n                if (_this.searchData.searchText !== '' && newlySelectedMsg.status === enums.MessageReadStatus.New) {\r\n                    // update the read status of current message\r\n                    _this.updateReadStatus(newlySelectedMsg);\r\n                }\r\n                _this.selectedMsg = newlySelectedMsg;\r\n                _this.selectedMsgDetails = null;\r\n                messagingActionCreator.getMessageBodyDetails(_this.selectedMsg.examinerMessageId, _this.selectedTab);\r\n                // Refresh the UI.\r\n                _this.setState({\r\n                    renderedOn: Date.now()\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Invoked When the message tab selected.\r\n         */\r\n        _this.onTabSelected = function (messageFolderType) {\r\n            if (!applicationStore.instance.isOnline) {\r\n                applicationActionCreator.checkActionInterrupted();\r\n            }\r\n            else {\r\n                _this.selectedTab = messageFolderType;\r\n                // reset values for the new tab.\r\n                _this.selectedMsg = undefined;\r\n                _this.selectedMsgDetails = null;\r\n                _this.messageGroupDetails.messages = undefined;\r\n                _this.getMessagesForTheSelectedTab();\r\n                _this.setState({\r\n                    renderedOn: Date.now()\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Handles the action event on Message Received.\r\n         */\r\n        _this.onMessagesReceived = function (selectedMsgId) {\r\n            _this.searchData.isVisible = _this.selectedTab === enums.MessageFolderType.Inbox;\r\n            if (_this.searchData.isSearching) {\r\n                _this.searchData.isSearching = _this.searchData.searchText === '' ? undefined : false;\r\n            }\r\n            _this.messageGroupDetails = messageHelper.getGroupedMessageObject(_this.filteredMessages, _this.expandOrCollapseDetails);\r\n            _this.updateNotification();\r\n            _this.getQigItemsList();\r\n            if (selectedMsgId > 0) {\r\n                if (_this.messageGroupDetails && _this.messageGroupDetails.messages.count() > 0) {\r\n                    _this.selectedMsg = _this.messageGroupDetails.messages.find(function (x) { return x.examinerMessageId === selectedMsgId; });\r\n                    _this.selectedQigName = messageHelper.getDisplayText(_this.selectedMsg);\r\n                }\r\n            }\r\n            else if (_this.messageGroupDetails.messages.count() > 0 && _this.selectedMsg === undefined) {\r\n                // Default first message should be selected in the list. Select I f any message exists\r\n                _this.selectedMsg = _this.messageGroupDetails.messages.first();\r\n            }\r\n            if (_this.selectedMsg !== undefined) {\r\n                // Get the message data.\r\n                messagingActionCreator.getMessageBodyDetails(_this.selectedMsg.examinerMessageId, _this.selectedTab);\r\n            }\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n            // set the scroll position to the selected message for automatic selection\r\n            if (selectedMsgId > 0) {\r\n                var borderHeight = 30;\r\n                var offsetTop = htmlUtilities.getOffsetTop('msg-item unread selected', false);\r\n                htmlUtilities.setScrollTop('msg-list-container', offsetTop - borderHeight);\r\n            }\r\n        };\r\n        /**\r\n         * Handles the action event on Message Details Received.\r\n         */\r\n        _this.onMessageDetailsReceived = function (msgId) {\r\n            // Check the selection got changed while receives the message\r\n            if (_this.selectedMsg.examinerMessageId === msgId) {\r\n                _this.selectedMsgDetails = messageStore.instance.getMessageDetails(_this.selectedMsg.examinerMessageId);\r\n                _this.hasPermissionToViewStandardisationWorklist();\r\n                // update the default selected message if search filter is not applied.\r\n                if (_this.searchData.searchText === '') {\r\n                    _this.updateReadStatus(_this.selectedMsg);\r\n                }\r\n                _this.setState({\r\n                    renderedOn: Date.now()\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * This method will refresh the given message folder\r\n         */\r\n        _this.onRefreshMessageTab = function (messageFolderType) {\r\n            // change the selected tab to given folder\r\n            _this.selectedTab = messageFolderType;\r\n            _this.selectedMsgDetails = null;\r\n            // Load the messages\r\n            _this.getMessagesForTheSelectedTab();\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * Re render the component\r\n         */\r\n        _this.onReRender = function () {\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * This method will return the QIG items list\r\n         */\r\n        _this.getQigItemsList = function () {\r\n            _this.qigListItems = new Array();\r\n            var msg = messageStore.instance.messagesMarkSchemes;\r\n            if (msg) {\r\n                msg.forEach(function (message) {\r\n                    if (!qigStore.instance.isQIGHidden(message.markSchemeGroupId)) {\r\n                        var item = {\r\n                            name: stringFormatHelper.formatAwardingBodyQIG(message.markSchemeGroupName, message.assessmentCode, message.sessionName, message.componentId, message.questionPaperName, message.assessmentName, message.componentName, stringFormatHelper.getOverviewQIGNameFormat()),\r\n                            id: message.markSchemeGroupId,\r\n                            parentExaminerDisplayName: _this.formattedExaminerName(message.parentInitials, message.parentSurname),\r\n                            parentExaminerId: message.parentExaminerId,\r\n                            questionPaperPartId: message.questionPaperPartId,\r\n                            examinerRoleId: message.examinerRoleId,\r\n                            approvalStatusId: message.approvalStatusId,\r\n                            coordinationComplete: message.coordinationComplete\r\n                        };\r\n                        _this.qigListItems.push(item);\r\n                    }\r\n                });\r\n            }\r\n            return _this.qigListItems.sort(function (obj1, obj2) {\r\n                return obj1.name.localeCompare(obj2.name);\r\n            });\r\n        };\r\n        /**\r\n         * This method will return the selected QIG details\r\n         */\r\n        _this.getSelectedQigDetails = function () {\r\n            // If an examiner has only one qig to be selected from the list. Display that list\r\n            if (_this.qigListItems.length === 1) {\r\n                _this.getSupervisorAndQIGDetails(_this.qigListItems[0].id);\r\n            }\r\n            else {\r\n                _this.selectedQigItemId = 0;\r\n                _this.selectedQigName = localeStore.instance.TranslateText('messaging.compose-message.select-qig-placeholder');\r\n                _this.supervisorName = '';\r\n                _this.supervisorId = 0;\r\n            }\r\n        };\r\n        /**\r\n         * Callback function for QIG dropdown select action\r\n         */\r\n        _this.onQigItemSelected = function (selectedItem) {\r\n            _this.getSupervisorAndQIGDetails(selectedItem);\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        _this.resetMessagePopup = function (navigateTo) {\r\n            if (_this.selectedMsg !== undefined && _this.selectedMsg.status === enums.MessageReadStatus.New) {\r\n                _this.messageGroupDetails = messageHelper.getGroupedMessageObject(_this.filteredMessages, _this.expandOrCollapseDetails);\r\n                _this.updateNotification();\r\n            }\r\n            switch (navigateTo) {\r\n                case enums.SaveAndNavigate.newMessageButtonClick:\r\n                    _this.resetvariables();\r\n                    // fill qig items\r\n                    _this.getQigItemsList();\r\n                    // reset the selected item\r\n                    _this.getSelectedQigDetails();\r\n                    messagingActionCreator.messageAction(enums.MessageViewAction.Open, enums.MessageType.InboxCompose);\r\n                    break;\r\n                case enums.SaveAndNavigate.toReplyMessage:\r\n                    _this.setvariablesforReplyForward(enums.MessageAction.Reply);\r\n                    break;\r\n                case enums.SaveAndNavigate.toForwardMessage:\r\n                    _this.setvariablesforReplyForward(enums.MessageAction.Forward);\r\n                    break;\r\n            }\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Callback function for message menu action click\r\n         * @param messageMenuActionType\r\n         */\r\n        _this.onMessageMenuActionClick = function (messageMenuActionType) {\r\n            _this.messageGroupDetails = messageHelper.getGroupedMessageObject(_this.filteredMessages, _this.expandOrCollapseDetails);\r\n            _this.updateNotification();\r\n            if (messageMenuActionType === enums.MessageAction.Delete) {\r\n                _this.showDeleteMessagePopUp();\r\n            }\r\n            if (!messageStore.instance.isMessagePanelActive && messageMenuActionType !== enums.MessageAction.Delete) {\r\n                _this.isReplyOrForwardClicked = true;\r\n                _this.setvariablesforReplyForward(messageMenuActionType);\r\n            }\r\n            else {\r\n                var responseNavigationFailureReasons = markingHelper.canNavigateAwayFromCurrentResponse();\r\n                if (messageMenuActionType === enums.MessageAction.Reply) {\r\n                    popupHelper.navigateAwayFromResponse(responseNavigationFailureReasons, enums.SaveAndNavigate.toReplyMessage);\r\n                }\r\n                else if (messageMenuActionType === enums.MessageAction.Forward) {\r\n                    popupHelper.navigateAwayFromResponse(responseNavigationFailureReasons, enums.SaveAndNavigate.toForwardMessage);\r\n                }\r\n                _this.isReplyOrForwardClicked = true;\r\n            }\r\n        };\r\n        /**\r\n         * This method will return the supervisor details against a qig\r\n         */\r\n        _this.getSupervisorAndQIGDetails = function (qigId) {\r\n            var item = _this.qigListItems.filter(function (x) { return x.id === qigId; })[0];\r\n            if (item) {\r\n                _this.selectedQigItemId = item.id;\r\n                _this.selectedQigName = item.name;\r\n                _this.supervisorName = item.parentExaminerDisplayName;\r\n                _this.supervisorId = item.parentExaminerId;\r\n                _this.selectedQuestionPaperPartId = item.questionPaperPartId;\r\n            }\r\n        };\r\n        /**\r\n         * Reset private variables\r\n         */\r\n        _this.resetvariables = function () {\r\n            _this.currentMessageType = enums.MessageType.InboxCompose;\r\n            _this.responseId = undefined;\r\n            _this.subject = '';\r\n            _this.selectedQigName = '';\r\n            _this.supervisorId = 0;\r\n            _this.supervisorName = '';\r\n            _this.priorityDropdownSelectedItem = enums.MessagePriority.Standard;\r\n            _this.selectedQigItemId = undefined;\r\n            _this.messageBody = '';\r\n            _this.isReplyOrForwardClicked = false;\r\n        };\r\n        /**\r\n         * This method will set variables for Reply and Forward\r\n         */\r\n        _this.doSetvariablesforReplyForward = function (messageMenuActionType) {\r\n            _this.isMessagePopupVisible = true;\r\n            _this.getSupervisorAndQIGDetails(_this.selectedMsg.markSchemeGroupId);\r\n            _this.responseId = _this.selectedMsgDetails.displayId;\r\n            _this.priorityDropdownSelectedItem = messageHelper.getPriorityDropDownSelectedItem(_this.selectedMsg.priorityName);\r\n            var translatedMessageContents = messageTranslationHelper.getTranslatedContent(_this.selectedMsg);\r\n            var messageBody;\r\n            // If selected message is a system message then set the corresponding language json file entry\r\n            if (_this.selectedMsg.examBodyMessageTypeId != null && _this.selectedMsg.examBodyMessageTypeId !== enums.SystemMessage.None) {\r\n                messageBody = translatedMessageContents.content;\r\n            }\r\n            else {\r\n                messageBody = _this.selectedMsgDetails.body;\r\n            }\r\n            switch (messageMenuActionType) {\r\n                case enums.MessageAction.Reply:\r\n                    _this.currentMessageType = enums.MessageType.InboxReply;\r\n                    _this.supervisorId = _this.selectedMsg.fromExaminerId;\r\n                    _this.supervisorName = _this.selectedMsg.examinerDetails.fullName;\r\n                    _this.subject = messageHelper.getSubjectContent(enums.MessageType.InboxReply, translatedMessageContents.subject);\r\n                    _this.messageBody = messageHelper.getMessageContent(enums.MessageType.InboxReply, _this.selectedMsg.examinerDetails.fullName, _this.selectedMsg.displayDate, messageBody);\r\n                    _this.selectedQigItemId = _this.selectedMsg.markSchemeGroupId;\r\n                    messagingActionCreator.messageAction(enums.MessageViewAction.Open, enums.MessageType.InboxReply);\r\n                    break;\r\n                case enums.MessageAction.Forward:\r\n                    _this.currentMessageType = enums.MessageType.InboxForward;\r\n                    var selectedQigItem = _this.getQigItemsList().filter(function (x) { return x.id === _this.selectedQigItemId; });\r\n                    var qigId = _this.selectedQigItemId;\r\n                    var examinerRoleId = selectedQigItem[0].examinerRoleId;\r\n                    var args = {\r\n                        examinerRoleId: examinerRoleId,\r\n                        qigId: qigId\r\n                    };\r\n                    messagingActionCreator.getTeamDetails(args);\r\n                    _this.subject = messageHelper.getSubjectContent(enums.MessageType.InboxForward, translatedMessageContents.subject);\r\n                    _this.messageBody = messageHelper.getMessageContent(enums.MessageType.InboxForward, _this.selectedMsg.examinerDetails.fullName, _this.selectedMsg.displayDate, messageBody);\r\n                    _this.priorityDropdownSelectedItem = messageHelper.getPriorityDropDownSelectedItem(_this.selectedMsg.priorityName);\r\n                    messagingActionCreator.messageAction(enums.MessageViewAction.Open, enums.MessageType.InboxForward);\r\n                    break;\r\n            }\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Will display delete message confirmation dialog\r\n         */\r\n        _this.showDeleteMessagePopUp = function () {\r\n            _this.updateNotification();\r\n            // display dialog box\r\n            _this.setState({ isDeleteMessagePopupVisible: true });\r\n        };\r\n        /**\r\n         * Delete message confirmation dialog Yes click\r\n         */\r\n        _this.onYesButtonDeleteMessageClick = function () {\r\n            _this.deleteMessage();\r\n            // hiding confirmation dialog\r\n            _this.setState({ isDeleteMessagePopupVisible: false });\r\n        };\r\n        /**\r\n         * Delete message confirmation dialog No click\r\n         */\r\n        _this.onNoButtonDeleteMessageClick = function () {\r\n            // hiding confirmation dialog\r\n            _this.setState({ isDeleteMessagePopupVisible: false });\r\n        };\r\n        /**\r\n         * Update the message deleted Status to database\r\n         */\r\n        _this.updateMessageDeletedStatus = function () {\r\n            var messages = _this.messageGroupDetails.messages;\r\n            // Scenario 1. After a deleting a message, Check any other message exists just next to the current QIG, If So Select that item\r\n            // Find All messages related to the the Selected message\r\n            var messagesInTheSelectedQigs = immutable.List(messages.filter(function (x) { return x.markSchemeGroupId === _this.selectedMsg.markSchemeGroupId; }));\r\n            // Find the message index with in the selected QIG messages\r\n            var selectedMessageIndexInTheQIG = messagesInTheSelectedQigs.findIndex(function (x) { return x.examinerMessageId === _this.selectedMsg.examinerMessageId; });\r\n            // Check currently selected message is the last item in the QIG Group.\r\n            if (selectedMessageIndexInTheQIG === messagesInTheSelectedQigs.count() - 1) {\r\n                // Select Previous message in the same group, If it has a previous item in the message\r\n                if (messagesInTheSelectedQigs.count() > 1) {\r\n                    _this.selectedMsg = messagesInTheSelectedQigs.get(selectedMessageIndexInTheQIG - 1);\r\n                }\r\n                else {\r\n                    //  Select the next Item In the all messages, If it is Not the last messages in the Panel.\r\n                    var selectedMessageIndexInAllMessages = messages.findIndex(function (x) { return x.examinerMessageId === _this.selectedMsg.examinerMessageId; });\r\n                    if (selectedMessageIndexInAllMessages !== messages.count() - 1) {\r\n                        _this.selectedMsg = messages.get(selectedMessageIndexInAllMessages + 1);\r\n                    }\r\n                    else if (messages.count() > 1) {\r\n                        // If it is laste message in all messages and has a previous message select.\r\n                        _this.selectedMsg = messages.get(selectedMessageIndexInAllMessages - 1);\r\n                    }\r\n                    else {\r\n                        // All deleted.\r\n                        _this.selectedMsg = undefined;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Message Deleted In a QIG group and has a next message with in  the Group, Select Next Message in the Selected QIG Group.\r\n                _this.selectedMsg = messagesInTheSelectedQigs.get(selectedMessageIndexInTheQIG + 1);\r\n            }\r\n            _this.selectedMsgDetails = null;\r\n            // refresh the data\r\n            _this.getMessagesForInboxOnDeletion();\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Open the response page.\r\n         */\r\n        _this.navigateToResponsePage = function () {\r\n            navigationHelper.loadResponsePage();\r\n        };\r\n        /**\r\n         * Show Loading Indicator.\r\n         */\r\n        _this.onDisplayIdClick = function () {\r\n            var messageNavigationArguments = {\r\n                responseId: null,\r\n                canNavigate: true,\r\n                navigateTo: enums.MessageNavigation.toSearchedResponse,\r\n                navigationConfirmed: false,\r\n                hasMessageContainsDirtyValue: undefined,\r\n                triggerPoint: enums.TriggerPoint.None\r\n            };\r\n            if (messageStore.instance.isMessagePanelActive) {\r\n                messageNavigationArguments.canNavigate = false;\r\n                messagingActionCreator.canMessageNavigate(messageNavigationArguments);\r\n            }\r\n            else {\r\n                _this.openSearchedResponse(messageNavigationArguments);\r\n            }\r\n        };\r\n        /**\r\n         * Update the message count\r\n         */\r\n        _this.updateNotification = function () {\r\n            _this.unreadMessageCount = messageStore.instance.getUnreadMessageCount;\r\n        };\r\n        _this.openSearchedResponse = function (messageNavigationArguments) {\r\n            if (messageNavigationArguments.canNavigate &&\r\n                messageNavigationArguments.navigateTo === enums.MessageNavigation.toSearchedResponse) {\r\n                responseActionCreator.getResponseDetails(_this.selectedMsgDetails.displayId, _this.selectedMsgDetails.markGroupId, _this.selectedMsgDetails.esMarkGroupId, _this.selectedMsg.markSchemeGroupId, _this.selectedMsg.examinerMessageId, _this.selectedMsgDetails.candidateScriptId, loginSession.EXAMINER_ID, _this.selectedMsgDetails.isElectronicStandardisationTeamMember, _this.selectedMsgDetails.isTeamManagement, _this.selectedMsgDetails.isStandardisationSetup, _this.selectedMsgDetails.standardisationSetupWorklistType, _this.selectedMsgDetails.esDisplayId);\r\n                _this.setState({ isOpeningResponse: true });\r\n            }\r\n        };\r\n        /**\r\n         * Data Received For Opening the response. Validate marker is withdrwan from the QIG\r\n         */\r\n        _this.initiateSerachResponse = function (searchedResponseData) {\r\n            _this.searchedResponseData = searchedResponseData;\r\n            if (searchedResponseData.approvalStatusId === enums.ExaminerApproval.Withdrawn) {\r\n                _this.setState({ isOpeningResponse: false });\r\n                _this.getMessagesForTheSelectedTab();\r\n                _this.selectedMsg = undefined;\r\n                _this.selectedMsgDetails = null;\r\n                return;\r\n            }\r\n            else if (searchedResponseData.hasQualityFeedbackOutstanding &&\r\n                searchedResponseData.loggedInExaminerId === searchedResponseData.examinerId) {\r\n                // Display Message for indicating the Quality feedback message\r\n                _this.setState({ isOpeningResponse: false, hasOpeningQualityFeedbackQutstandingQIGsResponse: true });\r\n                return;\r\n            }\r\n            responseSearchHelper.initiateSerachResponse(searchedResponseData);\r\n        };\r\n        /**\r\n         * Close the Quality feedback message.\r\n         */\r\n        _this.onQualityFeedbackWarningMessageClose = function () {\r\n            _this.setState({ hasOpeningQualityFeedbackQutstandingQIGsResponse: false });\r\n        };\r\n        /**\r\n         * We've to clear the existing search filter if the user is navigating to menu.\r\n         */\r\n        _this.onMenuOpen = function (doVisible) {\r\n            if (doVisible === void 0) { doVisible = true; }\r\n            _this.expandOrCollapseDetails = undefined;\r\n            if (doVisible && _this.searchData.searchText !== '') {\r\n                _this.onSearch('');\r\n            }\r\n            _this.onMessagesReceived(0);\r\n        };\r\n        /**\r\n         * Callback function function for on search\r\n         */\r\n        _this.onSearch = function (searchText) {\r\n            _this.searchData = { isVisible: true, isSearching: true, searchText: searchText };\r\n            _this.selectedMsg = undefined;\r\n            _this.onMessagesReceived(0);\r\n        };\r\n        /**\r\n         * Update the collection with expand or collapse details\r\n         * @param qigId number\r\n         * @param isOpen boolean\r\n         */\r\n        _this.onExpandOrCollapse = function (qigId, isOpen) {\r\n            // Dictionary already contains the key then update the value otherwise add a new entry.\r\n            _this.expandOrCollapseDetails = _this.expandOrCollapseDetails.set(qigId, isOpen);\r\n            _this.onMessagesReceived(0);\r\n        };\r\n        /**\r\n         * hide busy indicator on response search failed\r\n         */\r\n        _this.onResponseDataReceivedFailed = function () {\r\n            _this.setState({ isOpeningResponse: false });\r\n        };\r\n        // Handles the action event on Message Details Received failed\r\n        _this.onMessageDetailsReceivedFailed = function () {\r\n            _this.isLoadingDataFailed = true;\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * Actions to be done when online status updated\r\n         */\r\n        _this.onOnlineStatusUpdated = function () {\r\n            //DefectFix #65417: Removed offline check, since on offline, the offline message is showing without any user action\r\n            if (applicationStore.instance.isOnline) {\r\n                // if in online mode, the proceed the action\r\n                switch (_this.messageType) {\r\n                    case enums.MessageType.InboxCompose:\r\n                        _this.onNewMessageClicked();\r\n                        break;\r\n                    case enums.MessageType.InboxForward:\r\n                        _this.doSetvariablesforReplyForward(enums.MessageAction.Forward);\r\n                        break;\r\n                    case enums.MessageType.InboxReply:\r\n                        _this.doSetvariablesforReplyForward(enums.MessageAction.Reply);\r\n                        break;\r\n                }\r\n                /*If the application goes offline when clicking a response from inbox and then comes back online\r\n                loading response indicator will be shown and no response will be loaded, so setting loading\r\n                indicator to false when back online*/\r\n                if (_this.state.isOpeningResponse === true) {\r\n                    _this.setState({ isOpeningResponse: false });\r\n                }\r\n                _this.messageType = enums.MessageType.None;\r\n            }\r\n        };\r\n        /**\r\n         * Gets whether Examiner have permission to view respnses in  standardisation setup classified worklist.\r\n         * If we have no permission in classifications we have to disable linked responseID click in messaging.\r\n         */\r\n        _this.hasPermissionToViewStandardisationWorklist = function () {\r\n            var hasPermissionInStdSetupWorklist = true;\r\n            if (_this.selectedMsgDetails.isStandardisationSetup\r\n                && _this.selectedMsgDetails.standardisationSetupWorklistType === enums.StandardisationSetup.ClassifiedResponse) {\r\n                hasPermissionInStdSetupWorklist = false;\r\n                var stdSetupPremissionsData = qigStore.instance.getSSUPermissionsData(_this.selectedMsgDetails.markSchemeGroupID);\r\n                if (stdSetupPremissionsData.role.viewByClassification.classifications) {\r\n                    switch (_this.selectedMsgDetails.markingModeId) {\r\n                        case enums.MarkingMode.Practice:\r\n                            hasPermissionInStdSetupWorklist = stdSetupPremissionsData.role.viewByClassification.classifications.practice;\r\n                            break;\r\n                        case enums.MarkingMode.Approval:\r\n                            hasPermissionInStdSetupWorklist = stdSetupPremissionsData.role.viewByClassification.classifications.standardisation;\r\n                            break;\r\n                        case enums.MarkingMode.ES_TeamApproval:\r\n                            hasPermissionInStdSetupWorklist =\r\n                                stdSetupPremissionsData.role.viewByClassification.classifications.stmStandardisation;\r\n                            break;\r\n                        case enums.MarkingMode.Seeding:\r\n                            hasPermissionInStdSetupWorklist = stdSetupPremissionsData.role.viewByClassification.classifications.seeding;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            _this.selectedMsgDetails.hasPermissionInStdSetupWorklist = hasPermissionInStdSetupWorklist;\r\n        };\r\n        // If page is refreshed, redirect to login page. // This will clear the memory.\r\n        if (!loginSession.IS_AUTHENTICATED) {\r\n            navigationHelper.loadLoginPage();\r\n            window.location.replace(config.general.SERVICE_BASE_URL);\r\n            return _this;\r\n        }\r\n        _this.logoutConfirmation = _this.showLogoutConfirmation.bind(_this, true);\r\n        _this.resetLogoutConfirmationSatus = _this.showLogoutConfirmation.bind(_this, false);\r\n        /* binding the parent(current) context to showLogoutConfirmation which is passed as prop to child and executing inside child */\r\n        /* setting submit confirmation yes/no functions to initialize. */\r\n        _this.state = {\r\n            modulesLoaded: false,\r\n            isLogoutConfirmationPopupDisplaying: false,\r\n            isDefaultTabActive: true,\r\n            isOpeningResponse: false,\r\n            hasOpeningQualityFeedbackQutstandingQIGsResponse: false\r\n        };\r\n        _this.selectedTab = enums.MessageFolderType.Inbox;\r\n        _this.onMessageClick = _this.onMessageClick.bind(_this);\r\n        _this.showDeleteMessagePopUp = _this.showDeleteMessagePopUp.bind(_this);\r\n        _this.onTabSelected = _this.onTabSelected.bind(_this);\r\n        _this.onQualityFeedbackWarningMessageClose = _this.onQualityFeedbackWarningMessageClose.bind(_this);\r\n        _this.onMessageDetailsReceivedFailed = _this.onMessageDetailsReceivedFailed.bind(_this);\r\n        _this.hasPermissionToViewStandardisationWorklist = _this.hasPermissionToViewStandardisationWorklist.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render Method to display the data.\r\n     */\r\n    MessageContainer.prototype.render = function () {\r\n        var footer = (React.createElement(Footer, { id: this.props.id, key: 'key_' + this.props.id, selectedLanguage: this.props.selectedLanguage, footerType: enums.FooterType.Message, isLogoutConfirmationPopupDisplaying: this.state.isLogoutConfirmationPopupDisplaying, resetLogoutConfirmationSatus: this.resetLogoutConfirmationSatus }));\r\n        var busyIndicator = (React.createElement(BusyIndicator, { id: 'modules_loading_indicator', isBusy: true, key: 'response_loading_indicator', isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.loadingModules, showBackgroundScreen: false, doShowDialog: !this.state.modulesLoaded || !this.state.scriptLoaded }));\r\n        if (this.state.modulesLoaded && this.state.scriptLoaded) {\r\n            var header = React.createElement(Header, { selectedLanguage: this.props.selectedLanguage, containerPage: enums.PageContainers.Message, unReadMessageCount: this.unreadMessageCount });\r\n            var nonRecoverableErrorMessage = (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('messaging.message-lists.quality-feedback-pending-dialog.body'), header: localeStore.instance.TranslateText('home.qig-statuses.QualityFeedback'), displayPopup: this.state.hasOpeningQualityFeedbackQutstandingQIGsResponse, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onQualityFeedbackWarningMessageClose, id: 'nonRecoverableErrorMessge', key: 'marksAndAnnotationsErrorMessge', popupDialogType: enums.PopupDialogType.QualityFeedbackWarning }));\r\n            var deleteMessage = (React.createElement(ConfirmationDialog, { content: localeStore.instance.TranslateText('messaging.message-lists.delete-message-dialog.body'), header: localeStore.instance.TranslateText('messaging.message-lists.delete-message-dialog.header'), displayPopup: this.state.isDeleteMessagePopupVisible, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('messaging.message-lists.delete-message-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('messaging.message-lists.delete-message-dialog.yes-button'), onYesClick: this.onYesButtonDeleteMessageClick, onNoClick: this.onNoButtonDeleteMessageClick, dialogType: enums.PopupDialogType.MbCReturnToWorklistConfirmation, isKeyBoardSupportEnabled: true }));\r\n            return (React.createElement(\"div\", { className: classNames('message-wrapper', { 'loading': this.selectedMsg && this.state.isOpeningResponse }) },\r\n                this.renderLoadingIndicator(),\r\n                header,\r\n                React.createElement(\"div\", { className: 'content-wrapper relative' },\r\n                    React.createElement(MessagePopup, { isOpen: this.isMessagePopupVisible, closeMessagePanel: this.onCloseMessagePopup, messageType: this.currentMessageType, onResetPopupCallback: this.resetMessagePopup, responseId: this.responseId, selectedLanguage: this.props.selectedLanguage, qigItemsList: this.qigListItems, selectedQigItemId: this.selectedQigItemId, selectedQigItem: this.selectedQigName, supervisorId: this.supervisorId, supervisorName: this.supervisorName, subject: this.subject, priorityDropDownSelectedItem: this.priorityDropdownSelectedItem, onQigItemSelected: this.onQigItemSelected, messageBody: this.messageBody, questionPaperPartId: this.selectedQuestionPaperPartId, selectedMessage: this.selectedMsg, selectedMsgDetails: this.selectedMsgDetails, isReplyOrForwardClicked: this.isReplyOrForwardClicked }),\r\n                    React.createElement(\"div\", { className: 'tab-holder horizontal msg-tab' },\r\n                        React.createElement(\"div\", { className: 'msg-tab-header' },\r\n                            React.createElement(\"div\", { className: 'col-wrap' },\r\n                                React.createElement(\"div\", { className: 'col-9-of-12 msg-tabs-nav' },\r\n                                    React.createElement(\"ul\", { className: 'tab-nav padding-left-10', role: 'tablist' },\r\n                                        React.createElement(MessageTabItem, { messageFolderType: enums.MessageFolderType.Inbox, isSelected: this.selectedTab === enums.MessageFolderType.Inbox, onTabSelected: this.onTabSelected, unReadMessageCount: messageStore.instance.getUnreadMessageCount }),\r\n                                        React.createElement(MessageTabItem, { messageFolderType: enums.MessageFolderType.Sent, isSelected: this.selectedTab === enums.MessageFolderType.Sent, onTabSelected: this.onTabSelected, unReadMessageCount: 0 }),\r\n                                        React.createElement(MessageTabItem, { messageFolderType: enums.MessageFolderType.Deleted, isSelected: this.selectedTab === enums.MessageFolderType.Deleted, onTabSelected: this.onTabSelected, unReadMessageCount: 0 }))),\r\n                                React.createElement(\"div\", { className: 'col-3-of-12 text-right compose-msg-btn-wrap' },\r\n                                    React.createElement(GenericButton, { id: 'new_message_btn', key: 'key_new_message_btn', className: 'button primary rounded', title: localeStore.instance.TranslateText('messaging.message-lists.top-panel.new-message-button'), content: localeStore.instance.TranslateText('messaging.message-lists.top-panel.new-message-button'), disabled: false, onClick: this.onNewMessageClick })))),\r\n                        React.createElement(MessageLeftPanel, { selectedLanguage: this.props.selectedLanguage, selectedTab: this.selectedTab, messages: this.messageGroupDetails, onSearch: this.onSearch, searchData: this.searchData, selectedMsg: this.selectedMsg, onSelectedMessageChanged: this.onMessageClick, messageGroupDetails: this.messageGroupDetails, onExpandOrCollapse: this.onExpandOrCollapse, isMessageClicked: this.isMessageClicked }),\r\n                        React.createElement(MessageRightPanel, { selectedLanguage: this.props.selectedLanguage, message: this.selectedMsg, messageDetails: this.selectedMsgDetails, selectedTab: this.selectedTab, isForwardButtonHidden: this.isForwardButtonHidden(this.selectedMsg ? this.selectedMsg.markSchemeGroupId : 0), onMessageMenuActionClickCallback: this.onMessageMenuActionClick, onDisplayIdClick: this.onDisplayIdClick }))),\r\n                deleteMessage,\r\n                nonRecoverableErrorMessage,\r\n                footer));\r\n        }\r\n        else {\r\n            return (React.createElement(\"div\", null,\r\n                busyIndicator,\r\n                footer));\r\n        }\r\n    };\r\n    /**\r\n     * Render Loading Indicator\r\n     */\r\n    MessageContainer.prototype.renderLoadingIndicator = function () {\r\n        if (!this.forceDisableLoading &&\r\n            (this.messageGroupDetails === undefined ||\r\n                this.messageGroupDetails.messages === undefined ||\r\n                (this.messageGroupDetails.messages.count() > 0 &&\r\n                    (this.selectedMsgDetails === null || this.state.isOpeningResponse)))) {\r\n            var loadingTextKey = this.state.isOpeningResponse ? 'loadResponseInMessage' : 'loadingModules';\r\n            return (React.createElement(\"div\", { className: 'message-loader vertical-middle loading' },\r\n                React.createElement(\"span\", { className: 'loader middle-content' },\r\n                    React.createElement(\"span\", { className: 'dot' }),\r\n                    \" \",\r\n                    React.createElement(\"span\", { className: 'dot' }),\r\n                    \" \",\r\n                    React.createElement(\"span\", { className: 'dot' }),\r\n                    React.createElement(\"div\", { className: 'loading-text padding-top-30' }, localeStore.instance.TranslateText('generic.busy-indicator.' + loadingTextKey)))));\r\n        }\r\n    };\r\n    /**\r\n     * This method will call when composing new message while system is in online mode\r\n     */\r\n    MessageContainer.prototype.onNewMessageClicked = function () {\r\n        var _this = this;\r\n        if (!messageStore.instance.isMessagePanelActive) {\r\n            this.resetMessagePopup(enums.SaveAndNavigate.newMessageButtonClick);\r\n            this.isMessagePopupVisible = true;\r\n            if (this.selectedQigItemId && this.selectedQigItemId !== 0) {\r\n                var selectedQigItem = this.qigListItems.filter(function (x) { return x.id === _this.selectedQigItemId; });\r\n                if (selectedQigItem && selectedQigItem.length > 0) {\r\n                    var qigId = this.selectedQigItemId;\r\n                    var examinerRoleId = selectedQigItem[0].examinerRoleId;\r\n                    var args = {\r\n                        examinerRoleId: examinerRoleId,\r\n                        qigId: qigId\r\n                    };\r\n                    messagingActionCreator.getTeamDetails(args);\r\n                }\r\n            }\r\n            this.setState({ renderedOn: Date.now() });\r\n        }\r\n        else {\r\n            var responseNavigationFailureReasons = markingHelper.canNavigateAwayFromCurrentResponse();\r\n            popupHelper.navigateAwayFromResponse(responseNavigationFailureReasons, enums.SaveAndNavigate.newMessageButtonClick);\r\n        }\r\n    };\r\n    /**\r\n     * Get the Messages for the selected tab\r\n     */\r\n    MessageContainer.prototype.getMessagesForTheSelectedTab = function () {\r\n        var canRefresh = this.selectedTab === enums.MessageFolderType.Deleted ? messageStore.instance.isMessageDeleted() : false;\r\n        canRefresh = (this.selectedTab === enums.MessageFolderType.Inbox) || (this.selectedTab === enums.MessageFolderType.Sent) ?\r\n            messageStore.instance.isMessageDataRequireUpdation : canRefresh;\r\n        var args = {\r\n            recentMessageTime: null,\r\n            messageFolderType: this.selectedTab,\r\n            forceLoadMessages: (canRefresh\r\n                || messageStore.instance.isNewExaminerRoleCreated\r\n                || messageStore.instance.isUnreadMandatoryMessagePresent),\r\n            hiddenQigList: qigStore.instance.HiddenQIGs\r\n        };\r\n        messagingActionCreator.getMessages(args);\r\n    };\r\n    /**\r\n     *  Get the Messages for the selected tab\r\n     */\r\n    MessageContainer.prototype.getMessagesForInboxOnDeletion = function () {\r\n        var args = {\r\n            recentMessageTime: null,\r\n            messageFolderType: enums.MessageFolderType.Inbox,\r\n            forceLoadMessages: messageStore.instance.isMessageDataRequireUpdation,\r\n            hiddenQigList: qigStore.instance.HiddenQIGs\r\n        };\r\n        messagingActionCreator.getMessages(args);\r\n    };\r\n    /**\r\n     * Redirect to the start page if not authenticated\r\n     */\r\n    MessageContainer.prototype.componentWillMount = function () {\r\n        if (!loginSession.IS_AUTHENTICATED) {\r\n            navigationHelper.loadLoginPage();\r\n        }\r\n    };\r\n    /**\r\n     * Comparing the props to check the updats are made by self\r\n     * @param nextProps\r\n     */\r\n    MessageContainer.prototype.componentWillReceiveProps = function (nextProps) {\r\n        // If current online status if offline\r\n        // and application is getting online now, then if we have already a loading indicator\r\n        // visible before the application goes offline then remvoe the loading indicator.\r\n        if (!this.props.isOnline && nextProps.isOnline) {\r\n            this.isLoadingDataFailed = true;\r\n        }\r\n    };\r\n    /**\r\n     * Method to load dependencies\r\n     */\r\n    MessageContainer.prototype.dependenciesLoaded = function () {\r\n        this.setState({ scriptLoaded: true });\r\n    };\r\n    /**\r\n     * load the modules required for MessageContainer\r\n     */\r\n    MessageContainer.prototype.componentDidMount = function () {\r\n        if (this.state == null) {\r\n            return;\r\n        }\r\n        this.loadDependenciesAndEventListeners();\r\n    };\r\n    /**\r\n     * load the modules required for MessageContainer\r\n     */\r\n    MessageContainer.prototype.componentDidUpdate = function () {\r\n        // This will reset the failed data only in online to\r\n        // prevent loading indicator spinning inifinte time\r\n        if (this.props.isOnline) {\r\n            this.isLoadingDataFailed = false;\r\n        }\r\n    };\r\n    /**\r\n     * Component will unmount\r\n     */\r\n    MessageContainer.prototype.componentWillUnmount = function () {\r\n        if (this.state == null || !this.state.modulesLoaded) {\r\n            return;\r\n        }\r\n        this.removeEventListeners();\r\n        messageHelper.removeInitMouseClickEventScriptBlock();\r\n    };\r\n    /**\r\n     *  This will load the dependencies dynamically during component mount.\r\n     */\r\n    MessageContainer.prototype.loadDependenciesAndEventListeners = function () {\r\n        var _this = this;\r\n        var ensurePromise = __webpack_require__.e/* require.ensure */(11).then((function () {\r\n            navigationHelper = __webpack_require__(/*! ../utility/navigation/navigationhelper */ 248);\r\n            notificationCount = __webpack_require__(/*! ./notificationcount */ 465);\r\n            MessageLeftPanel = __webpack_require__(/*! ./messageleftpanel */ 549);\r\n            MessageRightPanel = __webpack_require__(/*! ./messagerightpanel */ 489);\r\n            MessageTabItem = __webpack_require__(/*! ./messagetabitem */ 550);\r\n            messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\n            ccStore = __webpack_require__(/*! ../../stores/configurablecharacteristics/configurablecharacteristicsstore */ 341);\r\n            localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\n            MessagePopup = __webpack_require__(/*! ./messagepopup */ 457);\r\n            messagingActionCreator = __webpack_require__(/*! ../../actions/messaging/messagingactioncreator */ 268);\r\n            GenericButton = __webpack_require__(/*! ../utility/genericbutton */ 290);\r\n            stringFormatHelper = __webpack_require__(/*! ../../utility/stringformat/stringformathelper */ 250);\r\n            messageHelper = __webpack_require__(/*! ../utility/message/messagehelper */ 283);\r\n            Header = __webpack_require__(/*! ../header */ 337);\r\n            popUpDisplayActionCreator = __webpack_require__(/*! ../../actions/popupdisplay/popupdisplayactioncreator */ 328);\r\n            popupHelper = __webpack_require__(/*! ../utility/popup/popuphelper */ 288);\r\n            markingHelper = __webpack_require__(/*! ../../utility/markscheme/markinghelper */ 267);\r\n            ConfirmationDialog = __webpack_require__(/*! ../utility/confirmationdialog */ 408);\r\n            responseSearchHelper = __webpack_require__(/*! ../../utility/responsesearch/responsesearchhelper */ 321);\r\n            responseStore = __webpack_require__(/*! ../../stores/response/responsestore */ 235);\r\n            responseActionCreator = __webpack_require__(/*! ../../actions/response/responseactioncreator */ 257);\r\n            messageTranslationHelper = __webpack_require__(/*! ../utility/message/messagetranslationhelper */ 459);\r\n            GenericDialog = __webpack_require__(/*! ../utility/genericdialog */ 317);\r\n            navigationStore = __webpack_require__(/*! ../../stores/navigation/navigationstore */ 275);\r\n            userInfoActionCreator = __webpack_require__(/*! ../../actions/userinfo/userinfoactioncreator */ 255);\r\n            qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\n            userInfoStore = __webpack_require__(/*! ../../stores/userinfo/userinfostore */ 244);\r\n            htmlUtilities = __webpack_require__(/*! ../../utility/generic/htmlutilities */ 243);\r\n            urls = __webpack_require__(/*! ../../dataservices/base/urls */ 266);\r\n            // Message container, leaves the operation mode. Reset the operations mode.\r\n            userInfoActionCreator.changeOperationMode(enums.MarkerOperationMode.Marking);\r\n            // Load the messages\r\n            this.getMessagesForTheSelectedTab();\r\n            // fill qig items\r\n            this.getQigItemsList();\r\n            // reset the selected item\r\n            this.getSelectedQigDetails();\r\n            this.loadTinyMCE();\r\n            messageHelper.addInitMouseClickEventScriptBlock();\r\n            this.addEventListeners();\r\n            this.setState({ modulesLoaded: true });\r\n            // hook all event listeners.\r\n        }.bind(this)).bind(null, __webpack_require__)).catch(__webpack_require__.oe);\r\n        ensurePromise.catch(function (e) {\r\n            _this.props.setOfflineContainer(true, true);\r\n        });\r\n    };\r\n    /**\r\n     * Load Tyny MCE\r\n     *\r\n     * @private\r\n     * @memberof MessageContainer\r\n     */\r\n    MessageContainer.prototype.loadTinyMCE = function () {\r\n        var url = htmlUtilities.getFullUrl(urls.TINYMCE_URL);\r\n        // If tinyMCE script is not loaded then load that\r\n        if (!htmlUtilities.isScriptLoaded(url)) {\r\n            var script = document.createElement('script');\r\n            script.src = url;\r\n            script.async = true;\r\n            script.onload = (this.dependenciesLoaded.bind(this));\r\n            document.body.appendChild(script);\r\n        }\r\n        else {\r\n            this.dependenciesLoaded();\r\n        }\r\n    };\r\n    /**\r\n     * Method to add event listeners\r\n     */\r\n    MessageContainer.prototype.addEventListeners = function () {\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_RECEIVED, this.onMessagesReceived);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_DETAILS_RECEIVED, this.onMessageDetailsReceived);\r\n        ccStore.instance.addListener(ccStore.ConfigurableCharacteristicsStore.EXAM_BODY_CC_GET, this.onReRender);\r\n        messageStore.instance.addListener(messageStore.MessageStore.UPDATE_NOTIFICATION_TRIGGERED_EVENT, this.onReRender);\r\n        messageStore.instance.addListener(messageStore.MessageStore.SEND_MESSAGE_SUCCESS_EVENT, this.onCloseMessagePopup);\r\n        messageStore.instance.addListener(messageStore.MessageStore.REFRESH_MESSAGE_TAB, this.onRefreshMessageTab);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_DELETE_EVENT, this.updateMessageDeletedStatus);\r\n        responseStore.instance.addListener(responseStore.ResponseStore.RESPONSE_OPENED, this.navigateToResponsePage);\r\n        responseSearchHelper.addResponseSearchEvents();\r\n        messageStore.instance.addListener(messageStore.MessageStore.UPDATE_NOTIFICATION_TRIGGERED_EVENT, this.updateNotification);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_NAVIGATION_EVENT, this.openSearchedResponse);\r\n        messageStore.instance.addListener(messageStore.MessageStore.RESPONSE_DATA_RECEIVED_EVENT, this.initiateSerachResponse);\r\n        userInfoStore.instance.addListener(userInfoStore.UserInfoStore.SHOW_LOGOUT_POPUP_EVENT, this.logoutConfirmation);\r\n        navigationStore.instance.addListener(navigationStore.NavigationStore.MENU_VISIBILITY_EVENT, this.onMenuOpen);\r\n        messageStore.instance.addListener(messageStore.MessageStore.RESPONSE_DATA_RECEIVED_FAILED_EVENT, this.onResponseDataReceivedFailed);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_DETAILS_RECEIVED_FAILED, this.onMessageDetailsReceivedFailed);\r\n        applicationStore.instance.addListener(applicationStore.ApplicationStore.ONLINE_STATUS_UPDATED_EVENT, this.onOnlineStatusUpdated);\r\n    };\r\n    /**\r\n     * Method to remove event listeners\r\n     */\r\n    MessageContainer.prototype.removeEventListeners = function () {\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_RECEIVED, this.onMessagesReceived);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_DETAILS_RECEIVED, this.onMessageDetailsReceived);\r\n        ccStore.instance.removeListener(ccStore.ConfigurableCharacteristicsStore.EXAM_BODY_CC_GET, this.onReRender);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.UPDATE_NOTIFICATION_TRIGGERED_EVENT, this.onReRender);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.SEND_MESSAGE_SUCCESS_EVENT, this.onCloseMessagePopup);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.REFRESH_MESSAGE_TAB, this.onRefreshMessageTab);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_DELETE_EVENT, this.updateMessageDeletedStatus);\r\n        responseStore.instance.removeListener(responseStore.ResponseStore.RESPONSE_OPENED, this.navigateToResponsePage);\r\n        responseSearchHelper.removeResponseSearchEvents();\r\n        messageStore.instance.removeListener(messageStore.MessageStore.UPDATE_NOTIFICATION_TRIGGERED_EVENT, this.updateNotification);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_NAVIGATION_EVENT, this.openSearchedResponse);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.RESPONSE_DATA_RECEIVED_EVENT, this.initiateSerachResponse);\r\n        userInfoStore.instance.removeListener(userInfoStore.UserInfoStore.SHOW_LOGOUT_POPUP_EVENT, this.logoutConfirmation);\r\n        navigationStore.instance.removeListener(navigationStore.NavigationStore.MENU_VISIBILITY_EVENT, this.onMenuOpen);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.RESPONSE_DATA_RECEIVED_FAILED_EVENT, this.onResponseDataReceivedFailed);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_DETAILS_RECEIVED_FAILED, this.onMessageDetailsReceivedFailed);\r\n        applicationStore.instance.removeListener(applicationStore.ApplicationStore.ONLINE_STATUS_UPDATED_EVENT, this.onOnlineStatusUpdated);\r\n    };\r\n    /**\r\n     * Method to redirect to worklist page on clicking button\r\n     */\r\n    MessageContainer.prototype.renderWorkListPage = function () {\r\n        navigationHelper.navigateToWorklist();\r\n    };\r\n    /**\r\n     * this will shows the confirmation popup on logout based on the ask on logout value.\r\n     */\r\n    MessageContainer.prototype.showLogoutConfirmation = function (logout) {\r\n        this.setState({ isLogoutConfirmationPopupDisplaying: logout });\r\n    };\r\n    /**\r\n     * Update the Read Status to database\r\n     * @param message : message to update the read status\r\n     */\r\n    MessageContainer.prototype.updateReadStatus = function (message) {\r\n        // If the message is currently in un read status and also make sure it is not made as read already\r\n        if (message &&\r\n            (message.status === enums.MessageReadStatus.New\r\n                && !messageStore.instance.isMessageRead(message.examinerMessageId))) {\r\n            var examinerList = [];\r\n            examinerList[0] = 0;\r\n            var args = {\r\n                messageId: message.examinerMessageId,\r\n                messageDistributionIds: message.messageDistributionIds,\r\n                examinerMessageStatusId: enums.MessageReadStatus.Read\r\n            };\r\n            // action for updating read status for the newly selected response.\r\n            messagingActionCreator.updateMessageStatus(args);\r\n        }\r\n    };\r\n    /**\r\n     * This will returns the formatted the examiner name\r\n     */\r\n    MessageContainer.prototype.formattedExaminerName = function (parentInitials, parentSurname) {\r\n        var formattedString = stringFormatHelper.getUserNameFormat().toLowerCase();\r\n        formattedString = formattedString.replace('{initials}', parentInitials);\r\n        formattedString = formattedString.replace('{surname}', parentSurname);\r\n        return formattedString;\r\n    };\r\n    /**\r\n     * invoke when select reply/forward message action\r\n     * @param messageMenuActionType\r\n     */\r\n    MessageContainer.prototype.setvariablesforReplyForward = function (messageMenuActionType) {\r\n        // check online status before proceed\r\n        switch (messageMenuActionType) {\r\n            case enums.MessageAction.Forward:\r\n                this.checkOnlineStatusAndDoMessageAction(enums.MessageType.InboxForward);\r\n                break;\r\n            case enums.MessageAction.Reply:\r\n                this.checkOnlineStatusAndDoMessageAction(enums.MessageType.InboxReply);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Delete the selected message - updating database\r\n     */\r\n    MessageContainer.prototype.deleteMessage = function () {\r\n        if (this.selectedMsg) {\r\n            var examinerList = [];\r\n            examinerList[0] = 0;\r\n            var args = {\r\n                messageId: this.selectedMsg.examinerMessageId,\r\n                messageDistributionIds: this.selectedMsg.messageDistributionIds,\r\n                examinerMessageStatusId: enums.MessageReadStatus.Closed\r\n            };\r\n            // action for updating read status for the newly selected response.\r\n            messagingActionCreator.updateMessageStatus(args);\r\n        }\r\n    };\r\n    /**\r\n     * returns whether the forward button is hidden or not\r\n     * @param markSchemeGroupId\r\n     */\r\n    MessageContainer.prototype.isForwardButtonHidden = function (markSchemeGroupId) {\r\n        var item = this.qigListItems.filter(function (x) { return x.id === markSchemeGroupId; })[0];\r\n        if (item === undefined) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    Object.defineProperty(MessageContainer.prototype, \"expandOrCollapseDetails\", {\r\n        /**\r\n         * Returns expand or collapse object based on selected tab\r\n         */\r\n        get: function () {\r\n            switch (this.selectedTab) {\r\n                case enums.MessageFolderType.Sent:\r\n                    if (!this.sentTabExpandOrCollapseDetails) {\r\n                        this.sentTabExpandOrCollapseDetails = immutable.Map();\r\n                    }\r\n                    return this.sentTabExpandOrCollapseDetails;\r\n                case enums.MessageFolderType.Deleted:\r\n                    if (!this.deletedTabExpandOrCollapseDetails) {\r\n                        this.deletedTabExpandOrCollapseDetails = immutable.Map();\r\n                    }\r\n                    return this.deletedTabExpandOrCollapseDetails;\r\n                default:\r\n                    if (!this.inboxTabExpandOrCollapseDetails) {\r\n                        this.inboxTabExpandOrCollapseDetails = immutable.Map();\r\n                    }\r\n                    return this.inboxTabExpandOrCollapseDetails;\r\n            }\r\n        },\r\n        /**\r\n         * set expand or collapse object based on selected tab\r\n         */\r\n        set: function (expandOrCollapseDetails) {\r\n            if (expandOrCollapseDetails === undefined) {\r\n                this.sentTabExpandOrCollapseDetails = undefined;\r\n                this.deletedTabExpandOrCollapseDetails = undefined;\r\n                this.inboxTabExpandOrCollapseDetails = undefined;\r\n            }\r\n            switch (this.selectedTab) {\r\n                case enums.MessageFolderType.Sent:\r\n                    this.sentTabExpandOrCollapseDetails = expandOrCollapseDetails;\r\n                    break;\r\n                case enums.MessageFolderType.Deleted:\r\n                    this.deletedTabExpandOrCollapseDetails = expandOrCollapseDetails;\r\n                    break;\r\n                default:\r\n                    this.inboxTabExpandOrCollapseDetails = expandOrCollapseDetails;\r\n                    break;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MessageContainer.prototype, \"filteredMessages\", {\r\n        /**\r\n         * Returns the filtered set of messages if filter is applicable\r\n         */\r\n        get: function () {\r\n            var _this = this;\r\n            var filteredMessages = messageStore.instance.messages;\r\n            if (this.searchData.searchText !== '' && this.searchData.isVisible) {\r\n                filteredMessages = immutable.List(filteredMessages.filter(function (message) {\r\n                    return messageTranslationHelper.getExaminerName(message).toLowerCase().indexOf(_this.searchData.searchText.toLowerCase()) !== -1;\r\n                }));\r\n            }\r\n            return filteredMessages;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MessageContainer.prototype, \"forceDisableLoading\", {\r\n        // Disable loading indicator when application goes offline/\r\n        // if it failed to retrienve data.\r\n        get: function () {\r\n            return this.isLoadingDataFailed || !this.props.isOnline;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * check online status\r\n     * @param messageType\r\n     */\r\n    MessageContainer.prototype.checkOnlineStatusAndDoMessageAction = function (messageType) {\r\n        /* Will request tinymce font when open a compose message panel first time\r\n        (ie, when render message popup component first time). If open the compose message panel in offline mode,\r\n        then the font request will get failed and thus the font family buttons are not visible.\r\n        Since this request is happens only once, the font family buttons are not visible during that session.\r\n        So we first do a ping and check the network status and if the system is in online,\r\n        then proceed the message action (compose/reply/forward). If the system is in offline mode,\r\n        then shows offline popup and don’t proceed the message action.*/\r\n        if (applicationStore.instance.isOnline) {\r\n            // ping and check online status if system is in online mode\r\n            this.messageType = messageType;\r\n            applicationActionCreator.validateNetWorkStatus(true);\r\n        }\r\n        else {\r\n            // if in offline mode, then show offline popup\r\n            applicationActionCreator.checkActionInterrupted();\r\n        }\r\n    };\r\n    return MessageContainer;\r\n}(pureRenderComponent));\r\nmodule.exports = MessageContainer;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ })

});