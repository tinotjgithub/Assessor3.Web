"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/* tslint:disable:no-unused-variable */
var React = require('react');
var enums = require('../../../utility/enums');
var Highlighter = require('./highlighter');
var pureRenderComponent = require('../../../base/purerendercomponent');
var HorizontalLine = require('./horizontalline');
var Ellipse = require('./ellipse');
var HWavyLine = require('./hwavyline');
var VWavyLine = require('./vwavyline');
/**
 * React component class for Dynamic Stamp.
 */
var DynamicStampFactory = (function (_super) {
    __extends(DynamicStampFactory, _super);
    /**
     * @constructor
     */
    function DynamicStampFactory(props, state) {
        _super.call(this, props, state);
    }
    /**
     * Render method
     */
    DynamicStampFactory.prototype.render = function () {
        switch (this.props.annotationData.stamp) {
            case enums.DynamicAnnotation.Highlighter:
                return (React.createElement(Highlighter, {id: 'highlighter_' + this.props.annotationData.clientToken, key: 'highlighter_' + this.props.annotationData.clientToken, toolTip: this.props.toolTip, annotationData: this.props.annotationData, stampData: this.props.stampData, imageWidth: this.props.imageWidth, imageHeight: this.props.imageHeight, isActive: this.props.isActive, isFade: this.props.isFade, clientToken: this.props.clientToken, imageZones: this.props.imageZones == null ? [] : this.props.imageZones, getAnnotationOverlayElement: this.props.getAnnotationOverlayElement, getMarkSheetContainerProperties: this.props.getMarkSheetContainerProperties, getImageContainerRect: this.props.getImageContainerRect ? this.props.getImageContainerRect : null, isDrawMode: this.props.isDrawMode, setCurrentAnnotationElement: this.props.setCurrentAnnotationElement, imageClusterId: this.props.imageClusterId, outputPageNo: this.props.outputPageNo, pageNo: this.props.pageNo, setDynamicAnnotationisMoving: this.props.setDynamicAnnotationisMoving, setDynamicAnnotationBorder: this.props.setDynamicAnnotationBorder, displayAngle: this.props.displayAngle, drawDirection: this.props.drawDirection, isDrawEnd: this.props.isDrawEnd, isStamping: this.props.isStamping, isVisible: this.props.isVisible, isResponseEditable: this.props.isResponseEditable, enableAnnotationOverlayPan: this.props.enableAnnotationOverlayPan, enableImageContainerScroll: this.props.enableImageContainerScroll, isInFullResponseView: this.props.isInFullResponseView, overlayBoundary: this.props.overlayBoundary, doEnableClickHandler: this.props.doEnableClickHandler, zoneHeight: this.props.zoneHeight, zoneTop: this.props.zoneTop, zoneLeft: this.props.zoneLeft, topAboveCurrentZone: this.props.topAboveCurrentZone, doApplyLinkingScenarios: this.props.doApplyLinkingScenarios, isInLinkedPage: this.props.isInLinkedPage, imageZone: this.props.imageZone, currentImagePageNo: this.props.currentImagePageNo, pagesLinkedByPreviousMarkers: this.props.pagesLinkedByPreviousMarkers, isAnnotationAdded: this.props.isAnnotationAdded, isEBookMarking: this.props.isEBookMarking}));
            case enums.DynamicAnnotation.HorizontalLine:
                return (React.createElement(HorizontalLine, {id: 'hl_' + this.props.annotationData.clientToken, key: 'hl_' + this.props.annotationData.annotationId, toolTip: this.props.toolTip, annotationData: this.props.annotationData, stampData: this.props.stampData, imageWidth: this.props.imageWidth, imageHeight: this.props.imageHeight, isActive: this.props.isActive, isFade: this.props.isFade, clientToken: this.props.clientToken, imageZones: this.props.imageZones == null ? [] : this.props.imageZones, getAnnotationOverlayElement: this.props.getAnnotationOverlayElement, getMarkSheetContainerProperties: this.props.getMarkSheetContainerProperties, getImageContainerRect: this.props.getImageContainerRect ? this.props.getImageContainerRect : null, isDrawMode: this.props.isDrawMode, setCurrentAnnotationElement: this.props.setCurrentAnnotationElement, imageClusterId: this.props.imageClusterId, outputPageNo: this.props.outputPageNo, pageNo: this.props.pageNo, setDynamicAnnotationisMoving: this.props.setDynamicAnnotationisMoving, setDynamicAnnotationBorder: this.props.setDynamicAnnotationBorder, displayAngle: this.props.displayAngle, drawDirection: this.props.drawDirection, isDrawEnd: this.props.isDrawEnd, isStamping: this.props.isStamping, isVisible: this.props.isVisible, isResponseEditable: this.props.isResponseEditable, enableAnnotationOverlayPan: this.props.enableAnnotationOverlayPan, enableImageContainerScroll: this.props.enableImageContainerScroll, overlayBoundary: this.props.overlayBoundary, doEnableClickHandler: this.props.doEnableClickHandler, zoneHeight: this.props.zoneHeight, zoneTop: this.props.zoneTop, zoneLeft: this.props.zoneLeft, topAboveCurrentZone: this.props.topAboveCurrentZone, doApplyLinkingScenarios: this.props.doApplyLinkingScenarios, isInLinkedPage: this.props.isInLinkedPage, imageZone: this.props.imageZone, currentImagePageNo: this.props.currentImagePageNo, isInFullResponseView: this.props.isInFullResponseView, pagesLinkedByPreviousMarkers: this.props.pagesLinkedByPreviousMarkers, isAnnotationAdded: this.props.isAnnotationAdded, isEBookMarking: this.props.isEBookMarking}));
            case enums.DynamicAnnotation.Ellipse:
                return (React.createElement(Ellipse, {id: 'ellipse_' + this.props.annotationData.clientToken, key: 'ellipse__' + this.props.annotationData.annotationId, toolTip: this.props.toolTip, annotationData: this.props.annotationData, stampData: this.props.stampData, imageWidth: this.props.imageWidth, imageHeight: this.props.imageHeight, isActive: this.props.isActive, isFade: this.props.isFade, clientToken: this.props.clientToken, imageZones: this.props.imageZones == null ? [] : this.props.imageZones, getAnnotationOverlayElement: this.props.getAnnotationOverlayElement, getMarkSheetContainerProperties: this.props.getMarkSheetContainerProperties, getImageContainerRect: this.props.getImageContainerRect ? this.props.getImageContainerRect : null, isDrawMode: this.props.isDrawMode, setCurrentAnnotationElement: this.props.setCurrentAnnotationElement, imageClusterId: this.props.imageClusterId, outputPageNo: this.props.outputPageNo, pageNo: this.props.pageNo, setDynamicAnnotationisMoving: this.props.setDynamicAnnotationisMoving, setDynamicAnnotationBorder: this.props.setDynamicAnnotationBorder, displayAngle: this.props.displayAngle, drawDirection: this.props.drawDirection, isDrawEnd: this.props.isDrawEnd, isStamping: this.props.isStamping, isVisible: this.props.isVisible, isResponseEditable: this.props.isResponseEditable, enableAnnotationOverlayPan: this.props.enableAnnotationOverlayPan, enableImageContainerScroll: this.props.enableImageContainerScroll, isInFullResponseView: this.props.isInFullResponseView, overlayBoundary: this.props.overlayBoundary, doEnableClickHandler: this.props.doEnableClickHandler, zoneHeight: this.props.zoneHeight, zoneTop: this.props.zoneTop, zoneLeft: this.props.zoneLeft, topAboveCurrentZone: this.props.topAboveCurrentZone, doApplyLinkingScenarios: this.props.doApplyLinkingScenarios, isInLinkedPage: this.props.isInLinkedPage, imageZone: this.props.imageZone, currentImagePageNo: this.props.currentImagePageNo, pagesLinkedByPreviousMarkers: this.props.pagesLinkedByPreviousMarkers, isAnnotationAdded: this.props.isAnnotationAdded, isEBookMarking: this.props.isEBookMarking}));
            case enums.DynamicAnnotation.HWavyLine:
                return (React.createElement(HWavyLine, {id: 'hwavy_' + this.props.annotationData.clientToken, key: 'hwavy_' + this.props.annotationData.annotationId, toolTip: this.props.toolTip, annotationData: this.props.annotationData, stampData: this.props.stampData, imageWidth: this.props.imageWidth, imageHeight: this.props.imageHeight, isActive: this.props.isActive, isFade: this.props.isFade, clientToken: this.props.clientToken, imageZones: this.props.imageZones == null ? [] : this.props.imageZones, getAnnotationOverlayElement: this.props.getAnnotationOverlayElement, getMarkSheetContainerProperties: this.props.getMarkSheetContainerProperties, getImageContainerRect: this.props.getImageContainerRect ? this.props.getImageContainerRect : null, isDrawMode: this.props.isDrawMode, setCurrentAnnotationElement: this.props.setCurrentAnnotationElement, imageClusterId: this.props.imageClusterId, outputPageNo: this.props.outputPageNo, pageNo: this.props.pageNo, setDynamicAnnotationisMoving: this.props.setDynamicAnnotationisMoving, setDynamicAnnotationBorder: this.props.setDynamicAnnotationBorder, displayAngle: this.props.displayAngle, drawDirection: this.props.drawDirection, isDrawEnd: this.props.isDrawEnd, isStamping: this.props.isStamping, isVisible: this.props.isVisible, isResponseEditable: this.props.isResponseEditable, enableAnnotationOverlayPan: this.props.enableAnnotationOverlayPan, enableImageContainerScroll: this.props.enableImageContainerScroll, overlayBoundary: this.props.overlayBoundary, doEnableClickHandler: this.props.doEnableClickHandler, zoneHeight: this.props.zoneHeight, zoneTop: this.props.zoneTop, zoneLeft: this.props.zoneLeft, topAboveCurrentZone: this.props.topAboveCurrentZone, doApplyLinkingScenarios: this.props.doApplyLinkingScenarios, isInLinkedPage: this.props.isInLinkedPage, imageZone: this.props.imageZone, currentImagePageNo: this.props.currentImagePageNo, isInFullResponseView: this.props.isInFullResponseView, pagesLinkedByPreviousMarkers: this.props.pagesLinkedByPreviousMarkers, isAnnotationAdded: this.props.isAnnotationAdded, isEBookMarking: this.props.isEBookMarking}));
            case enums.DynamicAnnotation.VWavyLine:
                return (React.createElement(VWavyLine, {id: 'vwavy_' + this.props.annotationData.clientToken, key: 'vwavy_' + this.props.annotationData.annotationId, toolTip: this.props.toolTip, annotationData: this.props.annotationData, stampData: this.props.stampData, imageWidth: this.props.imageWidth, imageHeight: this.props.imageHeight, isActive: this.props.isActive, isFade: this.props.isFade, clientToken: this.props.clientToken, imageZones: this.props.imageZones == null ? [] : this.props.imageZones, getAnnotationOverlayElement: this.props.getAnnotationOverlayElement, getMarkSheetContainerProperties: this.props.getMarkSheetContainerProperties, getImageContainerRect: this.props.getImageContainerRect ? this.props.getImageContainerRect : null, isDrawMode: this.props.isDrawMode, setCurrentAnnotationElement: this.props.setCurrentAnnotationElement, imageClusterId: this.props.imageClusterId, outputPageNo: this.props.outputPageNo, pageNo: this.props.pageNo, setDynamicAnnotationisMoving: this.props.setDynamicAnnotationisMoving, setDynamicAnnotationBorder: this.props.setDynamicAnnotationBorder, displayAngle: this.props.displayAngle, drawDirection: this.props.drawDirection, isDrawEnd: this.props.isDrawEnd, isStamping: this.props.isStamping, isVisible: this.props.isVisible, isResponseEditable: this.props.isResponseEditable, enableAnnotationOverlayPan: this.props.enableAnnotationOverlayPan, enableImageContainerScroll: this.props.enableImageContainerScroll, isInFullResponseView: this.props.isInFullResponseView, overlayBoundary: this.props.overlayBoundary, doEnableClickHandler: this.props.doEnableClickHandler, zoneHeight: this.props.zoneHeight, zoneTop: this.props.zoneTop, zoneLeft: this.props.zoneLeft, topAboveCurrentZone: this.props.topAboveCurrentZone, doApplyLinkingScenarios: this.props.doApplyLinkingScenarios, isInLinkedPage: this.props.isInLinkedPage, imageZone: this.props.imageZone, currentImagePageNo: this.props.currentImagePageNo, pagesLinkedByPreviousMarkers: this.props.pagesLinkedByPreviousMarkers, isAnnotationAdded: this.props.isAnnotationAdded, isEBookMarking: this.props.isEBookMarking}));
            default:
                return (null);
        }
    };
    return DynamicStampFactory;
}(pureRenderComponent));
module.exports = DynamicStampFactory;
//# sourceMappingURL=dynamicstampfactory.js.map