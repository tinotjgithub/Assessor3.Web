webpackJsonp([3],{

/***/ 1042:
/* no static exports found */
/* all exports used */
/*!*****************************************************************************!*\
  !*** ./src/components/markschemestructure/supervisorremarkdecisionicon.tsx ***!
  \*****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\n/**\r\n * Supervisor remark decision icon in worklist.\r\n * @param props\r\n */\r\nvar supervisorremarkdecisionicon = function (props) {\r\n    return (React.createElement(\"div\", { className: classNames('col wl-eur-reason-holder', { 'text-left': props.isTileView }) },\r\n        React.createElement(\"div\", { className: 'col-inner' },\r\n            React.createElement(\"a\", { className: 'resp-alerts', title: localeStore.instance.TranslateText('marking.worklist.response-data.supervisor-remark-decision-not-specified-icon-tooltip') },\r\n                React.createElement(\"span\", { className: 'sprite-icon edit-box-yellow-icon', id: props.id })))));\r\n};\r\nmodule.exports = supervisorremarkdecisionicon;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA0Mi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL21hcmtzY2hlbWVzdHJ1Y3R1cmUvc3VwZXJ2aXNvcnJlbWFya2RlY2lzaW9uaWNvbi50c3g/ZGU0YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9lbnVtcycpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmxldCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xyXG5cclxuLyoqXHJcbiAqIFByb3BlcnRpZXMgb2YgU3VwZXJ2aXNvciByZW1hcmsgZGVjaXNpb24gaWNvblxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIGlzVGlsZVZpZXc6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdXBlcnZpc29yIHJlbWFyayBkZWNpc2lvbiBpY29uIGluIHdvcmtsaXN0LlxyXG4gKiBAcGFyYW0gcHJvcHNcclxuICovXHJcbmNvbnN0IHN1cGVydmlzb3JyZW1hcmtkZWNpc2lvbmljb246IFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDxQcm9wcz4gPSAocHJvcHM6IFByb3BzKSA9PiB7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17IGNsYXNzTmFtZXMoJ2NvbCB3bC1ldXItcmVhc29uLWhvbGRlcicsIHsgJ3RleHQtbGVmdCc6IHByb3BzLmlzVGlsZVZpZXcgfSkgfT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9eydjb2wtaW5uZXInfT5cclxuICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT17J3Jlc3AtYWxlcnRzJ30gdGl0bGU9e2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHRcclxuICAgICAgICAgICAgICAgICAgICAoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5zdXBlcnZpc29yLXJlbWFyay1kZWNpc2lvbi1ub3Qtc3BlY2lmaWVkLWljb24tdG9vbHRpcCcpfT5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9eydzcHJpdGUtaWNvbiBlZGl0LWJveC15ZWxsb3ctaWNvbid9ICBpZD17cHJvcHMuaWR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCA9IHN1cGVydmlzb3JyZW1hcmtkZWNpc2lvbmljb247XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9tYXJrc2NoZW1lc3RydWN0dXJlL3N1cGVydmlzb3JyZW1hcmtkZWNpc2lvbmljb24udHN4Il0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFTQTs7O0FBR0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBTUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 1177:
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/components/utility/grid/gridcontrol.tsx ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/// <reference path='typings/row.ts' />\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\nvar qualityFeedbackHelper = __webpack_require__(/*! ../../../utility/qualityfeedback/qualityfeedbackhelper */ 309);\r\nvar QualityFeedbackBanner = __webpack_require__(/*! ../../worklist/banner/qualityfeedbackbanner */ 585);\r\n/**\r\n * Represents the GridControl Component\r\n */\r\nvar GridControl = /** @class */ (function (_super) {\r\n    __extends(GridControl, _super);\r\n    /**\r\n     * Constructor GridControl\r\n     * @param properties\r\n     * @param state\r\n     */\r\n    function GridControl(properties, state) {\r\n        var _this = _super.call(this, properties, state) || this;\r\n        /**\r\n         * This method will call callback function\r\n         */\r\n        _this.handleClick = function (rowId) {\r\n            this.props.onClickCallBack(rowId);\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render method for GridControl.\r\n     */\r\n    GridControl.prototype.render = function () {\r\n        var that = this;\r\n        var seqIndex;\r\n        var seq;\r\n        var index = -1; // Set to -1 because we need to show banner only at 0 index and increment before return li statement\r\n        var isQualityFeedbackMessageToBeDisplayed = qualityFeedbackHelper.isQualtiyHelperMessageNeededToBeDisplayed(this.props.worklistType);\r\n        if (this.props.gridRows != null) {\r\n            var gridSeq_1 = this.props.gridRows.keySeq();\r\n            seqIndex = 0;\r\n            //Creating grid rows\r\n            var gridRowElements = this.props.gridRows.map(function (gridRow) {\r\n                //Creating grid rows elements\r\n                var gridRowElement = gridRow.getCells().map(function (gridCell) {\r\n                    var gridCellElement = gridCell.columnElement;\r\n                    return (gridCellElement);\r\n                });\r\n                index++;\r\n                return (React.createElement(\"li\", { onClick: that.handleClick.bind(that, gridRow.getRowId()), key: 'gridcomponent_' + gridSeq_1.get(seqIndex++), className: classNames((_a = {},\r\n                        _a[gridRow.getRowStyle()] = true,\r\n                        _a)), title: gridRow.getRowTitle() },\r\n                    gridRowElement,\r\n                    that.renderQualityFeedbackBanner(index, isQualityFeedbackMessageToBeDisplayed)));\r\n                var _a;\r\n            });\r\n            index = -1;\r\n            return (React.createElement(\"div\", { className: classNames('grid-wrapper', { 'show-seed-message': isQualityFeedbackMessageToBeDisplayed }) },\r\n                React.createElement(\"ul\", { id: this.props.id, key: 'key_' + this.props.id, className: this.props.gridStyle }, gridRowElements)));\r\n        }\r\n        else {\r\n            return (React.createElement(\"div\", { className: 'grid-wrapper' }));\r\n        }\r\n    };\r\n    /**\r\n     * Render quality feedback banner\r\n     * @param {number} index\r\n     * @param {boolean} isQualityFeedbackMessageToBeDisplayed\r\n     * @returns\r\n     */\r\n    GridControl.prototype.renderQualityFeedbackBanner = function (index, isQualityFeedbackMessageToBeDisplayed) {\r\n        if (index === 0 && isQualityFeedbackMessageToBeDisplayed) {\r\n            return (React.createElement(QualityFeedbackBanner, { id: 'quality-feedback-banner', key: 'quality-feedback-banner', isAriaHidden: false, selectedLanguage: this.props.selectedLanguage, header: '', message: qualityFeedbackHelper.getQualityFeedbackStatusMessage(), role: '', bannerType: enums.BannerType.QualityFeedbackBanner }));\r\n        }\r\n    };\r\n    return GridControl;\r\n}(pureRenderComponent));\r\nmodule.exports = GridControl;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3Ny5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ3JpZC9ncmlkY29udHJvbC50c3g/MGVkZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPSd0eXBpbmdzL3Jvdy50cycgLz5cclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbi8qIHRzbGludDplbmFibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmxldCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi9lbnVtcycpO1xyXG5pbXBvcnQgcXVhbGl0eUZlZWRiYWNrSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9xdWFsaXR5ZmVlZGJhY2svcXVhbGl0eWZlZWRiYWNraGVscGVyJyk7XHJcbmltcG9ydCBRdWFsaXR5RmVlZGJhY2tCYW5uZXIgPSByZXF1aXJlKCcuLi8uLi93b3JrbGlzdC9iYW5uZXIvcXVhbGl0eWZlZWRiYWNrYmFubmVyJyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBHcmlkQ29udHJvbCBjb21wb25lbnRcclxuICovXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcbiAgICBncmlkUm93czogSW1tdXRhYmxlLkxpc3Q8Um93PjtcclxuICAgIGdyaWRTdHlsZTogc3RyaW5nO1xyXG4gICAgb25DbGlja0NhbGxCYWNrOiBGdW5jdGlvbjtcclxuICAgIHdvcmtsaXN0VHlwZTogZW51bXMuV29ya2xpc3RUeXBlO1xyXG59XHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyB0aGUgR3JpZENvbnRyb2wgQ29tcG9uZW50XHJcbiAqL1xyXG5jbGFzcyBHcmlkQ29udHJvbCBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3IgR3JpZENvbnRyb2xcclxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcGVydGllczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wZXJ0aWVzLCBzdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgbWV0aG9kIGZvciBHcmlkQ29udHJvbC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgbGV0IHNlcUluZGV4OiBudW1iZXI7XHJcbiAgICAgICAgbGV0IHNlcTogc3RyaW5nO1xyXG4gICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gLTE7IC8vIFNldCB0byAtMSBiZWNhdXNlIHdlIG5lZWQgdG8gc2hvdyBiYW5uZXIgb25seSBhdCAwIGluZGV4IGFuZCBpbmNyZW1lbnQgYmVmb3JlIHJldHVybiBsaSBzdGF0ZW1lbnRcclxuICAgICAgICBsZXQgaXNRdWFsaXR5RmVlZGJhY2tNZXNzYWdlVG9CZURpc3BsYXllZDogYm9vbGVhbiA9XHJcbiAgICAgICAgICAgIHF1YWxpdHlGZWVkYmFja0hlbHBlci5pc1F1YWx0aXlIZWxwZXJNZXNzYWdlTmVlZGVkVG9CZURpc3BsYXllZCh0aGlzLnByb3BzLndvcmtsaXN0VHlwZSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmdyaWRSb3dzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IGdyaWRTZXEgPSB0aGlzLnByb3BzLmdyaWRSb3dzLmtleVNlcSgpO1xyXG4gICAgICAgICAgICBzZXFJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIC8vQ3JlYXRpbmcgZ3JpZCByb3dzXHJcbiAgICAgICAgICAgIGxldCBncmlkUm93RWxlbWVudHMgPSB0aGlzLnByb3BzLmdyaWRSb3dzLm1hcChmdW5jdGlvbiAoZ3JpZFJvdzogUm93KSB7XHJcbiAgICAgICAgICAgICAgICAvL0NyZWF0aW5nIGdyaWQgcm93cyBlbGVtZW50c1xyXG4gICAgICAgICAgICAgICAgbGV0IGdyaWRSb3dFbGVtZW50ID0gZ3JpZFJvdy5nZXRDZWxscygpLm1hcChmdW5jdGlvbiAoZ3JpZENlbGw6IENlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZ3JpZENlbGxFbGVtZW50ID0gZ3JpZENlbGwuY29sdW1uRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkQ2VsbEVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaW5kZXgrKztcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBvbkNsaWNrPXt0aGF0LmhhbmRsZUNsaWNrLmJpbmQodGhhdCwgZ3JpZFJvdy5nZXRSb3dJZCgpKSB9IGtleSA9IHsnZ3JpZGNvbXBvbmVudF8nICsgZ3JpZFNlcS5nZXQoc2VxSW5kZXgrKykgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSB7Y2xhc3NOYW1lcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZ3JpZFJvdy5nZXRSb3dTdHlsZSgpXTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2dyaWRSb3cuZ2V0Um93VGl0bGUoKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2dyaWRSb3dFbGVtZW50fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7dGhhdC5yZW5kZXJRdWFsaXR5RmVlZGJhY2tCYW5uZXIoaW5kZXgsIGlzUXVhbGl0eUZlZWRiYWNrTWVzc2FnZVRvQmVEaXNwbGF5ZWQpfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBpbmRleCA9IC0xO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lID0geyBjbGFzc05hbWVzKCdncmlkLXdyYXBwZXInLCB7ICdzaG93LXNlZWQtbWVzc2FnZSc6IGlzUXVhbGl0eUZlZWRiYWNrTWVzc2FnZVRvQmVEaXNwbGF5ZWQgfSkgfT5cclxuICAgICAgICAgICAgICAgICAgICA8dWwgaWQ9IHt0aGlzLnByb3BzLmlkfSBrZXk9IHsna2V5XycgKyB0aGlzLnByb3BzLmlkfSBjbGFzc05hbWU9e3RoaXMucHJvcHMuZ3JpZFN0eWxlfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2dyaWRSb3dFbGVtZW50c31cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lID0gJ2dyaWQtd3JhcHBlcic+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIGNhbGwgY2FsbGJhY2sgZnVuY3Rpb25cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVDbGljayA9IGZ1bmN0aW9uIChyb3dJZDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrQ2FsbEJhY2socm93SWQpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBxdWFsaXR5IGZlZWRiYWNrIGJhbm5lclxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzUXVhbGl0eUZlZWRiYWNrTWVzc2FnZVRvQmVEaXNwbGF5ZWRcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVuZGVyUXVhbGl0eUZlZWRiYWNrQmFubmVyKGluZGV4OiBudW1iZXIsIGlzUXVhbGl0eUZlZWRiYWNrTWVzc2FnZVRvQmVEaXNwbGF5ZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgaXNRdWFsaXR5RmVlZGJhY2tNZXNzYWdlVG9CZURpc3BsYXllZCkge1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICg8UXVhbGl0eUZlZWRiYWNrQmFubmVyXHJcbiAgICAgICAgICAgICAgICBpZCA9ICdxdWFsaXR5LWZlZWRiYWNrLWJhbm5lcidcclxuICAgICAgICAgICAgICAgIGtleSA9ICdxdWFsaXR5LWZlZWRiYWNrLWJhbm5lcidcclxuICAgICAgICAgICAgICAgIGlzQXJpYUhpZGRlbiA9IHsgZmFsc2V9XHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZExhbmd1YWdlID0geyB0aGlzLnByb3BzLnNlbGVjdGVkTGFuZ3VhZ2UgfVxyXG4gICAgICAgICAgICAgICAgaGVhZGVyID0gJydcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB7IHF1YWxpdHlGZWVkYmFja0hlbHBlci5nZXRRdWFsaXR5RmVlZGJhY2tTdGF0dXNNZXNzYWdlKCkgfVxyXG4gICAgICAgICAgICAgICAgcm9sZSA9ICcnXHJcbiAgICAgICAgICAgICAgICBiYW5uZXJUeXBlID0geyBlbnVtcy5CYW5uZXJUeXBlLlF1YWxpdHlGZWVkYmFja0Jhbm5lciB9IC8+KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0ID0gR3JpZENvbnRyb2w7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ3JpZC9ncmlkY29udHJvbC50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWUE7O0FBRUE7QUFDQTtBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQUE7QUErREE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBbEVBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBRUE7QUFJQTtBQUVBO0FBR0E7QUFDQTs7QUFHQTtBQUdBO0FBRUE7QUFFQTtBQUtBO0FBQUE7QUFDQTtBQUlBO0FBQ0E7QUFTQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQVNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 1181:
/* no static exports found */
/* all exports used */
/*!*******************************************************************************!*\
  !*** ./src/components/utility/grid/worklisthelpers/atypicalworklisthelper.ts ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar gridRow = __webpack_require__(/*! ../../../utility/grid/gridrow */ 296);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar worklistGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/worklistgridcolumns.json */ 449);\r\nvar worklistValidatorFactory = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorfactory */ 319);\r\nvar worklistValidatorList = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorlist */ 304);\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar worklistHelperBase = __webpack_require__(/*! ./worklisthelperbase */ 458);\r\nvar jsonRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar stringFormatHelper = __webpack_require__(/*! ../../../../utility/stringformat/stringformathelper */ 250);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar xmlHelper = __webpack_require__(/*! ../../../../utility/generic/xmlhelper */ 379);\r\nvar worklistStore = __webpack_require__(/*! ../../../../stores/worklist/workliststore */ 231);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * class for WorkList Helper implementation\r\n */\r\nvar AtypicalWorklistHelper = /** @class */ (function (_super) {\r\n    __extends(AtypicalWorklistHelper, _super);\r\n    function AtypicalWorklistHelper() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * GenerateRowDefinion is used for generating row collection for WorkList Grid\r\n     * @param responseListData - list of atypical open responses\r\n     * @param responseType - type of the response\r\n     * @param gridType - type of gridview tile/detail\r\n     * @returns grid row collection.\r\n     */\r\n    AtypicalWorklistHelper.prototype.generateRowDefinion = function (responseListData, responseType, gridType) {\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(worklistGridColumnsJson);\r\n        this._immutableWorkListCollection = Immutable.List();\r\n        switch (responseType) {\r\n            case enums.ResponseMode.open:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForOpenDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForOpenTiled(responseListData);\r\n                        break;\r\n                }\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForClosedDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForClosedTiled(responseListData);\r\n                        break;\r\n                }\r\n                break;\r\n            case enums.ResponseMode.pending:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForPendingDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForPendingTiled(responseListData);\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForAtypicalOpenTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of atypical open responses\r\n     * @returns grid row collection.\r\n     */\r\n    AtypicalWorklistHelper.prototype.getRowDefinionForOpenTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.atypicalworklist.open.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // Get fresh set of groups for every columns\r\n                this.emptyGroupColumns();\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            var element = this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.atypical);\r\n                            this.mapGroupColumns('worklist-tile-footer', element);\r\n                            break;\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.open, undefined, false, false, true);\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            // show only if there are blocking exceptions\r\n                            if (responseData[componentPropsJson.hasBlockingExceptions]) {\r\n                                var element_1 = this.getLinkedExceptionElement(responseData, componentPropsJson, key);\r\n                                this.mapGroupColumns('icon-holder', element_1);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotated_' + gridColumnCount;\r\n                            // Create annotation indicator element.\r\n                            var allPageElement = this.getAllPageAnnotationIndicatorElement(responseData, componentPropsJson, key);\r\n                            // Checking whether the indicator is valid to display.\r\n                            if (allPageElement !== undefined) {\r\n                                this.mapGroupColumns('icon-holder', allPageElement);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, true));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                // If there are elements queued to group, then group the elements.\r\n                if (this.groupColumns) {\r\n                    _workListCell = new gridCell();\r\n                    key = gridSeq.get(responseListCount) + '_Tile_Group_';\r\n                    _workListCell.columnElement = this.groupColumnElements('worklist-tile-footer', key);\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                _worklistRow.setRowStyle(this.setRowStyle(responseStatus));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForClosedTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of atypical open responses\r\n     * @returns grid row collection.\r\n     */\r\n    AtypicalWorklistHelper.prototype.getRowDefinionForClosedTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        var isSeedHighlighted = false;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.directedremarkworklist.closed.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // Get fresh set of groups for every columns\r\n                this.emptyGroupColumns();\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.closed, undefined, false, false);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                var _rowStyle = this.setRowStyle(Immutable.List().push(enums.ResponseStatus.none), enums.AccuracyIndicatorType.Unknown);\r\n                _worklistRow.setRowStyle(_rowStyle);\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * Get atypical pending worklist details.\r\n     * @param {WorklistBase} responseListData\r\n     * @returns\r\n     */\r\n    AtypicalWorklistHelper.prototype.getRowDefinionForPendingTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.directedremarkworklist.pending.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + 'ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.pending);\r\n                            break;\r\n                        case gridColumnNames.GracePeriodTime:\r\n                            key = gridSeq.get(responseListCount) + 'GracePeriodTime_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getAllocatedDateElement(responseData, componentPropsJson, key, false, false, true);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                _worklistRow.setRowStyle(this.setRowStyle(Immutable.List().push(enums.ResponseStatus.none), undefined));\r\n                _worklistRow.setRowTitle(this.setRowTitle(responseData.accuracyIndicatorTypeID));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForAtypicalOpenDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of atypical open responses\r\n     * @returns grid row collection.\r\n     */\r\n    AtypicalWorklistHelper.prototype.getRowDefinionForOpenDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            this.setShowOriginalMarkerName(responseListData);\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.atypicalworklist.open.detailview.GridColumns;\r\n                //this.resolvedGridColumnsJson.marking.directedremarkworklist.open.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.atypical, false));\r\n                            break;\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.open, true));\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllocatedDate(responseData, componentPropsJson, key, true));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotatedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllPageAnnotatedIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.OriginalMarkerName:\r\n                            key = gridSeq.get(responseListCount) + '_OriginalMarker_' + gridColumnCount;\r\n                            var originalMarkerName = this.getFormattedName(responseData.originalMarkerInitials, responseData.originalMarkerSurname);\r\n                            _workListCell.columnElement = (this.getGenericTextElement(originalMarkerName, key));\r\n                            break;\r\n                        case gridColumnNames.CentreNum:\r\n                            key = gridSeq.get(responseListCount) + '_Centre_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreNumber, key));\r\n                            break;\r\n                        case gridColumnNames.CentreCandidateNum:\r\n                            key = gridSeq.get(responseListCount) + '_CentreCandidate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreCandidateNumber, key));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, enums.AccuracyIndicatorType.Unknown, undefined));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * Generate row defenitions for pending detailed worklist in atypical\r\n     * @param responseListData\r\n     */\r\n    AtypicalWorklistHelper.prototype.getRowDefinionForPendingDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var _worklistRow;\r\n        var componentPropsJson;\r\n        var key;\r\n        // Grid columns\r\n        var gridLeftColumn = Array();\r\n        var gridMiddleColumn = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _workListCell;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.atypicalworklist.pending.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + 'TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.pending, true));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + 'LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + 'LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.GracePeriodTime:\r\n                            key = gridSeq.get(responseListCount) + 'GracePeriodTime_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGracePeriodElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.CentreNum:\r\n                            key = gridSeq.get(responseListCount) + '_Centre_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreNumber, key));\r\n                            break;\r\n                        case gridColumnNames.CentreCandidateNum:\r\n                            key = gridSeq.get(responseListCount) + '_CentreCandidate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreCandidateNumber, key));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, enums.AccuracyIndicatorType.Unknown, undefined));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForAtypicalClosedDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of live open responses\r\n     * @returns grid row collection.\r\n     */\r\n    AtypicalWorklistHelper.prototype.getRowDefinionForClosedDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var _worklistRow;\r\n        var componentPropsJson;\r\n        var key;\r\n        // Grid columns\r\n        var gridLeftColumn = Array();\r\n        var gridMiddleColumn = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _workListCell;\r\n        var isSeedResponse;\r\n        var isSeedHighlighted = false;\r\n        var cssClass;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.atypicalworklist.closed.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.closed);\r\n                gridLeftColumn = new Array();\r\n                gridMiddleColumn = new Array();\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.closed, false));\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllocatedDateElement(responseData, componentPropsJson, key, false, false, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.CentreNum:\r\n                            key = gridSeq.get(responseListCount) + '_Centre_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreNumber, key));\r\n                            break;\r\n                        case gridColumnNames.CentreCandidateNum:\r\n                            key = gridSeq.get(responseListCount) + '_CentreCandidate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreCandidateNumber, key));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                var additionalComponent = this.renderQualityFeedbackBanner(responseListCount, enums.WorklistType.directedRemark);\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, enums.AccuracyIndicatorType.Unknown, additionalComponent, cssClass));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * Get the out put of formatted username\r\n     * @param {userInfoArgument} userInforArg\r\n     * @returns\r\n     */\r\n    AtypicalWorklistHelper.prototype.getFormattedName = function (initials, surname) {\r\n        var formattedString = stringFormatHelper.getUserNameFormat().toLowerCase();\r\n        formattedString = formattedString.replace('{initials}', initials);\r\n        formattedString = formattedString.replace('{surname}', surname);\r\n        return formattedString;\r\n    };\r\n    /**\r\n     * returns whether the the given column is hidden or not\r\n     * @param responseColumn\r\n     */\r\n    AtypicalWorklistHelper.prototype.getCellVisibility = function (column) {\r\n        var isHidden = false;\r\n        switch (column) {\r\n            case gridColumnNames.OriginalMarkerName:\r\n                isHidden = (this.getRemarkSeedingCCValue() === true) || (this.showOriginalMarkerName === false);\r\n                break;\r\n            case gridColumnNames.SLAOIndicator:\r\n                if (this.isStructuredQIG() === false) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n            case gridColumnNames.AllPageAnnotedIndicator:\r\n                if (this.isStructuredQIG() === true) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n            case gridColumnNames.TotalMark:\r\n                if (this.isNonNumeric() === true) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n        }\r\n        return isHidden;\r\n    };\r\n    /**\r\n     * returns the grdicolumns based on the response mode and worklist type\r\n     * @param responseMode\r\n     */\r\n    AtypicalWorklistHelper.prototype.getGridColumns = function (resolvedGridColumnsJson, worklistType, responseMode, isFrozen) {\r\n        if (isFrozen === void 0) { isFrozen = false; }\r\n        var gridColumns;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n                gridColumns = (isFrozen === false) ?\r\n                    resolvedGridColumnsJson.marking.atypicalworklist.open.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.liveworklist.open.frozenRows.GridColumns;\r\n                break;\r\n            case enums.ResponseMode.pending:\r\n                gridColumns = (isFrozen === false) ?\r\n                    resolvedGridColumnsJson.marking.atypicalworklist.pending.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.liveworklist.pending.frozenRows.GridColumns;\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                gridColumns = (isFrozen === false) ?\r\n                    resolvedGridColumnsJson.marking.atypicalworklist.closed.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.liveworklist.closed.frozenRows.GridColumns;\r\n                break;\r\n        }\r\n        return gridColumns;\r\n    };\r\n    /**\r\n     * returns the resposne staus based on the worklist and its validator type\r\n     * @param worklistType\r\n     * @param responseMode\r\n     */\r\n    AtypicalWorklistHelper.prototype.getResponseStatus = function (responseData, responseMode) {\r\n        var responseStatus;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n                responseStatus = worklistValidatorFactory.getValidator(worklistValidatorList.directedRemarkOpen).\r\n                    submitButtonValidate(responseData);\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n            case enums.ResponseMode.pending:\r\n                responseStatus = Immutable.List().push(enums.ResponseStatus.none);\r\n                break;\r\n        }\r\n        return responseStatus;\r\n    };\r\n    /**\r\n     * set the variable of showOriginalMarkerName based on the value in worklist data.\r\n     * @param responseListData\r\n     */\r\n    AtypicalWorklistHelper.prototype.setShowOriginalMarkerName = function (responseListData) {\r\n        var _responseListData = responseListData.responses.toArray();\r\n        for (var _responseCount = 0; _responseCount < _responseListData.length; _responseCount++) {\r\n            if (_responseListData[_responseCount].showOriginalMarkerName === true) {\r\n                this.showOriginalMarkerName = true;\r\n                return;\r\n            }\r\n        }\r\n        this.showOriginalMarkerName = false;\r\n    };\r\n    /**\r\n     * get the value of remark seeding cc based on the remark type.\r\n     */\r\n    AtypicalWorklistHelper.prototype.getRemarkSeedingCCValue = function () {\r\n        var ccValue = configurableCharacteristicsHelper.getExamSessionCCValue(configurableCharacteristicsNames.RemarkSeeding, qigStore.instance.selectedQIGForMarkerOperation.examSessionId);\r\n        if (ccValue && ccValue !== '') {\r\n            var xmlHelperObj = new xmlHelper(ccValue);\r\n            var remarkType = xmlHelperObj.getNodeValueByName('RemarkType');\r\n            remarkType = (remarkType) ? remarkType.replace(/ /g, '') : '';\r\n            return (enums.RemarkRequestType[worklistStore.instance.getRemarkRequestType] === remarkType);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    return AtypicalWorklistHelper;\r\n}(worklistHelperBase));\r\nmodule.exports = AtypicalWorklistHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1182:
/* no static exports found */
/* all exports used */
/*!***************************************************************************!*\
  !*** ./src/components/utility/grid/worklisthelpers/liveworklisthelper.ts ***!
  \***************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar gridRow = __webpack_require__(/*! ../../../utility/grid/gridrow */ 296);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar worklistGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/worklistgridcolumns.json */ 449);\r\nvar worklistValidatorFactory = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorfactory */ 319);\r\nvar worklistValidatorList = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorlist */ 304);\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar worklistHelperBase = __webpack_require__(/*! ./worklisthelperbase */ 458);\r\nvar josnRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar qualityFeedbackHelper = __webpack_require__(/*! ../../../../utility/qualityfeedback/qualityfeedbackhelper */ 309);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../markeroperationmode/markeroperationmodefactory */ 232);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\nvar tagStore = __webpack_require__(/*! ../../../../stores/tags/tagstore */ 331);\r\nvar examinerStore = __webpack_require__(/*! ../../../../stores/markerinformation/examinerstore */ 259);\r\nvar localeStore = __webpack_require__(/*! ../../../../stores/locale/localestore */ 226);\r\n/**\r\n * class for WorkList Helper implementation\r\n */\r\nvar LiveWorklistHelper = /** @class */ (function (_super) {\r\n    __extends(LiveWorklistHelper, _super);\r\n    function LiveWorklistHelper() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /* variable to holds the response type for showing the response type label*/\r\n        _this._responseType = enums.ResponseType.None;\r\n        return _this;\r\n    }\r\n    /**\r\n     * GenerateRowDefinion is used for generating row collection for WorkList Grid\r\n     * @param responseListData - list of live open responses\r\n     * @param responseType - type of the response\r\n     * @param gridType - type of gridview tile/detail\r\n     * @returns grid row collection.\r\n     */\r\n    LiveWorklistHelper.prototype.generateRowDefinion = function (responseListData, responseType, gridType) {\r\n        this.resolvedGridColumnsJson = josnRefResolver.resolveRefs(worklistGridColumnsJson);\r\n        this._immutableWorkListCollection = Immutable.List();\r\n        switch (responseType) {\r\n            case enums.ResponseMode.open:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForOpenDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForOpenTiled(responseListData);\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForClosedDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForClosedTiled(responseListData);\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case enums.ResponseMode.pending:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForPendingDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForPendingTiled(responseListData);\r\n                        break;\r\n                }\r\n        }\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForLiveOpenTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of live open responses\r\n     * @returns grid row collection.\r\n     */\r\n    LiveWorklistHelper.prototype.getRowDefinionForClosedTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var isSeedHighlighted = false;\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.liveworklist.closed.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                var isSeedResponse = responseData.seedTypeId !== enums.SeedType.None ? true : false;\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            this._responseType = this.getResponseLabelType(responseData, enums.ResponseMode.closed);\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.closed, undefined, true, isSeedResponse, true, this._responseType);\r\n                            break;\r\n                        case gridColumnNames.MarksDifference:\r\n                            if (isSeedResponse === true) {\r\n                                key = gridSeq.get(responseListCount) + '_MarksDifference_' + gridColumnCount;\r\n                                _workListCell.columnElement = this.getMarksDifferenceColumnElement(responseData, componentPropsJson, key, true);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                var _rowStyle = this.setRowStyle(Immutable.List().push(enums.ResponseStatus.none), isSeedResponse === true ? responseData.accuracyIndicatorTypeID : enums.AccuracyIndicatorType.Unknown);\r\n                if (this._responseType !== enums.ResponseType.None) {\r\n                    _rowStyle += ' labeled';\r\n                }\r\n                if (isSeedResponse && this.showSeedLabel) {\r\n                    _rowStyle += ' seed';\r\n                }\r\n                if (!isSeedHighlighted\r\n                    && qualityFeedbackHelper.isSeedNeededToBeHighlighted(responseData.qualityFeedbackStatusId, isSeedResponse)) {\r\n                    _rowStyle += ' highlight-seed';\r\n                    isSeedHighlighted = true;\r\n                }\r\n                _worklistRow.setRowStyle(_rowStyle);\r\n                _worklistRow.setRowTitle(this.setRowTitle(responseData.accuracyIndicatorTypeID));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForLiveOpenTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of live open responses\r\n     * @returns grid row collection.\r\n     */\r\n    LiveWorklistHelper.prototype.getRowDefinionForOpenTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.liveworklist.open.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // Get fresh set of groups for every columns\r\n                this.emptyGroupColumns();\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            var element = this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.live);\r\n                            this.mapGroupColumns('worklist-tile-footer', element);\r\n                            break;\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            this._responseType = this.getResponseLabelType(responseData, enums.ResponseMode.open);\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.open);\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            // show only if there are blocking exceptions or zoning exceptions\r\n                            if (responseData[componentPropsJson.hasBlockingExceptions]\r\n                                || responseData[componentPropsJson.hasZoningExceptions]) {\r\n                                var element_1 = this.getLinkedExceptionElement(responseData, componentPropsJson, key);\r\n                                this.mapGroupColumns('icon-holder', element_1);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotated_' + gridColumnCount;\r\n                            // Create annotation indicator element.\r\n                            var allPageElement = this.getAllPageAnnotationIndicatorElement(responseData, componentPropsJson, key);\r\n                            // Checking whether the indicator is valid to display.\r\n                            if (allPageElement !== undefined) {\r\n                                this.mapGroupColumns('icon-holder', allPageElement);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, true));\r\n                            break;\r\n                        case gridColumnNames.AllFilesNotViewedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllFilesNotViewedIndicator_' + gridColumnCount;\r\n                            var allFilesNotViewedElement = (this.getAllFilesNotViewedIndicatorElement(responseData, componentPropsJson, key));\r\n                            this.mapGroupColumns('worklist-tile-footer', allFilesNotViewedElement);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                // If there are elements queued to group, then group the elements.\r\n                if (this.groupColumns) {\r\n                    _workListCell = new gridCell();\r\n                    key = gridSeq.get(responseListCount) + '_Tile_Group_';\r\n                    _workListCell.columnElement = this.groupColumnElements('worklist-tile-footer', key);\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                var _rowStyle = this.setRowStyle(responseStatus);\r\n                if (this._responseType !== enums.ResponseType.None) {\r\n                    _rowStyle += ' labeled';\r\n                }\r\n                _worklistRow.setRowStyle(_rowStyle);\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForLiveOpenDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of live open responses\r\n     * @returns grid row collection.\r\n     */\r\n    LiveWorklistHelper.prototype.getRowDefinionForClosedDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var _worklistRow;\r\n        var componentPropsJson;\r\n        var key;\r\n        // Grid columns\r\n        var gridLeftColumn = Array();\r\n        var gridMiddleColumn = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _workListCell;\r\n        var cssClass;\r\n        var isResponseTypeLabelVisible;\r\n        var isSeedResponse;\r\n        var isSeedHighlighted = false;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.liveworklist.closed.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.closed);\r\n                gridLeftColumn = new Array();\r\n                gridMiddleColumn = new Array();\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.SpecialistType:\r\n                            key = gridSeq.get(responseListCount) + '_SpecialistType_' + gridColumnCount;\r\n                            _workListCell.columnElement =\r\n                                (this.getGenericTextElement(responseData.specialistType ===\r\n                                    localeStore.instance.TranslateText('marking.worklist.response-data.specialisttype-' + responseData.specialistType) ?\r\n                                    localeStore.instance.TranslateText('marking.worklist.response-data.specialisttype-' + responseData.specialistType)\r\n                                    : responseData.specialistType, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.closed, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.ResponseTypeLabel:\r\n                            this._responseType = this.getResponseLabelType(responseData, enums.ResponseMode.closed);\r\n                            isResponseTypeLabelVisible = this._responseType !== enums.ResponseType.None;\r\n                            key = gridSeq.get(responseListCount) + '_ResponseTypeLabel_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getResponseTypeLabel(key, isResponseTypeLabelVisible, this._responseType));\r\n                            if (!isSeedHighlighted && qualityFeedbackHelper.isSeedNeededToBeHighlighted(responseData.qualityFeedbackStatusId, isResponseTypeLabelVisible)) {\r\n                                cssClass = 'highlight-seed';\r\n                                isSeedHighlighted = true;\r\n                            }\r\n                            else {\r\n                                cssClass = '';\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.AccuracyIndicator:\r\n                            // accuracy indicator is shown only when its values is set\r\n                            isSeedResponse = markerOperationModeFactory.operationMode.isSeedResponse(responseData);\r\n                            if (isSeedResponse) {\r\n                                key = gridSeq.get(responseListCount) + '_AccuracyIndicator_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getAccuracyIndicatorElement(responseData, componentPropsJson, key, false));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.AbsoluteMarksDifference:\r\n                            isSeedResponse = markerOperationModeFactory.operationMode.isSeedResponse(responseData);\r\n                            if (isSeedResponse) {\r\n                                key = gridSeq.get(responseListCount) + '_AbsoluteMarksDifference_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getMarksDifferenceElement(responseData, componentPropsJson, key, enums.MarksDifferenceType.AbsoluteMarksDifference, false));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.TotalMarksDifference:\r\n                            isSeedResponse = markerOperationModeFactory.operationMode.isSeedResponse(responseData);\r\n                            if (isSeedResponse) {\r\n                                key = gridSeq.get(responseListCount) + '_TotalMarksDifference_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getMarksDifferenceElement(responseData, componentPropsJson, key, enums.MarksDifferenceType.TotalMarksDifference, false));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.SampleLabel:\r\n                            key = gridSeq.get(responseListCount) + '_SampleLabel_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSampleLabel(key, responseData.sampleCommentId));\r\n                            break;\r\n                        case gridColumnNames.ReviewedByLabel:\r\n                            key = gridSeq.get(responseListCount) + '_ReviewedByLabel_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getReviewedByLabel(key, responseData));\r\n                            break;\r\n                        case gridColumnNames.CentreNum:\r\n                            if (!markerOperationModeFactory.operationMode.shouldDisplayCenterNumber &&\r\n                                !markerOperationModeFactory.operationMode.isSeedResponse(responseData)) {\r\n                                key = gridSeq.get(responseListCount) + '_Centre_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getGenericTextElement(responseData.centreNumber, key));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.TagIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_TagIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTag(key, responseData.tagId, tagStore.instance.tags, responseData.markGroupId));\r\n                            break;\r\n                        case gridColumnNames.SupervisorReviewComment:\r\n                            key = gridSeq.get(responseListCount) + '_SupervisorReviewComment_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSupervisorReviewComment(key, responseData));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.closed, responseData), undefined, cssClass));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * Get the response label type for worklist\r\n     * @param responseData\r\n     * @param responseMode\r\n     */\r\n    LiveWorklistHelper.prototype.getResponseLabelType = function (responseData, responseMode) {\r\n        var isPEOrAPE = markerOperationModeFactory.operationMode.isSelectedExaminerPEOrAPE;\r\n        var isSTM = markerOperationModeFactory.operationMode.isLoggedInExaminerSTM;\r\n        var showSeedResponsLabel = responseData.seedTypeId !== enums.SeedType.None;\r\n        var showPromotedSeedResponseLabel = responseData.isCurrentMarkGroupPromotedAsSeed && isSTM;\r\n        var showDefinitiveResponseLabel;\r\n        if ((responseData).isWholeResponse) {\r\n            return enums.ResponseType.WholeResponse;\r\n        }\r\n        if (responseData.isPromotedSeed) {\r\n            showDefinitiveResponseLabel = responseData.isCurrentMarkGroupPromotedAsSeed && isPEOrAPE;\r\n        }\r\n        else {\r\n            showDefinitiveResponseLabel = responseData.hasDefinitiveMarks && isPEOrAPE;\r\n        }\r\n        if (responseMode === enums.ResponseMode.open) {\r\n            return showSeedResponsLabel ? enums.ResponseType.Seed : enums.ResponseType.None;\r\n        }\r\n        else {\r\n            return showSeedResponsLabel ? enums.ResponseType.Seed\r\n                : showDefinitiveResponseLabel ? enums.ResponseType.Definitive\r\n                    : showPromotedSeedResponseLabel ? enums.ResponseType.PromotedSeed : enums.ResponseType.None;\r\n        }\r\n    };\r\n    /**\r\n     * getRowDefinionForLiveOpenDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of live open responses\r\n     * @returns grid row collection.\r\n     */\r\n    LiveWorklistHelper.prototype.getRowDefinionForOpenDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        var isSeedResponse;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.liveworklist.open.detailview.GridColumns;\r\n                //this.resolvedGridColumnsJson.marking.liveworklist.open.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.live, false));\r\n                            break;\r\n                        case gridColumnNames.SpecialistType:\r\n                            key = gridSeq.get(responseListCount) + '_SpecialistType_' + gridColumnCount;\r\n                            _workListCell.columnElement =\r\n                                (this.getGenericTextElement(responseData.specialistType ===\r\n                                    localeStore.instance.TranslateText('marking.worklist.response-data.specialisttype-' + responseData.specialistType) ?\r\n                                    localeStore.instance.TranslateText('marking.worklist.response-data.specialisttype-' + responseData.specialistType)\r\n                                    : responseData.specialistType, key));\r\n                            break;\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.open, true));\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllocatedDate(responseData, componentPropsJson, key, true));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotatedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllPageAnnotatedIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.ResponseTypeLabel:\r\n                            this._responseType = this.getResponseLabelType(responseData, enums.ResponseMode.open);\r\n                            isSeedResponse = this._responseType !== enums.ResponseType.None;\r\n                            key = gridSeq.get(responseListCount) + '_ResponseTypeLabel_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getResponseTypeLabel(key, isSeedResponse, this._responseType));\r\n                            break;\r\n                        case gridColumnNames.SampleLabel:\r\n                            key = gridSeq.get(responseListCount) + '_SampleLabel_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSampleLabel(key, responseData.sampleCommentId));\r\n                            break;\r\n                        case gridColumnNames.TagIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_TagIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTag(key, responseData.tagId, tagStore.instance.tags, responseData.markGroupId));\r\n                            break;\r\n                        case gridColumnNames.AllFilesNotViewedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllFilesNotViewedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllFilesNotViewedIndicatorElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        default:\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                var additionalComponent = this.renderQualityFeedbackBanner(responseListCount, enums.WorklistType.live);\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.open, responseData), additionalComponent));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * Generate row defenitions for pending detailed worklist in live\r\n     * @param responseListData\r\n     */\r\n    LiveWorklistHelper.prototype.getRowDefinionForPendingDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var _worklistRow;\r\n        var componentPropsJson;\r\n        var key;\r\n        var isResponseTypeLabelVisible;\r\n        // Grid columns\r\n        var gridLeftColumn = Array();\r\n        var gridMiddleColumn = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _workListCell;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.liveworklist.pending.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.pending);\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + 'TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.SpecialistType:\r\n                            key = gridSeq.get(responseListCount) + '_SpecialistType_' + gridColumnCount;\r\n                            _workListCell.columnElement =\r\n                                (this.getGenericTextElement(responseData.specialistType ===\r\n                                    localeStore.instance.TranslateText('marking.worklist.response-data.specialisttype-' + responseData.specialistType) ?\r\n                                    localeStore.instance.TranslateText('marking.worklist.response-data.specialisttype-' + responseData.specialistType)\r\n                                    : responseData.specialistType, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.pending, true));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + 'LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + 'LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.GracePeriodTime:\r\n                            key = gridSeq.get(responseListCount) + 'GracePeriodTime_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGracePeriodElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.ResponseTypeLabel:\r\n                            // for pending tab there is only whole respones label is used\r\n                            this._responseType = this.getResponseLabelType(responseData, enums.ResponseMode.pending);\r\n                            isResponseTypeLabelVisible = this._responseType === enums.ResponseType.WholeResponse;\r\n                            key = gridSeq.get(responseListCount) + '_ResponseTypeLabel_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getResponseTypeLabel(key, isResponseTypeLabelVisible, this._responseType));\r\n                            break;\r\n                        case gridColumnNames.SampleLabel:\r\n                            key = gridSeq.get(responseListCount) + '_SampleLabel_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSampleLabel(key, responseData.sampleCommentId));\r\n                            break;\r\n                        case gridColumnNames.TagIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_TagIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTag(key, responseData.tagId, tagStore.instance.tags, responseData.markGroupId));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                var additionalComponent = this.renderQualityFeedbackBanner(responseListCount, enums.WorklistType.live);\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.pending, responseData), additionalComponent));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * Generate row defenitions for pending tiled worklist in live\r\n     * @param responseListData\r\n     */\r\n    LiveWorklistHelper.prototype.getRowDefinionForPendingTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.liveworklist.pending.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            this._responseType = this.getResponseLabelType(responseData, enums.ResponseMode.pending);\r\n                            key = gridSeq.get(responseListCount) + 'ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.pending);\r\n                            break;\r\n                        case gridColumnNames.GracePeriodTime:\r\n                            key = gridSeq.get(responseListCount) + 'GracePeriodTime_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getAllocatedDateElement(responseData, componentPropsJson, key, false, false, true);\r\n                            break;\r\n                        case gridColumnNames.MarksDifference:\r\n                            key = gridSeq.get(responseListCount) + '_MarksDifference_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getMarksDifferenceColumnElement(responseData, componentPropsJson, key, true);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                var _rowStyle = this.setRowStyle(Immutable.List().push(enums.ResponseStatus.none), undefined);\r\n                if (this._responseType !== enums.ResponseType.None) {\r\n                    _rowStyle += ' labeled';\r\n                }\r\n                _worklistRow.setRowStyle(_rowStyle);\r\n                _worklistRow.setRowTitle(this.setRowTitle(responseData.accuracyIndicatorTypeID));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * returns the resposne staus based on the worklist and its validator type\r\n     * @param worklistType\r\n     * @param responseMode\r\n     */\r\n    LiveWorklistHelper.prototype.getResponseStatus = function (responseData, responseMode) {\r\n        var responseStatus;\r\n        responseStatus = worklistValidatorFactory.getValidator(worklistValidatorList.liveOpen).\r\n            submitButtonValidate(responseData);\r\n        return responseStatus;\r\n    };\r\n    /**\r\n     * returns whether the the given column is hidden or not\r\n     * @param responseColumn\r\n     */\r\n    LiveWorklistHelper.prototype.getCellVisibility = function (column) {\r\n        var isHidden = false;\r\n        var specialistResponseCC = (configurableCharacteristicsHelper.getExamSessionCCValue(configurableCharacteristicsNames.SpecialistResponseMarking, qigStore.instance.selectedQIGForMarkerOperation.examSessionId).toLowerCase() === 'true');\r\n        switch (column) {\r\n            case gridColumnNames.AbsoluteMarksDifference:\r\n            case gridColumnNames.TotalMarksDifference:\r\n            case gridColumnNames.AccuracyIndicator:\r\n                isHidden = markerOperationModeFactory.operationMode.isQualityFeedbackWorklistColumnsHidden;\r\n                break;\r\n            case gridColumnNames.SLAOIndicator:\r\n                isHidden = markerOperationModeFactory.operationMode.isSLAOIndicatorHidden(this.isStructuredQIG());\r\n                break;\r\n            case gridColumnNames.AllPageAnnotedIndicator:\r\n                isHidden = markerOperationModeFactory.operationMode.isAllPageAnnotedIndicatorHidden(this.isStructuredQIG());\r\n                break;\r\n            case gridColumnNames.LinkedExceptionIndicator:\r\n                isHidden = markerOperationModeFactory.operationMode.isLinkedExceptionIndicatorHidden;\r\n                break;\r\n            case gridColumnNames.TotalMark:\r\n                if (this.isNonNumeric() === true) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n            case gridColumnNames.ResponseTypeLabel:\r\n                isHidden = (this._responseType === enums.ResponseType.Seed) ?\r\n                    markerOperationModeFactory.operationMode.isSeedLabelHidden : false;\r\n                break;\r\n            case gridColumnNames.SampleLabel:\r\n                isHidden = markerOperationModeFactory.operationMode.isSampleLabelHidden(enums.WorklistType.live);\r\n                break;\r\n            case gridColumnNames.ReviewedByLabel:\r\n                isHidden = markerOperationModeFactory.operationMode.isReviewedByLabelHidden;\r\n                break;\r\n            case gridColumnNames.CentreNum:\r\n                isHidden = markerOperationModeFactory.operationMode.isHelpExaminersView ?\r\n                    true : markerOperationModeFactory.operationMode.shouldDisplayCenterNumber;\r\n                break;\r\n            case gridColumnNames.SpecialistType:\r\n                isHidden = !((examinerStore.instance.getMarkerInformation.isSpecialist\r\n                    || (qigStore.instance.selectedQIGForMarkerOperation &&\r\n                        qigStore.instance.selectedQIGForMarkerOperation.role === enums.ExaminerRole.principalExaminer))\r\n                    && specialistResponseCC);\r\n                break;\r\n            case gridColumnNames.SupervisorReviewComment:\r\n                isHidden = markerOperationModeFactory.operationMode.isSupervisorReviewCommentColumnHidden;\r\n                break;\r\n        }\r\n        return isHidden;\r\n    };\r\n    /**\r\n     * returns the grdicolumns based on the response mode and worklist type\r\n     * @param responseMode\r\n     */\r\n    LiveWorklistHelper.prototype.getGridColumns = function (resolvedGridColumnsJson, worklistType, responseMode, isFrozen) {\r\n        if (isFrozen === void 0) { isFrozen = false; }\r\n        var gridColumns;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n                gridColumns = (isFrozen === false) ? resolvedGridColumnsJson.marking.liveworklist.open.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.liveworklist.open.frozenRows.GridColumns;\r\n                break;\r\n            case enums.ResponseMode.pending:\r\n                gridColumns = (isFrozen === false) ? resolvedGridColumnsJson.marking.liveworklist.pending.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.liveworklist.pending.frozenRows.GridColumns;\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                gridColumns = (isFrozen === false) ? resolvedGridColumnsJson.marking.liveworklist.closed.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.liveworklist.closed.frozenRows.GridColumns;\r\n                break;\r\n        }\r\n        return gridColumns;\r\n    };\r\n    /**\r\n     * returns the accuracy type based on accuracy  and CC values\r\n     * @param responseMode\r\n     * @param responseData\r\n     */\r\n    LiveWorklistHelper.prototype.getAccuracyType = function (responseMode, responseData) {\r\n        var accuracyType;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n            case enums.ResponseMode.pending:\r\n                accuracyType = enums.AccuracyIndicatorType.Unknown;\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                var qualityFeedbackCC = (configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.AutomaticQualityFeedback, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId) === 'true');\r\n                var isSeedResponse = (responseData.seedTypeId !== enums.SeedType.None) &&\r\n                    (responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown);\r\n                accuracyType = ((isSeedResponse === true && (qualityFeedbackCC === true ||\r\n                    markerOperationModeFactory.operationMode.isTeamManagementMode)) ?\r\n                    responseData.accuracyIndicatorTypeID : enums.AccuracyIndicatorType.Unknown);\r\n                break;\r\n        }\r\n        return accuracyType;\r\n    };\r\n    return LiveWorklistHelper;\r\n}(worklistHelperBase));\r\nmodule.exports = LiveWorklistHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1183:
/* no static exports found */
/* all exports used */
/*!***********************************************************************************!*\
  !*** ./src/components/utility/grid/worklisthelpers/markingcheckworklisthelper.ts ***!
  \***********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar worklistHelperBase = __webpack_require__(/*! ./worklisthelperbase */ 458);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\nvar josnRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar worklistValidatorList = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorlist */ 304);\r\nvar worklistValidatorFactory = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorfactory */ 319);\r\nvar worklistGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/worklistgridcolumns.json */ 449);\r\n/**\r\n * class for Marking Check WorkList Helper implementation\r\n */\r\nvar MarkingCheckWorklistHelper = /** @class */ (function (_super) {\r\n    __extends(MarkingCheckWorklistHelper, _super);\r\n    function MarkingCheckWorklistHelper() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * GenerateRowDefinion is used for generating row collection for WorkList Grid\r\n     * @param responseListData - list of live open responses\r\n     * @param responseType - type of the response\r\n     * @param gridType - type of gridview tile/detail\r\n     * @returns grid row collection.\r\n     */\r\n    MarkingCheckWorklistHelper.prototype.generateRowDefinion = function (responseListData, responseType, gridType) {\r\n        this.resolvedGridColumnsJson = josnRefResolver.resolveRefs(worklistGridColumnsJson);\r\n        this._immutableWorkListCollection = Immutable.List();\r\n        switch (responseType) {\r\n            case enums.ResponseMode.open:\r\n                if (gridType === enums.GridType.detailed) {\r\n                    this._immutableWorkListCollection = this.getRowDefinionForOpenDetail(responseListData);\r\n                }\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                if (gridType === enums.GridType.detailed) {\r\n                    this._immutableWorkListCollection = this.getRowDefinionForClosedDetail(responseListData);\r\n                }\r\n                break;\r\n            case enums.ResponseMode.pending:\r\n                if (gridType === enums.GridType.detailed) {\r\n                    this._immutableWorkListCollection = this.getRowDefinionForPendingDetail(responseListData);\r\n                }\r\n                break;\r\n        }\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForLiveOpenDetail is used for generating row collection for closed WorkList Grid in detail view\r\n     * @param responseListData - list of live open responses\r\n     * @returns grid row collection.\r\n     */\r\n    MarkingCheckWorklistHelper.prototype.getRowDefinionForClosedDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var key;\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _workListCell;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.markingcheckworklist.closed.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.closed);\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            if (this.isNonNumeric() === true) {\r\n                                _workListCell.isHidden = true;\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.closed, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                    }\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.closed, responseData), undefined));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForLiveOpenDetail is used for generating row collection for open WorkList Grid in detail view\r\n     * @param responseListData - list of live open responses\r\n     * @returns grid row collection.\r\n     */\r\n    MarkingCheckWorklistHelper.prototype.getRowDefinionForOpenDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.markingcheckworklist.open.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.live, false));\r\n                            break;\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            if (this.isNonNumeric() === true) {\r\n                                _workListCell.isHidden = true;\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.open, true));\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllocatedDate(responseData, componentPropsJson, key, true));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                    }\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                var additionalComponent = this.renderQualityFeedbackBanner(responseListCount, enums.WorklistType.live);\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.open, responseData), additionalComponent));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * Generate row defenitions for pending detailed worklist in live\r\n     * @param responseListData\r\n     */\r\n    MarkingCheckWorklistHelper.prototype.getRowDefinionForPendingDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var key;\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _workListCell;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.markingcheckworklist.pending.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.pending);\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + 'TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            if (this.isNonNumeric() === true) {\r\n                                _workListCell.isHidden = true;\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.pending, true));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + 'LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.GracePeriodTime:\r\n                            key = gridSeq.get(responseListCount) + 'GracePeriodTime_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGracePeriodElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                    }\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                var additionalComponent = this.renderQualityFeedbackBanner(responseListCount, enums.WorklistType.live);\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.pending, responseData), additionalComponent));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * returns the response status based on the worklist and its validator type\r\n     * @param worklistType\r\n     * @param responseMode\r\n     */\r\n    MarkingCheckWorklistHelper.prototype.getResponseStatus = function (responseData, responseMode) {\r\n        var responseStatus;\r\n        responseStatus = worklistValidatorFactory.getValidator(worklistValidatorList.liveOpen).\r\n            submitButtonValidate(responseData);\r\n        return responseStatus;\r\n    };\r\n    /**\r\n     * returns the gridcolumns based on the response mode and worklist type\r\n     * @param responseMode\r\n     */\r\n    MarkingCheckWorklistHelper.prototype.getGridColumns = function (resolvedGridColumnsJson, worklistType, responseMode, isFrozen) {\r\n        if (isFrozen === void 0) { isFrozen = false; }\r\n        var gridColumns;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n                gridColumns = (isFrozen === false) ? resolvedGridColumnsJson.marking.markingcheckworklist.open.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.markingcheckworklist.open.frozenRows.GridColumns;\r\n                break;\r\n            case enums.ResponseMode.pending:\r\n                gridColumns = (isFrozen === false) ? resolvedGridColumnsJson.marking.markingcheckworklist.pending.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.markingcheckworklist.pending.frozenRows.GridColumns;\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                gridColumns = (isFrozen === false) ? resolvedGridColumnsJson.marking.markingcheckworklist.closed.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.markingcheckworklist.closed.frozenRows.GridColumns;\r\n                break;\r\n        }\r\n        return gridColumns;\r\n    };\r\n    return MarkingCheckWorklistHelper;\r\n}(worklistHelperBase));\r\nmodule.exports = MarkingCheckWorklistHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1184:
/* no static exports found */
/* all exports used */
/*!*******************************************************************************!*\
  !*** ./src/components/utility/grid/worklisthelpers/practiceworklisthelper.ts ***!
  \*******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar gridRow = __webpack_require__(/*! ../../../utility/grid/gridrow */ 296);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar worklistGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/worklistgridcolumns.json */ 449);\r\nvar worklistValidatorFactory = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorfactory */ 319);\r\nvar worklistValidatorList = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorlist */ 304);\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar worklistHelperBase = __webpack_require__(/*! ./worklisthelperbase */ 458);\r\nvar localeStore = __webpack_require__(/*! ../../../../stores/locale/localestore */ 226);\r\nvar josnRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * class for WorkList Helper implementation\r\n */\r\nvar PracticeWorklistHelper = /** @class */ (function (_super) {\r\n    __extends(PracticeWorklistHelper, _super);\r\n    function PracticeWorklistHelper() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * GenerateRowDefinion is used for generating row collection for WorkList Grid\r\n     * @param responseListData - list of practice open responses\r\n     * @param responseType - type of the response\r\n     * @param gridType - type of gridview tile/detail\r\n     * @returns grid row collection.\r\n     */\r\n    PracticeWorklistHelper.prototype.generateRowDefinion = function (responseListData, responseType, gridType) {\r\n        this.resolvedGridColumnsJson = josnRefResolver.resolveRefs(worklistGridColumnsJson);\r\n        this._immutableWorkListCollection = Immutable.List();\r\n        switch (responseType) {\r\n            case enums.ResponseMode.open:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForOpenDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForOpenTiled(responseListData);\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForClosedDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForClosedTiled(responseListData);\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n        }\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForpracticeOpenTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of practice open responses\r\n     * @returns grid row collection.\r\n     */\r\n    PracticeWorklistHelper.prototype.getRowDefinionForClosedTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.practiceworklist.closed.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.closed, localeStore.instance.TranslateText('marking.worklist.response-data.practice-response-title') + ' ');\r\n                            break;\r\n                        case gridColumnNames.MarksDifference:\r\n                            key = gridSeq.get(responseListCount) + '_MarksDifference_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getMarksDifferenceColumnElement(responseData, componentPropsJson, key, true);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                // setting row style and row title according to its accuracy type\r\n                _worklistRow.setRowStyle(this.setRowStyle(Immutable.List().push(enums.ResponseStatus.none), responseData.accuracyIndicatorTypeID));\r\n                _worklistRow.setRowTitle(this.setRowTitle(responseData.accuracyIndicatorTypeID));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForpracticeOpenTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of practice open responses\r\n     * @returns grid row collection.\r\n     */\r\n    PracticeWorklistHelper.prototype.getRowDefinionForOpenTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.practiceworklist.open.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                this.emptyGroupColumns();\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            var element = this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.practice);\r\n                            this.mapGroupColumns('worklist-tile-footer', element);\r\n                            break;\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.open, localeStore.instance.TranslateText('marking.worklist.response-data.practice-response-title') + ' ');\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotated_' + gridColumnCount;\r\n                            // Create annotation indicator element.\r\n                            var allPageElement = this.getAllPageAnnotationIndicatorElement(responseData, componentPropsJson, key);\r\n                            // Checking whether the indicator is valid to display.\r\n                            if (allPageElement !== undefined) {\r\n                                this.mapGroupColumns('icon-holder', allPageElement);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, true));\r\n                            break;\r\n                        case gridColumnNames.AllFilesNotViewedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllFilesNotViewedIndicator_' + gridColumnCount;\r\n                            var allFilesNotViewedElement = (this.getAllFilesNotViewedIndicatorElement(responseData, componentPropsJson, key));\r\n                            this.mapGroupColumns('worklist-tile-footer', allFilesNotViewedElement);\r\n                            break;\r\n                        default:\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                // If there are elements queued to group, then group the elements.\r\n                if (this.groupColumns) {\r\n                    _workListCell = new gridCell();\r\n                    key = gridSeq.get(responseListCount) + '_Tile_Group_';\r\n                    _workListCell.columnElement = this.groupColumnElements('worklist-tile-footer', key);\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                _worklistRow.setRowStyle(this.setRowStyle(responseStatus));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForpracticeOpenDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of practice open responses\r\n     * @returns grid row collection.\r\n     */\r\n    PracticeWorklistHelper.prototype.getRowDefinionForClosedDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var key;\r\n        var _workListRowCellCollection = Array();\r\n        var _worklistRow;\r\n        var _workListCell;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.practiceworklist.closed.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowCellCollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _workListCell = new gridCell();\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key);\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getAllocatedDate(responseData, componentPropsJson, key, true);\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.closed, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getLinkedMessageElement(responseData, componentPropsJson, key, false);\r\n                            break;\r\n                        case gridColumnNames.AccuracyIndicator:\r\n                            // accuracy indicator is shown only when its values is set\r\n                            if (responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown) {\r\n                                key = gridSeq.get(responseListCount) + '_AccuracyIndicator_' + gridColumnCount;\r\n                                _workListCell.columnElement = this.getAccuracyIndicatorElement(responseData, componentPropsJson, key, false);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.AbsoluteMarksDifference:\r\n                            key = gridSeq.get(responseListCount) + '_AbsoluteMarksDifference_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarksDifferenceElement(responseData, componentPropsJson, key, enums.MarksDifferenceType.AbsoluteMarksDifference, false));\r\n                            break;\r\n                        case gridColumnNames.TotalMarksDifference:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMarksDifference_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarksDifferenceElement(responseData, componentPropsJson, key, enums.MarksDifferenceType.TotalMarksDifference, false));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotatedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllPageAnnotatedIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowCellCollection.push(_workListCell);\r\n                }\r\n                // Creating the grid row collection.\r\n                // Added parameters to set new column 'gridRightColumn' and set marksdifference value to that column\r\n                _workListRowCollection.push(this.getGridRow(Immutable.List().push(enums.ResponseStatus.none), responseData.displayId, _workListRowCellCollection, responseData.accuracyIndicatorTypeID));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForpracticeOpenDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of practice open responses\r\n     * @returns grid row collection.\r\n     */\r\n    PracticeWorklistHelper.prototype.getRowDefinionForOpenDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var key;\r\n        var _workListRowCellCollection = Array();\r\n        var _worklistRow;\r\n        var _workListCell;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.practiceworklist.open.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowCellCollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _workListCell = new gridCell();\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.practice, false);\r\n                            break;\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key);\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.open, true));\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getAllocatedDate(responseData, componentPropsJson, key, true);\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getLinkedMessageElement(responseData, componentPropsJson, key, false);\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotatedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllPageAnnotatedIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.AllFilesNotViewedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllFilesNotViewedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllFilesNotViewedIndicatorElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowCellCollection.push(_workListCell);\r\n                }\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowCellCollection));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * returns the resposne staus based on the worklist and its validator type\r\n     * @param worklistType\r\n     * @param responseMode\r\n     */\r\n    PracticeWorklistHelper.prototype.getResponseStatus = function (responseData, responseMode) {\r\n        var responseStatus;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n                responseStatus = worklistValidatorFactory.getValidator(worklistValidatorList.practiceOpen).\r\n                    submitButtonValidate(responseData);\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                responseStatus = Immutable.List().push(enums.ResponseStatus.none);\r\n                break;\r\n        }\r\n        return responseStatus;\r\n    };\r\n    /**\r\n     * returns the grdicolumns based on the response mode and worklist type\r\n     * @param responseMode\r\n     */\r\n    PracticeWorklistHelper.prototype.getGridColumns = function (resolvedGridColumnsJson, worklistType, responseMode, isFrozen) {\r\n        if (isFrozen === void 0) { isFrozen = false; }\r\n        var gridColumns;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n                gridColumns = (isFrozen === false) ?\r\n                    resolvedGridColumnsJson.marking.practiceworklist.open.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.practiceworklist.open.frozenRows.GridColumns;\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                gridColumns = (isFrozen === false) ?\r\n                    resolvedGridColumnsJson.marking.practiceworklist.closed.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.practiceworklist.closed.frozenRows.GridColumns;\r\n                break;\r\n        }\r\n        return gridColumns;\r\n    };\r\n    /**\r\n     * returns the accuracy type based on accuracy  and CC values\r\n     * @param responseMode\r\n     * @param responseData\r\n     */\r\n    PracticeWorklistHelper.prototype.getAccuracyType = function (responseMode, responseData) {\r\n        if (responseMode === enums.ResponseMode.closed) {\r\n            return responseData.accuracyIndicatorTypeID;\r\n        }\r\n        else {\r\n            return enums.AccuracyIndicatorType.Unknown;\r\n        }\r\n    };\r\n    /**\r\n     * returns whether the the given column is hidden or not\r\n     * @param responseColumn\r\n     */\r\n    PracticeWorklistHelper.prototype.getCellVisibility = function (column) {\r\n        var isHidden = false;\r\n        switch (column) {\r\n            case gridColumnNames.SLAOIndicator:\r\n                if (this.isStructuredQIG() === false) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n            case gridColumnNames.AllPageAnnotedIndicator:\r\n                if (this.isStructuredQIG() === true) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n        }\r\n        return isHidden;\r\n    };\r\n    return PracticeWorklistHelper;\r\n}(worklistHelperBase));\r\nmodule.exports = PracticeWorklistHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1185:
/* no static exports found */
/* all exports used */
/*!*****************************************************************************!*\
  !*** ./src/components/utility/grid/worklisthelpers/remarkworklisthelper.ts ***!
  \*****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar gridRow = __webpack_require__(/*! ../../../utility/grid/gridrow */ 296);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar worklistGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/worklistgridcolumns.json */ 449);\r\nvar worklistValidatorFactory = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorfactory */ 319);\r\nvar worklistValidatorList = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorlist */ 304);\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar worklistHelperBase = __webpack_require__(/*! ./worklisthelperbase */ 458);\r\nvar jsonRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar stringFormatHelper = __webpack_require__(/*! ../../../../utility/stringformat/stringformathelper */ 250);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar xmlHelper = __webpack_require__(/*! ../../../../utility/generic/xmlhelper */ 379);\r\nvar worklistStore = __webpack_require__(/*! ../../../../stores/worklist/workliststore */ 231);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\nvar localeStore = __webpack_require__(/*! ../../../../stores/locale/localestore */ 226);\r\nvar MarkChangeReason = __webpack_require__(/*! ../../../markschemestructure/markchangereason */ 502);\r\nvar SupervisorRemarkDecisionIcon = __webpack_require__(/*! ../../../markschemestructure/supervisorremarkdecisionicon */ 1042);\r\nvar qualityFeedbackHelper = __webpack_require__(/*! ../../../../utility/qualityfeedback/qualityfeedbackhelper */ 309);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../markeroperationmode/markeroperationmodefactory */ 232);\r\nvar tagStore = __webpack_require__(/*! ../../../../stores/tags/tagstore */ 331);\r\nvar examinerStore = __webpack_require__(/*! ../../../../stores/markerinformation/examinerstore */ 259);\r\n/**\r\n * class for WorkList Helper implementation\r\n */\r\nvar RemarkWorklistHelper = /** @class */ (function (_super) {\r\n    __extends(RemarkWorklistHelper, _super);\r\n    function RemarkWorklistHelper() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /* variable to holds the response type for showing the response type label*/\r\n        _this._responseType = enums.ResponseType.None;\r\n        return _this;\r\n    }\r\n    /**\r\n     * GenerateRowDefinion is used for generating row collection for WorkList Grid\r\n     * @param responseListData - list of directed remark open responses\r\n     * @param responseType - type of the response\r\n     * @param gridType - type of gridview tile/detail\r\n     * @returns grid row collection.\r\n     */\r\n    RemarkWorklistHelper.prototype.generateRowDefinion = function (responseListData, responseType, gridType) {\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(worklistGridColumnsJson);\r\n        this._immutableWorkListCollection = Immutable.List();\r\n        switch (responseType) {\r\n            case enums.ResponseMode.open:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForOpenDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForOpenTiled(responseListData);\r\n                        break;\r\n                }\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForClosedDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForClosedTiled(responseListData);\r\n                        break;\r\n                }\r\n                break;\r\n            case enums.ResponseMode.pending:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForPendingDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForPendingTiled(responseListData);\r\n                        break;\r\n                }\r\n                break;\r\n        }\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForDirectedRemarkOpenTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of directed remark open responses\r\n     * @returns grid row collection.\r\n     */\r\n    RemarkWorklistHelper.prototype.getRowDefinionForOpenTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.directedremarkworklist.open.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // Get fresh set of groups for every columns\r\n                this.emptyGroupColumns();\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            var element = this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.directedRemark);\r\n                            this.mapGroupColumns('worklist-tile-footer', element);\r\n                            break;\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.open, undefined, false, false, true);\r\n                            break;\r\n                        case gridColumnNames.MarkChangeReason:\r\n                            if (responseData[componentPropsJson.markingProgress] === 100 &&\r\n                                responseData.markChangeReasonVisible\r\n                                && responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown\r\n                                && responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Accurate\r\n                                && !responseData.markChangeReason) {\r\n                                key = gridSeq.get(responseListCount) + '_MarkChangeReason_' + gridColumnCount;\r\n                                var element_1 = this.getMarkChangeReasonColumnElement(responseData, componentPropsJson, key, enums.ResponseMode.open);\r\n                                this.mapGroupColumns('icon-holder', element_1);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.SupervisorRemarkDecision:\r\n                            if (this.isSupervisorRemarkDecisionVisible() &&\r\n                                (responseData.supervisorRemarkMarkChangeReasonID === 0) &&\r\n                                responseData.markingProgress === 100) {\r\n                                key = gridSeq.get(responseListCount) + '_RemarkdecisonButton_' + gridColumnCount;\r\n                                var element_2 = this.getSupervisorDecisionColumnElement(responseData, key, true);\r\n                                this.mapGroupColumns('icon-holder', element_2);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            // show only if there are blocking exceptions\r\n                            if (responseData[componentPropsJson.hasBlockingExceptions]) {\r\n                                var element_3 = this.getLinkedExceptionElement(responseData, componentPropsJson, key);\r\n                                this.mapGroupColumns('icon-holder', element_3);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotated_' + gridColumnCount;\r\n                            // Create annotation indicator element.\r\n                            var allPageElement = this.getAllPageAnnotationIndicatorElement(responseData, componentPropsJson, key);\r\n                            // Checking whether the indicator is valid to display.\r\n                            if (allPageElement !== undefined) {\r\n                                this.mapGroupColumns('icon-holder', allPageElement);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, true));\r\n                            break;\r\n                        case gridColumnNames.AllFilesNotViewedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllFilesNotViewedIndicator_' + gridColumnCount;\r\n                            var allFilesNotViewedElement = (this.getAllFilesNotViewedIndicatorElement(responseData, componentPropsJson, key));\r\n                            this.mapGroupColumns('worklist-tile-footer', allFilesNotViewedElement);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                // If there are elements queued to group, then group the elements.\r\n                if (this.groupColumns) {\r\n                    _workListCell = new gridCell();\r\n                    key = gridSeq.get(responseListCount) + '_Tile_Group_';\r\n                    _workListCell.columnElement = this.groupColumnElements('worklist-tile-footer', key);\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                _worklistRow.setRowStyle(this.setRowStyle(responseStatus));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * Gets the response label type for remark worklist\r\n     * @param responseData\r\n     */\r\n    RemarkWorklistHelper.prototype.getResponseLabelType = function (responseData) {\r\n        var isSeedResponse = ((responseData).seedTypeId !== enums.SeedType.None)\r\n            && (responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown);\r\n        return isSeedResponse ? enums.ResponseType.Seed : enums.ResponseType.None;\r\n    };\r\n    /**\r\n     * getRowDefinionForClosedTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of directed open responses\r\n     * @returns grid row collection.\r\n     */\r\n    RemarkWorklistHelper.prototype.getRowDefinionForClosedTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        var isSeedHighlighted = false;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.directedremarkworklist.closed.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // Get fresh set of groups for every columns\r\n                this.emptyGroupColumns();\r\n                var isSeedResponse = responseData.seedTypeId !==\r\n                    enums.SeedType.None ? true : false;\r\n                var isEurSeedResponse = responseData.seedTypeId ===\r\n                    enums.SeedType.EUR;\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            this._responseType = this.getResponseLabelType(responseData);\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.closed, undefined, false, isEurSeedResponse, true, this._responseType);\r\n                            break;\r\n                        case gridColumnNames.MarksDifference:\r\n                            if (isEurSeedResponse === true && markerOperationModeFactory.operationMode.isAutomaticQualityFeedbackCCOn) {\r\n                                key = gridSeq.get(responseListCount) + '_MarksDifference_' + gridColumnCount;\r\n                                _workListCell.columnElement = this.getMarksDifferenceColumnElement(responseData, componentPropsJson, key, true);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                var _rowStyle = this.setRowStyle(Immutable.List().push(enums.ResponseStatus.none), isEurSeedResponse === true ? responseData.accuracyIndicatorTypeID : enums.AccuracyIndicatorType.Unknown);\r\n                if (this._responseType !== enums.ResponseType.None) {\r\n                    _rowStyle += ' labeled';\r\n                }\r\n                if (isSeedResponse && this.showSeedLabel) {\r\n                    _rowStyle += ' seed';\r\n                }\r\n                if (!isSeedHighlighted\r\n                    && qualityFeedbackHelper.isSeedNeededToBeHighlighted(responseData.\r\n                        qualityFeedbackStatusId, isEurSeedResponse)) {\r\n                    _rowStyle += ' highlight-seed';\r\n                    isSeedHighlighted = true;\r\n                }\r\n                _worklistRow.setRowStyle(_rowStyle);\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * Get directed remark pending worklist details.\r\n     * @param {WorklistBase} responseListData\r\n     * @returns\r\n     */\r\n    RemarkWorklistHelper.prototype.getRowDefinionForPendingTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.directedremarkworklist.pending.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + 'ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.pending);\r\n                            break;\r\n                        case gridColumnNames.GracePeriodTime:\r\n                            key = gridSeq.get(responseListCount) + 'GracePeriodTime_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getAllocatedDateElement(responseData, componentPropsJson, key, false, false, true);\r\n                            break;\r\n                        case gridColumnNames.MarksDifference:\r\n                            key = gridSeq.get(responseListCount) + '_MarksDifference_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getMarksDifferenceColumnElement(responseData, componentPropsJson, key, true);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                _worklistRow.setRowStyle(this.setRowStyle(Immutable.List().push(enums.ResponseStatus.none), undefined));\r\n                _worklistRow.setRowTitle(this.setRowTitle(responseData.accuracyIndicatorTypeID));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForLiveOpenDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of live open responses\r\n     * @returns grid row collection.\r\n     */\r\n    RemarkWorklistHelper.prototype.getRowDefinionForOpenDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        var isSeedResponseVisible;\r\n        if (responseListData != null) {\r\n            this.setShowOriginalMarkerName(responseListData);\r\n            this.setNonNumeric(!responseListData.hasNumericMark);\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.directedremarkworklist.open.detailview.GridColumns;\r\n                //this.resolvedGridColumnsJson.marking.directedremarkworklist.open.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.directedRemark, false));\r\n                            break;\r\n                        case gridColumnNames.SpecialistType:\r\n                            key = gridSeq.get(responseListCount) + '_SpecialistType_' + gridColumnCount;\r\n                            _workListCell.columnElement =\r\n                                (this.getGenericTextElement(responseData.specialistType ===\r\n                                    localeStore.instance.TranslateText('marking.worklist.response-data.specialisttype-' + responseData.specialistType) ?\r\n                                    localeStore.instance.TranslateText('marking.worklist.response-data.specialisttype-' + responseData.specialistType)\r\n                                    : responseData.specialistType, key));\r\n                            break;\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.open, true));\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllocatedDate(responseData, componentPropsJson, key, true));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotatedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllPageAnnotatedIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.OriginalMarkerName:\r\n                            key = gridSeq.get(responseListCount) + '_OriginalMarker_' + gridColumnCount;\r\n                            var originalMarkerName = this.getFormattedName(responseData.originalMarkerInitials, responseData.originalMarkerSurname);\r\n                            _workListCell.columnElement = (this.getGenericTextElement(originalMarkerName, key));\r\n                            break;\r\n                        case gridColumnNames.CentreNum:\r\n                            if (this.getRemarkSeedingCCValue() === false) {\r\n                                key = gridSeq.get(responseListCount) + '_Centre_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getGenericTextElement(responseData.centreNumber, key));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.CentreCandidateNum:\r\n                            key = gridSeq.get(responseListCount) + '_CentreCandidate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreCandidateNumber, key));\r\n                            break;\r\n                        case gridColumnNames.MarkChangeReason:\r\n                            if (responseData[componentPropsJson.markingProgress] === 100 &&\r\n                                responseData.markChangeReasonVisible\r\n                                && responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown\r\n                                && responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Accurate\r\n                                && !responseData.markChangeReason) {\r\n                                key = gridSeq.get(responseListCount) + '_MarkChangeReason_' + gridColumnCount;\r\n                                _workListCell.columnElement = this.getMarkChangeReasonColumnElement(responseData, componentPropsJson, key, enums.ResponseMode.open);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.SupervisorRemarkDecision:\r\n                            if (this.isSupervisorRemarkDecisionVisible() &&\r\n                                (responseData.supervisorRemarkMarkChangeReasonID === 0) &&\r\n                                responseData.markingProgress === 100) {\r\n                                key = gridSeq.get(responseListCount) + '_RemarkdecisonButton_' + gridColumnCount;\r\n                                _workListCell.columnElement = this.getSupervisorDecisionColumnElement(responseData, key);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.ResponseTypeLabel:\r\n                            isSeedResponseVisible = responseData.seedTypeId !== enums.SeedType.None;\r\n                            var responseType = isSeedResponseVisible ? enums.ResponseType.Seed : enums.ResponseType.None;\r\n                            key = gridSeq.get(responseListCount) + '_ResponseTypeLabel_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getResponseTypeLabel(key, isSeedResponseVisible, responseType));\r\n                            break;\r\n                        case gridColumnNames.OriginalMark:\r\n                            if (responseData.markingProgress === 100) {\r\n                                key = gridSeq.get(responseListCount) + '_OriginalMark_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getOriginalMarkElement(key, responseData, componentPropsJson, (responseData.markingProgress === 100)));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.OriginalMarkAccuracy:\r\n                            // accuracy indicator is shown only when its values is set\r\n                            if (responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown\r\n                                && responseData.markingProgress === 100) {\r\n                                key = gridSeq.get(responseListCount) + '_OriginalMarkAccuracy_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getOriginalMarkAccuracyElement(key, responseData, componentPropsJson, (responseData.markingProgress === 100)));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.Finalmarkselected:\r\n                            var decisionType = this.getSupervisorRemarkDecisionType(responseData);\r\n                            if (this.isSupervisorRemarkDecisionVisible() && decisionType !== null) {\r\n                                key = gridSeq.get(responseListCount) + '_Finalmarkselected_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getGenericTextElement(decisionType, key));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.TagIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_TagIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTag(key, responseData.tagId, tagStore.instance.tags, responseData.markGroupId));\r\n                            break;\r\n                        case gridColumnNames.AllFilesNotViewedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllFilesNotViewedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllFilesNotViewedIndicatorElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        default:\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.open, responseData), undefined));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * get supervisor remark decision type\r\n     * @param response\r\n     */\r\n    RemarkWorklistHelper.prototype.getSupervisorRemarkDecisionType = function (response) {\r\n        var supervisorRemarkFinalMarkSetID = response.supervisorRemarkFinalMarkSetID;\r\n        if (supervisorRemarkFinalMarkSetID === 2) {\r\n            return localeStore.instance.TranslateText('marking.worklist.supervisor-remark-decision.original-marks-chosen');\r\n        }\r\n        else if (supervisorRemarkFinalMarkSetID === 1) {\r\n            return localeStore.instance.TranslateText('marking.worklist.supervisor-remark-decision.remark-chosen');\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    };\r\n    /**\r\n     * Generate row defenitions for pending detailed worklist in live\r\n     * @param responseListData\r\n     */\r\n    RemarkWorklistHelper.prototype.getRowDefinionForPendingDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var _worklistRow;\r\n        var componentPropsJson;\r\n        var key;\r\n        // Grid columns\r\n        var gridLeftColumn = Array();\r\n        var gridMiddleColumn = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _workListCell;\r\n        if (responseListData != null) {\r\n            this.setShowOriginalMarkerName(responseListData);\r\n            this.setNonNumeric(!responseListData.hasNumericMark);\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.directedremarkworklist.pending.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + 'TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.SpecialistType:\r\n                            key = gridSeq.get(responseListCount) + '_SpecialistType_' + gridColumnCount;\r\n                            _workListCell.columnElement =\r\n                                (this.getGenericTextElement(responseData.specialistType ===\r\n                                    localeStore.instance.TranslateText('marking.worklist.response-data.specialisttype-' + responseData.specialistType) ?\r\n                                    localeStore.instance.TranslateText('marking.worklist.response-data.specialisttype-' + responseData.specialistType)\r\n                                    : responseData.specialistType, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.pending, true));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + 'LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + 'LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.GracePeriodTime:\r\n                            key = gridSeq.get(responseListCount) + 'GracePeriodTime_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGracePeriodElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.OriginalMarkerName:\r\n                            key = gridSeq.get(responseListCount) + '_OriginalMarker_' + gridColumnCount;\r\n                            var originalMarkerName = this.getFormattedName(responseData.originalMarkerInitials, responseData.originalMarkerSurname);\r\n                            _workListCell.columnElement = (this.getGenericTextElement(originalMarkerName, key));\r\n                            break;\r\n                        case gridColumnNames.CentreNum:\r\n                            key = gridSeq.get(responseListCount) + '_Centre_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreNumber, key));\r\n                            break;\r\n                        case gridColumnNames.CentreCandidateNum:\r\n                            key = gridSeq.get(responseListCount) + '_CentreCandidate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreCandidateNumber, key));\r\n                            break;\r\n                        case gridColumnNames.OriginalMark:\r\n                            key = gridSeq.get(responseListCount) + '_OriginalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getOriginalMarkElement(key, responseData, componentPropsJson, true));\r\n                            break;\r\n                        case gridColumnNames.OriginalMarkAccuracy:\r\n                            // accuracy indicator is shown only when its values is set\r\n                            if (responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown) {\r\n                                key = gridSeq.get(responseListCount) + '_OriginalMarkAccuracy_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getOriginalMarkAccuracyElement(key, responseData, componentPropsJson, true));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.Finalmarkselected:\r\n                            var decisionType = this.getSupervisorRemarkDecisionType(responseData);\r\n                            if (this.isSupervisorRemarkDecisionVisible()) {\r\n                                key = gridSeq.get(responseListCount) + '_Finalmarkselected_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getGenericTextElement(decisionType, key));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.TagIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_TagIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTag(key, responseData.tagId, tagStore.instance.tags, responseData.markGroupId));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.pending, responseData), undefined));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForLiveOpenDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of live open responses\r\n     * @returns grid row collection.\r\n     */\r\n    RemarkWorklistHelper.prototype.getRowDefinionForClosedDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var _worklistRow;\r\n        var componentPropsJson;\r\n        var key;\r\n        // Grid columns\r\n        var gridLeftColumn = Array();\r\n        var gridMiddleColumn = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _workListCell;\r\n        var isSeedResponse;\r\n        var isSeedHighlighted = false;\r\n        var cssClass;\r\n        if (responseListData != null) {\r\n            this.setShowOriginalMarkerName(responseListData);\r\n            this.setNonNumeric(!responseListData.hasNumericMark);\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.directedremarkworklist.closed.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId = (responseData.isWholeResponse &&\r\n                    responseData.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.closed);\r\n                var isEurSeedResponse = responseData.seedTypeId ===\r\n                    enums.SeedType.EUR;\r\n                gridLeftColumn = new Array();\r\n                gridMiddleColumn = new Array();\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.SpecialistType:\r\n                            key = gridSeq.get(responseListCount) + '_SpecialistType_' + gridColumnCount;\r\n                            _workListCell.columnElement =\r\n                                (this.getGenericTextElement(responseData.specialistType ===\r\n                                    localeStore.instance.TranslateText('marking.worklist.response-data.specialisttype-' + responseData.specialistType) ?\r\n                                    localeStore.instance.TranslateText('marking.worklist.response-data.specialisttype-' + responseData.specialistType)\r\n                                    : responseData.specialistType, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.closed, false));\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllocatedDateElement(responseData, componentPropsJson, key, false, false, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.OriginalMarkerName:\r\n                            key = gridSeq.get(responseListCount) + '_OriginalMarker_' + gridColumnCount;\r\n                            var originalMarkerName = this.getFormattedName(responseData.originalMarkerInitials, responseData.originalMarkerSurname);\r\n                            _workListCell.columnElement = (this.getGenericTextElement(originalMarkerName, key));\r\n                            break;\r\n                        case gridColumnNames.CentreNum:\r\n                            key = gridSeq.get(responseListCount) + '_Centre_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreNumber, key));\r\n                            break;\r\n                        case gridColumnNames.CentreCandidateNum:\r\n                            key = gridSeq.get(responseListCount) + '_CentreCandidate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreCandidateNumber, key));\r\n                            break;\r\n                        case gridColumnNames.AccuracyIndicator:\r\n                            // accuracy indicator is shown only when its values is set\r\n                            if (isEurSeedResponse === true\r\n                                && responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown) {\r\n                                key = gridSeq.get(responseListCount) + '_AccuracyIndicator_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getAccuracyIndicatorElement(responseData, componentPropsJson, key, false));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.AbsoluteMarksDifference:\r\n                            if (isEurSeedResponse === true) {\r\n                                key = gridSeq.get(responseListCount) + '_AbsoluteMarksDifference_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getMarksDifferenceElement(responseData, componentPropsJson, key, enums.MarksDifferenceType.AbsoluteMarksDifference, false));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.TotalMarksDifference:\r\n                            if (isEurSeedResponse === true) {\r\n                                key = gridSeq.get(responseListCount) + '_TotalMarksDifference_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getMarksDifferenceElement(responseData, componentPropsJson, key, enums.MarksDifferenceType.TotalMarksDifference, false));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.ResponseTypeLabel:\r\n                            var responseType = this.getResponseLabelType(responseData);\r\n                            var isResponseTypeLabelVisible = responseType !== enums.ResponseType.None;\r\n                            key = gridSeq.get(responseListCount) + '_ResponseTypeLabel_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getResponseTypeLabel(key, isResponseTypeLabelVisible, responseType));\r\n                            if (!isSeedHighlighted && qualityFeedbackHelper.isSeedNeededToBeHighlighted(responseData.qualityFeedbackStatusId, isResponseTypeLabelVisible)) {\r\n                                cssClass = 'highlight-seed';\r\n                                isSeedHighlighted = true;\r\n                            }\r\n                            else {\r\n                                cssClass = '';\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.OriginalMark:\r\n                            key = gridSeq.get(responseListCount) + '_OriginalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getOriginalMarkElement(key, responseData, componentPropsJson, true));\r\n                            break;\r\n                        case gridColumnNames.OriginalMarkAccuracy:\r\n                            // accuracy indicator is shown only when its values is set\r\n                            if (responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown) {\r\n                                key = gridSeq.get(responseListCount) + '_OriginalMarkAccuracy_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getOriginalMarkAccuracyElement(key, responseData, componentPropsJson, true));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.Finalmarkselected:\r\n                            var decisionType = this.getSupervisorRemarkDecisionType(responseData);\r\n                            if (this.isSupervisorRemarkDecisionVisible() && decisionType !== null) {\r\n                                key = gridSeq.get(responseListCount) + '_Finalmarkselected_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getGenericTextElement(decisionType, key));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.TagIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_TagIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTag(key, responseData.tagId, tagStore.instance.tags, responseData.markGroupId));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                var additionalComponent = this.renderQualityFeedbackBanner(responseListCount, enums.WorklistType.directedRemark);\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.closed, responseData), additionalComponent, cssClass));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * Get the out put of formatted username\r\n     * @param {userInfoArgument} userInforArg\r\n     * @returns\r\n     */\r\n    RemarkWorklistHelper.prototype.getFormattedName = function (initials, surname) {\r\n        var formattedString = stringFormatHelper.getUserNameFormat().toLowerCase();\r\n        formattedString = formattedString.replace('{initials}', initials);\r\n        formattedString = formattedString.replace('{surname}', surname);\r\n        return formattedString;\r\n    };\r\n    /**\r\n     * returns whether the the given column is hidden or not\r\n     * @param responseColumn\r\n     */\r\n    RemarkWorklistHelper.prototype.getCellVisibility = function (column) {\r\n        var isHidden = false;\r\n        var specialistResponseCC = (configurableCharacteristicsHelper.getExamSessionCCValue(configurableCharacteristicsNames.SpecialistResponseMarking, qigStore.instance.selectedQIGForMarkerOperation.examSessionId).toLowerCase() === 'true');\r\n        switch (column) {\r\n            case gridColumnNames.AbsoluteMarksDifference:\r\n            case gridColumnNames.TotalMarksDifference:\r\n            case gridColumnNames.AccuracyIndicator:\r\n                isHidden = !((configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.AutomaticQualityFeedback, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId) === 'true')\r\n                    && (this.getRemarkSeedingCCValue() === true));\r\n                break;\r\n            case gridColumnNames.OriginalMarkerName:\r\n                isHidden = (this.getRemarkSeedingCCValue() === true) || (this.showOriginalMarkerName === false);\r\n                break;\r\n            case gridColumnNames.SLAOIndicator:\r\n                if (this.isStructuredQIG() === false) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n            case gridColumnNames.AllPageAnnotedIndicator:\r\n                if (this.isStructuredQIG() === true) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n            case gridColumnNames.TotalMark:\r\n                if (this.isNonNumeric() === true) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n            case gridColumnNames.ResponseTypeLabel:\r\n                isHidden = markerOperationModeFactory.operationMode.isSeedLabelHidden;\r\n                break;\r\n            case gridColumnNames.SupervisorRemarkDecision:\r\n            case gridColumnNames.Finalmarkselected:\r\n                isHidden = !this.isSupervisorRemarkColumnsVisible;\r\n                break;\r\n            case gridColumnNames.OriginalMark:\r\n            case gridColumnNames.OriginalMarkAccuracy:\r\n                isHidden = !this.isSupervisorRemarkColumnsVisible || this.isNonNumeric();\r\n                break;\r\n            case gridColumnNames.CentreNum:\r\n                isHidden = (worklistStore.instance.getResponseMode === enums.ResponseMode.open) &&\r\n                    (this.getRemarkSeedingCCValue() === true) ? true : false;\r\n                break;\r\n            case gridColumnNames.SpecialistType:\r\n                isHidden = !((examinerStore.instance.getMarkerInformation.isSpecialist\r\n                    || (qigStore.instance.getSelectedQIGForTheLoggedInUser &&\r\n                        qigStore.instance.getSelectedQIGForTheLoggedInUser.role === enums.ExaminerRole.principalExaminer))\r\n                    && specialistResponseCC);\r\n                break;\r\n        }\r\n        return isHidden;\r\n    };\r\n    Object.defineProperty(RemarkWorklistHelper.prototype, \"isSupervisorRemarkColumnsVisible\", {\r\n        /**\r\n         * return whether we need to show/hide the supervisor remark worklist columns\r\n         */\r\n        get: function () {\r\n            var markSchemeGroupId = qigStore.instance.selectedQIGForMarkerOperation ?\r\n                qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId : 0;\r\n            var isSupervisorRemarkDecisionCCOn = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SupervisorRemarkDecision, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n            return (isSupervisorRemarkDecisionCCOn\r\n                && worklistStore.instance.getRemarkRequestType === enums.RemarkRequestType.SupervisorRemark);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * returns the grdicolumns based on the response mode and worklist type\r\n     * @param responseMode\r\n     */\r\n    RemarkWorklistHelper.prototype.getGridColumns = function (resolvedGridColumnsJson, worklistType, responseMode, isFrozen) {\r\n        if (isFrozen === void 0) { isFrozen = false; }\r\n        var gridColumns;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n                gridColumns = (isFrozen === false) ?\r\n                    resolvedGridColumnsJson.marking.directedremarkworklist.open.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.liveworklist.open.frozenRows.GridColumns;\r\n                break;\r\n            case enums.ResponseMode.pending:\r\n                gridColumns = (isFrozen === false) ?\r\n                    resolvedGridColumnsJson.marking.directedremarkworklist.pending.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.liveworklist.pending.frozenRows.GridColumns;\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                gridColumns = (isFrozen === false) ?\r\n                    resolvedGridColumnsJson.marking.directedremarkworklist.closed.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.liveworklist.closed.frozenRows.GridColumns;\r\n                break;\r\n        }\r\n        return gridColumns;\r\n    };\r\n    /**\r\n     * returns the accuracy type based on accuracy  and CC values\r\n     * @param responseMode\r\n     * @param responseData\r\n     */\r\n    RemarkWorklistHelper.prototype.getAccuracyType = function (responseMode, responseData) {\r\n        var accuracyType;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n            case enums.ResponseMode.pending:\r\n                accuracyType = enums.AccuracyIndicatorType.Unknown;\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                var qualityFeedbackCC = (configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.AutomaticQualityFeedback, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId) === 'true');\r\n                var isSeedResponse = (responseData.seedTypeId !== enums.SeedType.None) &&\r\n                    (responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown);\r\n                accuracyType = ((isSeedResponse === true && qualityFeedbackCC === true && this.getRemarkSeedingCCValue() === true) ?\r\n                    responseData.accuracyIndicatorTypeID : enums.AccuracyIndicatorType.Unknown);\r\n                break;\r\n        }\r\n        return accuracyType;\r\n    };\r\n    /**\r\n     * returns the resposne staus based on the worklist and its validator type\r\n     * @param worklistType\r\n     * @param responseMode\r\n     */\r\n    RemarkWorklistHelper.prototype.getResponseStatus = function (responseData, responseMode) {\r\n        var responseStatus;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n                responseStatus = worklistValidatorFactory.getValidator(worklistValidatorList.directedRemarkOpen).\r\n                    submitButtonValidate(responseData);\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n            case enums.ResponseMode.pending:\r\n                responseStatus = Immutable.List().push(enums.ResponseStatus.none);\r\n                break;\r\n        }\r\n        return responseStatus;\r\n    };\r\n    /**\r\n     * set the variable of showOriginalMarkerName based on the value in worklist data.\r\n     * @param responseListData\r\n     */\r\n    RemarkWorklistHelper.prototype.setShowOriginalMarkerName = function (responseListData) {\r\n        var _responseListData = responseListData.responses.toArray();\r\n        for (var _responseCount = 0; _responseCount < _responseListData.length; _responseCount++) {\r\n            if (_responseListData[_responseCount].showOriginalMarkerName === true) {\r\n                this.showOriginalMarkerName = true;\r\n                return;\r\n            }\r\n        }\r\n        this.showOriginalMarkerName = false;\r\n    };\r\n    /**\r\n     * get the value of remark seeding cc based on the remark type.\r\n     */\r\n    RemarkWorklistHelper.prototype.getRemarkSeedingCCValue = function () {\r\n        var ccValue = configurableCharacteristicsHelper.getExamSessionCCValue(configurableCharacteristicsNames.RemarkSeeding, qigStore.instance.selectedQIGForMarkerOperation.examSessionId);\r\n        if (ccValue && ccValue !== '') {\r\n            var xmlHelperObj = new xmlHelper(ccValue);\r\n            var remarkType = xmlHelperObj.getNodeValueByName('RemarkType');\r\n            remarkType = (remarkType) ? remarkType.replace(/ /g, '') : '';\r\n            return (enums.RemarkRequestType[worklistStore.instance.getRemarkRequestType] === remarkType);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * creating react element for the  MarkChangeReason component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the MarkingProgress component\r\n     * @param seq - key value for the component\r\n     * @param responseMode - response mode\r\n     * @returns JSX.Element.\r\n     */\r\n    RemarkWorklistHelper.prototype.getMarkChangeReasonColumnElement = function (responseData, propsNames, seq, responseMode) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isInResponse: false,\r\n            markChangeReason: responseData.markChangeReason\r\n        };\r\n        var markChangeReason = Immutable.List([React.createElement(MarkChangeReason, componentProps)]);\r\n        return this.getWrappedColumn(markChangeReason, 'col wl-eur-reason-holder', seq + 'wrapped').columnElement;\r\n    };\r\n    /**\r\n     * get supervisor remark decision visibility\r\n     * @param response\r\n     */\r\n    RemarkWorklistHelper.prototype.isSupervisorRemarkDecisionVisible = function () {\r\n        var markSchemeGroupId = qigStore.instance.selectedQIGForMarkerOperation ?\r\n            qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId : 0;\r\n        var isSupervisorRemarkDecisionCCOn = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SupervisorRemarkDecision, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        return (isSupervisorRemarkDecisionCCOn\r\n            && worklistStore.instance.getRemarkRequestType === enums.RemarkRequestType.SupervisorRemark);\r\n    };\r\n    /**\r\n     * creating react element for the  Supervisordecision component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the MarkingProgress component\r\n     * @param seq - key value for the component\r\n     */\r\n    RemarkWorklistHelper.prototype.getSupervisorDecisionColumnElement = function (responseData, seq, isTileView) {\r\n        if (isTileView === void 0) { isTileView = false; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            isTileView: isTileView,\r\n            selectedLanguage: localeStore.instance.Locale\r\n        };\r\n        return React.createElement(SupervisorRemarkDecisionIcon, componentProps);\r\n    };\r\n    return RemarkWorklistHelper;\r\n}(worklistHelperBase));\r\nmodule.exports = RemarkWorklistHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1186:
/* no static exports found */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/components/utility/grid/worklisthelpers/secondstandardisationworklisthelper.ts ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar gridRow = __webpack_require__(/*! ../../../utility/grid/gridrow */ 296);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar worklistGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/worklistgridcolumns.json */ 449);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar localeStore = __webpack_require__(/*! ../../../../stores/locale/localestore */ 226);\r\nvar worklistValidatorFactory = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorfactory */ 319);\r\nvar worklistValidatorList = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorlist */ 304);\r\nvar worklistHelperBase = __webpack_require__(/*! ./worklisthelperbase */ 458);\r\nvar josnRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../markeroperationmode/markeroperationmodefactory */ 232);\r\n/**\r\n * class for WorkList Helper implementation\r\n */\r\nvar StandardisationWorklistHelper = /** @class */ (function (_super) {\r\n    __extends(StandardisationWorklistHelper, _super);\r\n    function StandardisationWorklistHelper() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * GenerateRowDefinion is used for generating row collection for WorkList Grid\r\n     * @param responseListData - list of second std responses\r\n     * @param responseType - type of the response\r\n     * @param gridType - type of gridview tile/detail\r\n     * @returns grid row collection.\r\n     */\r\n    StandardisationWorklistHelper.prototype.generateRowDefinion = function (responseListData, responseType, gridType) {\r\n        this.resolvedGridColumnsJson = josnRefResolver.resolveRefs(worklistGridColumnsJson);\r\n        this._immutableWorkListCollection = Immutable.List();\r\n        switch (responseType) {\r\n            case enums.ResponseMode.open:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForOpenDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForOpenTiled(responseListData);\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForClosedDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForClosedTiled(responseListData);\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n        }\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForClosedTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of standardisation open responses\r\n     * @returns grid row collection.\r\n     */\r\n    StandardisationWorklistHelper.prototype.getRowDefinionForClosedTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        var isESTeamMember = qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember;\r\n        if (responseListData !== null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.standardisationworklist.closed.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.closed, (isESTeamMember ?\r\n                                localeStore.instance.TranslateText('marking.worklist.response-data.stm-standardisation-response-title') :\r\n                                localeStore.instance.TranslateText('marking.worklist.response-data.second-standardisation-response-title'))\r\n                                + ' ');\r\n                            break;\r\n                        case gridColumnNames.MarksDifference:\r\n                            key = gridSeq.get(responseListCount) + '_MarksDifference_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getMarksDifferenceColumnElement(responseData, componentPropsJson, key, true);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                // setting row style and row title according to its accuracy type\r\n                _worklistRow.setRowStyle(this.setRowStyle(Immutable.List().push(enums.ResponseStatus.none), this.getAccuracyType(enums.ResponseMode.closed, responseData)));\r\n                _worklistRow.setRowTitle(this.setRowTitle(this.getAccuracyType(enums.ResponseMode.closed, responseData)));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForOpenTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of Standardisation open responses\r\n     * @returns grid row collection.\r\n     */\r\n    StandardisationWorklistHelper.prototype.getRowDefinionForOpenTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        var isESTeamMember = qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember;\r\n        if (responseListData !== null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                /** Getting the worklist data row */\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.standardisationworklist.open.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // Get fresh set of groups for every columns\r\n                this.emptyGroupColumns();\r\n                /** Getting the worklist columns */\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            var element = this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.secondstandardisation);\r\n                            this.mapGroupColumns('worklist-tile-footer', element);\r\n                            break;\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.open, (isESTeamMember ?\r\n                                localeStore.instance.TranslateText('marking.worklist.response-data.stm-standardisation-response-title') :\r\n                                localeStore.instance.TranslateText('marking.worklist.response-data.second-standardisation-response-title'))\r\n                                + ' ');\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotated_' + gridColumnCount;\r\n                            // Create annotation indicator element.\r\n                            var allPageElement = this.getAllPageAnnotationIndicatorElement(responseData, componentPropsJson, key);\r\n                            // Checking whether the indicator is valid to display.\r\n                            if (allPageElement !== undefined) {\r\n                                this.mapGroupColumns('icon-holder', allPageElement);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, true));\r\n                            break;\r\n                        case gridColumnNames.AllFilesNotViewedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllFilesNotViewedIndicator_' + gridColumnCount;\r\n                            var allFilesNotViewedElement = (this.getAllFilesNotViewedIndicatorElement(responseData, componentPropsJson, key));\r\n                            this.mapGroupColumns('worklist-tile-footer', allFilesNotViewedElement);\r\n                            break;\r\n                        default:\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                // If there are elements queued to group, then group the elements.\r\n                if (this.groupColumns) {\r\n                    _workListCell = new gridCell();\r\n                    key = gridSeq.get(responseListCount) + '_Tile_Group_';\r\n                    _workListCell.columnElement = this.groupColumnElements('worklist-tile-footer', key);\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                _worklistRow.setRowStyle(this.setRowStyle(responseStatus));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForOpenDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of standardisation open responses\r\n     * @returns grid row collection.\r\n     */\r\n    StandardisationWorklistHelper.prototype.getRowDefinionForOpenDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                /** Getting the worklist data row */\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.standardisationworklist.open.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                /** Getting the worklist columns */\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.standardisation, false));\r\n                            break;\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.open, true));\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllocatedDate(responseData, componentPropsJson, key, true));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotatedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllPageAnnotatedIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.AllFilesNotViewedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllFilesNotViewedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllFilesNotViewedIndicatorElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        default:\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.open, responseData), undefined));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForClosedDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of standardisation open responses\r\n     * @returns grid row collection.\r\n     */\r\n    StandardisationWorklistHelper.prototype.getRowDefinionForClosedDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                /** Getting the worklist data row */\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.standardisationworklist.closed.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                /** Getting the worklist columns */\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.closed, false));\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllocatedDate(responseData, componentPropsJson, key, true));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotatedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllPageAnnotatedIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.AccuracyIndicator:\r\n                            // accuracy indicator is shown only when its values is set\r\n                            if (responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown) {\r\n                                key = gridSeq.get(responseListCount) + '_AccuracyIndicator_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getAccuracyIndicatorElement(responseData, componentPropsJson, key, false));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.AbsoluteMarksDifference:\r\n                            key = gridSeq.get(responseListCount) + '_AbsoluteMarksDifference_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarksDifferenceElement(responseData, componentPropsJson, key, enums.MarksDifferenceType.AbsoluteMarksDifference, false));\r\n                            break;\r\n                        case gridColumnNames.TotalMarksDifference:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMarksDifference_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarksDifferenceElement(responseData, componentPropsJson, key, enums.MarksDifferenceType.TotalMarksDifference, false));\r\n                            break;\r\n                        case gridColumnNames.ReviewedByLabel:\r\n                            key = gridSeq.get(responseListCount) + '_ReviewedByLabel_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getReviewedByLabel(key, responseData));\r\n                            break;\r\n                        case gridColumnNames.SupervisorReviewComment:\r\n                            key = gridSeq.get(responseListCount) + '_SupervisorReviewComment_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSupervisorReviewComment(key, responseData));\r\n                            break;\r\n                        default:\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(Immutable.List().push(enums.ResponseStatus.none), responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.closed, responseData), undefined));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * returns the resposne staus based on the worklist and its validator type\r\n     * @param worklistType\r\n     * @param responseMode\r\n     */\r\n    StandardisationWorklistHelper.prototype.getResponseStatus = function (responseData, responseMode) {\r\n        var responseStatus;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n                responseStatus = worklistValidatorFactory.getValidator(worklistValidatorList.standardisationOpen).\r\n                    submitButtonValidate(responseData);\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                responseStatus = Immutable.List().push(enums.ResponseStatus.none);\r\n                break;\r\n        }\r\n        return responseStatus;\r\n    };\r\n    /**\r\n     * returns whether the the given column is hidden or not\r\n     * @param responseColumn\r\n     */\r\n    StandardisationWorklistHelper.prototype.getCellVisibility = function (column) {\r\n        var isHidden = false;\r\n        switch (column) {\r\n            case gridColumnNames.AbsoluteMarksDifference:\r\n            case gridColumnNames.TotalMarksDifference:\r\n            case gridColumnNames.AccuracyIndicator:\r\n                isHidden = !(configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ShowStandardisationDefinitiveMarks, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId) === 'true');\r\n                break;\r\n            case gridColumnNames.SLAOIndicator:\r\n                if (this.isStructuredQIG() === false) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n            case gridColumnNames.AllPageAnnotedIndicator:\r\n                if (this.isStructuredQIG() === true) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n            case gridColumnNames.ReviewedByLabel:\r\n                isHidden = markerOperationModeFactory.operationMode.isReviewedByLabelHidden;\r\n                break;\r\n            case gridColumnNames.SupervisorReviewComment:\r\n                isHidden = markerOperationModeFactory.operationMode.isSupervisorReviewCommentColumnHidden;\r\n                break;\r\n        }\r\n        return isHidden;\r\n    };\r\n    /**\r\n     * returns the grdicolumns based on the response mode and worklist type\r\n     * @param responseMode\r\n     */\r\n    StandardisationWorklistHelper.prototype.getGridColumns = function (resolvedGridColumnsJson, worklistType, responseMode, isFrozen) {\r\n        if (isFrozen === void 0) { isFrozen = false; }\r\n        var gridColumns;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n                gridColumns = (isFrozen === false) ?\r\n                    resolvedGridColumnsJson.marking.standardisationworklist.open.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.standardisationworklist.open.frozenRows.GridColumns;\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                gridColumns = (isFrozen === false) ?\r\n                    resolvedGridColumnsJson.marking.standardisationworklist.closed.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.standardisationworklist.closed.frozenRows.GridColumns;\r\n                break;\r\n        }\r\n        return gridColumns;\r\n    };\r\n    /**\r\n     * returns the accuracy type based on accuracy  and CC values\r\n     * @param responseMode\r\n     * @param responseData\r\n     */\r\n    StandardisationWorklistHelper.prototype.getAccuracyType = function (responseMode, responseData) {\r\n        var _isShowStandardisationDefinitiveMarks = (configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ShowStandardisationDefinitiveMarks, responseData.markSchemeGroupId).toLowerCase() === 'true');\r\n        if (responseMode === enums.ResponseMode.closed && _isShowStandardisationDefinitiveMarks === true) {\r\n            return responseData.accuracyIndicatorTypeID;\r\n        }\r\n        else {\r\n            return enums.AccuracyIndicatorType.Unknown;\r\n        }\r\n    };\r\n    return StandardisationWorklistHelper;\r\n}(worklistHelperBase));\r\nmodule.exports = StandardisationWorklistHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1187:
/* no static exports found */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/components/utility/grid/worklisthelpers/simulationworklisthelper.ts ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar gridRow = __webpack_require__(/*! ../../../utility/grid/gridrow */ 296);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar worklistGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/worklistgridcolumns.json */ 449);\r\nvar worklistValidatorFactory = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorfactory */ 319);\r\nvar worklistValidatorList = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorlist */ 304);\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar worklistHelperBase = __webpack_require__(/*! ./worklisthelperbase */ 458);\r\nvar josnRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * class for WorkList Helper implementation\r\n */\r\nvar SimulationWorklistHelper = /** @class */ (function (_super) {\r\n    __extends(SimulationWorklistHelper, _super);\r\n    function SimulationWorklistHelper() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * GenerateRowDefinion is used for generating row collection for WorkList Grid\r\n     * @param responseListData - list of simulation open responses\r\n     * @param responseType - type of the response\r\n     * @param gridType - type of gridview tile/detail\r\n     * @returns grid row collection.\r\n     */\r\n    SimulationWorklistHelper.prototype.generateRowDefinion = function (responseListData, responseType, gridType) {\r\n        this.resolvedGridColumnsJson = josnRefResolver.resolveRefs(worklistGridColumnsJson);\r\n        this._immutableWorkListCollection = Immutable.List();\r\n        switch (gridType) {\r\n            case enums.GridType.detailed:\r\n                this._immutableWorkListCollection = this.getRowDefinionForOpenDetail(responseListData);\r\n                break;\r\n            case enums.GridType.tiled:\r\n                this._immutableWorkListCollection = this.getRowDefinionForOpenTiled(responseListData);\r\n                break;\r\n            default:\r\n        }\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForSimulationOpenTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of simulation open responses\r\n     * @returns grid row collection.\r\n     */\r\n    SimulationWorklistHelper.prototype.getRowDefinionForOpenTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.simulationworklist.open.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // Get fresh set of groups for every columns\r\n                this.emptyGroupColumns();\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            var element = this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.simulation);\r\n                            this.mapGroupColumns('worklist-tile-footer', element);\r\n                            break;\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.open);\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotated_' + gridColumnCount;\r\n                            // Create annotation indicator element.\r\n                            var allPageElement = this.getAllPageAnnotationIndicatorElement(responseData, componentPropsJson, key);\r\n                            // Checking whether the indicator is valid to display.\r\n                            if (allPageElement !== undefined) {\r\n                                this.mapGroupColumns('icon-holder', allPageElement);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, true));\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                // If there are elements queued to group, then group the elements.\r\n                if (this.groupColumns) {\r\n                    _workListCell = new gridCell();\r\n                    key = gridSeq.get(responseListCount) + '_Tile_Group_';\r\n                    _workListCell.columnElement = this.groupColumnElements('worklist-tile-footer', key);\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                _worklistRow.setRowStyle(this.setRowStyle(responseStatus));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForSimulationOpenDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of simulation open responses\r\n     * @returns grid row collection.\r\n     */\r\n    SimulationWorklistHelper.prototype.getRowDefinionForOpenDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        var isSeedResponse;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.simulationworklist.open.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.simulation, false));\r\n                            break;\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.open, true));\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllocatedDate(responseData, componentPropsJson, key, true));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotatedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllPageAnnotatedIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        default:\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                var additionalComponent = this.renderQualityFeedbackBanner(responseListCount, enums.WorklistType.simulation);\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.open, responseData), additionalComponent));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * returns the resposne staus based on the worklist and its validator type\r\n     * @param worklistType\r\n     * @param responseMode\r\n     */\r\n    SimulationWorklistHelper.prototype.getResponseStatus = function (responseData, responseMode) {\r\n        var responseStatus;\r\n        responseStatus = worklistValidatorFactory.getValidator(worklistValidatorList.liveOpen).\r\n            submitButtonValidate(responseData);\r\n        return responseStatus;\r\n    };\r\n    /**\r\n     * returns whether the the given column is hidden or not\r\n     * @param responseColumn\r\n     */\r\n    SimulationWorklistHelper.prototype.getCellVisibility = function (column) {\r\n        var isHidden = false;\r\n        switch (column) {\r\n            case gridColumnNames.SLAOIndicator:\r\n                isHidden = !this.isStructuredQIG();\r\n                break;\r\n            case gridColumnNames.AllPageAnnotedIndicator:\r\n                isHidden = this.isStructuredQIG();\r\n                break;\r\n            case gridColumnNames.TotalMark:\r\n                if (this.isNonNumeric() === true) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n        }\r\n        return isHidden;\r\n    };\r\n    /**\r\n     * returns the grdicolumns based on the response mode and worklist type\r\n     * @param responseMode\r\n     */\r\n    SimulationWorklistHelper.prototype.getGridColumns = function (resolvedGridColumnsJson, worklistType, responseMode, isFrozen) {\r\n        if (isFrozen === void 0) { isFrozen = false; }\r\n        var gridColumns;\r\n        gridColumns = (isFrozen === false) ? resolvedGridColumnsJson.marking.simulationworklist.open.detailview.GridColumns\r\n            : resolvedGridColumnsJson.marking.simulationworklist.open.frozenRows.GridColumns;\r\n        return gridColumns;\r\n    };\r\n    return SimulationWorklistHelper;\r\n}(worklistHelperBase));\r\nmodule.exports = SimulationWorklistHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1188:
/* no static exports found */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/components/utility/grid/worklisthelpers/standardisationworklisthelper.ts ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar gridRow = __webpack_require__(/*! ../../../utility/grid/gridrow */ 296);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar worklistGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/worklistgridcolumns.json */ 449);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar localeStore = __webpack_require__(/*! ../../../../stores/locale/localestore */ 226);\r\nvar worklistValidatorFactory = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorfactory */ 319);\r\nvar worklistValidatorList = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorlist */ 304);\r\nvar worklistHelperBase = __webpack_require__(/*! ./worklisthelperbase */ 458);\r\nvar josnRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../markeroperationmode/markeroperationmodefactory */ 232);\r\n/**\r\n * class for WorkList Helper implementation\r\n */\r\nvar StandardisationWorklistHelper = /** @class */ (function (_super) {\r\n    __extends(StandardisationWorklistHelper, _super);\r\n    function StandardisationWorklistHelper() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * GenerateRowDefinion is used for generating row collection for WorkList Grid\r\n     * @param responseListData - list of live open responses\r\n     * @param responseType - type of the response\r\n     * @param gridType - type of gridview tile/detail\r\n     * @returns grid row collection.\r\n     */\r\n    StandardisationWorklistHelper.prototype.generateRowDefinion = function (responseListData, responseType, gridType) {\r\n        this.resolvedGridColumnsJson = josnRefResolver.resolveRefs(worklistGridColumnsJson);\r\n        this._immutableWorkListCollection = Immutable.List();\r\n        switch (responseType) {\r\n            case enums.ResponseMode.open:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForOpenDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForOpenTiled(responseListData);\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                switch (gridType) {\r\n                    case enums.GridType.detailed:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForClosedDetail(responseListData);\r\n                        break;\r\n                    case enums.GridType.tiled:\r\n                        this._immutableWorkListCollection = this.getRowDefinionForClosedTiled(responseListData);\r\n                        break;\r\n                    default:\r\n                }\r\n                break;\r\n        }\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForClosedTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of standardisation open responses\r\n     * @returns grid row collection.\r\n     */\r\n    StandardisationWorklistHelper.prototype.getRowDefinionForClosedTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.standardisationworklist.closed.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.closed, localeStore.instance.TranslateText('marking.worklist.response-data.standardisation-response-title') + ' ');\r\n                            break;\r\n                        case gridColumnNames.MarksDifference:\r\n                            key = gridSeq.get(responseListCount) + '_MarksDifference_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getMarksDifferenceColumnElement(responseData, componentPropsJson, key, true);\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                var _isShowStandardisationDefinitiveMarks = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ShowStandardisationDefinitiveMarks, responseData.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                // setting row style and row title according to its accuracy type\r\n                _worklistRow.setRowStyle(this.setRowStyle(Immutable.List().push(enums.ResponseStatus.none), _isShowStandardisationDefinitiveMarks ? responseData.accuracyIndicatorTypeID : null));\r\n                _worklistRow.setRowTitle(this.setRowTitle(_isShowStandardisationDefinitiveMarks ? responseData.accuracyIndicatorTypeID : null));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForOpenTiled is used for generating row collection for WorkList Grid in tiled view\r\n     * @param responseListData - list of Standardisation open responses\r\n     * @returns grid row collection.\r\n     */\r\n    StandardisationWorklistHelper.prototype.getRowDefinionForOpenTiled = function (responseListData) {\r\n        var _workListCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                /** Getting the worklist data row */\r\n                _worklistRow = new gridRow();\r\n                _workListCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.standardisationworklist.open.tileview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                // Get fresh set of groups for every columns\r\n                this.emptyGroupColumns();\r\n                /** Getting the worklist columns */\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            var element = this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.standardisation);\r\n                            this.mapGroupColumns('worklist-tile-footer', element);\r\n                            break;\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdColumnElement(responseData, componentPropsJson, key, responseListData.hasNumericMark, enums.ResponseMode.open, localeStore.instance.TranslateText('marking.worklist.response-data.standardisation-response-title') + ' ');\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotated_' + gridColumnCount;\r\n                            // Create annotation indicator element.\r\n                            var allPageElement = this.getAllPageAnnotationIndicatorElement(responseData, componentPropsJson, key);\r\n                            // Checking whether the indicator is valid to display.\r\n                            if (allPageElement !== undefined) {\r\n                                this.mapGroupColumns('icon-holder', allPageElement);\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, true));\r\n                            break;\r\n                        case gridColumnNames.AllFilesNotViewedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllFilesNotViewedIndicator_' + gridColumnCount;\r\n                            var allFilesNotViewedElement = (this.getAllFilesNotViewedIndicatorElement(responseData, componentPropsJson, key));\r\n                            this.mapGroupColumns('worklist-tile-footer', allFilesNotViewedElement);\r\n                            break;\r\n                        default:\r\n                    }\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                // If there are elements queued to group, then group the elements.\r\n                if (this.groupColumns) {\r\n                    _workListCell = new gridCell();\r\n                    key = gridSeq.get(responseListCount) + '_Tile_Group_';\r\n                    _workListCell.columnElement = this.groupColumnElements('worklist-tile-footer', key);\r\n                    _workListCellcollection.push(_workListCell);\r\n                }\r\n                _worklistRow.setRowStyle(this.setRowStyle(responseStatus));\r\n                _worklistRow.setRowId(parseFloat(responseData.displayId));\r\n                _worklistRow.setCells(_workListCellcollection);\r\n                _workListRowCollection.push(_worklistRow);\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForOpenDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of standardisation open responses\r\n     * @returns grid row collection.\r\n     */\r\n    StandardisationWorklistHelper.prototype.getRowDefinionForOpenDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                /** Getting the worklist data row */\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.standardisationworklist.open.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                var responseStatus = this.getResponseStatus(responseData, enums.ResponseMode.open);\r\n                var _isShowStandardisationDefinitiveMarks = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ShowStandardisationDefinitiveMarks, responseData.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                /** Getting the worklist columns */\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.MarkingProgress:\r\n                            key = gridSeq.get(responseListCount) + '_MarkingProgress_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarkingProgressElement(responseData, componentPropsJson, key, responseStatus, enums.WorklistType.standardisation, false));\r\n                            break;\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.open, true));\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllocatedDate(responseData, componentPropsJson, key, true));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotatedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllPageAnnotatedIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.AllFilesNotViewedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllFilesNotViewedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllFilesNotViewedIndicatorElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        default:\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.open, responseData), undefined));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * getRowDefinionForClosedDetail is used for generating row collection for WorkList Grid in detail view\r\n     * @param responseListData - list of standardisation open responses\r\n     * @returns grid row collection.\r\n     */\r\n    StandardisationWorklistHelper.prototype.getRowDefinionForClosedDetail = function (responseListData) {\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            this.resetDynamicColumnSettings();\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                /** Getting the worklist data row */\r\n                var gridColumns = this.resolvedGridColumnsJson.marking.standardisationworklist.closed.detailview.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                responseData.markSchemeGroupId =\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                /** Getting the worklist columns */\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.TotalMark:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMark_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getTotalMarkElement(responseData, responseListData.hasNumericMark, responseListData.maximumMark, componentPropsJson, key));\r\n                            break;\r\n                        case gridColumnNames.LastUpdatedColumn:\r\n                            key = gridSeq.get(responseListCount) + '_LastUpdatedColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLastUpdatedElement(responseData, componentPropsJson, key, enums.ResponseMode.closed, false));\r\n                            break;\r\n                        case gridColumnNames.AllocatedDate:\r\n                            key = gridSeq.get(responseListCount) + '_AllocatedDate_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllocatedDate(responseData, componentPropsJson, key, true));\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.AllPageAnnotedIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_AllPageAnnotatedIndicator_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getAllPageAnnotatedIndicatorElement(responseData, componentPropsJson, key, true, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedMessageIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedMessage_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedMessageElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.LinkedExceptionIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_LinkedException_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getLinkedExceptionElement(responseData, componentPropsJson, key, false));\r\n                            break;\r\n                        case gridColumnNames.AccuracyIndicator:\r\n                            // accuracy indicator is shown only when its values is set\r\n                            if (responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown) {\r\n                                key = gridSeq.get(responseListCount) + '_AccuracyIndicator_' + gridColumnCount;\r\n                                _workListCell.columnElement = (this.getAccuracyIndicatorElement(responseData, componentPropsJson, key, false));\r\n                            }\r\n                            break;\r\n                        case gridColumnNames.AbsoluteMarksDifference:\r\n                            key = gridSeq.get(responseListCount) + '_AbsoluteMarksDifference_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarksDifferenceElement(responseData, componentPropsJson, key, enums.MarksDifferenceType.AbsoluteMarksDifference, false));\r\n                            break;\r\n                        case gridColumnNames.TotalMarksDifference:\r\n                            key = gridSeq.get(responseListCount) + '_TotalMarksDifference_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getMarksDifferenceElement(responseData, componentPropsJson, key, enums.MarksDifferenceType.TotalMarksDifference, false));\r\n                            break;\r\n                        case gridColumnNames.ReviewedByLabel:\r\n                            key = gridSeq.get(responseListCount) + '_ReviewedByLabel_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getReviewedByLabel(key, responseData));\r\n                            break;\r\n                        case gridColumnNames.SupervisorReviewComment:\r\n                            key = gridSeq.get(responseListCount) + '_SupervisorReviewComment_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getSupervisorReviewComment(key, responseData));\r\n                            break;\r\n                        default:\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                // Creating the grid row collection.\r\n                _workListRowCollection.push(this.getGridRow(Immutable.List().push(enums.ResponseStatus.none), responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(enums.ResponseMode.closed, responseData), undefined));\r\n            }\r\n        }\r\n        this._immutableWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * returns the resposne staus based on the worklist and its validator type\r\n     * @param worklistType\r\n     * @param responseMode\r\n     */\r\n    StandardisationWorklistHelper.prototype.getResponseStatus = function (responseData, responseMode) {\r\n        var responseStatus;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n                responseStatus = worklistValidatorFactory.getValidator(worklistValidatorList.standardisationOpen).\r\n                    submitButtonValidate(responseData);\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                responseStatus = Immutable.List().push(enums.ResponseStatus.none);\r\n                break;\r\n        }\r\n        return responseStatus;\r\n    };\r\n    /**\r\n     * returns whether the the given column is hidden or not\r\n     * @param responseColumn\r\n     */\r\n    StandardisationWorklistHelper.prototype.getCellVisibility = function (column) {\r\n        var isHidden = false;\r\n        switch (column) {\r\n            case gridColumnNames.AbsoluteMarksDifference:\r\n            case gridColumnNames.TotalMarksDifference:\r\n            case gridColumnNames.AccuracyIndicator:\r\n                isHidden = !(configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ShowStandardisationDefinitiveMarks, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId) === 'true');\r\n                break;\r\n            case gridColumnNames.SLAOIndicator:\r\n                if (this.isStructuredQIG() === false) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n            case gridColumnNames.AllPageAnnotedIndicator:\r\n                if (this.isStructuredQIG() === true) {\r\n                    isHidden = true;\r\n                }\r\n                break;\r\n            case gridColumnNames.ReviewedByLabel:\r\n                isHidden = markerOperationModeFactory.operationMode.isReviewedByLabelHidden;\r\n                break;\r\n            case gridColumnNames.SupervisorReviewComment:\r\n                isHidden = markerOperationModeFactory.operationMode.isSupervisorReviewCommentColumnHidden;\r\n                break;\r\n        }\r\n        return isHidden;\r\n    };\r\n    /**\r\n     * returns the grdicolumns based on the response mode and worklist type\r\n     * @param responseMode\r\n     */\r\n    StandardisationWorklistHelper.prototype.getGridColumns = function (resolvedGridColumnsJson, worklistType, responseMode, isFrozen) {\r\n        if (isFrozen === void 0) { isFrozen = false; }\r\n        var gridColumns;\r\n        switch (responseMode) {\r\n            case enums.ResponseMode.open:\r\n                gridColumns = (isFrozen === false) ?\r\n                    resolvedGridColumnsJson.marking.standardisationworklist.open.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.standardisationworklist.open.frozenRows.GridColumns;\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                gridColumns = (isFrozen === false) ?\r\n                    resolvedGridColumnsJson.marking.standardisationworklist.closed.detailview.GridColumns\r\n                    : resolvedGridColumnsJson.marking.standardisationworklist.closed.frozenRows.GridColumns;\r\n                break;\r\n        }\r\n        return gridColumns;\r\n    };\r\n    /**\r\n     * returns the accuracy type based on accuracy  and CC values\r\n     * @param responseMode\r\n     * @param responseData\r\n     */\r\n    StandardisationWorklistHelper.prototype.getAccuracyType = function (responseMode, responseData) {\r\n        var _isShowStandardisationDefinitiveMarks = (configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ShowStandardisationDefinitiveMarks, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId).toLowerCase() === 'true');\r\n        if (responseMode === enums.ResponseMode.closed && _isShowStandardisationDefinitiveMarks === true) {\r\n            return responseData.accuracyIndicatorTypeID;\r\n        }\r\n        else {\r\n            return enums.AccuracyIndicatorType.Unknown;\r\n        }\r\n    };\r\n    return StandardisationWorklistHelper;\r\n}(worklistHelperBase));\r\nmodule.exports = StandardisationWorklistHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1198:
/* no static exports found */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/components/utility/progressindicator/circularprogressindicator.tsx ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*tslint:disable:no-unused-expression*/\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar CircularProgressIndicator = /** @class */ (function (_super) {\r\n    __extends(CircularProgressIndicator, _super);\r\n    function CircularProgressIndicator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * This method will return the coordinates for progress path.\r\n     * @param r : radius\r\n     * @param degree : degree\r\n     */\r\n    CircularProgressIndicator.prototype.getPoint = function (r, degree) {\r\n        var size = this.props.size;\r\n        var d = degree / 180 * Math.PI;\r\n        return {\r\n            x: r * Math.sin(d) + size / 2,\r\n            y: this.props.trackWidth / 2 + r * (1 - Math.cos(d))\r\n        };\r\n    };\r\n    /**\r\n     * Render method for the Progress indicator.\r\n     */\r\n    CircularProgressIndicator.prototype.render = function () {\r\n        var _this = this;\r\n        var progressComponents = Array();\r\n        var progressPaths = Array();\r\n        var prevProgress = 0;\r\n        var size = this.props.size;\r\n        var r = size / 2 - this.props.trackWidth / 2;\r\n        this.props.progress.map(function (item) {\r\n            var progress = item.progress + prevProgress;\r\n            var endDegree = progress * 360 / 100;\r\n            var s = _this.getPoint(r, _this.props.startDegree);\r\n            var e = _this.getPoint(r, endDegree);\r\n            var progressPath = null;\r\n            if (progress < 50) {\r\n                progressPath = 'M ' + s.x + ' ' + s.y + ' A ' + r + ' ' + r + ', 0, 0, 1, ' + e.x + ',' + e.y;\r\n            }\r\n            else {\r\n                var m = _this.getPoint(r, _this.props.startDegree + 180);\r\n                progressPath = 'M ' + s.x + ' ' + s.y + ' A ' + r + ' ' + r + ', 0, 0, 1, ' + m.x + ',' + m.y + '\\n        M ' + m.x + ' '\r\n                    + m.y + ' A ' + r + ' ' + r + ', 0, 0, 1, ' + e.x + ',' + e.y;\r\n            }\r\n            // set the previous progress for next item\r\n            prevProgress = progress;\r\n            progressPaths.push({ progress: progress, progressPath: progressPath, style: item.className });\r\n        });\r\n        // This will create progress path components.\r\n        // Currently IE is not supporting SVG animations so that we implemented a different logic for IE\r\n        progressPaths.map(function (progressPathItem, i) {\r\n            var circumference = Math.round(2 * Math.PI * r);\r\n            var style = { strokeLinecap: 'round' };\r\n            if (progressPathItem.progress > 0) {\r\n                progressComponents.push(React.createElement('path', {\r\n                    d: progressPathItem.progressPath, className: progressPathItem.style + ' path',\r\n                    key: 'path_' + i,\r\n                    style: style\r\n                }));\r\n            }\r\n        });\r\n        return (React.createElement(\"svg\", { width: size, height: size, viewBox: '0 0 ' + size + ' ' + size, className: 'target-svg' },\r\n            React.createElement(\"circle\", { cx: size / 2, cy: size / 2, r: r, className: this.props.trackStyle }),\r\n            progressComponents.reverse()));\r\n    };\r\n    return CircularProgressIndicator;\r\n}(pureRenderComponent));\r\nmodule.exports = CircularProgressIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE5OC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvcHJvZ3Jlc3NpbmRpY2F0b3IvY2lyY3VsYXJwcm9ncmVzc2luZGljYXRvci50c3g/ZjFiZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKnRzbGludDpkaXNhYmxlOm5vLXVudXNlZC1leHByZXNzaW9uKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIGEgY29tcG9uZW50XHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gICAgc2l6ZTogbnVtYmVyO1xyXG4gICAgc3RhcnREZWdyZWU6IG51bWJlcjtcclxuICAgIGVuZERlZ3JlZTogbnVtYmVyO1xyXG4gICAgdHJhY2tXaWR0aDogbnVtYmVyO1xyXG4gICAgdHJhY2tTdHlsZTogc3RyaW5nO1xyXG4gICAgcHJvZ3Jlc3M6IEFycmF5PGFueT47XHJcbn1cclxuXHJcbmNsYXNzIENpcmN1bGFyUHJvZ3Jlc3NJbmRpY2F0b3IgZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBjb29yZGluYXRlcyBmb3IgcHJvZ3Jlc3MgcGF0aC5cclxuICAgICAqIEBwYXJhbSByIDogcmFkaXVzXHJcbiAgICAgKiBAcGFyYW0gZGVncmVlIDogZGVncmVlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0UG9pbnQocjogYW55LCBkZWdyZWU6IGFueSk6IGFueSB7XHJcbiAgICAgICAgbGV0IHNpemUgPSB0aGlzLnByb3BzLnNpemU7XHJcbiAgICAgICAgbGV0IGQgPSBkZWdyZWUgLyAxODAgKiBNYXRoLlBJO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB4OiByICogTWF0aC5zaW4oZCkgKyBzaXplIC8gMixcclxuICAgICAgICAgICAgeTogdGhpcy5wcm9wcy50cmFja1dpZHRoIC8gMiArIHIgKiAoMSAtIE1hdGguY29zKGQpKVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgbWV0aG9kIGZvciB0aGUgUHJvZ3Jlc3MgaW5kaWNhdG9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgcHJvZ3Jlc3NDb21wb25lbnRzOiBBcnJheTxhbnk+ID0gQXJyYXk8YW55PigpO1xyXG4gICAgICAgIGxldCBwcm9ncmVzc1BhdGhzOiBBcnJheTxhbnk+ID0gQXJyYXk8YW55PigpO1xyXG5cclxuICAgICAgICBsZXQgcHJldlByb2dyZXNzOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGxldCBzaXplOiBudW1iZXIgPSB0aGlzLnByb3BzLnNpemU7XHJcbiAgICAgICAgbGV0IHI6IG51bWJlciA9IHNpemUgLyAyIC0gdGhpcy5wcm9wcy50cmFja1dpZHRoIC8gMjtcclxuXHJcbiAgICAgICAgdGhpcy5wcm9wcy5wcm9ncmVzcy5tYXAoKGl0ZW06IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgbGV0IHByb2dyZXNzOiBudW1iZXIgPSBpdGVtLnByb2dyZXNzICsgcHJldlByb2dyZXNzO1xyXG4gICAgICAgICAgICBsZXQgZW5kRGVncmVlOiBudW1iZXIgPSBwcm9ncmVzcyAqIDM2MCAvIDEwMDtcclxuICAgICAgICAgICAgbGV0IHMgPSB0aGlzLmdldFBvaW50KHIsIHRoaXMucHJvcHMuc3RhcnREZWdyZWUpO1xyXG4gICAgICAgICAgICBsZXQgZSA9IHRoaXMuZ2V0UG9pbnQociwgZW5kRGVncmVlKTtcclxuICAgICAgICAgICAgbGV0IHByb2dyZXNzUGF0aDogc3RyaW5nID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzcyA8IDUwKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc1BhdGggPSAnTSAnICsgcy54ICsgJyAnICsgcy55ICsgJyBBICcgKyByICsgJyAnICsgciArICcsIDAsIDAsIDEsICcgKyBlLnggKyAnLCcgKyBlLnk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbSA9IHRoaXMuZ2V0UG9pbnQociwgdGhpcy5wcm9wcy5zdGFydERlZ3JlZSArIDE4MCk7XHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzc1BhdGggPSAnTSAnICsgcy54ICsgJyAnICsgcy55ICsgJyBBICcgKyByICsgJyAnICsgciArICcsIDAsIDAsIDEsICcgKyBtLnggKyAnLCcgKyBtLnkgKyAnXFxuICAgICAgICBNICcgKyBtLnggKyAnICdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgbS55ICsgJyBBICcgKyByICsgJyAnICsgciArICcsIDAsIDAsIDEsICcgKyBlLnggKyAnLCcgKyBlLnk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHNldCB0aGUgcHJldmlvdXMgcHJvZ3Jlc3MgZm9yIG5leHQgaXRlbVxyXG4gICAgICAgICAgICBwcmV2UHJvZ3Jlc3MgPSBwcm9ncmVzcztcclxuICAgICAgICAgICAgcHJvZ3Jlc3NQYXRocy5wdXNoKHsgcHJvZ3Jlc3M6IHByb2dyZXNzLCBwcm9ncmVzc1BhdGg6IHByb2dyZXNzUGF0aCwgc3R5bGU6IGl0ZW0uY2xhc3NOYW1lIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBUaGlzIHdpbGwgY3JlYXRlIHByb2dyZXNzIHBhdGggY29tcG9uZW50cy5cclxuICAgICAgICAvLyBDdXJyZW50bHkgSUUgaXMgbm90IHN1cHBvcnRpbmcgU1ZHIGFuaW1hdGlvbnMgc28gdGhhdCB3ZSBpbXBsZW1lbnRlZCBhIGRpZmZlcmVudCBsb2dpYyBmb3IgSUVcclxuICAgICAgICBwcm9ncmVzc1BhdGhzLm1hcCgocHJvZ3Jlc3NQYXRoSXRlbTogYW55LCBpOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgbGV0IGNpcmN1bWZlcmVuY2U6IG51bWJlciA9IE1hdGgucm91bmQoMiAqIE1hdGguUEkgKiByKTtcclxuICAgICAgICAgICAgbGV0IHN0eWxlID0geyBzdHJva2VMaW5lY2FwOiAncm91bmQnIH07XHJcblxyXG4gICAgICAgICAgICBpZiAocHJvZ3Jlc3NQYXRoSXRlbS5wcm9ncmVzcyA+IDApIHtcclxuICAgICAgICAgICAgICAgIHByb2dyZXNzQ29tcG9uZW50cy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZDogcHJvZ3Jlc3NQYXRoSXRlbS5wcm9ncmVzc1BhdGgsIGNsYXNzTmFtZTogcHJvZ3Jlc3NQYXRoSXRlbS5zdHlsZSArICcgcGF0aCcsXHJcbiAgICAgICAgICAgICAgICAgICAga2V5OiAncGF0aF8nICsgaSxcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGVcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgIDxzdmcgd2lkdGg9e3NpemV9IGhlaWdodD17c2l6ZX0gdmlld0JveD17JzAgMCAnICsgc2l6ZSArICcgJyArIHNpemV9IGNsYXNzTmFtZSA9ICd0YXJnZXQtc3ZnJz5cclxuICAgICAgICAgICAgICAgICAgIDxjaXJjbGUgY3g9e3NpemUgLyAyfSBjeT17c2l6ZSAvIDJ9IHI9e3J9IGNsYXNzTmFtZT17dGhpcy5wcm9wcy50cmFja1N0eWxlfT48L2NpcmNsZT5cclxuICAgICAgICAgICAgICAgICAgIHtwcm9ncmVzc0NvbXBvbmVudHMucmV2ZXJzZSgpIH1cclxuICAgICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBDaXJjdWxhclByb2dyZXNzSW5kaWNhdG9yO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9wcm9ncmVzc2luZGljYXRvci9jaXJjdWxhcnByb2dyZXNzaW5kaWNhdG9yLnRzeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFjQTtBQUFBO0FBQUE7O0FBd0VBO0FBdEVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 1199:
/* no static exports found */
/* all exports used */
/*!***********************************************************************************************!*\
  !*** ./src/components/utility/responseallocation/responseallocationbuttonvalidationhelper.ts ***!
  \***********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar responseAllocationButtonValidationParameter = __webpack_require__(/*! ./responseallocationbuttonvalidationparameter */ 1200);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar targetSummaryStore = __webpack_require__(/*! ../../../stores/worklist/targetsummarystore */ 305);\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar qigSelectorValidationHelper = __webpack_require__(/*! ../qigselector/qigselectorvalidationhelper */ 483);\r\nvar loginStore = __webpack_require__(/*! ../../../stores/login/loginstore */ 286);\r\nvar responseHelper = __webpack_require__(/*! ../responsehelper/responsehelper */ 249);\r\n/**\r\n * Helper class for response allocation button\r\n * It handles the enabling/disabling as well as the visibility status of the button\r\n */\r\nvar ResponseAllocationButtonValidationHelper = /** @class */ (function () {\r\n    function ResponseAllocationButtonValidationHelper() {\r\n    }\r\n    /**\r\n     * Returns an entity representing the states to be set for the response allocation button\r\n     * @param liveWorklistStatistics contains the worklist details\r\n     * @param examinerQigStatus the current qig status of the examiner\r\n     * @param examinerApprovalStatus contains the examiner approval status\r\n     * @param worklistType stores the worklist type\r\n     * @param remarkRequestType stores the remark request type\r\n     */\r\n    ResponseAllocationButtonValidationHelper.validate = function (liveWorklistStatistics, examinerQigStatus, examinerApprovalStatus, worklistType, remarkRequestType, isTeamManagementMode) {\r\n        var responseAllocationButtonMainText;\r\n        var responseAllocationButtonTitle = '';\r\n        var responseAllocationButtonSubText = '';\r\n        var isResponseAllocateButtonVisible = true;\r\n        var isResponseAllocateButtonEnabled = false;\r\n        var isWorklistInformationBannerVisible = false;\r\n        // Getting the response allocation dropdown buttons text\r\n        var responseAllocationButtonSingleResponseText;\r\n        var responseAllocationButtonUpToOpenResponseText;\r\n        var isWholeResponseResponseAllocationButtonAvailable = false;\r\n        // we need to hide the Response allocation button if the marker operation mode is Team Management.\r\n        if (isTeamManagementMode) {\r\n            isResponseAllocateButtonVisible = false;\r\n        }\r\n        else {\r\n            // Getting the response allocation main button text\r\n            // Added the condition to add new button text for pooled remarks\r\n            responseAllocationButtonMainText = (worklistType === enums.WorklistType.pooledRemark)\r\n                || (worklistType === enums.WorklistType.simulation) ?\r\n                localeStore.instance.TranslateText('marking.worklist.action-buttons.allocate-button-remarks') :\r\n                localeStore.instance.TranslateText('marking.worklist.action-buttons.allocate-button');\r\n            responseAllocationButtonSingleResponseText = localeStore.instance.\r\n                TranslateText('marking.worklist.action-buttons.allocate-single-response');\r\n            responseAllocationButtonUpToOpenResponseText = localeStore.instance.\r\n                TranslateText('marking.worklist.action-buttons.allocate-to-concurrent-limit');\r\n            if (worklistType === enums.WorklistType.live\r\n                && qigStore.instance.isWholeResponseAvailable) {\r\n                /* If Ebookmarking then there should not be whole response button */\r\n                isWholeResponseResponseAllocationButtonAvailable = responseHelper.isEbookMarking ? false : true;\r\n            }\r\n            else {\r\n                isWholeResponseResponseAllocationButtonAvailable = false;\r\n            }\r\n            // Setting the different visibility status to the GetNewResponse button based on the current status of the Examiner\r\n            switch (examinerQigStatus) {\r\n                case enums.ExaminerQIGStatus.WaitingStandardisation:\r\n                case enums.ExaminerQIGStatus.Simulation:\r\n                    isResponseAllocateButtonVisible = true;\r\n                    isResponseAllocateButtonEnabled = true;\r\n                    isWorklistInformationBannerVisible = true;\r\n                    break;\r\n                case enums.ExaminerQIGStatus.Practice:\r\n                case enums.ExaminerQIGStatus.StandardisationMarking:\r\n                case enums.ExaminerQIGStatus.SecondStandardisationMarking:\r\n                case enums.ExaminerQIGStatus.STMStandardisationMarking:\r\n                case enums.ExaminerQIGStatus.AwaitingApproval:\r\n                    isResponseAllocateButtonVisible = false;\r\n                    isResponseAllocateButtonEnabled = false;\r\n                    break;\r\n                case enums.ExaminerQIGStatus.LiveComplete:\r\n                case enums.ExaminerQIGStatus.OverAllTargetCompleted:\r\n                    isWorklistInformationBannerVisible = true;\r\n                    break;\r\n                case enums.ExaminerQIGStatus.QualityFeedback:\r\n                case enums.ExaminerQIGStatus.Suspended:\r\n                case enums.ExaminerQIGStatus.OverAllTargetReached:\r\n                    isResponseAllocateButtonEnabled = false;\r\n                    break;\r\n                case enums.ExaminerQIGStatus.LiveMarking:\r\n                    isWorklistInformationBannerVisible = true;\r\n                    isResponseAllocateButtonEnabled = true;\r\n                    break;\r\n                default:\r\n                    isResponseAllocateButtonVisible = true;\r\n                    isResponseAllocateButtonEnabled = true;\r\n                    break;\r\n            }\r\n            // Examiner Approval Status needs not be considered while the marker is in Simulation Marking.\r\n            if (examinerQigStatus !== enums.ExaminerQIGStatus.Simulation) {\r\n                switch (examinerApprovalStatus) {\r\n                    case enums.ExaminerApproval.Approved:\r\n                    case enums.ExaminerApproval.ConditionallyApproved:\r\n                    case enums.ExaminerApproval.ApprovedReview:\r\n                        break;\r\n                    default:\r\n                        isResponseAllocateButtonVisible = true;\r\n                        isResponseAllocateButtonEnabled = false;\r\n                        responseAllocationButtonTitle =\r\n                            localeStore.instance.TranslateText('marking.worklist.action-buttons.allocate-button-not-approved-tooltip');\r\n                        responseAllocationButtonSubText =\r\n                            localeStore.instance.TranslateText('marking.worklist.action-buttons.allocate-button-suspended-indicator');\r\n                        break;\r\n                }\r\n            }\r\n            if (loginStore.instance.isAdminRemarker) {\r\n                isResponseAllocateButtonVisible = true;\r\n            }\r\n            if (liveWorklistStatistics !== undefined && examinerApprovalStatus !== enums.ExaminerApproval.Suspended) {\r\n                var isConcurrentLimitMet = new qigSelectorValidationHelper()\r\n                    .isConcurrentLimitMet(qigStore.instance.selectedQIGForMarkerOperation, liveWorklistStatistics);\r\n                //Not applicable for pooled remark since the live complete status does not affect pooled remarks\r\n                if ((examinerQigStatus === enums.ExaminerQIGStatus.LiveComplete\r\n                    || examinerQigStatus === enums.ExaminerQIGStatus.OverAllTargetReached\r\n                    || examinerQigStatus === enums.ExaminerQIGStatus.OverAllTargetCompleted)\r\n                    && worklistType !== enums.WorklistType.pooledRemark) {\r\n                    // If the live marking is completed or the marking target is reached.\r\n                    isResponseAllocateButtonEnabled = false;\r\n                    responseAllocationButtonSubText = localeStore.instance.TranslateText('marking.worklist.action-buttons.allocate-button-target-reached-indicator');\r\n                }\r\n                else if (isConcurrentLimitMet) {\r\n                    // If the current open response count meets the concurrent limit\r\n                    responseAllocationButtonSubText =\r\n                        localeStore.instance.TranslateText('marking.worklist.action-buttons.allocate-button-concurrent-limit-reached-indicator');\r\n                    isResponseAllocateButtonEnabled = false;\r\n                }\r\n                else if (liveWorklistStatistics.unallocatedResponsesCount <= 0) {\r\n                    // If there are no unallocated responses left\r\n                    responseAllocationButtonSubText = localeStore.instance.TranslateText('marking.worklist.no-responses-available-helper.header');\r\n                    isResponseAllocateButtonEnabled = false;\r\n                }\r\n                else {\r\n                    //If the above conditions are not satisfied the allocation button should be enabled\r\n                    isResponseAllocateButtonEnabled = true;\r\n                }\r\n            }\r\n            // If the allocation button is already enabled, then disable the same if the total responses count\r\n            // has gone over the maximum marking limit and over allocation\r\n            if (isResponseAllocateButtonEnabled) {\r\n                var isAggregateTargetsCCEnabled = qigStore.instance.selectedQIGForMarkerOperation.isAggregateQIGTargetsON;\r\n                if (worklistType === enums.WorklistType.live) {\r\n                    var currentTarget = targetSummaryStore.instance.getCurrentTarget();\r\n                    if (currentTarget && currentTarget.markingModeID === enums.MarkingMode.LiveMarking) {\r\n                        // Retrieving the marking targets collection\r\n                        var targetSummary = targetSummaryStore.instance.getExaminerMarkingTargetProgress();\r\n                        if (targetSummary) {\r\n                            var totalLiveResponsesCount = 0;\r\n                            // Looping through the marking targets collection\r\n                            for (var index = 0; index < targetSummary.count(); index++) {\r\n                                var target = targetSummary.get(index);\r\n                                if (target.markingModeID === enums.MarkingMode.LiveMarking\r\n                                    || target.examinerProgress.isDirectedRemark) {\r\n                                    if (isAggregateTargetsCCEnabled) {\r\n                                        // Summing up the total live responses count\r\n                                        totalLiveResponsesCount += target.aggregatedOpenResponsesCount +\r\n                                            target.aggregatedClosedResponsesCount;\r\n                                    }\r\n                                    else {\r\n                                        // Summing up the total live responses count\r\n                                        totalLiveResponsesCount += target.examinerProgress.openResponsesCount +\r\n                                            target.examinerProgress.pendingResponsesCount +\r\n                                            target.examinerProgress.closedResponsesCount;\r\n                                    }\r\n                                    if (target.markingModeID === enums.MarkingMode.LiveMarking && !isAggregateTargetsCCEnabled) {\r\n                                        totalLiveResponsesCount += target.examinerProgress.atypicalOpenResponsesCount;\r\n                                    }\r\n                                }\r\n                            }\r\n                            var maximumMarkingLimit = isAggregateTargetsCCEnabled ?\r\n                                currentTarget.aggregatedMaximumMarkingLimit : currentTarget.maximumMarkingLimit;\r\n                            var overAllocationCount = isAggregateTargetsCCEnabled ?\r\n                                currentTarget.aggregatedOverAllocationCount : currentTarget.overAllocationCount;\r\n                            // Setting the visibility of response allocation button status\r\n                            isResponseAllocateButtonEnabled =\r\n                                totalLiveResponsesCount < maximumMarkingLimit + overAllocationCount;\r\n                            if (isResponseAllocateButtonEnabled) {\r\n                                responseAllocationButtonTitle =\r\n                                    localeStore.instance.TranslateText('marking.worklist.action-buttons.allocate-button-tooltip');\r\n                            }\r\n                            else {\r\n                                responseAllocationButtonTitle = '';\r\n                            }\r\n                        }\r\n                    }\r\n                    //if the worklist type is pooledremark we dont have to check about the current target of the examiner\r\n                    // and also the over allocation target of the examiner\r\n                }\r\n                else if (worklistType === enums.WorklistType.pooledRemark) {\r\n                    var target = targetSummaryStore.instance.getRemarkTarget(remarkRequestType);\r\n                    if (target) {\r\n                        var totalRemarkResponsesCount = 0;\r\n                        var maximumMarkingLimit = 0;\r\n                        var overAllocationCount = 0;\r\n                        var isMaximumMarkingLimitMet = false;\r\n                        var isConcurrentLimitMet = false;\r\n                        // Summing up the total remark responses count\r\n                        if (isAggregateTargetsCCEnabled) {\r\n                            totalRemarkResponsesCount += target.aggregatedOpenResponsesCount +\r\n                                target.aggregatedClosedResponsesCount;\r\n                            maximumMarkingLimit = target.aggregatedMaximumMarkingLimit;\r\n                            overAllocationCount = target.aggregatedOverAllocationCount;\r\n                            isMaximumMarkingLimitMet = (totalRemarkResponsesCount === maximumMarkingLimit + overAllocationCount);\r\n                            isConcurrentLimitMet = (target.aggregatedOpenResponsesCount === target.aggregatedMaximumConcurrentLimit);\r\n                            // Setting the visibility of response allocation button status\r\n                            isResponseAllocateButtonEnabled = (target.aggregatedOpenResponsesCount <\r\n                                target.aggregatedMaximumConcurrentLimit)\r\n                                && (totalRemarkResponsesCount < maximumMarkingLimit + overAllocationCount);\r\n                        }\r\n                        else {\r\n                            totalRemarkResponsesCount += target.examinerProgress.openResponsesCount +\r\n                                target.examinerProgress.pendingResponsesCount +\r\n                                target.examinerProgress.closedResponsesCount;\r\n                            maximumMarkingLimit = target.maximumMarkingLimit;\r\n                            overAllocationCount = target.overAllocationCount;\r\n                            // Setting the visibility of response allocation button status\r\n                            isResponseAllocateButtonEnabled = (totalRemarkResponsesCount < maximumMarkingLimit + overAllocationCount);\r\n                        }\r\n                        if (!isResponseAllocateButtonEnabled) {\r\n                            if (isAggregateTargetsCCEnabled && isConcurrentLimitMet && !isMaximumMarkingLimitMet) {\r\n                                responseAllocationButtonSubText = localeStore.instance.TranslateText('marking.worklist.action-buttons.allocate-button-concurrent-limit-reached-indicator');\r\n                            }\r\n                            else {\r\n                                responseAllocationButtonSubText = localeStore.instance.TranslateText('marking.worklist.action-buttons.allocate-button-target-reached-indicator');\r\n                            }\r\n                            responseAllocationButtonTitle = '';\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // returning the parameter which defines the button state\r\n        return new responseAllocationButtonValidationParameter(responseAllocationButtonMainText, responseAllocationButtonSubText, isResponseAllocateButtonVisible, isResponseAllocateButtonEnabled, isWorklistInformationBannerVisible, responseAllocationButtonTitle, responseAllocationButtonSingleResponseText, responseAllocationButtonUpToOpenResponseText, isWholeResponseResponseAllocationButtonAvailable);\r\n    };\r\n    return ResponseAllocationButtonValidationHelper;\r\n}());\r\nmodule.exports = ResponseAllocationButtonValidationHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1200:
/* no static exports found */
/* all exports used */
/*!**************************************************************************************************!*\
  !*** ./src/components/utility/responseallocation/responseallocationbuttonvalidationparameter.ts ***!
  \**************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Entity class for response allocation button validation\r\n */\r\nvar ResponseAllocationButtonValidationParameter = /** @class */ (function () {\r\n    /**\r\n     * Initializing new instance of response allocation button validation entity.\r\n     */\r\n    function ResponseAllocationButtonValidationParameter(responseAllocationButtonMainText, responseAllocationButtonSubText, isResponseAllocateButtonVisible, isResponseAllocateButtonEnabled, isWorklistInformationBannerVisible, responseAllocationButtonTitle, responseAllocationButtonSingleResponseText, responseAllocationButtonUpToOpenResponseText, isWholeResponseResponseAllocationButtonAvailable) {\r\n        this.responseAllocationButtonMainText = responseAllocationButtonMainText;\r\n        this.responseAllocationButtonSubText = responseAllocationButtonSubText;\r\n        this.isResponseAllocateButtonVisible = isResponseAllocateButtonVisible;\r\n        this.isResponseAllocateButtonEnabled = isResponseAllocateButtonEnabled;\r\n        this.isWorklistInformationBannerVisible = isWorklistInformationBannerVisible;\r\n        this.responseAllocationButtonTitle = responseAllocationButtonTitle;\r\n        this.responseAllocationButtonSingleResponseText = responseAllocationButtonSingleResponseText;\r\n        this.responseAllocationButtonUpToOpenResponseText = responseAllocationButtonUpToOpenResponseText;\r\n        this.isWholeResponseResponseAllocationButtonAvailable = isWholeResponseResponseAllocationButtonAvailable;\r\n    }\r\n    Object.defineProperty(ResponseAllocationButtonValidationParameter.prototype, \"ResponseAllocationButtonMainText\", {\r\n        /**\r\n         * Returns back the Resource Key for Error Dialog Header Text\r\n         */\r\n        get: function () {\r\n            return this.responseAllocationButtonMainText;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResponseAllocationButtonValidationParameter.prototype, \"ResponseAllocationButtonSubText\", {\r\n        /**\r\n         * Returns back the Resource Key for Error Dialog Header Text\r\n         */\r\n        get: function () {\r\n            return this.responseAllocationButtonSubText;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResponseAllocationButtonValidationParameter.prototype, \"IsResponseAllocateButtonVisible\", {\r\n        /**\r\n         * Returns back the Resource Key for Error Dialog Header Text\r\n         */\r\n        get: function () {\r\n            return this.isResponseAllocateButtonVisible;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResponseAllocationButtonValidationParameter.prototype, \"IsResponseAllocateButtonEnabled\", {\r\n        /**\r\n         * Returns back the Resource Key for Error Dialog Header Text\r\n         */\r\n        get: function () {\r\n            return this.isResponseAllocateButtonEnabled;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResponseAllocationButtonValidationParameter.prototype, \"IsWorklistInformationBannerVisible\", {\r\n        /**\r\n         * Returns back if the worklist banner should be visible or not\r\n         */\r\n        get: function () {\r\n            return this.isWorklistInformationBannerVisible;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResponseAllocationButtonValidationParameter.prototype, \"ResponseAllocationButtonTitle\", {\r\n        /**\r\n         * Returns back the Resource Key for Title for response button\r\n         */\r\n        get: function () {\r\n            return this.responseAllocationButtonTitle;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResponseAllocationButtonValidationParameter.prototype, \"ResponseAllocationButtonSingleResponseText\", {\r\n        /**\r\n         * Returns back the Resource Key for Single Response Text\r\n         */\r\n        get: function () {\r\n            return this.responseAllocationButtonSingleResponseText;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResponseAllocationButtonValidationParameter.prototype, \"ResponseAllocationButtonUpToOpenResponseText\", {\r\n        /**\r\n         * Returns back the Resource Key for Up To Open Response Text\r\n         */\r\n        get: function () {\r\n            return this.responseAllocationButtonUpToOpenResponseText;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResponseAllocationButtonValidationParameter.prototype, \"IsWholeResponseResponseAllocationButtonAvailable\", {\r\n        /**\r\n         * Returns back the Resource Key for Whole Response enbled\r\n         */\r\n        get: function () {\r\n            return this.isWholeResponseResponseAllocationButtonAvailable;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ResponseAllocationButtonValidationParameter;\r\n}());\r\nmodule.exports = ResponseAllocationButtonValidationParameter;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvcmVzcG9uc2VhbGxvY2F0aW9uL3Jlc3BvbnNlYWxsb2NhdGlvbmJ1dHRvbnZhbGlkYXRpb25wYXJhbWV0ZXIudHM/OThiOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRW50aXR5IGNsYXNzIGZvciByZXNwb25zZSBhbGxvY2F0aW9uIGJ1dHRvbiB2YWxpZGF0aW9uXHJcbiAqL1xyXG5jbGFzcyBSZXNwb25zZUFsbG9jYXRpb25CdXR0b25WYWxpZGF0aW9uUGFyYW1ldGVyIHtcclxuICAgIHByaXZhdGUgcmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uTWFpblRleHQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgcmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uU3ViVGV4dDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBpc1Jlc3BvbnNlQWxsb2NhdGVCdXR0b25WaXNpYmxlOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBpc1Jlc3BvbnNlQWxsb2NhdGVCdXR0b25FbmFibGVkOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBpc1dvcmtsaXN0SW5mb3JtYXRpb25CYW5uZXJWaXNpYmxlOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSByZXNwb25zZUFsbG9jYXRpb25CdXR0b25UaXRsZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSByZXNwb25zZUFsbG9jYXRpb25CdXR0b25TaW5nbGVSZXNwb25zZVRleHQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgcmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uVXBUb09wZW5SZXNwb25zZVRleHQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgaXNXaG9sZVJlc3BvbnNlUmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uQXZhaWxhYmxlOiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6aW5nIG5ldyBpbnN0YW5jZSBvZiByZXNwb25zZSBhbGxvY2F0aW9uIGJ1dHRvbiB2YWxpZGF0aW9uIGVudGl0eS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uTWFpblRleHQ6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlQWxsb2NhdGlvbkJ1dHRvblN1YlRleHQ6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgIGlzUmVzcG9uc2VBbGxvY2F0ZUJ1dHRvblZpc2libGU6IGJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICBpc1Jlc3BvbnNlQWxsb2NhdGVCdXR0b25FbmFibGVkOiBib29sZWFuLFxyXG4gICAgICAgICAgICAgICAgaXNXb3JrbGlzdEluZm9ybWF0aW9uQmFubmVyVmlzaWJsZTogYm9vbGVhbixcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlQWxsb2NhdGlvbkJ1dHRvblRpdGxlOiBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgICByZXNwb25zZUFsbG9jYXRpb25CdXR0b25TaW5nbGVSZXNwb25zZVRleHQ6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlQWxsb2NhdGlvbkJ1dHRvblVwVG9PcGVuUmVzcG9uc2VUZXh0OiBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgICBpc1dob2xlUmVzcG9uc2VSZXNwb25zZUFsbG9jYXRpb25CdXR0b25BdmFpbGFibGU6IGJvb2xlYW4pIHtcclxuXHJcbiAgICAgICAgdGhpcy5yZXNwb25zZUFsbG9jYXRpb25CdXR0b25NYWluVGV4dCA9IHJlc3BvbnNlQWxsb2NhdGlvbkJ1dHRvbk1haW5UZXh0O1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uU3ViVGV4dCA9IHJlc3BvbnNlQWxsb2NhdGlvbkJ1dHRvblN1YlRleHQ7XHJcbiAgICAgICAgdGhpcy5pc1Jlc3BvbnNlQWxsb2NhdGVCdXR0b25WaXNpYmxlID0gaXNSZXNwb25zZUFsbG9jYXRlQnV0dG9uVmlzaWJsZTtcclxuICAgICAgICB0aGlzLmlzUmVzcG9uc2VBbGxvY2F0ZUJ1dHRvbkVuYWJsZWQgPSBpc1Jlc3BvbnNlQWxsb2NhdGVCdXR0b25FbmFibGVkO1xyXG4gICAgICAgIHRoaXMuaXNXb3JrbGlzdEluZm9ybWF0aW9uQmFubmVyVmlzaWJsZSA9IGlzV29ya2xpc3RJbmZvcm1hdGlvbkJhbm5lclZpc2libGU7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZUFsbG9jYXRpb25CdXR0b25UaXRsZSA9IHJlc3BvbnNlQWxsb2NhdGlvbkJ1dHRvblRpdGxlO1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uU2luZ2xlUmVzcG9uc2VUZXh0ID0gcmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uU2luZ2xlUmVzcG9uc2VUZXh0O1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uVXBUb09wZW5SZXNwb25zZVRleHQgPSByZXNwb25zZUFsbG9jYXRpb25CdXR0b25VcFRvT3BlblJlc3BvbnNlVGV4dDtcclxuICAgICAgICB0aGlzLmlzV2hvbGVSZXNwb25zZVJlc3BvbnNlQWxsb2NhdGlvbkJ1dHRvbkF2YWlsYWJsZSA9IGlzV2hvbGVSZXNwb25zZVJlc3BvbnNlQWxsb2NhdGlvbkJ1dHRvbkF2YWlsYWJsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYmFjayB0aGUgUmVzb3VyY2UgS2V5IGZvciBFcnJvciBEaWFsb2cgSGVhZGVyIFRleHRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBSZXNwb25zZUFsbG9jYXRpb25CdXR0b25NYWluVGV4dCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlQWxsb2NhdGlvbkJ1dHRvbk1haW5UZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBiYWNrIHRoZSBSZXNvdXJjZSBLZXkgZm9yIEVycm9yIERpYWxvZyBIZWFkZXIgVGV4dFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IFJlc3BvbnNlQWxsb2NhdGlvbkJ1dHRvblN1YlRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25zZUFsbG9jYXRpb25CdXR0b25TdWJUZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBiYWNrIHRoZSBSZXNvdXJjZSBLZXkgZm9yIEVycm9yIERpYWxvZyBIZWFkZXIgVGV4dFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IElzUmVzcG9uc2VBbGxvY2F0ZUJ1dHRvblZpc2libGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNSZXNwb25zZUFsbG9jYXRlQnV0dG9uVmlzaWJsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYmFjayB0aGUgUmVzb3VyY2UgS2V5IGZvciBFcnJvciBEaWFsb2cgSGVhZGVyIFRleHRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBJc1Jlc3BvbnNlQWxsb2NhdGVCdXR0b25FbmFibGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzUmVzcG9uc2VBbGxvY2F0ZUJ1dHRvbkVuYWJsZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGJhY2sgaWYgdGhlIHdvcmtsaXN0IGJhbm5lciBzaG91bGQgYmUgdmlzaWJsZSBvciBub3RcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBJc1dvcmtsaXN0SW5mb3JtYXRpb25CYW5uZXJWaXNpYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzV29ya2xpc3RJbmZvcm1hdGlvbkJhbm5lclZpc2libGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGJhY2sgdGhlIFJlc291cmNlIEtleSBmb3IgVGl0bGUgZm9yIHJlc3BvbnNlIGJ1dHRvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IFJlc3BvbnNlQWxsb2NhdGlvbkJ1dHRvblRpdGxlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uVGl0bGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGJhY2sgdGhlIFJlc291cmNlIEtleSBmb3IgU2luZ2xlIFJlc3BvbnNlIFRleHRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBSZXNwb25zZUFsbG9jYXRpb25CdXR0b25TaW5nbGVSZXNwb25zZVRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25zZUFsbG9jYXRpb25CdXR0b25TaW5nbGVSZXNwb25zZVRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGJhY2sgdGhlIFJlc291cmNlIEtleSBmb3IgVXAgVG8gT3BlbiBSZXNwb25zZSBUZXh0XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgUmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uVXBUb09wZW5SZXNwb25zZVRleHQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25zZUFsbG9jYXRpb25CdXR0b25VcFRvT3BlblJlc3BvbnNlVGV4dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYmFjayB0aGUgUmVzb3VyY2UgS2V5IGZvciBXaG9sZSBSZXNwb25zZSBlbmJsZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCBJc1dob2xlUmVzcG9uc2VSZXNwb25zZUFsbG9jYXRpb25CdXR0b25BdmFpbGFibGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNXaG9sZVJlc3BvbnNlUmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uQXZhaWxhYmxlO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0ID0gUmVzcG9uc2VBbGxvY2F0aW9uQnV0dG9uVmFsaWRhdGlvblBhcmFtZXRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9yZXNwb25zZWFsbG9jYXRpb24vcmVzcG9uc2VhbGxvY2F0aW9uYnV0dG9udmFsaWRhdGlvbnBhcmFtZXRlci50cyJdLCJtYXBwaW5ncyI6IjtBQUFBOztBQUVBO0FBQ0E7QUFXQTs7QUFFQTtBQUNBO0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFFQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 1208:
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/components/utility/tab/tabcontent.tsx ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\n/* tslint:disable:no-reserved-keywords */\r\n/**\r\n * Represents the Tab Content Compoent\r\n */\r\nvar TabContent = /** @class */ (function (_super) {\r\n    __extends(TabContent, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function TabContent(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    /**\r\n     * Render method for Tab Content.\r\n     */\r\n    TabContent.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: classNames(this.props.class, { ' active': this.props.isSelected }), key: 'key_' + this.props.id, id: this.props.id }, this.props.content));\r\n    };\r\n    return TabContent;\r\n}(pureRenderComponent));\r\nmodule.exports = TabContent;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvdGFiL3RhYmNvbnRlbnQudHN4P2RkMTYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmxldCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xyXG5cclxuLyogdHNsaW50OmRpc2FibGU6bm8tcmVzZXJ2ZWQta2V5d29yZHMgKi9cclxuLyoqXHJcbiAqIFByb3BlcnRpZXMgb2YgdGhlIFRhYiBDb250ZW50IGNvbXBvbmVudFxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICAgIGluZGV4OiBudW1iZXI7XHJcbiAgICBrZXk6IHN0cmluZztcclxuICAgIGNsYXNzOiBzdHJpbmc7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgaXNTZWxlY3RlZDogYm9vbGVhbjtcclxuICAgIGNvbnRlbnQ6IEpTWC5FbGVtZW50O1xyXG4gICAgcmVuZGVyZWRPbj86IG51bWJlcjtcclxufVxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1yZXNlcnZlZC1rZXl3b3JkcyAqL1xyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgdGhlIFRhYiBDb250ZW50IENvbXBvZW50XHJcbiAqL1xyXG5jbGFzcyBUYWJDb250ZW50IGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcbiAgICAvKipcclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgbWV0aG9kIGZvciBUYWIgQ29udGVudC5cclxuICAgICAqL1xyXG4gICBwdWJsaWMgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXsgY2xhc3NOYW1lcyh0aGlzLnByb3BzLmNsYXNzLCB7ICcgYWN0aXZlJzogdGhpcy5wcm9wcy5pc1NlbGVjdGVkIH0pIH1cclxuICAgICAgICAgICAgICAgIGtleT17J2tleV8nICsgdGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmlkfT5cclxuICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY29udGVudCB9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFRhYkNvbnRlbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvdGFiL3RhYmNvbnRlbnQudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBZUE7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 1209:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/utility/tab/tabcontentcontainer.tsx ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar TabContent = __webpack_require__(/*! ./tabcontent */ 1208);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\n/**\r\n * Represents the Tab content container Compoent\r\n */\r\nvar TabContentContainer = /** @class */ (function (_super) {\r\n    __extends(TabContentContainer, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function TabContentContainer(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    /**\r\n     * Render method for Tab content container.\r\n     */\r\n    TabContentContainer.prototype.render = function () {\r\n        var _this = this;\r\n        var tabContents = [];\r\n        this.props.tabContents.map(function (tabItem) {\r\n            tabContents.push(React.createElement(TabContent, { renderedOn: _this.props.renderedOn, index: tabItem.index, key: 'tabContentItem_' + tabItem.index, class: tabItem.class, isSelected: tabItem.isSelected, id: tabItem.id, content: tabItem.content }));\r\n        });\r\n        return (React.createElement(\"div\", { className: 'tab-content-holder', key: 'tab_container_key', id: 'tab_container' }, tabContents));\r\n    };\r\n    return TabContentContainer;\r\n}(pureRenderComponent));\r\nmodule.exports = TabContentContainer;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvdGFiL3RhYmNvbnRlbnRjb250YWluZXIudHN4P2RmODgiXSwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBUYWJDb250ZW50ID0gcmVxdWlyZSgnLi90YWJjb250ZW50Jyk7XHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBUYWIgY29udGVudCBjb250YWluZXIgY29tcG9uZW50XHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlIHtcclxuICAgIHRhYkNvbnRlbnRzOiBBcnJheTxhbnk+O1xyXG4gICAgcmVuZGVyZWRPbj86IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgdGhlIFRhYiBjb250ZW50IGNvbnRhaW5lciBDb21wb2VudFxyXG4gKi9cclxuY2xhc3MgVGFiQ29udGVudENvbnRhaW5lciBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzLCBzdGF0ZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIHN0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBtZXRob2QgZm9yIFRhYiBjb250ZW50IGNvbnRhaW5lci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgbGV0IHRhYkNvbnRlbnRzOiBKU1guRWxlbWVudFtdID0gW107XHJcbiAgICAgICAgdGhpcy5wcm9wcy50YWJDb250ZW50cy5tYXAoKHRhYkl0ZW06IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgdGFiQ29udGVudHMucHVzaCg8VGFiQ29udGVudCByZW5kZXJlZE9uPXt0aGlzLnByb3BzLnJlbmRlcmVkT259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg9e3RhYkl0ZW0uaW5kZXh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PSB7ICd0YWJDb250ZW50SXRlbV8nICsgdGFiSXRlbS5pbmRleCB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9IHt0YWJJdGVtLmNsYXNzfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQ9IHt0YWJJdGVtLmlzU2VsZWN0ZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSB7dGFiSXRlbS5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0ge3RhYkl0ZW0uY29udGVudH0gLz4pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndGFiLWNvbnRlbnQtaG9sZGVyJ1xyXG4gICAgICAgICAgICAgICAga2V5ID0geyAndGFiX2NvbnRhaW5lcl9rZXknfVxyXG4gICAgICAgICAgICAgICAgaWQgPSB7J3RhYl9jb250YWluZXInfT5cclxuICAgICAgICAgICAgICAgIHsgdGFiQ29udGVudHMgfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCA9IFRhYkNvbnRlbnRDb250YWluZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvdGFiL3RhYmNvbnRlbnRjb250YWluZXIudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBVUE7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBRUE7QUFPQTtBQUVBO0FBT0E7QUFDQTtBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 1210:
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/components/utility/tab/tabhelper.ts ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar qualityFeedbackHelper = __webpack_require__(/*! ../../../utility/qualityfeedback/qualityfeedbackhelper */ 309);\r\nvar loginStore = __webpack_require__(/*! ../../../stores/login/loginstore */ 286);\r\n/**\r\n * Helper class for creating worklist tab\r\n */\r\nvar TabHelper = /** @class */ (function () {\r\n    function TabHelper() {\r\n    }\r\n    /**\r\n     * returns the tab header data.\r\n     * @param worklistTabDetails - tab details\r\n     * @param selectedTab - selected tab\r\n     */\r\n    TabHelper.getTabHeaderData = function (worklistTabDetails, selectedTab) {\r\n        var tabHeader = [];\r\n        var tabToBeSelectedBasedOnQualityFeedback = qualityFeedbackHelper.getResponseModeBasedOnQualityFeedback();\r\n        var tabToBeSelected = tabToBeSelectedBasedOnQualityFeedback !== undefined ?\r\n            tabToBeSelectedBasedOnQualityFeedback : selectedTab;\r\n        /* set the corresponding response count on the tab */\r\n        if (worklistTabDetails !== undefined && worklistTabDetails.length > 0) {\r\n            worklistTabDetails.map(function (item) {\r\n                switch (item.responseMode) {\r\n                    case enums.ResponseMode.closed:\r\n                        tabHeader.push({\r\n                            index: enums.ResponseMode.closed,\r\n                            class: 'arrow-tab resp-closed',\r\n                            isSelected: selectedTab === enums.ResponseMode.closed,\r\n                            isDisabled: qualityFeedbackHelper.isTabDisabledBasedOnQualityFeedback(tabToBeSelectedBasedOnQualityFeedback, enums.ResponseMode.closed),\r\n                            tabNavigation: 'responseTab_Closed',\r\n                            headerCount: item.responseCount,\r\n                            headerText: localeStore.instance.TranslateText('marking.worklist.submitted-closed-tab'),\r\n                            id: 'Closed',\r\n                            key: 'Closed'\r\n                        });\r\n                        break;\r\n                    case enums.ResponseMode.pending:\r\n                        var isGraceTabVisible = (qigStore.instance.selectedQIGForMarkerOperation.hasGracePeriod ||\r\n                            item.responseCount > 0) && !loginStore.instance.isAdminRemarker;\r\n                        if (isGraceTabVisible) {\r\n                            tabHeader.push({\r\n                                index: enums.ResponseMode.pending,\r\n                                class: 'arrow-tab resp-grace',\r\n                                isSelected: selectedTab === enums.ResponseMode.pending,\r\n                                isDisabled: qualityFeedbackHelper.isTabDisabledBasedOnQualityFeedback(tabToBeSelectedBasedOnQualityFeedback, enums.ResponseMode.pending),\r\n                                tabNavigation: 'responseTab_Pending',\r\n                                headerCount: item.responseCount,\r\n                                headerText: localeStore.instance.TranslateText('marking.worklist.submitted-editable-tab'),\r\n                                id: 'Pending',\r\n                                key: 'Pending'\r\n                            });\r\n                        }\r\n                        break;\r\n                    case enums.ResponseMode.open:\r\n                        tabHeader.push({\r\n                            index: enums.ResponseMode.open,\r\n                            class: 'arrow-tab resp-open',\r\n                            isSelected: selectedTab === enums.ResponseMode.open,\r\n                            isDisabled: qualityFeedbackHelper.isTabDisabledBasedOnQualityFeedback(tabToBeSelectedBasedOnQualityFeedback, enums.ResponseMode.open),\r\n                            tabNavigation: 'responseTab_Open',\r\n                            headerCount: item.responseCount,\r\n                            headerText: localeStore.instance.TranslateText('marking.worklist.open-for-marking-tab'),\r\n                            id: 'Open',\r\n                            key: 'Open'\r\n                        });\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n        return tabHeader;\r\n    };\r\n    return TabHelper;\r\n}());\r\nmodule.exports = TabHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvdGFiL3RhYmhlbHBlci50cz81ZjJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uL2VudW1zJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IHFpZ1N0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL3FpZ3NlbGVjdG9yL3FpZ3N0b3JlJyk7XHJcbmltcG9ydCBxdWFsaXR5RmVlZGJhY2tIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L3F1YWxpdHlmZWVkYmFjay9xdWFsaXR5ZmVlZGJhY2toZWxwZXInKTtcclxuaW1wb3J0IGxvZ2luU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9naW4vbG9naW5zdG9yZScpO1xyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBjbGFzcyBmb3IgY3JlYXRpbmcgd29ya2xpc3QgdGFiXHJcbiAqL1xyXG5jbGFzcyBUYWJIZWxwZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSB0YWIgaGVhZGVyIGRhdGEuXHJcbiAgICAgKiBAcGFyYW0gd29ya2xpc3RUYWJEZXRhaWxzIC0gdGFiIGRldGFpbHNcclxuICAgICAqIEBwYXJhbSBzZWxlY3RlZFRhYiAtIHNlbGVjdGVkIHRhYlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldFRhYkhlYWRlckRhdGEoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtsaXN0VGFiRGV0YWlsczogQXJyYXk8V29ya2xpc3RUYWJEZXRhaWxzPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRUYWI6IGVudW1zLlJlc3BvbnNlTW9kZSk6IEFycmF5PFRhYkhlYWRlckRhdGE+IHtcclxuICAgICAgICBsZXQgdGFiSGVhZGVyOiBBcnJheTxUYWJIZWFkZXJEYXRhPiA9IFtdO1xyXG4gICAgICAgIGxldCB0YWJUb0JlU2VsZWN0ZWRCYXNlZE9uUXVhbGl0eUZlZWRiYWNrOiBlbnVtcy5SZXNwb25zZU1vZGUgPSBxdWFsaXR5RmVlZGJhY2tIZWxwZXIuZ2V0UmVzcG9uc2VNb2RlQmFzZWRPblF1YWxpdHlGZWVkYmFjaygpO1xyXG4gICAgICAgIGxldCB0YWJUb0JlU2VsZWN0ZWQ6IGVudW1zLlJlc3BvbnNlTW9kZSA9IHRhYlRvQmVTZWxlY3RlZEJhc2VkT25RdWFsaXR5RmVlZGJhY2sgIT09IHVuZGVmaW5lZCA/XHJcbiAgICAgICAgICAgIHRhYlRvQmVTZWxlY3RlZEJhc2VkT25RdWFsaXR5RmVlZGJhY2sgOiBzZWxlY3RlZFRhYjtcclxuXHJcbiAgICAgICAgLyogc2V0IHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlIGNvdW50IG9uIHRoZSB0YWIgKi9cclxuICAgICAgICBpZiAod29ya2xpc3RUYWJEZXRhaWxzICE9PSB1bmRlZmluZWQgJiYgd29ya2xpc3RUYWJEZXRhaWxzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgd29ya2xpc3RUYWJEZXRhaWxzLm1hcCgoaXRlbTogV29ya2xpc3RUYWJEZXRhaWxzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0ucmVzcG9uc2VNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZW51bXMuUmVzcG9uc2VNb2RlLmNsb3NlZDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYkhlYWRlci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogZW51bXMuUmVzcG9uc2VNb2RlLmNsb3NlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2Fycm93LXRhYiByZXNwLWNsb3NlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZDogc2VsZWN0ZWRUYWIgPT09IGVudW1zLlJlc3BvbnNlTW9kZS5jbG9zZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXNhYmxlZDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFsaXR5RmVlZGJhY2tIZWxwZXIuaXNUYWJEaXNhYmxlZEJhc2VkT25RdWFsaXR5RmVlZGJhY2sodGFiVG9CZVNlbGVjdGVkQmFzZWRPblF1YWxpdHlGZWVkYmFjayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW51bXMuUmVzcG9uc2VNb2RlLmNsb3NlZCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiTmF2aWdhdGlvbjogJ3Jlc3BvbnNlVGFiX0Nsb3NlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ291bnQ6IGl0ZW0ucmVzcG9uc2VDb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJUZXh0OiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LnN1Ym1pdHRlZC1jbG9zZWQtdGFiJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdDbG9zZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogJ0Nsb3NlZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBlbnVtcy5SZXNwb25zZU1vZGUucGVuZGluZzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlzR3JhY2VUYWJWaXNpYmxlID0gKHFpZ1N0b3JlLmluc3RhbmNlLnNlbGVjdGVkUUlHRm9yTWFya2VyT3BlcmF0aW9uLmhhc0dyYWNlUGVyaW9kIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnJlc3BvbnNlQ291bnQgPiAwKSAmJiAhbG9naW5TdG9yZS5pbnN0YW5jZS5pc0FkbWluUmVtYXJrZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGlzR3JhY2VUYWJWaXNpYmxlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYkhlYWRlci5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGVudW1zLlJlc3BvbnNlTW9kZS5wZW5kaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogJ2Fycm93LXRhYiByZXNwLWdyYWNlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZDogc2VsZWN0ZWRUYWIgPT09IGVudW1zLlJlc3BvbnNlTW9kZS5wZW5kaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFsaXR5RmVlZGJhY2tIZWxwZXIuaXNUYWJEaXNhYmxlZEJhc2VkT25RdWFsaXR5RmVlZGJhY2sodGFiVG9CZVNlbGVjdGVkQmFzZWRPblF1YWxpdHlGZWVkYmFjayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudW1zLlJlc3BvbnNlTW9kZS5wZW5kaW5nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiTmF2aWdhdGlvbjogJ3Jlc3BvbnNlVGFiX1BlbmRpbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDb3VudDogaXRlbS5yZXNwb25zZUNvdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJUZXh0OiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LnN1Ym1pdHRlZC1lZGl0YWJsZS10YWInKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdQZW5kaW5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAnUGVuZGluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZW51bXMuUmVzcG9uc2VNb2RlLm9wZW46XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJIZWFkZXIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGVudW1zLlJlc3BvbnNlTW9kZS5vcGVuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiAnYXJyb3ctdGFiIHJlc3Atb3BlbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZDogc2VsZWN0ZWRUYWIgPT09IGVudW1zLlJlc3BvbnNlTW9kZS5vcGVuLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlzYWJsZWQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhbGl0eUZlZWRiYWNrSGVscGVyLmlzVGFiRGlzYWJsZWRCYXNlZE9uUXVhbGl0eUZlZWRiYWNrKHRhYlRvQmVTZWxlY3RlZEJhc2VkT25RdWFsaXR5RmVlZGJhY2ssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudW1zLlJlc3BvbnNlTW9kZS5vcGVuKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJOYXZpZ2F0aW9uOiAncmVzcG9uc2VUYWJfT3BlbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ291bnQ6IGl0ZW0ucmVzcG9uc2VDb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJUZXh0OiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0Lm9wZW4tZm9yLW1hcmtpbmctdGFiJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdPcGVuJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6ICdPcGVuJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0YWJIZWFkZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFRhYkhlbHBlcjtcclxuXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy91dGlsaXR5L3RhYi90YWJoZWxwZXIudHMiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBMkVBO0FBMUVBOzs7O0FBSUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 1214:
/* no static exports found */
/* all exports used */
/*!*******************************************************!*\
  !*** ./src/components/worklist/atypicalsearchbar.tsx ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar responseactioncreator = __webpack_require__(/*! ../../actions/response/responseactioncreator */ 257);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar responseStore = __webpack_require__(/*! ../../stores/response/responsestore */ 235);\r\nvar applicationactioncreator = __webpack_require__(/*! ../../actions/applicationoffline/applicationactioncreator */ 256);\r\n/**\r\n * React component.\r\n * @param {Props} props\r\n * @returns\r\n */\r\nvar AtypicalSearchBar = /** @class */ (function (_super) {\r\n    __extends(AtypicalSearchBar, _super);\r\n    /**\r\n     * Constructor for atypical search bar\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function AtypicalSearchBar(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.centerNumber = '';\r\n        _this.candidateNumber = '';\r\n        /**\r\n         * Triggered to reset the center and candidate search field.\r\n         */\r\n        _this.resetAtypicalSearchField = function (result) {\r\n            if (!result || result.searchResultCode === enums.SearchResultCode.MarkerNotApproved ||\r\n                result.searchResultCode === enums.SearchResultCode.MarkerSuspended) {\r\n                _this.refs.atyCenterName.value = '';\r\n                _this.refs.atyCandidateName.value = '';\r\n                _this.setState({\r\n                    isCenterValueSet: false,\r\n                    isCandidateValueSet: false\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Triggered to reset the center and candidate search field if marker got suspended on atypical response allocation.\r\n         */\r\n        _this.onResponseAllocated = function (responseAllocationErrorCode) {\r\n            if (responseAllocationErrorCode !== enums.ResponseAllocationErrorCode.suspendedMarker) {\r\n                _this.resetAtypicalSearchField();\r\n            }\r\n        };\r\n        /**\r\n         * This method will call on Atypical Center number onChange event\r\n         */\r\n        _this.onAtypicalCenterChange = function (event) {\r\n            var a = event.target.value;\r\n            if (a.trim().length > 0) {\r\n                _this.centerNumber = a.trim();\r\n                _this.setState({\r\n                    isCenterValueSet: true,\r\n                    isCandidateValueSet: _this.state.isCandidateValueSet\r\n                });\r\n            }\r\n            else {\r\n                _this.setState({\r\n                    isCenterValueSet: false,\r\n                    isCandidateValueSet: _this.state.isCandidateValueSet\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * This method will call on Atypical Candidate number onChange event\r\n         */\r\n        _this.onAtypicalCandiadateChange = function (event) {\r\n            var a = event.target.value;\r\n            if (a.trim().length > 0) {\r\n                _this.candidateNumber = a.trim();\r\n                _this.setState({\r\n                    isCenterValueSet: _this.state.isCenterValueSet,\r\n                    isCandidateValueSet: true\r\n                });\r\n            }\r\n            else {\r\n                _this.setState({\r\n                    isCenterValueSet: _this.state.isCenterValueSet,\r\n                    isCandidateValueSet: false\r\n                });\r\n            }\r\n        };\r\n        _this.state = {\r\n            isCenterValueSet: false,\r\n            isCandidateValueSet: false\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * render component\r\n     */\r\n    AtypicalSearchBar.prototype.render = function () {\r\n        return React.createElement(\"div\", { className: 'atypical-search-wrap middle-content' },\r\n            React.createElement(\"div\", { className: 'aty-center' },\r\n                React.createElement(\"label\", { htmlFor: 'atyCenter', className: (this.props.disableControls) ? 'disabled' : '' }, localeStore.instance.TranslateText('marking.worklist.atypical.centre-search-label')),\r\n                React.createElement(\"input\", { type: 'text', name: 'atyCenterName', onChange: this.onAtypicalCenterChange, ref: 'atyCenterName', id: 'atyCenter', disabled: this.props.disableControls, maxLength: 128, className: 'search-input Center', title: (this.props.disableControls) ?\r\n                        localeStore.instance.TranslateText('marking.worklist.atypical-search-error-dialog.atypical-search-error-disabled') :\r\n                        localeStore.instance.TranslateText('marking.worklist.atypical.centre-search-tooltip') })),\r\n            React.createElement(\"div\", { className: 'aty-candidate' },\r\n                React.createElement(\"label\", { htmlFor: 'atyCandidate', className: (this.props.disableControls) ? 'disabled' : '' }, localeStore.instance.TranslateText('marking.worklist.atypical.candidate-search-label')),\r\n                React.createElement(\"input\", { type: 'text', name: 'atyCandidateName', onChange: this.onAtypicalCandiadateChange, ref: 'atyCandidateName', id: 'atyCandidate', disabled: this.props.disableControls, maxLength: 128, className: 'search-input Candidate', title: (this.props.disableControls) ?\r\n                        localeStore.instance.TranslateText('marking.worklist.atypical-search-error-dialog.atypical-search-error-disabled') :\r\n                        localeStore.instance.TranslateText('marking.worklist.atypical.candidate-search-tooltip') })),\r\n            React.createElement(\"div\", { className: 'aty-search-btn' },\r\n                React.createElement(\"button\", { className: (((this.state.isCenterValueSet && this.state.isCandidateValueSet) === false)\r\n                        || this.props.disableControls) ?\r\n                        'btn primary rounded disabled' : 'btn primary rounded', title: (this.props.disableControls) ?\r\n                        localeStore.instance.TranslateText('marking.worklist.atypical-search-error-dialog.atypical-search-error-disabled') :\r\n                        localeStore.instance.TranslateText('marking.worklist.atypical.search-button-tooltip'), id: 'atySearch', onClick: this.onAtypicalSearchButtonClick.bind(this) }, localeStore.instance.TranslateText('marking.worklist.atypical.search-button'))));\r\n    };\r\n    /**\r\n     * This function gets invoked when the component is about to be mounted\r\n     */\r\n    AtypicalSearchBar.prototype.componentDidMount = function () {\r\n        responseStore.instance.addListener(responseStore.ResponseStore.RESET_ATYPICAL_SEARCH_FIELD, this.resetAtypicalSearchField);\r\n        responseStore.instance.addListener(responseStore.ResponseStore.ATYPICAL_SEARCH_RESULT_EVENT, this.resetAtypicalSearchField);\r\n        responseStore.instance.addListener(responseStore.ResponseStore.RESPONSE_ALLOCATED_EVENT, this.onResponseAllocated);\r\n    };\r\n    /**\r\n     * This function gets invoked when the component is about to be unmounted\r\n     */\r\n    AtypicalSearchBar.prototype.componentWillUnmount = function () {\r\n        responseStore.instance.removeListener(responseStore.ResponseStore.RESET_ATYPICAL_SEARCH_FIELD, this.resetAtypicalSearchField);\r\n        responseStore.instance.removeListener(responseStore.ResponseStore.ATYPICAL_SEARCH_RESULT_EVENT, this.resetAtypicalSearchField);\r\n        responseStore.instance.removeListener(responseStore.ResponseStore.RESPONSE_ALLOCATED_EVENT, this.onResponseAllocated);\r\n    };\r\n    /**\r\n     * Method which handles the click event of Atypical response search button.\r\n     */\r\n    AtypicalSearchBar.prototype.onAtypicalSearchButtonClick = function () {\r\n        if (!applicationactioncreator.checkActionInterrupted()) {\r\n            return;\r\n        }\r\n        if (this.state.isCenterValueSet && this.state.isCandidateValueSet) {\r\n            // set the sarch parameter\r\n            var searchAtypicalResponseArgument = {\r\n                candidateNumber: this.candidateNumber,\r\n                centreNumber: this.centerNumber,\r\n                examinerRoleId: qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId,\r\n                markSchemeGroupId: qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId\r\n            };\r\n            responseactioncreator.searchAtypicalResponse(searchAtypicalResponseArgument);\r\n        }\r\n    };\r\n    return AtypicalSearchBar;\r\n}(pureRenderComponent));\r\nmodule.exports = AtypicalSearchBar;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1215:
/* no static exports found */
/* all exports used */
/*!*********************************************************************************!*\
  !*** ./src/components/worklist/markerinformation/examinerstatechangebutton.tsx ***!
  \*********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * changeExaminerStateButton contain the examiner state change button and its click event.\r\n * @param props\r\n */\r\nvar examinerStateChangeButton = function (props) {\r\n    return (React.createElement(\"div\", { className: 'status-btn-holder padding-top-10 text-center' },\r\n        React.createElement(\"button\", { className: 'primary rounded change-sts-btn popup-nav', id: 'examinerstatechangebutton', \"data-popup\": 'changeStatus', \"aria-haspopup\": 'true', onClick: function () { props.showExaminerStateChangePopup(); }, disabled: props.isDisabled }, localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.change-status-button'))));\r\n};\r\nmodule.exports = examinerStateChangeButton;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L21hcmtlcmluZm9ybWF0aW9uL2V4YW1pbmVyc3RhdGVjaGFuZ2VidXR0b24udHN4P2ZlNzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5cclxuaW50ZXJmYWNlIENoYW5nZUV4YW1pbmVyU3RhdGVQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcbiAgICBzaG93RXhhbWluZXJTdGF0ZUNoYW5nZVBvcHVwOiBGdW5jdGlvbjtcclxuICAgIGlzRGlzYWJsZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBjaGFuZ2VFeGFtaW5lclN0YXRlQnV0dG9uIGNvbnRhaW4gdGhlIGV4YW1pbmVyIHN0YXRlIGNoYW5nZSBidXR0b24gYW5kIGl0cyBjbGljayBldmVudC5cclxuICogQHBhcmFtIHByb3BzXHJcbiAqL1xyXG5jb25zdCBleGFtaW5lclN0YXRlQ2hhbmdlQnV0dG9uOiBSZWFjdC5TdGF0ZWxlc3NDb21wb25lbnQ8Q2hhbmdlRXhhbWluZXJTdGF0ZVByb3BzPiA9IChwcm9wczogQ2hhbmdlRXhhbWluZXJTdGF0ZVByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdzdGF0dXMtYnRuLWhvbGRlciBwYWRkaW5nLXRvcC0xMCB0ZXh0LWNlbnRlcic+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdwcmltYXJ5IHJvdW5kZWQgY2hhbmdlLXN0cy1idG4gcG9wdXAtbmF2J1xyXG4gICAgICAgICAgICAgICAgaWQ9J2V4YW1pbmVyc3RhdGVjaGFuZ2VidXR0b24nXHJcbiAgICAgICAgICAgICAgICBkYXRhLXBvcHVwPSdjaGFuZ2VTdGF0dXMnIGFyaWEtaGFzcG9wdXA9J3RydWUnXHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7IHByb3BzLnNob3dFeGFtaW5lclN0YXRlQ2hhbmdlUG9wdXAoKTsgfX1cclxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtwcm9wcy5pc0Rpc2FibGVkfT5cclxuICAgICAgICAgICAgICAgIHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCd0ZWFtLW1hbmFnZW1lbnQuZXhhbWluZXItd29ya2xpc3QuY2hhbmdlLXN0YXR1cy5jaGFuZ2Utc3RhdHVzLWJ1dHRvbicpfVxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgPSBleGFtaW5lclN0YXRlQ2hhbmdlQnV0dG9uO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9tYXJrZXJpbmZvcm1hdGlvbi9leGFtaW5lcnN0YXRlY2hhbmdlYnV0dG9uLnRzeCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFPQTs7O0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFTQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 1217:
/* no static exports found */
/* all exports used */
/*!**************************************************************************!*\
  !*** ./src/components/worklist/markerinformation/markingcheckbutton.tsx ***!
  \**************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * examinerMarkingCheckButton contain the examiner's marking check button to raise marking checks.\r\n * @param props\r\n */\r\nvar markingCheckButton = function (props) {\r\n    return (React.createElement(\"div\", { className: 'status-btn-holder padding-top-10 text-center', id: props.id + '_wrapper' },\r\n        React.createElement(\"button\", { className: 'primary rounded req-marking-check', id: 'marking_check_button_id', key: props.id + '_key', onClick: function () { props.onMarkingCheckButtonClick(); }, disabled: props.disable }, localeStore.instance.TranslateText('marking.worklist.left-panel.request-marking-check-button'))));\r\n};\r\nmodule.exports = markingCheckButton;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L21hcmtlcmluZm9ybWF0aW9uL21hcmtpbmdjaGVja2J1dHRvbi50c3g/ZWZhOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcblxyXG5pbnRlcmZhY2UgTWFya2luZ0NoZWNrQnV0dG9uUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgb25NYXJraW5nQ2hlY2tCdXR0b25DbGljazogRnVuY3Rpb247XHJcbiAgICBkaXNhYmxlOiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogZXhhbWluZXJNYXJraW5nQ2hlY2tCdXR0b24gY29udGFpbiB0aGUgZXhhbWluZXIncyBtYXJraW5nIGNoZWNrIGJ1dHRvbiB0byByYWlzZSBtYXJraW5nIGNoZWNrcy5cclxuICogQHBhcmFtIHByb3BzXHJcbiAqL1xyXG5jb25zdCBtYXJraW5nQ2hlY2tCdXR0b246IFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDxNYXJraW5nQ2hlY2tCdXR0b25Qcm9wcz4gPSAocHJvcHM6IE1hcmtpbmdDaGVja0J1dHRvblByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdzdGF0dXMtYnRuLWhvbGRlciBwYWRkaW5nLXRvcC0xMCB0ZXh0LWNlbnRlcicgaWQ9e3Byb3BzLmlkICsgJ193cmFwcGVyJ30+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdwcmltYXJ5IHJvdW5kZWQgcmVxLW1hcmtpbmctY2hlY2snXHJcbiAgICAgICAgICAgICAgICBpZD17J21hcmtpbmdfY2hlY2tfYnV0dG9uX2lkJ31cclxuICAgICAgICAgICAgICAgIGtleT17cHJvcHMuaWQgKyAnX2tleSd9XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7IHByb3BzLm9uTWFya2luZ0NoZWNrQnV0dG9uQ2xpY2soKTsgfX1cclxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtwcm9wcy5kaXNhYmxlfT5cclxuICAgICAgICAgICAgICAgIHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LmxlZnQtcGFuZWwucmVxdWVzdC1tYXJraW5nLWNoZWNrLWJ1dHRvbicpfVxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgPSBtYXJraW5nQ2hlY2tCdXR0b247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L21hcmtlcmluZm9ybWF0aW9uL21hcmtpbmdjaGVja2J1dHRvbi50c3giXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBT0E7OztBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBU0E7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 1220:
/* no static exports found */
/* all exports used */
/*!***************************************************************************!*\
  !*** ./src/components/worklist/markerinformation/personalinformation.tsx ***!
  \***************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar SendMessageLink = __webpack_require__(/*! ./sendmessagelink */ 590);\r\n/**\r\n * React class for supervisor information.\r\n */\r\nvar PersonalInformation = /** @class */ (function (_super) {\r\n    __extends(PersonalInformation, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function PersonalInformation(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    /**\r\n     * Render method for personal information.\r\n     */\r\n    PersonalInformation.prototype.render = function () {\r\n        return (React.createElement(\"div\", { id: 'my_info_panel', className: 'my-info clearfix' },\r\n            React.createElement(\"div\", { className: 'user-photo-holder user-medium-icon sprite-icon' }),\r\n            React.createElement(\"div\", { className: 'user-details-holder' },\r\n                React.createElement(\"div\", { id: 'user_name', className: 'user-name large-text' }, this.props.examinerName),\r\n                React.createElement(\"div\", { id: 'user_role', className: 'designation small-text' }, this.getRoleText()),\r\n                this.renderSendMessageSection(),\r\n                React.createElement(\"div\", { className: 'approve-status-holder padding-top-5' },\r\n                    React.createElement(\"span\", { className: this.determineStatusClass(false) },\r\n                        React.createElement(\"span\", { id: 'user_approval_icon', className: this.determineStatusClass(true) }),\r\n                        React.createElement(\"span\", { id: 'user_approval_status', className: 'small-text padding-left-5' }, this.getApprovalStatusText()),\r\n                        this.props.markingCheckStatus ?\r\n                            React.createElement(\"span\", { id: 'marking_check_status_id', className: 'check-request-status' }, '(' + this.props.markingCheckStatus + ')') : null)))));\r\n    };\r\n    /**\r\n     * Render Send Message Link for Team Management\r\n     */\r\n    PersonalInformation.prototype.renderSendMessageSection = function () {\r\n        if (this.props.isTeamManagementMode) {\r\n            return React.createElement(SendMessageLink, { onClick: this.props.showMessagePopup, id: 'sendMsg', key: 'sendMsg' });\r\n        }\r\n    };\r\n    /**\r\n     * Return the Approval Status text.(localized)\r\n     */\r\n    PersonalInformation.prototype.getApprovalStatusText = function () {\r\n        // status text for quality feedback status.\r\n        if (this.props.qualityFeedbackStatus) {\r\n            var approvalStatusText = '';\r\n            approvalStatusText = 'qig-statuses.' + enums.ExaminerQIGStatus[11];\r\n            return localeStore.instance.TranslateText('home.' + approvalStatusText);\r\n        }\r\n        else {\r\n            var approvalStatusText = '';\r\n            approvalStatusText = 'approval-statuses.' + enums.ExaminerApproval[this.props.approvalStatus];\r\n            return localeStore.instance.TranslateText('generic.' + approvalStatusText);\r\n        }\r\n    };\r\n    /**\r\n     * Return the Role text.(localized)\r\n     */\r\n    PersonalInformation.prototype.getRoleText = function () {\r\n        var roleText = '';\r\n        roleText = 'examiner-roles.' + enums.ExaminerRole[this.props.examinerRole];\r\n        return localeStore.instance.TranslateText('generic.' + roleText);\r\n    };\r\n    /**\r\n     * Determine the class for the approval status.\r\n     */\r\n    PersonalInformation.prototype.determineStatusClass = function (isIcon) {\r\n        var iconClass = 'sprite-icon {0}-small-icon';\r\n        var bubbleClass = 'bubble show {0} no-border white-bg rounded';\r\n        var iconClassValue = 'warning';\r\n        var bubbleClassValue = 'warning';\r\n        switch (this.props.approvalStatus) {\r\n            case enums.ExaminerApproval.Approved:\r\n                iconClassValue = 'success';\r\n                bubbleClassValue = 'success';\r\n                break;\r\n            case enums.ExaminerApproval.ConditionallyApproved:\r\n            case enums.ExaminerApproval.ApprovedReview:\r\n                iconClassValue = 'warning';\r\n                bubbleClassValue = 'warning';\r\n                break;\r\n            case enums.ExaminerApproval.NotApproved:\r\n                iconClassValue = 'not-approved';\r\n                bubbleClassValue = 'warning';\r\n                break;\r\n            case enums.ExaminerApproval.Suspended:\r\n                iconClassValue = 'error';\r\n                bubbleClassValue = 'error';\r\n                break;\r\n            default:\r\n                iconClassValue = 'warning';\r\n                bubbleClassValue = 'warning';\r\n                break;\r\n        }\r\n        // color class for quality feedback\r\n        if (this.props.qualityFeedbackStatus) {\r\n            iconClassValue = 'warning';\r\n            bubbleClassValue = 'warning';\r\n        }\r\n        if (isIcon) {\r\n            return iconClass.replace('{0}', iconClassValue);\r\n        }\r\n        else {\r\n            return bubbleClass.replace('{0}', bubbleClassValue);\r\n        }\r\n    };\r\n    return PersonalInformation;\r\n}(pureRenderComponent));\r\nmodule.exports = PersonalInformation;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L21hcmtlcmluZm9ybWF0aW9uL3BlcnNvbmFsaW5mb3JtYXRpb24udHN4Pzg2NzgiXSwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgU2VuZE1lc3NhZ2VMaW5rID0gcmVxdWlyZSgnLi9zZW5kbWVzc2FnZWxpbmsnKTtcclxuLyoqXHJcbiAqIFByb3BlcnRpZXMgb2YgYSBjb21wb25lbnRcclxuICovXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2Uge1xyXG4gICAgZXhhbWluZXJOYW1lOiBzdHJpbmc7XHJcbiAgICBleGFtaW5lclJvbGU6IG51bWJlcjtcclxuICAgIGFwcHJvdmFsU3RhdHVzOiBlbnVtcy5FeGFtaW5lckFwcHJvdmFsO1xyXG4gICAgcXVhbGl0eUZlZWRiYWNrU3RhdHVzOiBib29sZWFuO1xyXG4gICAgbWFya2luZ0NoZWNrU3RhdHVzPzogc3RyaW5nO1xyXG4gICAgaXNUZWFtTWFuYWdlbWVudE1vZGU6IGJvb2xlYW47XHJcbiAgICBzaG93TWVzc2FnZVBvcHVwOiBGdW5jdGlvbjtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZWFjdCBjbGFzcyBmb3Igc3VwZXJ2aXNvciBpbmZvcm1hdGlvbi5cclxuICovXHJcbmNsYXNzIFBlcnNvbmFsSW5mb3JtYXRpb24gZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGNvbnN0cnVjdG9yXHJcbiAgICAgKiBAcGFyYW0gcHJvcHNcclxuICAgICAqIEBwYXJhbSBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIG1ldGhvZCBmb3IgcGVyc29uYWwgaW5mb3JtYXRpb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW5kZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuICg8ZGl2IGlkPSdteV9pbmZvX3BhbmVsJyBjbGFzc05hbWU9J215LWluZm8gY2xlYXJmaXgnPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndXNlci1waG90by1ob2xkZXIgdXNlci1tZWRpdW0taWNvbiBzcHJpdGUtaWNvbicvPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndXNlci1kZXRhaWxzLWhvbGRlcic+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGlkPSd1c2VyX25hbWUnIGNsYXNzTmFtZT0ndXNlci1uYW1lIGxhcmdlLXRleHQnPnt0aGlzLnByb3BzLmV4YW1pbmVyTmFtZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9J3VzZXJfcm9sZScgY2xhc3NOYW1lPSdkZXNpZ25hdGlvbiBzbWFsbC10ZXh0Jz57dGhpcy5nZXRSb2xlVGV4dCgpIH08L2Rpdj5cclxuICAgICAgICAgICAgICAgIHsgdGhpcy5yZW5kZXJTZW5kTWVzc2FnZVNlY3Rpb24oKSB9XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYXBwcm92ZS1zdGF0dXMtaG9sZGVyIHBhZGRpbmctdG9wLTUnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17dGhpcy5kZXRlcm1pbmVTdGF0dXNDbGFzcyhmYWxzZSkgfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J3VzZXJfYXBwcm92YWxfaWNvbicgY2xhc3NOYW1lPXt0aGlzLmRldGVybWluZVN0YXR1c0NsYXNzKHRydWUpIH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9J3VzZXJfYXBwcm92YWxfc3RhdHVzJyBjbGFzc05hbWU9J3NtYWxsLXRleHQgcGFkZGluZy1sZWZ0LTUnPnt0aGlzLmdldEFwcHJvdmFsU3RhdHVzVGV4dCgpIH08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLm1hcmtpbmdDaGVja1N0YXR1cyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZCA9ICdtYXJraW5nX2NoZWNrX3N0YXR1c19pZCcgY2xhc3NOYW1lPSAnY2hlY2stcmVxdWVzdC1zdGF0dXMnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsnKCcgKyB0aGlzLnByb3BzLm1hcmtpbmdDaGVja1N0YXR1cyArICcpJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj4pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIFNlbmQgTWVzc2FnZSBMaW5rIGZvciBUZWFtIE1hbmFnZW1lbnRcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZW5kZXJTZW5kTWVzc2FnZVNlY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaXNUZWFtTWFuYWdlbWVudE1vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDxTZW5kTWVzc2FnZUxpbmsgb25DbGljayA9IHsgdGhpcy5wcm9wcy5zaG93TWVzc2FnZVBvcHVwIH0gaWQgPSdzZW5kTXNnJyBrZXk9J3NlbmRNc2cnIC8+O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiB0aGUgQXBwcm92YWwgU3RhdHVzIHRleHQuKGxvY2FsaXplZClcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRBcHByb3ZhbFN0YXR1c1RleHQoKSB7XHJcblxyXG4gICAgICAgIC8vIHN0YXR1cyB0ZXh0IGZvciBxdWFsaXR5IGZlZWRiYWNrIHN0YXR1cy5cclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5xdWFsaXR5RmVlZGJhY2tTdGF0dXMpIHtcclxuICAgICAgICAgICAgbGV0IGFwcHJvdmFsU3RhdHVzVGV4dCA9ICcnO1xyXG4gICAgICAgICAgICBhcHByb3ZhbFN0YXR1c1RleHQgPSAncWlnLXN0YXR1c2VzLicgKyBlbnVtcy5FeGFtaW5lclFJR1N0YXR1c1sxMV07XHJcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdob21lLicgKyBhcHByb3ZhbFN0YXR1c1RleHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBhcHByb3ZhbFN0YXR1c1RleHQgPSAnJztcclxuICAgICAgICAgICAgYXBwcm92YWxTdGF0dXNUZXh0ID0gJ2FwcHJvdmFsLXN0YXR1c2VzLicgKyBlbnVtcy5FeGFtaW5lckFwcHJvdmFsW3RoaXMucHJvcHMuYXBwcm92YWxTdGF0dXNdO1xyXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnZ2VuZXJpYy4nICsgYXBwcm92YWxTdGF0dXNUZXh0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdGhlIFJvbGUgdGV4dC4obG9jYWxpemVkKVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldFJvbGVUZXh0KCkge1xyXG4gICAgICAgIGxldCByb2xlVGV4dCA9ICcnO1xyXG4gICAgICAgIHJvbGVUZXh0ID0gJ2V4YW1pbmVyLXJvbGVzLicgKyBlbnVtcy5FeGFtaW5lclJvbGVbdGhpcy5wcm9wcy5leGFtaW5lclJvbGVdO1xyXG4gICAgICAgIHJldHVybiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdnZW5lcmljLicgKyByb2xlVGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmUgdGhlIGNsYXNzIGZvciB0aGUgYXBwcm92YWwgc3RhdHVzLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGRldGVybWluZVN0YXR1c0NsYXNzKGlzSWNvbjogYm9vbGVhbikge1xyXG4gICAgICAgIGxldCBpY29uQ2xhc3MgPSAnc3ByaXRlLWljb24gezB9LXNtYWxsLWljb24nO1xyXG4gICAgICAgIGxldCBidWJibGVDbGFzcyA9ICdidWJibGUgc2hvdyB7MH0gbm8tYm9yZGVyIHdoaXRlLWJnIHJvdW5kZWQnO1xyXG4gICAgICAgIGxldCBpY29uQ2xhc3NWYWx1ZSA9ICd3YXJuaW5nJztcclxuICAgICAgICBsZXQgYnViYmxlQ2xhc3NWYWx1ZSA9ICd3YXJuaW5nJztcclxuXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnByb3BzLmFwcHJvdmFsU3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuRXhhbWluZXJBcHByb3ZhbC5BcHByb3ZlZDpcclxuICAgICAgICAgICAgICAgIGljb25DbGFzc1ZhbHVlID0gJ3N1Y2Nlc3MnO1xyXG4gICAgICAgICAgICAgICAgYnViYmxlQ2xhc3NWYWx1ZSA9ICdzdWNjZXNzJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLkV4YW1pbmVyQXBwcm92YWwuQ29uZGl0aW9uYWxseUFwcHJvdmVkOlxyXG4gICAgICAgICAgICBjYXNlIGVudW1zLkV4YW1pbmVyQXBwcm92YWwuQXBwcm92ZWRSZXZpZXc6XHJcbiAgICAgICAgICAgICAgICBpY29uQ2xhc3NWYWx1ZSA9ICd3YXJuaW5nJztcclxuICAgICAgICAgICAgICAgIGJ1YmJsZUNsYXNzVmFsdWUgPSAnd2FybmluZyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5FeGFtaW5lckFwcHJvdmFsLk5vdEFwcHJvdmVkOlxyXG4gICAgICAgICAgICAgICAgaWNvbkNsYXNzVmFsdWUgPSAnbm90LWFwcHJvdmVkJztcclxuICAgICAgICAgICAgICAgIGJ1YmJsZUNsYXNzVmFsdWUgPSAnd2FybmluZyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5FeGFtaW5lckFwcHJvdmFsLlN1c3BlbmRlZDpcclxuICAgICAgICAgICAgICAgIGljb25DbGFzc1ZhbHVlID0gJ2Vycm9yJztcclxuICAgICAgICAgICAgICAgIGJ1YmJsZUNsYXNzVmFsdWUgPSAnZXJyb3InO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpY29uQ2xhc3NWYWx1ZSA9ICd3YXJuaW5nJztcclxuICAgICAgICAgICAgICAgIGJ1YmJsZUNsYXNzVmFsdWUgPSAnd2FybmluZyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNvbG9yIGNsYXNzIGZvciBxdWFsaXR5IGZlZWRiYWNrXHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMucXVhbGl0eUZlZWRiYWNrU3RhdHVzKSB7XHJcbiAgICAgICAgICAgIGljb25DbGFzc1ZhbHVlID0gJ3dhcm5pbmcnO1xyXG4gICAgICAgICAgICBidWJibGVDbGFzc1ZhbHVlID0gJ3dhcm5pbmcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzSWNvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gaWNvbkNsYXNzLnJlcGxhY2UoJ3swfScsIGljb25DbGFzc1ZhbHVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gYnViYmxlQ2xhc3MucmVwbGFjZSgnezB9JywgYnViYmxlQ2xhc3NWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBQZXJzb25hbEluZm9ybWF0aW9uO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9tYXJrZXJpbmZvcm1hdGlvbi9wZXJzb25hbGluZm9ybWF0aW9uLnRzeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFlQTs7QUFFQTtBQUNBO0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 1221:
/* no static exports found */
/* all exports used */
/*!*****************************************************************************!*\
  !*** ./src/components/worklist/markerinformation/supervisorinformation.tsx ***!
  \*****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar stringHelper = __webpack_require__(/*! ../../../utility/generic/stringhelper */ 254);\r\nvar SendMessageLink = __webpack_require__(/*! ./sendmessagelink */ 590);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\n/**\r\n * React class for supervisor information.\r\n */\r\nvar SupervisorInformation = /** @class */ (function (_super) {\r\n    __extends(SupervisorInformation, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function SupervisorInformation(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    /**\r\n     * Render method for supervisor information.\r\n     */\r\n    SupervisorInformation.prototype.render = function () {\r\n        if (this.props.isTeamManagementMode || this.props.supervisorName === '') {\r\n            return (React.createElement(\"div\", null));\r\n        }\r\n        var sendMessageLink = this.props.showMessageLink ?\r\n            (React.createElement(SendMessageLink, { onClick: this.props.showMessagePopup, id: 'sendMsg', key: 'sendMsg' })) : null;\r\n        return (React.createElement(\"div\", { id: 'supervisor_info_panel', className: 'supervisor-info relative clearfix padding-bottom-30' },\r\n            React.createElement(\"div\", { className: 'user-photo-holder user-medium-icon sprite-icon' },\r\n                React.createElement(\"span\", { className: classNames('online-status-bubble', { 'online': this.props.isSupervisorOnline }) })),\r\n            React.createElement(\"div\", { className: 'hierarchy-line' }),\r\n            React.createElement(\"div\", { className: 'user-details-holder' },\r\n                React.createElement(\"div\", { className: 'online-status small-text' }, this.getSupervisorOnlineStatusText()),\r\n                React.createElement(\"div\", { id: 'supervisor_name', className: 'user-name large-text' }, this.props.supervisorName),\r\n                React.createElement(\"div\", { id: 'supervisor_designation', className: 'designation small-text' }, localeStore.instance.TranslateText('marking.worklist.left-panel.my-supervisor')),\r\n                sendMessageLink)));\r\n    };\r\n    /**\r\n     * This method will return the localised text for supervisor online status.\r\n     */\r\n    SupervisorInformation.prototype.getSupervisorOnlineStatusText = function () {\r\n        var offlineHours = Math.floor(this.props.supervisorLogoutDiffInMinutes / 60);\r\n        var offlineDays = 0;\r\n        if (this.props.isSupervisorOnline) {\r\n            return localeStore.instance.TranslateText('marking.worklist.left-panel.supervisor-online');\r\n        }\r\n        else {\r\n            if (this.props.supervisorLogoutDiffInMinutes === -1) {\r\n                return localeStore.instance.TranslateText('marking.worklist.left-panel.supervisor-offline');\r\n            }\r\n            else if (offlineHours === 0) {\r\n                return localeStore.instance.TranslateText('marking.worklist.left-panel.supervisor-offline-less-than-1-hour');\r\n            }\r\n            else if (offlineHours === 1) {\r\n                return stringHelper.format(localeStore.instance.TranslateText('marking.worklist.left-panel.supervisor-offline-hour'), [String(offlineHours)]);\r\n            }\r\n            else if (offlineHours > 1 && offlineHours < 24) {\r\n                return stringHelper.format(localeStore.instance.TranslateText('marking.worklist.left-panel.supervisor-offline-hours'), [String(offlineHours)]);\r\n            }\r\n            else if (offlineHours < 48) {\r\n                offlineDays = Math.floor(offlineHours / 24);\r\n                return stringHelper.format(localeStore.instance.TranslateText('marking.worklist.left-panel.supervisor-offline-day'), [String(offlineDays)]);\r\n            }\r\n            else if (offlineHours >= 48) {\r\n                offlineDays = Math.floor(offlineHours / 24);\r\n                return stringHelper.format(localeStore.instance.TranslateText('marking.worklist.left-panel.supervisor-offline-days'), [String(offlineDays)]);\r\n            }\r\n        }\r\n    };\r\n    return SupervisorInformation;\r\n}(pureRenderComponent));\r\nmodule.exports = SupervisorInformation;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L21hcmtlcmluZm9ybWF0aW9uL3N1cGVydmlzb3JpbmZvcm1hdGlvbi50c3g/MTJiNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgc3RyaW5nSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9nZW5lcmljL3N0cmluZ2hlbHBlcicpO1xyXG5pbXBvcnQgU2VuZE1lc3NhZ2VMaW5rID0gcmVxdWlyZSgnLi9zZW5kbWVzc2FnZWxpbmsnKTtcclxubGV0IGNsYXNzTmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBhIGNvbXBvbmVudFxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSB7XHJcbiAgICBzdXBlcnZpc29yTmFtZTogc3RyaW5nO1xyXG4gICAgaXNTdXBlcnZpc29yT25saW5lOiBib29sZWFuO1xyXG4gICAgc3VwZXJ2aXNvckxvZ291dERpZmZJbk1pbnV0ZXM6IG51bWJlcjtcclxuICAgIHNob3dNZXNzYWdlUG9wdXA6IEZ1bmN0aW9uO1xyXG4gICAgaXNUZWFtTWFuYWdlbWVudE1vZGU6IGJvb2xlYW47XHJcbiAgICBzaG93TWVzc2FnZUxpbms6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWFjdCBjbGFzcyBmb3Igc3VwZXJ2aXNvciBpbmZvcm1hdGlvbi5cclxuICovXHJcbmNsYXNzIFN1cGVydmlzb3JJbmZvcm1hdGlvbiBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcywgc3RhdGU6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBzdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgbWV0aG9kIGZvciBzdXBlcnZpc29yIGluZm9ybWF0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzVGVhbU1hbmFnZW1lbnRNb2RlIHx8IHRoaXMucHJvcHMuc3VwZXJ2aXNvck5hbWUgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoPGRpdj48L2Rpdj4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc2VuZE1lc3NhZ2VMaW5rID0gdGhpcy5wcm9wcy5zaG93TWVzc2FnZUxpbmsgP1xyXG4gICAgICAgICAgICAoPFNlbmRNZXNzYWdlTGluayBvbkNsaWNrPXt0aGlzLnByb3BzLnNob3dNZXNzYWdlUG9wdXB9IGlkPSdzZW5kTXNnJyBrZXk9J3NlbmRNc2cnIC8+KSA6IG51bGw7XHJcbiAgICAgICAgcmV0dXJuICg8ZGl2IGlkPSdzdXBlcnZpc29yX2luZm9fcGFuZWwnIGNsYXNzTmFtZT0nc3VwZXJ2aXNvci1pbmZvIHJlbGF0aXZlIGNsZWFyZml4IHBhZGRpbmctYm90dG9tLTMwJz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3VzZXItcGhvdG8taG9sZGVyIHVzZXItbWVkaXVtLWljb24gc3ByaXRlLWljb24nPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdvbmxpbmUtc3RhdHVzLWJ1YmJsZScsIHsgJ29ubGluZSc6IHRoaXMucHJvcHMuaXNTdXBlcnZpc29yT25saW5lIH0pfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2hpZXJhcmNoeS1saW5lJyAvPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndXNlci1kZXRhaWxzLWhvbGRlcic+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nb25saW5lLXN0YXR1cyBzbWFsbC10ZXh0Jz57dGhpcy5nZXRTdXBlcnZpc29yT25saW5lU3RhdHVzVGV4dCgpfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBpZD0nc3VwZXJ2aXNvcl9uYW1lJyBjbGFzc05hbWU9J3VzZXItbmFtZSBsYXJnZS10ZXh0Jz57dGhpcy5wcm9wcy5zdXBlcnZpc29yTmFtZX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9J3N1cGVydmlzb3JfZGVzaWduYXRpb24nIGNsYXNzTmFtZT0nZGVzaWduYXRpb24gc21hbGwtdGV4dCc+XHJcbiAgICAgICAgICAgICAgICAgICAge2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QubGVmdC1wYW5lbC5teS1zdXBlcnZpc29yJyl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIHtzZW5kTWVzc2FnZUxpbmt9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2Pik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiB0aGUgbG9jYWxpc2VkIHRleHQgZm9yIHN1cGVydmlzb3Igb25saW5lIHN0YXR1cy5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRTdXBlcnZpc29yT25saW5lU3RhdHVzVGV4dCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBvZmZsaW5lSG91cnMgPSBNYXRoLmZsb29yKHRoaXMucHJvcHMuc3VwZXJ2aXNvckxvZ291dERpZmZJbk1pbnV0ZXMgLyA2MCk7XHJcbiAgICAgICAgbGV0IG9mZmxpbmVEYXlzOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzU3VwZXJ2aXNvck9ubGluZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5sZWZ0LXBhbmVsLnN1cGVydmlzb3Itb25saW5lJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnN1cGVydmlzb3JMb2dvdXREaWZmSW5NaW51dGVzID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QubGVmdC1wYW5lbC5zdXBlcnZpc29yLW9mZmxpbmUnKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvZmZsaW5lSG91cnMgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LmxlZnQtcGFuZWwuc3VwZXJ2aXNvci1vZmZsaW5lLWxlc3MtdGhhbi0xLWhvdXInKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvZmZsaW5lSG91cnMgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdIZWxwZXIuZm9ybWF0KFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QubGVmdC1wYW5lbC5zdXBlcnZpc29yLW9mZmxpbmUtaG91cicpLFxyXG4gICAgICAgICAgICAgICAgICAgIFtTdHJpbmcob2ZmbGluZUhvdXJzKV0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9mZmxpbmVIb3VycyA+IDEgJiYgb2ZmbGluZUhvdXJzIDwgMjQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdIZWxwZXIuZm9ybWF0KFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QubGVmdC1wYW5lbC5zdXBlcnZpc29yLW9mZmxpbmUtaG91cnMnKSxcclxuICAgICAgICAgICAgICAgICAgICBbU3RyaW5nKG9mZmxpbmVIb3VycyldKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvZmZsaW5lSG91cnMgPCA0OCkge1xyXG4gICAgICAgICAgICAgICAgb2ZmbGluZURheXMgPSBNYXRoLmZsb29yKG9mZmxpbmVIb3VycyAvIDI0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdIZWxwZXIuZm9ybWF0KFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QubGVmdC1wYW5lbC5zdXBlcnZpc29yLW9mZmxpbmUtZGF5JyksXHJcbiAgICAgICAgICAgICAgICAgICAgW1N0cmluZyhvZmZsaW5lRGF5cyldKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvZmZsaW5lSG91cnMgPj0gNDgpIHtcclxuICAgICAgICAgICAgICAgIG9mZmxpbmVEYXlzID0gTWF0aC5mbG9vcihvZmZsaW5lSG91cnMgLyAyNCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nSGVscGVyLmZvcm1hdChcclxuICAgICAgICAgICAgICAgICAgICBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LmxlZnQtcGFuZWwuc3VwZXJ2aXNvci1vZmZsaW5lLWRheXMnKSxcclxuICAgICAgICAgICAgICAgICAgICBbU3RyaW5nKG9mZmxpbmVEYXlzKV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gU3VwZXJ2aXNvckluZm9ybWF0aW9uO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9tYXJrZXJpbmZvcm1hdGlvbi9zdXBlcnZpc29yaW5mb3JtYXRpb24udHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBY0E7O0FBRUE7QUFDQTtBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUdBO0FBQUE7QUFDQTtBQUdBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 1222:
/* no static exports found */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/components/worklist/markingcheckindicator.tsx ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar markingCheckActionCreator = __webpack_require__(/*! ../../actions/markingcheck/markingcheckactioncreator */ 311);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../actions/messaging/messagingactioncreator */ 268);\r\n/* tslint:disable:variable-name */\r\n/**\r\n * Marking Check Collapsible Component to show the status of the Marking Check Worklist access for an examiner\r\n * The notification bar will be available in all worklist and will be available when a PE,APE or an Auto Approved STL raise a\r\n * marking check to any of his subordinate examiners.\r\n * For STL alone he will be able to raise the marking check to the PE if the PE is his direct Paernt\r\n * @param props\r\n */\r\nvar MarkingCheckIndicator = function (props) {\r\n    // Return null if the marking check is not available or if the examiner is in team management mode\r\n    if (props.isMarkingCheckAvailable &&\r\n        !markerOperationModeFactory.operationMode.isTeamManagementMode &&\r\n        !props.isMarkCheckWorklist) {\r\n        return (React.createElement(\"div\", { className: 'message-bar', id: 'marking_check_message_bar' },\r\n            React.createElement(\"span\", { className: 'message-content', id: 'marking_check_messag_content' },\r\n                localeStore.instance.TranslateText('marking.worklist.perform-marking-check.perform-marking-check-body-1'),\r\n                React.createElement(\"a\", { className: 'white-link', id: 'marking_check_messag_link', href: 'javascript:void(0);', onClick: function () { showMarkingCheckReqWorklist(); } }, localeStore.instance.TranslateText('marking.worklist.perform-marking-check.perform-marking-check-link')),\r\n                localeStore.instance.TranslateText('marking.worklist.perform-marking-check.perform-marking-check-body-2'))));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n    /**\r\n     * This will load the mark check requested examiners worklist\r\n     */\r\n    function showMarkingCheckReqWorklist() {\r\n        if (!messageStore.instance.isMessagePanelActive) {\r\n            markingCheckActionCreator.getMarkCheckExaminers(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId);\r\n        }\r\n        else {\r\n            var messageNavigationArguments = {\r\n                responseId: null,\r\n                canNavigate: false,\r\n                navigateTo: enums.MessageNavigation.toMarkingCheckWorklist,\r\n                navigationConfirmed: false,\r\n                hasMessageContainsDirtyValue: undefined,\r\n                triggerPoint: enums.TriggerPoint.None\r\n            };\r\n            messagingActionCreator.canMessageNavigate(messageNavigationArguments);\r\n        }\r\n    }\r\n};\r\nmodule.exports = MarkingCheckIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L21hcmtpbmdjaGVja2luZGljYXRvci50c3g/NjE1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgdGVhbU1hbmFnZW1lbnRTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy90ZWFtbWFuYWdlbWVudC90ZWFtbWFuYWdlbWVudHN0b3JlJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IG1hcmtlck9wZXJhdGlvbk1vZGVGYWN0b3J5ID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9tYXJrZXJvcGVyYXRpb25tb2RlL21hcmtlcm9wZXJhdGlvbm1vZGVmYWN0b3J5Jyk7XHJcbmltcG9ydCBtYXJraW5nQ2hlY2tBY3Rpb25DcmVhdG9yID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy9tYXJraW5nY2hlY2svbWFya2luZ2NoZWNrYWN0aW9uY3JlYXRvcicpO1xyXG5pbXBvcnQgcWlnU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvcWlnc2VsZWN0b3IvcWlnc3RvcmUnKTtcclxuaW1wb3J0IHdvcmtsaXN0U3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvd29ya2xpc3Qvd29ya2xpc3RzdG9yZScpO1xyXG5pbXBvcnQgdXNlckluZm9BY3Rpb25DcmVhdG9yID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy91c2VyaW5mby91c2VyaW5mb2FjdGlvbmNyZWF0b3InKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9lbnVtcycpO1xyXG5pbXBvcnQgbWVzc2FnZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL21lc3NhZ2UvbWVzc2FnZXN0b3JlJyk7XHJcbmltcG9ydCBtZXNzYWdpbmdBY3Rpb25DcmVhdG9yID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy9tZXNzYWdpbmcvbWVzc2FnaW5nYWN0aW9uY3JlYXRvcicpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1lbXB0eS1pbnRlcmZhY2VzICovXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIE1hcmtpbmcgQ2hlY2sgSW5kaWNhdG9yXHJcbiAqL1xyXG5pbnRlcmZhY2UgTWFya2luZ0NoZWNrSW5kaWNhdG9yUHJvcHMgZXh0ZW5kcyBQcm9wc0Jhc2UsIExvY2FsZVNlbGVjdGlvbkJhc2Uge1xyXG4gICAgaXNNYXJraW5nQ2hlY2tBdmFpbGFibGU6IGJvb2xlYW47XHJcbiAgICBpc01hcmtDaGVja1dvcmtsaXN0OiBib29sZWFuO1xyXG59XHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcbi8qKlxyXG4gKiBNYXJraW5nIENoZWNrIENvbGxhcHNpYmxlIENvbXBvbmVudCB0byBzaG93IHRoZSBzdGF0dXMgb2YgdGhlIE1hcmtpbmcgQ2hlY2sgV29ya2xpc3QgYWNjZXNzIGZvciBhbiBleGFtaW5lclxyXG4gKiBUaGUgbm90aWZpY2F0aW9uIGJhciB3aWxsIGJlIGF2YWlsYWJsZSBpbiBhbGwgd29ya2xpc3QgYW5kIHdpbGwgYmUgYXZhaWxhYmxlIHdoZW4gYSBQRSxBUEUgb3IgYW4gQXV0byBBcHByb3ZlZCBTVEwgcmFpc2UgYVxyXG4gKiBtYXJraW5nIGNoZWNrIHRvIGFueSBvZiBoaXMgc3Vib3JkaW5hdGUgZXhhbWluZXJzLlxyXG4gKiBGb3IgU1RMIGFsb25lIGhlIHdpbGwgYmUgYWJsZSB0byByYWlzZSB0aGUgbWFya2luZyBjaGVjayB0byB0aGUgUEUgaWYgdGhlIFBFIGlzIGhpcyBkaXJlY3QgUGFlcm50XHJcbiAqIEBwYXJhbSBwcm9wc1xyXG4gKi9cclxuY29uc3QgTWFya2luZ0NoZWNrSW5kaWNhdG9yOiBSZWFjdC5TdGF0ZWxlc3NDb21wb25lbnQ8TWFya2luZ0NoZWNrSW5kaWNhdG9yUHJvcHM+ID0gKHByb3BzOiBNYXJraW5nQ2hlY2tJbmRpY2F0b3JQcm9wcykgPT4ge1xyXG4gICAgLy8gUmV0dXJuIG51bGwgaWYgdGhlIG1hcmtpbmcgY2hlY2sgaXMgbm90IGF2YWlsYWJsZSBvciBpZiB0aGUgZXhhbWluZXIgaXMgaW4gdGVhbSBtYW5hZ2VtZW50IG1vZGVcclxuICAgIGlmIChwcm9wcy5pc01hcmtpbmdDaGVja0F2YWlsYWJsZSAmJlxyXG4gICAgICAgICFtYXJrZXJPcGVyYXRpb25Nb2RlRmFjdG9yeS5vcGVyYXRpb25Nb2RlLmlzVGVhbU1hbmFnZW1lbnRNb2RlICYmXHJcbiAgICAgICAgIXByb3BzLmlzTWFya0NoZWNrV29ya2xpc3QpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWVzc2FnZS1iYXInIGlkPSdtYXJraW5nX2NoZWNrX21lc3NhZ2VfYmFyJz5cclxuICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdtZXNzYWdlLWNvbnRlbnQnXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9J21hcmtpbmdfY2hlY2tfbWVzc2FnX2NvbnRlbnQnPntsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWFya2luZy53b3JrbGlzdC5wZXJmb3JtLW1hcmtpbmctY2hlY2sucGVyZm9ybS1tYXJraW5nLWNoZWNrLWJvZHktMScpfVxyXG4gICAgICAgICAgICAgICAgICAgIDxhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nd2hpdGUtbGluaydcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9J21hcmtpbmdfY2hlY2tfbWVzc2FnX2xpbmsnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKTsnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHsgc2hvd01hcmtpbmdDaGVja1JlcVdvcmtsaXN0KCk7IH19Pntsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hcmtpbmcud29ya2xpc3QucGVyZm9ybS1tYXJraW5nLWNoZWNrLnBlcmZvcm0tbWFya2luZy1jaGVjay1saW5rJyl9PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgIHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWFya2luZy53b3JrbGlzdC5wZXJmb3JtLW1hcmtpbmctY2hlY2sucGVyZm9ybS1tYXJraW5nLWNoZWNrLWJvZHktMicpfVxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj4pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgd2lsbCBsb2FkIHRoZSBtYXJrIGNoZWNrIHJlcXVlc3RlZCBleGFtaW5lcnMgd29ya2xpc3RcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gc2hvd01hcmtpbmdDaGVja1JlcVdvcmtsaXN0KCkge1xyXG4gICAgICAgIGlmICghbWVzc2FnZVN0b3JlLmluc3RhbmNlLmlzTWVzc2FnZVBhbmVsQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIG1hcmtpbmdDaGVja0FjdGlvbkNyZWF0b3IuZ2V0TWFya0NoZWNrRXhhbWluZXJzKFxyXG4gICAgICAgICAgICAgICAgcWlnU3RvcmUuaW5zdGFuY2Uuc2VsZWN0ZWRRSUdGb3JNYXJrZXJPcGVyYXRpb24ubWFya1NjaGVtZUdyb3VwSWQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBtZXNzYWdlTmF2aWdhdGlvbkFyZ3VtZW50czogTWVzc2FnZU5hdmlnYXRpb25Bcmd1bWVudHMgPSB7XHJcbiAgICAgICAgICAgICAgICByZXNwb25zZUlkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgY2FuTmF2aWdhdGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbmF2aWdhdGVUbzogZW51bXMuTWVzc2FnZU5hdmlnYXRpb24udG9NYXJraW5nQ2hlY2tXb3JrbGlzdCxcclxuICAgICAgICAgICAgICAgIG5hdmlnYXRpb25Db25maXJtZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaGFzTWVzc2FnZUNvbnRhaW5zRGlydHlWYWx1ZTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgdHJpZ2dlclBvaW50OiBlbnVtcy5UcmlnZ2VyUG9pbnQuTm9uZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBtZXNzYWdpbmdBY3Rpb25DcmVhdG9yLmNhbk1lc3NhZ2VOYXZpZ2F0ZShtZXNzYWdlTmF2aWdhdGlvbkFyZ3VtZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufTtcclxuXHJcbmV4cG9ydCA9IE1hcmtpbmdDaGVja0luZGljYXRvcjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L21hcmtpbmdjaGVja2luZGljYXRvci50c3giXSwibWFwcGluZ3MiOiI7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBVUE7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFNQTtBQUlBO0FBQUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 1223:
/* no static exports found */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/components/worklist/shared/allocateddate.tsx ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n    React component for allocated date of a response\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar GenericDate = __webpack_require__(/*! ./genericdate */ 315);\r\n/**\r\n * React component class for allocated date of a response\r\n */\r\nvar AllocatedDate = /** @class */ (function (_super) {\r\n    __extends(AllocatedDate, _super);\r\n    /**\r\n     * Constructor for Allocated date\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function AllocatedDate(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.dateText = '';\r\n        _this.elementId = '';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    AllocatedDate.prototype.render = function () {\r\n        return ((this.props.showAllocatedDate) ?\r\n            (React.createElement(\"div\", { style: this.props.width },\r\n                React.createElement(GenericDate, { dateValue: this.props.dateValue, id: 'dtalloc_' + this.props.id, key: 'dtalloc_' + this.props.id, className: 'dim-text txt-val small-text' }))) : null);\r\n    };\r\n    return AllocatedDate;\r\n}(pureRenderComponent));\r\nmodule.exports = AllocatedDate;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9hbGxvY2F0ZWRkYXRlLnRzeD8zY2I5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgICBSZWFjdCBjb21wb25lbnQgZm9yIGFsbG9jYXRlZCBkYXRlIG9mIGEgcmVzcG9uc2VcclxuKi9cclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBsb2NhbGVIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2xvY2FsZS9sb2NhbGVoZWxwZXInKTtcclxuaW1wb3J0IHN0cmluZ0hlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvZ2VuZXJpYy9zdHJpbmdoZWxwZXInKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9lbnVtcycpO1xyXG5pbXBvcnQgY29uc3RhbnQgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2NvbnN0YW50cycpO1xyXG5pbXBvcnQgR2VuZXJpY0RhdGUgPSByZXF1aXJlKCcuL2dlbmVyaWNkYXRlJyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBsYXN0IHVwZGF0ZWQgZGF0ZS5cclxuICovXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcbiAgICBkYXRlVmFsdWU/OiBEYXRlO1xyXG4gICAgZGF0ZVR5cGU6IGVudW1zLldvcmtMaXN0RGF0ZVR5cGU7XHJcbiAgICBzaG93QWxsb2NhdGVkRGF0ZTogYm9vbGVhbjtcclxuICAgIHdpZHRoPzogUmVhY3QuQ1NTUHJvcGVydGllcztcclxuICAgIHJlbmRlcmVkT24/OiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWFjdCBjb21wb25lbnQgY2xhc3MgZm9yIGFsbG9jYXRlZCBkYXRlIG9mIGEgcmVzcG9uc2VcclxuICovXHJcbmNsYXNzIEFsbG9jYXRlZERhdGUgZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcclxuXHJcbiAgICBwcml2YXRlIGRhdGVUZXh0OiBzdHJpbmcgPSAnJztcclxuICAgIHByaXZhdGUgZWxlbWVudElkOiBzdHJpbmcgPSAnJztcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIGZvciBBbGxvY2F0ZWQgZGF0ZVxyXG4gICAgICogQHBhcmFtIHByb3BzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzLCBzdGF0ZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIHN0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBjb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAodGhpcy5wcm9wcy5zaG93QWxsb2NhdGVkRGF0ZSkgP1xyXG4gICAgICAgICAgICAgICAgKDxkaXYgc3R5bGU9e3RoaXMucHJvcHMud2lkdGh9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxHZW5lcmljRGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlVmFsdWU9e3RoaXMucHJvcHMuZGF0ZVZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD17J2R0YWxsb2NfJyArIHRoaXMucHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17J2R0YWxsb2NfJyArIHRoaXMucHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17J2RpbS10ZXh0IHR4dC12YWwgc21hbGwtdGV4dCd9IC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj4pIDogbnVsbFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0ID0gQWxsb2NhdGVkRGF0ZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2FsbG9jYXRlZGRhdGUudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQWFBOztBQUVBO0FBQ0E7QUFBQTtBQUtBOzs7O0FBSUE7QUFDQTtBQUFBO0FBUkE7QUFDQTs7QUFTQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFPQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 1224:
/* no static exports found */
/* all exports used */
/*!****************************************************************!*\
  !*** ./src/components/worklist/shared/allocateddatecolumn.tsx ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for login header\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar SLAOAnnotationIndicator = __webpack_require__(/*! ./slaoannotationindicator */ 371);\r\nvar AllPAgeAnnotationIndicator = __webpack_require__(/*! ./allpageannotationindicator */ 368);\r\nvar AllocatedDateComponent = __webpack_require__(/*! ./worklistdate */ 594);\r\nvar GracePeriodTime = __webpack_require__(/*! ./graceperiodtime */ 591);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\n/**\r\n * React component class for the grid column allocated date\r\n */\r\nvar AllocatedDateColumn = /** @class */ (function (_super) {\r\n    __extends(AllocatedDateColumn, _super);\r\n    /**\r\n     * Constructor for Allocated Date\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function AllocatedDateColumn(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    AllocatedDateColumn.prototype.render = function () {\r\n        var isMarkingCompleted = (this.props.markingProgress === 100) ? true : false;\r\n        var allocatedDate = this.props.showAllocatedDate ? (React.createElement(AllocatedDateComponent, { id: this.props.id, key: 'alcDate_' + this.props.id, selectedLanguage: this.props.selectedLanguage, dateType: enums.WorkListDateType.allocatedDate, dateValue: this.props.dateValue, renderedOn: this.props.renderedOn })) : null;\r\n        /**\r\n         * component to display the time to end of grace period - visible based on condition\r\n         */\r\n        var gracePeriodTime = this.props.showTimeToEndofGracePeriod ?\r\n            (React.createElement(GracePeriodTime, { id: this.props.id, key: 'graceDate_' + this.props.id, selectedLanguage: this.props.selectedLanguage, timeToEndOfGracePeriod: this.props.timeToEndOfGracePeriod, isTileView: this.props.isTileView })) : null;\r\n        return (React.createElement(\"div\", { className: classNames('col', { 'wl-grace-period': this.props.showTimeToEndofGracePeriod ? true : false }, { 'wl-allocated-date': this.props.showAllocatedDate ? true : false }) },\r\n            React.createElement(\"div\", { className: 'col-inner' },\r\n                React.createElement(SLAOAnnotationIndicator, { selectedLanguage: this.props.selectedLanguage, isResponseHasSLAO: this.props.isResponseHasSLAO, key: 'slao_' + this.props.id, id: this.props.id, isAllAnnotated: this.props.isAllAnnotated, isMarkingCompleted: isMarkingCompleted, isTileView: this.props.isTileView, markSchemeGroupId: this.props.markSchemeGroupId }),\r\n                React.createElement(AllPAgeAnnotationIndicator, { selectedLanguage: this.props.selectedLanguage, isAllAnnotated: this.props.isAllAnnotated, key: 'apa_' + this.props.id, id: this.props.id, isMarkingCompleted: isMarkingCompleted, isTileView: this.props.isTileView, markSchemeGroupId: this.props.markSchemeGroupId }),\r\n                allocatedDate,\r\n                gracePeriodTime)));\r\n    };\r\n    return AllocatedDateColumn;\r\n}(pureRenderComponent));\r\nmodule.exports = AllocatedDateColumn;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9hbGxvY2F0ZWRkYXRlY29sdW1uLnRzeD8xZjk5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgUmVhY3QgY29tcG9uZW50IGZvciBsb2dpbiBoZWFkZXJcclxuKi9cclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgU0xBT0Fubm90YXRpb25JbmRpY2F0b3IgPSByZXF1aXJlKCcuL3NsYW9hbm5vdGF0aW9uaW5kaWNhdG9yJyk7XHJcbmltcG9ydCBBbGxQQWdlQW5ub3RhdGlvbkluZGljYXRvciA9IHJlcXVpcmUoJy4vYWxscGFnZWFubm90YXRpb25pbmRpY2F0b3InKTtcclxuaW1wb3J0IEFsbG9jYXRlZERhdGVDb21wb25lbnQgPSByZXF1aXJlKCcuL3dvcmtsaXN0ZGF0ZScpO1xyXG5pbXBvcnQgR3JhY2VQZXJpb2RUaW1lID0gcmVxdWlyZSgnLi9ncmFjZXBlcmlvZHRpbWUnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9lbnVtcycpO1xyXG5sZXQgY2xhc3NOYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcclxuLyoqXHJcbiAqIFByb3BlcnRpZXMgb2YgYWxsb2NhdGVkIGRhdGUgZ3JpZCBjb2x1bW4gY29tcG9uZW50XHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgZGF0ZVZhbHVlPzogRGF0ZTtcclxuICAgIGlzUmVzcG9uc2VIYXNTTEFPOiBib29sZWFuO1xyXG4gICAgaXNBbGxBbm5vdGF0ZWQ/OiBib29sZWFuO1xyXG4gICAgbWFya2luZ1Byb2dyZXNzOiBudW1iZXI7XHJcbiAgICBzaG93QWxsb2NhdGVkRGF0ZTogYm9vbGVhbjtcclxuICAgIHNob3dUaW1lVG9FbmRvZkdyYWNlUGVyaW9kPzogYm9vbGVhbjtcclxuICAgIHRpbWVUb0VuZE9mR3JhY2VQZXJpb2Q/OiBudW1iZXI7XHJcbiAgICBpc1RpbGVWaWV3PzogYm9vbGVhbjtcclxuICAgIHJlbmRlcmVkT24/OiBudW1iZXI7XHJcbiAgICBtYXJrU2NoZW1lR3JvdXBJZDogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogUmVhY3QgY29tcG9uZW50IGNsYXNzIGZvciB0aGUgZ3JpZCBjb2x1bW4gYWxsb2NhdGVkIGRhdGVcclxuICovXHJcbmNsYXNzIEFsbG9jYXRlZERhdGVDb2x1bW4gZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIGZvciBBbGxvY2F0ZWQgRGF0ZVxyXG4gICAgICogQHBhcmFtIHByb3BzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzLCBzdGF0ZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIHN0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBjb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgaXNNYXJraW5nQ29tcGxldGVkOiBib29sZWFuID0gKHRoaXMucHJvcHMubWFya2luZ1Byb2dyZXNzID09PSAxMDApID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIGxldCBhbGxvY2F0ZWREYXRlOiBKU1guRWxlbWVudCA9IHRoaXMucHJvcHMuc2hvd0FsbG9jYXRlZERhdGUgPyAoPEFsbG9jYXRlZERhdGVDb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXsnYWxjRGF0ZV8nICsgdGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkTGFuZ3VhZ2U9e3RoaXMucHJvcHMuc2VsZWN0ZWRMYW5ndWFnZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVUeXBlPXtlbnVtcy5Xb3JrTGlzdERhdGVUeXBlLmFsbG9jYXRlZERhdGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlVmFsdWU9e3RoaXMucHJvcHMuZGF0ZVZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZWRPbiA9IHt0aGlzLnByb3BzLnJlbmRlcmVkT259IC8+KSA6IG51bGw7XHJcbiAgICAgICAgLyoqIFxyXG4gICAgICAgICAqIGNvbXBvbmVudCB0byBkaXNwbGF5IHRoZSB0aW1lIHRvIGVuZCBvZiBncmFjZSBwZXJpb2QgLSB2aXNpYmxlIGJhc2VkIG9uIGNvbmRpdGlvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxldCBncmFjZVBlcmlvZFRpbWU6IEpTWC5FbGVtZW50ID0gdGhpcy5wcm9wcy5zaG93VGltZVRvRW5kb2ZHcmFjZVBlcmlvZCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDxHcmFjZVBlcmlvZFRpbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e3RoaXMucHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17J2dyYWNlRGF0ZV8nICsgdGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRMYW5ndWFnZT17dGhpcy5wcm9wcy5zZWxlY3RlZExhbmd1YWdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lVG9FbmRPZkdyYWNlUGVyaW9kPXt0aGlzLnByb3BzLnRpbWVUb0VuZE9mR3JhY2VQZXJpb2R9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVGlsZVZpZXc9e3RoaXMucHJvcHMuaXNUaWxlVmlld30vPikgOiBudWxsO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnY29sJywgeyAnd2wtZ3JhY2UtcGVyaW9kJzogdGhpcy5wcm9wcy5zaG93VGltZVRvRW5kb2ZHcmFjZVBlcmlvZCA/IHRydWUgOiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyAnd2wtYWxsb2NhdGVkLWRhdGUnOiB0aGlzLnByb3BzLnNob3dBbGxvY2F0ZWREYXRlID8gdHJ1ZSA6IGZhbHNlIH0pIH0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wtaW5uZXInPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTTEFPQW5ub3RhdGlvbkluZGljYXRvciBzZWxlY3RlZExhbmd1YWdlPXt0aGlzLnByb3BzLnNlbGVjdGVkTGFuZ3VhZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVzcG9uc2VIYXNTTEFPPXt0aGlzLnByb3BzLmlzUmVzcG9uc2VIYXNTTEFPfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9eydzbGFvXycgKyB0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNBbGxBbm5vdGF0ZWQ9e3RoaXMucHJvcHMuaXNBbGxBbm5vdGF0ZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTWFya2luZ0NvbXBsZXRlZD17aXNNYXJraW5nQ29tcGxldGVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RpbGVWaWV3PXt0aGlzLnByb3BzLmlzVGlsZVZpZXd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtTY2hlbWVHcm91cElkPXt0aGlzLnByb3BzLm1hcmtTY2hlbWVHcm91cElkfSAvPlxyXG4gICAgICAgICAgICAgICAgPEFsbFBBZ2VBbm5vdGF0aW9uSW5kaWNhdG9yIHNlbGVjdGVkTGFuZ3VhZ2U9e3RoaXMucHJvcHMuc2VsZWN0ZWRMYW5ndWFnZX1cclxuICAgICAgICAgICAgICAgICAgICBpc0FsbEFubm90YXRlZD17dGhpcy5wcm9wcy5pc0FsbEFubm90YXRlZH1cclxuICAgICAgICAgICAgICAgICAgICBrZXk9eydhcGFfJyArIHRoaXMucHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ9e3RoaXMucHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgaXNNYXJraW5nQ29tcGxldGVkPXtpc01hcmtpbmdDb21wbGV0ZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgaXNUaWxlVmlldz17dGhpcy5wcm9wcy5pc1RpbGVWaWV3fVxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtTY2hlbWVHcm91cElkPXt0aGlzLnByb3BzLm1hcmtTY2hlbWVHcm91cElkfS8+XHJcbiAgICAgICAgICAgICAgICAgICAge2FsbG9jYXRlZERhdGV9XHJcbiAgICAgICAgICAgICAgICAgICAge2dyYWNlUGVyaW9kVGltZX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gQWxsb2NhdGVkRGF0ZUNvbHVtbjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2FsbG9jYXRlZGRhdGVjb2x1bW4udHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFpQkE7O0FBRUE7QUFDQTtBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7O0FBRUE7QUFDQTtBQUNBO0FBT0E7QUFHQTtBQUNBO0FBUUE7QUFPQTtBQUNBO0FBSUE7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 1225:
/* no static exports found */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/components/worklist/shared/allocateresponsebutton.tsx ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar responseActionCreator = __webpack_require__(/*! ../../../actions/response/responseactioncreator */ 257);\r\nvar responseStore = __webpack_require__(/*! ../../../stores/response/responsestore */ 235);\r\nvar busyIndicatorActionCreator = __webpack_require__(/*! ../../../actions/busyindicator/busyindicatoractioncreator */ 279);\r\nvar domManager = __webpack_require__(/*! ../../../utility/generic/domhelper */ 294);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar examinerStore = __webpack_require__(/*! ../../../stores/markerinformation/examinerstore */ 259);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar simulationModeHelper = __webpack_require__(/*! ../../../utility/simulation/simulationmodehelper */ 324);\r\nvar Promise = __webpack_require__(/*! es6-promise */ 41);\r\nvar qigSelectorActionCreator = __webpack_require__(/*! ../../../actions/qigselector/qigselectoractioncreator */ 253);\r\n/**\r\n * GetNewResponses class, Returns Button based on the isEnabled value\r\n */\r\nvar AllocateResponseButton = /** @class */ (function (_super) {\r\n    __extends(AllocateResponseButton, _super);\r\n    /**\r\n     * Constructor for Allocated response button\r\n     * @param props\r\n     */\r\n    function AllocateResponseButton(props) {\r\n        var _this = _super.call(this, props, null) || this;\r\n        _this._boundHandleOnClick = null;\r\n        /**\r\n         * Method which handles the click event of window\r\n         */\r\n        _this.handleOnClick = function (source) {\r\n            /** check if the clicked element is a child of the user details list item. if not close the open window */\r\n            if (source.target !== undefined &&\r\n                domManager.searchParentNode(source.target, function (el) {\r\n                    return el.id === 'getNewResponseButton_arrow';\r\n                }) == null) {\r\n                if (_this.state.isOpen !== undefined && _this.state.isOpen === true) {\r\n                    /** Close the dropdown list */\r\n                    _this.setState({\r\n                        isOpen: false\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Method which gets invoked once response allocation is completed\r\n         */\r\n        _this.onResponseAllocated = function (responseAllocationErrorCode) {\r\n            _this.setState({\r\n                isClicked: false\r\n            });\r\n        };\r\n        _this.state = {\r\n            isClicked: false,\r\n            isOpen: false,\r\n            isAllocating: false,\r\n            isClickedArrowButton: false\r\n        };\r\n        _this._boundHandleOnClick = _this.handleOnClick.bind(_this);\r\n        _this.onArrowButtonClick = _this.onArrowButtonClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    AllocateResponseButton.prototype.render = function () {\r\n        if (this.props.isEnabled && !this.state.isClicked && !this.state.isAllocating) {\r\n            // Added pooled remark and simulation condition since for both,\r\n            // allocation button's arrow need not be shown for allocating multiple responses\r\n            if (this.props.worklistType === enums.WorklistType.pooledRemark || this.props.worklistType === enums.WorklistType.simulation) {\r\n                return (React.createElement(\"button\", { id: this.props.id, className: 'primary rounded large download-rsp-btn split-btn', onClick: this.onGetNewResponseButtonClick.bind(this, false, false) },\r\n                    React.createElement(\"span\", { id: this.props.id + '_mainText', className: 'padding-left-5 text-middle' }, this.props.buttonMainText)));\r\n            }\r\n            else {\r\n                return (React.createElement(\"div\", { className: classNames('split-button-wrap dropdown-wrap', {\r\n                        ' open': this.state.isOpen && this.state.isClickedArrowButton,\r\n                        ' close': !this.state.isOpen && this.state.isClickedArrowButton,\r\n                        '': this.state.isClickedArrowButton\r\n                    }) },\r\n                    React.createElement(\"button\", { id: this.props.id, className: 'primary rounded large download-rsp-btn split-btn', onClick: this.onGetNewResponseButtonClick.bind(this, true, false) },\r\n                        React.createElement(\"span\", { id: this.props.id + '_mainText', className: 'padding-left-5 text-middle' }, this.props.buttonMainText)),\r\n                    React.createElement(\"button\", { id: this.props.id + '_arrow', className: 'primary rounded large split-btn split-btn-arrow menu-button', title: this.props.title, onClick: this.onArrowButtonClick },\r\n                        React.createElement(\"span\", { id: this.props.id + '_headerWithArrow', className: 'sprite-icon menu-arrow-m-white-icon text-middle' })),\r\n                    React.createElement(\"ul\", { className: 'menu' },\r\n                        React.createElement(\"li\", null,\r\n                            React.createElement(\"a\", { href: 'javascript:void(0)', id: this.props.id + '_single', onClick: this.onGetNewResponseButtonClick.bind(this, false, false) },\r\n                                this.props.buttonSingleResponseText,\r\n                                \" \")),\r\n                        React.createElement(\"li\", null,\r\n                            React.createElement(\"a\", { href: 'javascript:void(0)', id: this.props.id + '_concurrent', onClick: this.onGetNewResponseButtonClick.bind(this, true, false) },\r\n                                this.props.buttonUpToOpenResponseLimitText,\r\n                                \" \")),\r\n                        this.props.isWholeResponseButtonAvailable ?\r\n                            React.createElement(\"li\", null,\r\n                                React.createElement(\"a\", { href: 'javascript:void(0)', id: this.props.id + '_wholeresponse', onClick: this.onGetNewResponseButtonClick.bind(this, false, true) },\r\n                                    localeStore.instance.\r\n                                        TranslateText('marking.worklist.action-buttons.allocate-whole-response'),\r\n                                    \" \")) : null)));\r\n            }\r\n        }\r\n        else if (this.state.isAllocating) {\r\n            // Added pooled remark and simulation condition since for both,\r\n            // allocation button's arrow need not be shown for allocating multiple responses\r\n            if (this.props.worklistType === enums.WorklistType.pooledRemark || this.props.worklistType === enums.WorklistType.simulation) {\r\n                return (React.createElement(\"button\", { id: this.props.id, className: 'primary rounded large download-rsp-btn split-btn disabled', onClick: this.onGetNewResponseButtonClick.bind(this, false, false) },\r\n                    React.createElement(\"span\", { id: this.props.id + '_mainText', className: 'padding-left-5 text-middle' }, this.props.buttonMainText)));\r\n            }\r\n            else {\r\n                return (React.createElement(\"div\", { className: 'split-button-wrap dropdown-wrap' },\r\n                    React.createElement(\"button\", { id: this.props.id, className: 'primary rounded large download-rsp-btn split-btn disabled', title: this.props.title },\r\n                        React.createElement(\"span\", { id: this.props.id + '_mainText', className: 'padding-left-5 padding-right-10 text-middle' }, this.props.buttonMainText)),\r\n                    React.createElement(\"button\", { className: 'primary rounded large split-btn split-btn-arrow menu-button disabled' },\r\n                        React.createElement(\"span\", { className: 'sprite-icon menu-arrow-icon text-middle' })),\r\n                    React.createElement(\"ul\", { className: 'menu' },\r\n                        React.createElement(\"li\", null,\r\n                            React.createElement(\"a\", { href: 'javascript:void(0)', id: this.props.id + '_single' },\r\n                                this.props.buttonSingleResponseText,\r\n                                \" \")),\r\n                        React.createElement(\"li\", null,\r\n                            React.createElement(\"a\", { href: 'javascript:void(0)', id: this.props.id + '_concurrent' },\r\n                                this.props.buttonUpToOpenResponseLimitText,\r\n                                \" \")),\r\n                        this.props.isWholeResponseButtonAvailable ?\r\n                            React.createElement(\"li\", null,\r\n                                React.createElement(\"a\", { href: 'javascript:void(0)', id: this.props.id + '_wholeresponse' },\r\n                                    localeStore.instance.\r\n                                        TranslateText('marking.worklist.action-buttons.allocate-whole-response'),\r\n                                    \" \")) : null)));\r\n            }\r\n        }\r\n        else {\r\n            // Added pooled remark and simulation condition since for both,\r\n            // allocation button's arrow need not be shown for allocating multiple responses\r\n            if (this.props.worklistType === enums.WorklistType.pooledRemark || this.props.worklistType === enums.WorklistType.simulation) {\r\n                return (React.createElement(\"button\", { id: this.props.id, className: 'primary rounded large download-rsp-btn split-btn disabled', title: this.props.title },\r\n                    React.createElement(\"span\", { id: this.props.id + '_mainText', className: 'padding-left-5 text-middle' }, this.props.buttonMainText),\r\n                    React.createElement(\"span\", { id: this.props.id + '_subText', className: 'awaiting-feedback-msg text-middle small-text' }, this.props.buttonSubText)));\r\n            }\r\n            else {\r\n                return (React.createElement(\"div\", { className: 'split-button-wrap dropdown-wrap' },\r\n                    React.createElement(\"button\", { id: this.props.id, className: 'primary rounded large download-rsp-btn split-btn disabled', title: this.props.title },\r\n                        React.createElement(\"span\", { id: this.props.id + '_mainText', className: 'padding-left-5 text-middle' }, this.props.buttonMainText),\r\n                        React.createElement(\"span\", { id: this.props.id + '_subText', className: 'awaiting-feedback-msg text-middle small-text' }, this.props.buttonSubText)),\r\n                    React.createElement(\"button\", { className: 'primary rounded large split-btn split-btn-arrow menu-button disabled' },\r\n                        React.createElement(\"span\", { className: 'sprite-icon menu-arrow-icon text-middle' })),\r\n                    React.createElement(\"ul\", { className: 'menu' },\r\n                        React.createElement(\"li\", null,\r\n                            React.createElement(\"a\", { href: 'javascript:void(0)', id: this.props.id + '_single' },\r\n                                this.props.buttonSingleResponseText,\r\n                                \" \")),\r\n                        React.createElement(\"li\", null,\r\n                            React.createElement(\"a\", { href: 'javascript:void(0)', id: this.props.id + '_concurrent' },\r\n                                this.props.buttonUpToOpenResponseLimitText,\r\n                                \" \")),\r\n                        this.props.isWholeResponseButtonAvailable ?\r\n                            React.createElement(\"li\", null,\r\n                                React.createElement(\"a\", { href: 'javascript:void(0)', id: this.props.id + '_wholeresponse' },\r\n                                    localeStore.instance.\r\n                                        TranslateText('marking.worklist.action-buttons.allocate-whole-response'),\r\n                                    \" \")) : null)));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * When component mounts\r\n     */\r\n    AllocateResponseButton.prototype.componentDidMount = function () {\r\n        window.addEventListener('touchend', this._boundHandleOnClick);\r\n        window.addEventListener('click', this._boundHandleOnClick);\r\n        responseStore.instance.addListener(responseStore.ResponseStore.RESPONSE_ALLOCATED_EVENT, this.onResponseAllocated);\r\n    };\r\n    /**\r\n     * When component unmounts\r\n     */\r\n    AllocateResponseButton.prototype.componentWillUnmount = function () {\r\n        responseStore.instance.removeListener(responseStore.ResponseStore.RESPONSE_ALLOCATED_EVENT, this.onResponseAllocated);\r\n        window.removeEventListener('click', this._boundHandleOnClick);\r\n        window.removeEventListener('touchend', this._boundHandleOnClick);\r\n    };\r\n    /**\r\n     * Method which handles the click event of Get New Response button\r\n     */\r\n    AllocateResponseButton.prototype.onGetNewResponseButtonClick = function (isConcurrentDownload, isWholeResponseDownload) {\r\n        this.setState({\r\n            isClicked: true,\r\n            isAllocating: true\r\n        });\r\n        // Check for standardisation setup completion.\r\n        var that = this;\r\n        if (simulationModeHelper.shouldCheckForStandardisationSetupCompletion()) {\r\n            var promise = qigSelectorActionCreator.checkStandardisationSetupCompleted(qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId, enums.PageContainers.WorkList, enums.PageContainers.WorkList);\r\n            Promise.Promise.all([promise]).then(function (data) {\r\n                if (data[0] === false) {\r\n                    that.continueOnGetNewResponseButtonClick(isConcurrentDownload, isWholeResponseDownload);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            that.continueOnGetNewResponseButtonClick(isConcurrentDownload, isWholeResponseDownload);\r\n        }\r\n    };\r\n    /**\r\n     * Method which handles the click event of Get New Response button\r\n     */\r\n    AllocateResponseButton.prototype.continueOnGetNewResponseButtonClick = function (isConcurrentDownload, isWholeResponseDownload) {\r\n        var isCandidatePrioritisationCCON = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.CandidatePrioritisation).toLowerCase() === 'true' ? true : false;\r\n        var isQualityRemarkCCON = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.QualityRemark, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId).toLowerCase()\r\n            === 'true' ? true : false;\r\n        responseActionCreator.allocateResponse(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, this.props.worklistType, isConcurrentDownload, qigStore.instance.selectedQIGForMarkerOperation.examSessionId, qigStore.instance.selectedQIGForMarkerOperation.role === enums.ExaminerRole.principalExaminer, qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember, examinerStore.instance.getMarkerInformation.examinerId, isCandidatePrioritisationCCON, isQualityRemarkCCON, worklistStore.instance.getRemarkRequestType, isWholeResponseDownload, qigStore.instance.isAggregatedQigCCEnabledForCurrentQig);\r\n        // Invoking onBusy method\r\n        busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.responseAllocation);\r\n    };\r\n    /**\r\n     * Method which handles the click event of Arrow Button\r\n     */\r\n    AllocateResponseButton.prototype.onArrowButtonClick = function () {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen,\r\n            isClickedArrowButton: true\r\n        });\r\n    };\r\n    return AllocateResponseButton;\r\n}(pureRenderComponent));\r\nmodule.exports = AllocateResponseButton;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1227:
/* no static exports found */
/* all exports used */
/*!*********************************************************************!*\
  !*** ./src/components/worklist/shared/linkedexceptionindicator.tsx ***!
  \*********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar localeHelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\nvar stringHelper = __webpack_require__(/*! ../../../utility/generic/stringhelper */ 254);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar markSchemeHelper = __webpack_require__(/*! ../../../utility/markscheme/markschemehelper */ 276);\r\nvar messageStore = __webpack_require__(/*! ../../../stores/message/messagestore */ 240);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../../actions/messaging/messagingactioncreator */ 268);\r\nvar responseHelper = __webpack_require__(/*! ../../utility/responsehelper/responsehelper */ 249);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../utility/ecoursework/ecourseworkhelper */ 238);\r\nvar applicationStore = __webpack_require__(/*! ../../../stores/applicationoffline/applicationstore */ 247);\r\nvar applicationActionCreator = __webpack_require__(/*! ../../../actions/applicationoffline/applicationactioncreator */ 256);\r\nvar exceptionHelper = __webpack_require__(/*! ../../utility/exception/exceptionhelper */ 426);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\n/**\r\n * React component.\r\n * @param {Props} props\r\n * @returns\r\n */\r\nvar LinkedExceptionIndicator = /** @class */ (function (_super) {\r\n    __extends(LinkedExceptionIndicator, _super);\r\n    /**\r\n     * Constructor for linked exception indicator\r\n     * @param props\r\n     */\r\n    function LinkedExceptionIndicator(props) {\r\n        var _this = _super.call(this, props, null) || this;\r\n        /**\r\n         * Open response while clicking on linked exception icon\r\n         */\r\n        _this.onLinkedExceptionIconClick = function (event) {\r\n            if (!applicationStore.instance.isOnline) {\r\n                applicationActionCreator.checkActionInterrupted();\r\n            }\r\n            else {\r\n                event.stopPropagation();\r\n                var displayId = _this.props.displayId.toString();\r\n                var exceptionicon = true;\r\n                var selectedMarkingMode = worklistStore.instance.getMarkingModeByWorkListType(worklistStore.instance.currentWorklistType);\r\n                eCourseworkHelper.fetchECourseWorkCandidateScriptMetadata(parseInt(displayId));\r\n                exceptionHelper.getNewExceptions(markerOperationModeFactory.operationMode.isTeamManagementMode, markerOperationModeFactory.operationMode.isAwardingMode, displayId, exceptionicon);\r\n                if (!messageStore.instance.isMessagePanelActive) {\r\n                    var openedResponseDetails = worklistStore.instance.getResponseDetails(displayId);\r\n                    responseHelper.openResponse(parseInt(displayId), enums.ResponseNavigation.specific, worklistStore.instance.getResponseMode, openedResponseDetails.markGroupId, enums.ResponseViewMode.zoneView, enums.TriggerPoint.WorkListResponseExceptionIcon);\r\n                    markSchemeHelper.getMarks(parseInt(displayId), selectedMarkingMode);\r\n                }\r\n                else {\r\n                    var messageNavigationArguments = {\r\n                        responseId: parseInt(displayId),\r\n                        canNavigate: false,\r\n                        navigateTo: enums.MessageNavigation.toResponse,\r\n                        navigationConfirmed: false,\r\n                        hasMessageContainsDirtyValue: undefined,\r\n                        triggerPoint: enums.TriggerPoint.WorkListResponseExceptionIcon\r\n                    };\r\n                    messagingActionCreator.canMessageNavigate(messageNavigationArguments);\r\n                }\r\n            }\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * render component\r\n     */\r\n    LinkedExceptionIndicator.prototype.render = function () {\r\n        return (!this.props.isTileView) ? this.getExceptionContent()\r\n            :\r\n                (React.createElement(\"div\", { className: 'col wl-alert text-left', id: this.props.id + '_execeptionIndicator' }, this.getExceptionContent()));\r\n    };\r\n    /**\r\n     * Retrns exception content.\r\n     * @returns\r\n     */\r\n    LinkedExceptionIndicator.prototype.getExceptionContent = function () {\r\n        var result = (React.createElement(\"div\", null));\r\n        var toolTipText = '';\r\n        var exceptionClassName = '';\r\n        var notificationClassName = '';\r\n        var exceptionAltText = localeStore.instance.TranslateText('generic.worklist.information-text');\r\n        // The exception alert count:\r\n        // On viewing one's own worklist,\r\n        // the number of exception that has been resolved by supervisor and needs action by the logged in user.\r\n        // In team management view,\r\n        // the number or exception that the supervisor needs to action.\r\n        var exceptionAlertCount = this.props.isTeamManagementMode ?\r\n            (this.props.unactionedExceptionCount ? this.props.unactionedExceptionCount : 0) :\r\n            (this.props.resolvedExceptionsCount ? this.props.resolvedExceptionsCount : 0);\r\n        if (!this.props.hasExceptions && !this.props.hasZoningExceptions) {\r\n            return result;\r\n        }\r\n        if (this.props.hasExceptions && !this.props.hasBlockingExceptions && this.props.resolvedExceptionsCount === 0) {\r\n            toolTipText = this.props.isTeamManagementMode ?\r\n                localeStore.instance.TranslateText('team-management.examiner-worklist.response-data.exceptions-icon-tooltip') :\r\n                localeStore.instance.TranslateText('marking.worklist.response-data.exceptions-icon-tooltip');\r\n            exceptionClassName = 'sprite-icon info-icon-dark-small';\r\n        }\r\n        else if (this.props.hasBlockingExceptions && this.props.resolvedExceptionsCount === 0) {\r\n            toolTipText = this.props.isTeamManagementMode ?\r\n                localeStore.instance.TranslateText('team-management.examiner-worklist.response-data.blocking-exceptions-icon-tooltip') :\r\n                localeStore.instance.TranslateText('marking.worklist.response-data.blocking-exceptions-icon-tooltip');\r\n            exceptionClassName = 'sprite-icon info-icon-yellow';\r\n        }\r\n        else if (this.props.hasExceptions && !this.props.hasBlockingExceptions && this.props.resolvedExceptionsCount > 0) {\r\n            toolTipText = this.props.isTeamManagementMode ?\r\n                stringHelper.format(localeStore.instance.\r\n                    TranslateText('team-management.examiner-worklist.response-data.resolved-exceptions-icon-tooltip'), [String(this.props.resolvedExceptionsCount)]) :\r\n                stringHelper.format(localeStore.instance.TranslateText('marking.worklist.response-data.resolved-exceptions-icon-tooltip'), [String(this.props.resolvedExceptionsCount)]);\r\n            exceptionClassName = 'sprite-icon info-icon-dark-small';\r\n        }\r\n        else if (this.props.hasBlockingExceptions && this.props.resolvedExceptionsCount > 0) {\r\n            toolTipText = this.props.isTeamManagementMode ? stringHelper.format(localeStore.instance.TranslateText('team-management.examiner-worklist.response-data.resolved-and-blocking-exceptions-icon-tooltip'), [String(this.props.resolvedExceptionsCount)]) :\r\n                stringHelper.format(localeStore.instance.TranslateText('marking.worklist.response-data.resolved-and-blocking-exceptions-icon-tooltip'), [String(this.props.resolvedExceptionsCount)]);\r\n            exceptionClassName = 'sprite-icon info-icon-yellow';\r\n        }\r\n        else if (!this.props.hasZoningExceptions) {\r\n            toolTipText = this.props.isTeamManagementMode ?\r\n                localeStore.instance.TranslateText('team-management.examiner-worklist.response-data.exceptions-icon-tooltip') :\r\n                localeStore.instance.TranslateText('marking.worklist.response-data.exceptions-icon-tooltip');\r\n            exceptionClassName = 'sprite-icon info-icon-dark-small';\r\n        }\r\n        ////Append the tooltip of existing exceptions with zoning exception tooltip if sibling rig contains zoning exception\r\n        if (this.props.hasZoningExceptions) {\r\n            if (toolTipText && !this.props.isZoningExceptionRaisedInSameScript) {\r\n                toolTipText = toolTipText + '\\n\\n' + (this.props.isTeamManagementMode ?\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.response-data.zoning-exceptions-icon-tooltip') :\r\n                    localeStore.instance.TranslateText('marking.worklist.response-data.zoning-exceptions-icon-tooltip'));\r\n            }\r\n            else if (this.props.isZoningExceptionRaisedInSameScript) {\r\n                toolTipText = this.props.isTeamManagementMode ?\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.response-data.blocking-exceptions-icon-tooltip') :\r\n                    localeStore.instance.TranslateText('marking.worklist.response-data.blocking-exceptions-icon-tooltip');\r\n            }\r\n            else {\r\n                toolTipText = this.props.isTeamManagementMode ?\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.response-data.zoning-exceptions-icon-tooltip') :\r\n                    localeStore.instance.TranslateText('marking.worklist.response-data.zoning-exceptions-icon-tooltip');\r\n            }\r\n            exceptionClassName = 'sprite-icon info-icon-yellow';\r\n        }\r\n        /**\r\n         * If exceptionAlertCount is greater than 0 notification will show\r\n         */\r\n        if (exceptionAlertCount > 0) {\r\n            result = (!this.props.isTileView) ? React.createElement(\"div\", { className: 'wl-alert', id: this.props.id + '_execeptionIndicatorNotification' },\r\n                React.createElement(\"a\", { title: toolTipText, className: 'resp-alerts', onClick: this.onLinkedExceptionIconClick },\r\n                    React.createElement(\"span\", { className: exceptionClassName },\r\n                        \" \",\r\n                        exceptionAltText,\r\n                        \" \"),\r\n                    React.createElement(\"span\", { className: 'notification circle', id: this.props.id + '_execeptionIndicatorNotification' },\r\n                        localeHelper.toLocaleString(exceptionAlertCount),\r\n                        \" \"))) :\r\n                React.createElement(\"div\", { className: 'col-inner' },\r\n                    React.createElement(\"a\", { title: toolTipText, className: 'resp-alerts', onClick: this.onLinkedExceptionIconClick },\r\n                        React.createElement(\"span\", { className: exceptionClassName },\r\n                            \" \",\r\n                            exceptionAltText,\r\n                            \" \"),\r\n                        React.createElement(\"span\", { className: 'notification circle', id: this.props.id + '_execeptionIndicatorNotification' },\r\n                            localeHelper.toLocaleString(exceptionAlertCount),\r\n                            \" \")));\r\n        }\r\n        else if (this.props.hasZoningExceptions && !this.props.hasExceptions) {\r\n            result = (!this.props.isTileView) ? React.createElement(\"div\", { className: 'wl-alert', id: this.props.id + '_execeptionIndicatorNotification' },\r\n                React.createElement(\"a\", { title: toolTipText, className: 'resp-alerts', onClick: function (e) { e.stopPropagation(); } },\r\n                    React.createElement(\"span\", { className: exceptionClassName },\r\n                        \" \",\r\n                        exceptionAltText,\r\n                        \" \")))\r\n                :\r\n                    React.createElement(\"div\", { className: 'col-inner' },\r\n                        React.createElement(\"a\", { title: toolTipText, className: 'resp-alerts', onClick: function (e) { e.stopPropagation(); } },\r\n                            React.createElement(\"span\", { className: exceptionClassName },\r\n                                \" \",\r\n                                exceptionAltText,\r\n                                \" \")));\r\n        }\r\n        else {\r\n            result = (!this.props.isTileView) ? React.createElement(\"div\", { className: 'wl-alert', id: this.props.id + '_execeptionIndicatorNotification' },\r\n                React.createElement(\"a\", { title: toolTipText, className: 'resp-alerts', onClick: this.onLinkedExceptionIconClick },\r\n                    React.createElement(\"span\", { className: exceptionClassName },\r\n                        \" \",\r\n                        exceptionAltText,\r\n                        \" \")))\r\n                :\r\n                    React.createElement(\"div\", { className: 'col-inner' },\r\n                        React.createElement(\"a\", { title: toolTipText, className: 'resp-alerts', onClick: this.onLinkedExceptionIconClick },\r\n                            React.createElement(\"span\", { className: exceptionClassName },\r\n                                \" \",\r\n                                exceptionAltText,\r\n                                \" \")));\r\n        }\r\n        return (result);\r\n    };\r\n    return LinkedExceptionIndicator;\r\n}(pureRenderComponent));\r\nmodule.exports = LinkedExceptionIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9saW5rZWRleGNlcHRpb25pbmRpY2F0b3IudHN4P2E3YTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IGxvY2FsZUhlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvbG9jYWxlL2xvY2FsZWhlbHBlcicpO1xyXG5pbXBvcnQgc3RyaW5nSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9nZW5lcmljL3N0cmluZ2hlbHBlcicpO1xyXG5pbXBvcnQgcmVzcG9uc2VBY3Rpb25DcmVhdG9yID0gcmVxdWlyZSgnLi4vLi4vLi4vYWN0aW9ucy9yZXNwb25zZS9yZXNwb25zZWFjdGlvbmNyZWF0b3InKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9lbnVtcycpO1xyXG5pbXBvcnQgd29ya2xpc3RTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy93b3JrbGlzdC93b3JrbGlzdHN0b3JlJyk7XHJcbmltcG9ydCBtYXJrU2NoZW1lSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9tYXJrc2NoZW1lL21hcmtzY2hlbWVoZWxwZXInKTtcclxuaW1wb3J0IG1lc3NhZ2VTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9tZXNzYWdlL21lc3NhZ2VzdG9yZScpO1xyXG5pbXBvcnQgbWVzc2FnaW5nQWN0aW9uQ3JlYXRvciA9IHJlcXVpcmUoJy4uLy4uLy4uL2FjdGlvbnMvbWVzc2FnaW5nL21lc3NhZ2luZ2FjdGlvbmNyZWF0b3InKTtcclxuaW1wb3J0IHJlc3BvbnNlSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9yZXNwb25zZWhlbHBlci9yZXNwb25zZWhlbHBlcicpO1xyXG5pbXBvcnQgZUNvdXJzZXdvcmtIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2Vjb3Vyc2V3b3JrL2Vjb3Vyc2V3b3JraGVscGVyJyk7XHJcbmltcG9ydCBhcHBsaWNhdGlvblN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2FwcGxpY2F0aW9ub2ZmbGluZS9hcHBsaWNhdGlvbnN0b3JlJyk7XHJcbmltcG9ydCBhcHBsaWNhdGlvbkFjdGlvbkNyZWF0b3IgPSByZXF1aXJlKCcuLi8uLi8uLi9hY3Rpb25zL2FwcGxpY2F0aW9ub2ZmbGluZS9hcHBsaWNhdGlvbmFjdGlvbmNyZWF0b3InKTtcclxuaW1wb3J0IGV4Y2VwdGlvbkhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZXhjZXB0aW9uL2V4Y2VwdGlvbmhlbHBlcicpO1xyXG5pbXBvcnQgbWFya2VyT3BlcmF0aW9uTW9kZUZhY3RvcnkgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L21hcmtlcm9wZXJhdGlvbm1vZGUvbWFya2Vyb3BlcmF0aW9ubW9kZWZhY3RvcnknKTtcclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIGEgY29tcG9uZW5ldC5cclxuICogQHBhcmFtIHtQcm9wc30gcHJvcHNcclxuICovXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcbiAgICBoYXNFeGNlcHRpb25zOiBib29sZWFuO1xyXG4gICAgaGFzWm9uaW5nRXhjZXB0aW9uczogYm9vbGVhbjtcclxuICAgIGlzWm9uaW5nRXhjZXB0aW9uUmFpc2VkSW5TYW1lU2NyaXB0OiBib29sZWFuO1xyXG4gICAgaGFzQmxvY2tpbmdFeGNlcHRpb25zOiBib29sZWFuO1xyXG4gICAgcmVzb2x2ZWRFeGNlcHRpb25zQ291bnQ/OiBudW1iZXI7XHJcbiAgICBpc1RpbGVWaWV3PzogYm9vbGVhbjtcclxuICAgIGRpc3BsYXlJZDogc3RyaW5nO1xyXG4gICAgaXNUZWFtTWFuYWdlbWVudE1vZGU6IGJvb2xlYW47XHJcbiAgICB1bmFjdGlvbmVkRXhjZXB0aW9uQ291bnQ/OiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWFjdCBjb21wb25lbnQuXHJcbiAqIEBwYXJhbSB7UHJvcHN9IHByb3BzXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5jbGFzcyBMaW5rZWRFeGNlcHRpb25JbmRpY2F0b3IgZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIGZvciBsaW5rZWQgZXhjZXB0aW9uIGluZGljYXRvclxyXG4gICAgICogQHBhcmFtIHByb3BzXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJlbmRlciBjb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XHJcblxyXG4gICAgICAgIHJldHVybiAoIXRoaXMucHJvcHMuaXNUaWxlVmlldykgPyB0aGlzLmdldEV4Y2VwdGlvbkNvbnRlbnQoKVxyXG4gICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICg8ZGl2IGNsYXNzTmFtZT0nY29sIHdsLWFsZXJ0IHRleHQtbGVmdCcgaWQ9e3RoaXMucHJvcHMuaWQgKyAnX2V4ZWNlcHRpb25JbmRpY2F0b3InfT5cclxuICAgICAgICAgICAgICAgIHt0aGlzLmdldEV4Y2VwdGlvbkNvbnRlbnQoKX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcGVuIHJlc3BvbnNlIHdoaWxlIGNsaWNraW5nIG9uIGxpbmtlZCBleGNlcHRpb24gaWNvblxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uTGlua2VkRXhjZXB0aW9uSWNvbkNsaWNrID0gKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoIWFwcGxpY2F0aW9uU3RvcmUuaW5zdGFuY2UuaXNPbmxpbmUpIHtcclxuICAgICAgICAgICAgYXBwbGljYXRpb25BY3Rpb25DcmVhdG9yLmNoZWNrQWN0aW9uSW50ZXJydXB0ZWQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgbGV0IGRpc3BsYXlJZCA9IHRoaXMucHJvcHMuZGlzcGxheUlkLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGxldCBleGNlcHRpb25pY29uOiBib29sZWFuID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGV0IHNlbGVjdGVkTWFya2luZ01vZGUgPSB3b3JrbGlzdFN0b3JlLmluc3RhbmNlLmdldE1hcmtpbmdNb2RlQnlXb3JrTGlzdFR5cGUod29ya2xpc3RTdG9yZS5pbnN0YW5jZS5jdXJyZW50V29ya2xpc3RUeXBlKTtcclxuICAgICAgICAgICAgZUNvdXJzZXdvcmtIZWxwZXIuZmV0Y2hFQ291cnNlV29ya0NhbmRpZGF0ZVNjcmlwdE1ldGFkYXRhKHBhcnNlSW50KGRpc3BsYXlJZCkpO1xyXG4gICAgICAgICAgICBleGNlcHRpb25IZWxwZXIuZ2V0TmV3RXhjZXB0aW9ucyhtYXJrZXJPcGVyYXRpb25Nb2RlRmFjdG9yeS5vcGVyYXRpb25Nb2RlLmlzVGVhbU1hbmFnZW1lbnRNb2RlLFxyXG4gICAgICAgICAgICAgICAgbWFya2VyT3BlcmF0aW9uTW9kZUZhY3Rvcnkub3BlcmF0aW9uTW9kZS5pc0F3YXJkaW5nTW9kZSwgZGlzcGxheUlkLCBleGNlcHRpb25pY29uKTtcclxuICAgICAgICAgICAgaWYgKCFtZXNzYWdlU3RvcmUuaW5zdGFuY2UuaXNNZXNzYWdlUGFuZWxBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBvcGVuZWRSZXNwb25zZURldGFpbHMgPSB3b3JrbGlzdFN0b3JlLmluc3RhbmNlLmdldFJlc3BvbnNlRGV0YWlscyhkaXNwbGF5SWQpO1xyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VIZWxwZXIub3BlblJlc3BvbnNlKFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGRpc3BsYXlJZCksXHJcbiAgICAgICAgICAgICAgICAgICAgZW51bXMuUmVzcG9uc2VOYXZpZ2F0aW9uLnNwZWNpZmljLFxyXG4gICAgICAgICAgICAgICAgICAgIHdvcmtsaXN0U3RvcmUuaW5zdGFuY2UuZ2V0UmVzcG9uc2VNb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5lZFJlc3BvbnNlRGV0YWlscy5tYXJrR3JvdXBJZCxcclxuICAgICAgICAgICAgICAgICAgICBlbnVtcy5SZXNwb25zZVZpZXdNb2RlLnpvbmVWaWV3LFxyXG4gICAgICAgICAgICAgICAgICAgIGVudW1zLlRyaWdnZXJQb2ludC5Xb3JrTGlzdFJlc3BvbnNlRXhjZXB0aW9uSWNvbik7XHJcbiAgICAgICAgICAgICAgICBtYXJrU2NoZW1lSGVscGVyLmdldE1hcmtzKHBhcnNlSW50KGRpc3BsYXlJZCksIHNlbGVjdGVkTWFya2luZ01vZGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2VOYXZpZ2F0aW9uQXJndW1lbnRzOiBNZXNzYWdlTmF2aWdhdGlvbkFyZ3VtZW50cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZUlkOiBwYXJzZUludChkaXNwbGF5SWQpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbk5hdmlnYXRlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvOiBlbnVtcy5NZXNzYWdlTmF2aWdhdGlvbi50b1Jlc3BvbnNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb25Db25maXJtZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGhhc01lc3NhZ2VDb250YWluc0RpcnR5VmFsdWU6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyUG9pbnQ6IGVudW1zLlRyaWdnZXJQb2ludC5Xb3JrTGlzdFJlc3BvbnNlRXhjZXB0aW9uSWNvblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2luZ0FjdGlvbkNyZWF0b3IuY2FuTWVzc2FnZU5hdmlnYXRlKG1lc3NhZ2VOYXZpZ2F0aW9uQXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRybnMgZXhjZXB0aW9uIGNvbnRlbnQuXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEV4Y2VwdGlvbkNvbnRlbnQoKTogSlNYLkVsZW1lbnQge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSAoPGRpdj48L2Rpdj4pO1xyXG4gICAgICAgIGxldCB0b29sVGlwVGV4dDogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgbGV0IGV4Y2VwdGlvbkNsYXNzTmFtZTogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgbGV0IG5vdGlmaWNhdGlvbkNsYXNzTmFtZTogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgbGV0IGV4Y2VwdGlvbkFsdFRleHQ6IHN0cmluZyA9IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ2dlbmVyaWMud29ya2xpc3QuaW5mb3JtYXRpb24tdGV4dCcpO1xyXG5cclxuICAgICAgICAvLyBUaGUgZXhjZXB0aW9uIGFsZXJ0IGNvdW50OlxyXG4gICAgICAgIC8vIE9uIHZpZXdpbmcgb25lJ3Mgb3duIHdvcmtsaXN0LFxyXG4gICAgICAgIC8vIHRoZSBudW1iZXIgb2YgZXhjZXB0aW9uIHRoYXQgaGFzIGJlZW4gcmVzb2x2ZWQgYnkgc3VwZXJ2aXNvciBhbmQgbmVlZHMgYWN0aW9uIGJ5IHRoZSBsb2dnZWQgaW4gdXNlci5cclxuICAgICAgICAvLyBJbiB0ZWFtIG1hbmFnZW1lbnQgdmlldyxcclxuICAgICAgICAvLyB0aGUgbnVtYmVyIG9yIGV4Y2VwdGlvbiB0aGF0IHRoZSBzdXBlcnZpc29yIG5lZWRzIHRvIGFjdGlvbi5cclxuXHJcbiAgICAgICAgbGV0IGV4Y2VwdGlvbkFsZXJ0Q291bnQ6IG51bWJlciA9IHRoaXMucHJvcHMuaXNUZWFtTWFuYWdlbWVudE1vZGUgP1xyXG4gICAgICAgICAgICAodGhpcy5wcm9wcy51bmFjdGlvbmVkRXhjZXB0aW9uQ291bnQgPyB0aGlzLnByb3BzLnVuYWN0aW9uZWRFeGNlcHRpb25Db3VudCA6IDApIDpcclxuICAgICAgICAgICAgKHRoaXMucHJvcHMucmVzb2x2ZWRFeGNlcHRpb25zQ291bnQgPyB0aGlzLnByb3BzLnJlc29sdmVkRXhjZXB0aW9uc0NvdW50IDogMCk7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5oYXNFeGNlcHRpb25zICYmICF0aGlzLnByb3BzLmhhc1pvbmluZ0V4Y2VwdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmhhc0V4Y2VwdGlvbnMgJiYgIXRoaXMucHJvcHMuaGFzQmxvY2tpbmdFeGNlcHRpb25zICYmIHRoaXMucHJvcHMucmVzb2x2ZWRFeGNlcHRpb25zQ291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgdG9vbFRpcFRleHQgPSB0aGlzLnByb3BzLmlzVGVhbU1hbmFnZW1lbnRNb2RlID9cclxuICAgICAgICAgICAgICAgIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ3RlYW0tbWFuYWdlbWVudC5leGFtaW5lci13b3JrbGlzdC5yZXNwb25zZS1kYXRhLmV4Y2VwdGlvbnMtaWNvbi10b29sdGlwJykgOlxyXG4gICAgICAgICAgICAgICAgbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLmV4Y2VwdGlvbnMtaWNvbi10b29sdGlwJyk7XHJcbiAgICAgICAgICAgIGV4Y2VwdGlvbkNsYXNzTmFtZSA9ICdzcHJpdGUtaWNvbiBpbmZvLWljb24tZGFyay1zbWFsbCc7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmhhc0Jsb2NraW5nRXhjZXB0aW9ucyAmJiB0aGlzLnByb3BzLnJlc29sdmVkRXhjZXB0aW9uc0NvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRvb2xUaXBUZXh0ID0gdGhpcy5wcm9wcy5pc1RlYW1NYW5hZ2VtZW50TW9kZSA/XHJcbiAgICAgICAgICAgICAgICBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCd0ZWFtLW1hbmFnZW1lbnQuZXhhbWluZXItd29ya2xpc3QucmVzcG9uc2UtZGF0YS5ibG9ja2luZy1leGNlcHRpb25zLWljb24tdG9vbHRpcCcpIDpcclxuICAgICAgICAgICAgICAgIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5ibG9ja2luZy1leGNlcHRpb25zLWljb24tdG9vbHRpcCcpO1xyXG4gICAgICAgICAgICBleGNlcHRpb25DbGFzc05hbWUgPSAnc3ByaXRlLWljb24gaW5mby1pY29uLXllbGxvdyc7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmhhc0V4Y2VwdGlvbnMgJiYgIXRoaXMucHJvcHMuaGFzQmxvY2tpbmdFeGNlcHRpb25zICYmIHRoaXMucHJvcHMucmVzb2x2ZWRFeGNlcHRpb25zQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgIHRvb2xUaXBUZXh0ID0gdGhpcy5wcm9wcy5pc1RlYW1NYW5hZ2VtZW50TW9kZSA/XHJcbiAgICAgICAgICAgICAgICBzdHJpbmdIZWxwZXIuZm9ybWF0KGxvY2FsZVN0b3JlLmluc3RhbmNlLlxyXG4gICAgICAgICAgICAgICAgICAgIFRyYW5zbGF0ZVRleHQoJ3RlYW0tbWFuYWdlbWVudC5leGFtaW5lci13b3JrbGlzdC5yZXNwb25zZS1kYXRhLnJlc29sdmVkLWV4Y2VwdGlvbnMtaWNvbi10b29sdGlwJyksXHJcbiAgICAgICAgICAgICAgICAgICAgW1N0cmluZyh0aGlzLnByb3BzLnJlc29sdmVkRXhjZXB0aW9uc0NvdW50KV0pIDpcclxuICAgICAgICAgICAgICAgIHN0cmluZ0hlbHBlci5mb3JtYXQobG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLnJlc29sdmVkLWV4Y2VwdGlvbnMtaWNvbi10b29sdGlwJyksXHJcbiAgICAgICAgICAgICAgICAgICAgW1N0cmluZyh0aGlzLnByb3BzLnJlc29sdmVkRXhjZXB0aW9uc0NvdW50KV0pO1xyXG4gICAgICAgICAgICBleGNlcHRpb25DbGFzc05hbWUgPSAnc3ByaXRlLWljb24gaW5mby1pY29uLWRhcmstc21hbGwnO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5oYXNCbG9ja2luZ0V4Y2VwdGlvbnMgJiYgdGhpcy5wcm9wcy5yZXNvbHZlZEV4Y2VwdGlvbnNDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgdG9vbFRpcFRleHQgPSB0aGlzLnByb3BzLmlzVGVhbU1hbmFnZW1lbnRNb2RlID8gc3RyaW5nSGVscGVyLmZvcm1hdChcclxuICAgICAgICAgICAgICAgIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHRcclxuICAgICAgICAgICAgICAgICAgICAoJ3RlYW0tbWFuYWdlbWVudC5leGFtaW5lci13b3JrbGlzdC5yZXNwb25zZS1kYXRhLnJlc29sdmVkLWFuZC1ibG9ja2luZy1leGNlcHRpb25zLWljb24tdG9vbHRpcCcpLFxyXG4gICAgICAgICAgICAgICAgW1N0cmluZyh0aGlzLnByb3BzLnJlc29sdmVkRXhjZXB0aW9uc0NvdW50KV0pIDpcclxuICAgICAgICAgICAgICAgIHN0cmluZ0hlbHBlci5mb3JtYXQoXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLnJlc29sdmVkLWFuZC1ibG9ja2luZy1leGNlcHRpb25zLWljb24tdG9vbHRpcCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIFtTdHJpbmcodGhpcy5wcm9wcy5yZXNvbHZlZEV4Y2VwdGlvbnNDb3VudCldKTtcclxuICAgICAgICAgICAgZXhjZXB0aW9uQ2xhc3NOYW1lID0gJ3Nwcml0ZS1pY29uIGluZm8taWNvbi15ZWxsb3cnO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMucHJvcHMuaGFzWm9uaW5nRXhjZXB0aW9ucykge1xyXG4gICAgICAgICAgICB0b29sVGlwVGV4dCA9IHRoaXMucHJvcHMuaXNUZWFtTWFuYWdlbWVudE1vZGUgP1xyXG4gICAgICAgICAgICAgICAgbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgndGVhbS1tYW5hZ2VtZW50LmV4YW1pbmVyLXdvcmtsaXN0LnJlc3BvbnNlLWRhdGEuZXhjZXB0aW9ucy1pY29uLXRvb2x0aXAnKSA6XHJcbiAgICAgICAgICAgICAgICBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LnJlc3BvbnNlLWRhdGEuZXhjZXB0aW9ucy1pY29uLXRvb2x0aXAnKTtcclxuICAgICAgICAgICAgZXhjZXB0aW9uQ2xhc3NOYW1lID0gJ3Nwcml0ZS1pY29uIGluZm8taWNvbi1kYXJrLXNtYWxsJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vLy9BcHBlbmQgdGhlIHRvb2x0aXAgb2YgZXhpc3RpbmcgZXhjZXB0aW9ucyB3aXRoIHpvbmluZyBleGNlcHRpb24gdG9vbHRpcCBpZiBzaWJsaW5nIHJpZyBjb250YWlucyB6b25pbmcgZXhjZXB0aW9uXHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaGFzWm9uaW5nRXhjZXB0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAodG9vbFRpcFRleHQgJiYgIXRoaXMucHJvcHMuaXNab25pbmdFeGNlcHRpb25SYWlzZWRJblNhbWVTY3JpcHQpIHtcclxuICAgICAgICAgICAgICAgIHRvb2xUaXBUZXh0ID0gdG9vbFRpcFRleHQgKyAnXFxuXFxuJyArICh0aGlzLnByb3BzLmlzVGVhbU1hbmFnZW1lbnRNb2RlID9cclxuICAgICAgICAgICAgICAgICAgICBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCd0ZWFtLW1hbmFnZW1lbnQuZXhhbWluZXItd29ya2xpc3QucmVzcG9uc2UtZGF0YS56b25pbmctZXhjZXB0aW9ucy1pY29uLXRvb2x0aXAnKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLnpvbmluZy1leGNlcHRpb25zLWljb24tdG9vbHRpcCcpKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmlzWm9uaW5nRXhjZXB0aW9uUmFpc2VkSW5TYW1lU2NyaXB0KSB7XHJcbiAgICAgICAgICAgICAgICB0b29sVGlwVGV4dCA9IHRoaXMucHJvcHMuaXNUZWFtTWFuYWdlbWVudE1vZGUgP1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ3RlYW0tbWFuYWdlbWVudC5leGFtaW5lci13b3JrbGlzdC5yZXNwb25zZS1kYXRhLmJsb2NraW5nLWV4Y2VwdGlvbnMtaWNvbi10b29sdGlwJykgOlxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5ibG9ja2luZy1leGNlcHRpb25zLWljb24tdG9vbHRpcCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdG9vbFRpcFRleHQgPSB0aGlzLnByb3BzLmlzVGVhbU1hbmFnZW1lbnRNb2RlID9cclxuICAgICAgICAgICAgICAgICAgICBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCd0ZWFtLW1hbmFnZW1lbnQuZXhhbWluZXItd29ya2xpc3QucmVzcG9uc2UtZGF0YS56b25pbmctZXhjZXB0aW9ucy1pY29uLXRvb2x0aXAnKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLnpvbmluZy1leGNlcHRpb25zLWljb24tdG9vbHRpcCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGV4Y2VwdGlvbkNsYXNzTmFtZSA9ICdzcHJpdGUtaWNvbiBpbmZvLWljb24teWVsbG93JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElmIGV4Y2VwdGlvbkFsZXJ0Q291bnQgaXMgZ3JlYXRlciB0aGFuIDAgbm90aWZpY2F0aW9uIHdpbGwgc2hvd1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChleGNlcHRpb25BbGVydENvdW50ID4gMCkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSAoIXRoaXMucHJvcHMuaXNUaWxlVmlldykgPyA8ZGl2IGNsYXNzTmFtZT0nd2wtYWxlcnQnXHJcbiAgICAgICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5pZCArICdfZXhlY2VwdGlvbkluZGljYXRvck5vdGlmaWNhdGlvbid9PlxyXG4gICAgICAgICAgICAgICAgPGEgdGl0bGU9e3Rvb2xUaXBUZXh0fSBjbGFzc05hbWU9J3Jlc3AtYWxlcnRzJyBvbkNsaWNrPXt0aGlzLm9uTGlua2VkRXhjZXB0aW9uSWNvbkNsaWNrfT5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2V4Y2VwdGlvbkNsYXNzTmFtZX0+IHtleGNlcHRpb25BbHRUZXh0fSA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdub3RpZmljYXRpb24gY2lyY2xlJyBpZD17dGhpcy5wcm9wcy5pZCArICdfZXhlY2VwdGlvbkluZGljYXRvck5vdGlmaWNhdGlvbid9ID5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2xvY2FsZUhlbHBlci50b0xvY2FsZVN0cmluZyhleGNlcHRpb25BbGVydENvdW50KX0gPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICA8L2Rpdj4gOlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1pbm5lcic+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgdGl0bGU9e3Rvb2xUaXBUZXh0fSBjbGFzc05hbWU9J3Jlc3AtYWxlcnRzJyBvbkNsaWNrPXt0aGlzLm9uTGlua2VkRXhjZXB0aW9uSWNvbkNsaWNrfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtleGNlcHRpb25DbGFzc05hbWV9PiB7ZXhjZXB0aW9uQWx0VGV4dH0gPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J25vdGlmaWNhdGlvbiBjaXJjbGUnIGlkPXt0aGlzLnByb3BzLmlkICsgJ19leGVjZXB0aW9uSW5kaWNhdG9yTm90aWZpY2F0aW9uJ30gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xvY2FsZUhlbHBlci50b0xvY2FsZVN0cmluZyhleGNlcHRpb25BbGVydENvdW50KX0gPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PjtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuaGFzWm9uaW5nRXhjZXB0aW9ucyAmJiAhdGhpcy5wcm9wcy5oYXNFeGNlcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9ICghdGhpcy5wcm9wcy5pc1RpbGVWaWV3KSA/IDxkaXYgY2xhc3NOYW1lPSd3bC1hbGVydCdcclxuICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmlkICsgJ19leGVjZXB0aW9uSW5kaWNhdG9yTm90aWZpY2F0aW9uJ30+XHJcbiAgICAgICAgICAgICAgICA8YSB0aXRsZT17dG9vbFRpcFRleHR9IGNsYXNzTmFtZT0ncmVzcC1hbGVydHMnIG9uQ2xpY2s9eyhlKSA9PiB7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IH19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17ZXhjZXB0aW9uQ2xhc3NOYW1lfT4ge2V4Y2VwdGlvbkFsdFRleHR9IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLWlubmVyJz5cclxuICAgICAgICAgICAgICAgICAgICA8YSB0aXRsZT17dG9vbFRpcFRleHR9IGNsYXNzTmFtZT0ncmVzcC1hbGVydHMnIG9uQ2xpY2s9eyhlKSA9PiB7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2V4Y2VwdGlvbkNsYXNzTmFtZX0+IHtleGNlcHRpb25BbHRUZXh0fSA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9ICghdGhpcy5wcm9wcy5pc1RpbGVWaWV3KSA/IDxkaXYgY2xhc3NOYW1lPSd3bC1hbGVydCdcclxuICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmlkICsgJ19leGVjZXB0aW9uSW5kaWNhdG9yTm90aWZpY2F0aW9uJ30+XHJcbiAgICAgICAgICAgICAgICA8YSB0aXRsZT17dG9vbFRpcFRleHR9IGNsYXNzTmFtZT0ncmVzcC1hbGVydHMnIG9uQ2xpY2s9e3RoaXMub25MaW5rZWRFeGNlcHRpb25JY29uQ2xpY2t9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17ZXhjZXB0aW9uQ2xhc3NOYW1lfT4ge2V4Y2VwdGlvbkFsdFRleHR9IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLWlubmVyJz5cclxuICAgICAgICAgICAgICAgICAgICA8YSB0aXRsZT17dG9vbFRpcFRleHR9IGNsYXNzTmFtZT0ncmVzcC1hbGVydHMnIG9uQ2xpY2s9e3RoaXMub25MaW5rZWRFeGNlcHRpb25JY29uQ2xpY2t9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2V4Y2VwdGlvbkNsYXNzTmFtZX0+IHtleGNlcHRpb25BbHRUZXh0fSA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKHJlc3VsdCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IExpbmtlZEV4Y2VwdGlvbkluZGljYXRvcjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9saW5rZWRleGNlcHRpb25pbmRpY2F0b3IudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFrQkE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFFQTs7O0FBR0E7QUFDQTtBQUFBO0FBaUJBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFuREE7QUFFQTs7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBSUE7QUF3Q0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUlBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBR0E7QUFDQTtBQUNBOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUFBO0FBQ0E7QUFFQTtBQUNBOztBQUFBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFBQTtBQUFBO0FBR0E7QUFBQTtBQUNBO0FBRUE7QUFDQTs7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 1228:
/* no static exports found */
/* all exports used */
/*!******************************************************************!*\
  !*** ./src/components/worklist/shared/marksdifferencecolumn.tsx ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar MarksDifference = __webpack_require__(/*! ./marksdifference */ 592);\r\nvar AccuracyIndicator = __webpack_require__(/*! ./accuracyindicator */ 496);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar MarksDifferenceColumn = /** @class */ (function (_super) {\r\n    __extends(MarksDifferenceColumn, _super);\r\n    /**\r\n     * Constructor for MarksDiffrenceColumn\r\n     * @param props\r\n     */\r\n    function MarksDifferenceColumn(props) {\r\n        var _this = _super.call(this, props, null) || this;\r\n        _this.classNameAmd = 'amd small-text';\r\n        _this.classNameTmd = 'tmd small-text';\r\n        _this.titleAmd = markerOperationModeFactory.operationMode.absoluteMarkDifferenceTitle;\r\n        _this.titleTmd = markerOperationModeFactory.operationMode.totalMarkDifferenceTitle;\r\n        _this.marksDifferenceTextAmd = 'marking.worklist.tile-view-labels.amd';\r\n        _this.marksDifferenceTextTmd = 'marking.worklist.tile-view-labels.tmd';\r\n        _this.absoluteMarksDifference = 0;\r\n        _this.totalMarksDifference = 0;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    MarksDifferenceColumn.prototype.render = function () {\r\n        var workListType = worklistStore.instance.currentWorklistType;\r\n        var _isShowStandardisationDefinitiveMarks = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ShowStandardisationDefinitiveMarks, this.props.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        this.absoluteMarksDifference = this.props.absoluteMarksDifference;\r\n        this.totalMarksDifference = this.props.totalMarksDifference;\r\n        var showAccuracyIndicator = true;\r\n        var showAMDTMD = true;\r\n        var className = 'col wl-tolerance';\r\n        if (!this.props.isTileView) {\r\n            showAccuracyIndicator = false;\r\n            className = 'col wl-amdtmd';\r\n            if (this.props.accuracyIndicator === enums.AccuracyIndicatorType.Accurate\r\n                || this.props.accuracyIndicator === enums.AccuracyIndicatorType.AccurateNR || this.props.accuracyIndicator === 0) {\r\n                showAMDTMD = false;\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.showAccuracyIndicator) {\r\n                if (this.props.accuracyIndicator === enums.AccuracyIndicatorType.Accurate\r\n                    || this.props.accuracyIndicator === enums.AccuracyIndicatorType.AccurateNR\r\n                    || this.props.accuracyIndicator === 0) {\r\n                    showAccuracyIndicator = true;\r\n                    showAMDTMD = false;\r\n                }\r\n            }\r\n            else {\r\n                showAccuracyIndicator = false;\r\n                showAMDTMD = false;\r\n            }\r\n        }\r\n        // render only if AMD value is set\r\n        var amdMarksDifference = showAMDTMD ? (React.createElement(MarksDifference, { id: this.props.id + '_amd', key: 'key_amd_' + this.props.id, className: this.classNameAmd, title: this.titleAmd, marksDifferenceText: this.marksDifferenceTextAmd, marksDifference: this.props.absoluteMarksDifference, selectedLanguage: this.props.selectedLanguage, marksDifferenceType: enums.MarksDifferenceType.AbsoluteMarksDifference, isTileView: this.props.isTileView })) : null;\r\n        // render only if TMD value is set\r\n        var tmdMarksDifference = showAMDTMD ? (React.createElement(MarksDifference, { id: this.props.id + '_tmd', key: 'key_tmd_' + this.props.id, className: this.classNameTmd, title: this.titleTmd, marksDifferenceText: this.marksDifferenceTextTmd, marksDifference: this.props.totalMarksDifference, selectedLanguage: this.props.selectedLanguage, marksDifferenceType: enums.MarksDifferenceType.TotalMarksDifference, isTileView: this.props.isTileView })) : null;\r\n        var accuracy = showAccuracyIndicator ? (React.createElement(AccuracyIndicator, { id: this.props.id, key: this.props.id, accuracyIndicator: this.props.accuracyIndicator, isTileView: this.props.isTileView, selectedLanguage: this.props.selectedLanguage })) : null;\r\n        // do not render if both flags are false.\r\n        var markWithAccuracy = (showAccuracyIndicator || showAMDTMD) ? (React.createElement(\"div\", { className: 'worklist-tile-footer' },\r\n            React.createElement(\"div\", { className: className, id: this.props.id + '_marksDifference' },\r\n                React.createElement(\"div\", { className: 'col-inner' },\r\n                    accuracy,\r\n                    amdMarksDifference,\r\n                    tmdMarksDifference)))) : null;\r\n        return (markWithAccuracy);\r\n    };\r\n    return MarksDifferenceColumn;\r\n}(PureRenderComponent));\r\nmodule.exports = MarksDifferenceColumn;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1229:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/components/worklist/shared/originalmarkaccuracy.tsx ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../../../components/utility/enums */ 225);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\n/**\r\n * React component\r\n * @param {Props} props\r\n */\r\n/* tslint:disable:variable-name */\r\nvar OriginalMarkAccuracy = function (props) {\r\n    /* tslint:enable:variable-name */\r\n    var className = 'small-text';\r\n    var accuracyType = '';\r\n    var title = '';\r\n    if (props.isVisible) {\r\n        switch (props.accuracyIndicatorType) {\r\n            case enums.AccuracyIndicatorType.Accurate:\r\n            case enums.AccuracyIndicatorType.AccurateNR:\r\n                className = className + ' txt-accurate';\r\n                accuracyType = localeStore.instance.TranslateText('generic.accuracy-indicators.accurate');\r\n                title = markerOperationModeFactory.operationMode.accurateOriginalAccuracyIndicatorTitle;\r\n                break;\r\n            case enums.AccuracyIndicatorType.OutsideTolerance:\r\n            case enums.AccuracyIndicatorType.OutsideToleranceNR:\r\n                className = className + ' txt-inacurate';\r\n                accuracyType = localeStore.instance.TranslateText('generic.accuracy-indicators.inaccurate');\r\n                title = markerOperationModeFactory.operationMode.inaccurateOriginalAccuracyIndicatorTitle;\r\n                break;\r\n            case enums.AccuracyIndicatorType.WithinTolerance:\r\n            case enums.AccuracyIndicatorType.WithinToleranceNR:\r\n                className = className + ' txt-intolerence';\r\n                accuracyType = localeStore.instance.TranslateText('generic.accuracy-indicators.in-tolerance');\r\n                title = markerOperationModeFactory.operationMode.intoleranceOriginalAccuracyIndicatorTitle;\r\n                break;\r\n            default:\r\n                className = className + ' txt-accurate';\r\n                break;\r\n        }\r\n    }\r\n    return (React.createElement(\"span\", { className: className, id: props.id, title: title }, accuracyType));\r\n};\r\nmodule.exports = OriginalMarkAccuracy;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9vcmlnaW5hbG1hcmthY2N1cmFjeS50c3g/YzJjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IG1hcmtlck9wZXJhdGlvbk1vZGVGYWN0b3J5ID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9tYXJrZXJvcGVyYXRpb25tb2RlL21hcmtlcm9wZXJhdGlvbm1vZGVmYWN0b3J5Jyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBhIGNvbXBvbmVudFxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIGlzVmlzaWJsZTogYm9vbGVhbjtcclxuICAgIGFjY3VyYWN5SW5kaWNhdG9yVHlwZTogZW51bXMuQWNjdXJhY3lJbmRpY2F0b3JUeXBlO1xyXG59XHJcblxyXG4vKipcclxuICogUmVhY3QgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7UHJvcHN9IHByb3BzXHJcbiAqL1xyXG4gLyogdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZSAqL1xyXG5jb25zdCBPcmlnaW5hbE1hcmtBY2N1cmFjeSA9IChwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCA9PiB7XHJcbi8qIHRzbGludDplbmFibGU6dmFyaWFibGUtbmFtZSAqL1xyXG5cclxuICAgIGxldCBjbGFzc05hbWUgPSAnc21hbGwtdGV4dCc7XHJcbiAgICBsZXQgYWNjdXJhY3lUeXBlID0gJyc7XHJcbiAgICBsZXQgdGl0bGUgPSAnJztcclxuXHJcbiAgICBpZiAocHJvcHMuaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgc3dpdGNoIChwcm9wcy5hY2N1cmFjeUluZGljYXRvclR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5BY2N1cmFjeUluZGljYXRvclR5cGUuQWNjdXJhdGU6XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuQWNjdXJhY3lJbmRpY2F0b3JUeXBlLkFjY3VyYXRlTlI6XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgKyAnIHR4dC1hY2N1cmF0ZSc7XHJcbiAgICAgICAgICAgICAgICBhY2N1cmFjeVR5cGUgPSBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdnZW5lcmljLmFjY3VyYWN5LWluZGljYXRvcnMuYWNjdXJhdGUnKTtcclxuICAgICAgICAgICAgICAgIHRpdGxlID0gbWFya2VyT3BlcmF0aW9uTW9kZUZhY3Rvcnkub3BlcmF0aW9uTW9kZS5hY2N1cmF0ZU9yaWdpbmFsQWNjdXJhY3lJbmRpY2F0b3JUaXRsZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLkFjY3VyYWN5SW5kaWNhdG9yVHlwZS5PdXRzaWRlVG9sZXJhbmNlOlxyXG4gICAgICAgICAgICBjYXNlIGVudW1zLkFjY3VyYWN5SW5kaWNhdG9yVHlwZS5PdXRzaWRlVG9sZXJhbmNlTlI6XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgKyAnIHR4dC1pbmFjdXJhdGUnO1xyXG4gICAgICAgICAgICAgICAgYWNjdXJhY3lUeXBlID0gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnZ2VuZXJpYy5hY2N1cmFjeS1pbmRpY2F0b3JzLmluYWNjdXJhdGUnKTtcclxuICAgICAgICAgICAgICAgIHRpdGxlID0gbWFya2VyT3BlcmF0aW9uTW9kZUZhY3Rvcnkub3BlcmF0aW9uTW9kZS5pbmFjY3VyYXRlT3JpZ2luYWxBY2N1cmFjeUluZGljYXRvclRpdGxlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuQWNjdXJhY3lJbmRpY2F0b3JUeXBlLldpdGhpblRvbGVyYW5jZTpcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5BY2N1cmFjeUluZGljYXRvclR5cGUuV2l0aGluVG9sZXJhbmNlTlI6XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgKyAnIHR4dC1pbnRvbGVyZW5jZSc7XHJcbiAgICAgICAgICAgICAgICBhY2N1cmFjeVR5cGUgPSBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdnZW5lcmljLmFjY3VyYWN5LWluZGljYXRvcnMuaW4tdG9sZXJhbmNlJyk7XHJcbiAgICAgICAgICAgICAgICB0aXRsZSA9IG1hcmtlck9wZXJhdGlvbk1vZGVGYWN0b3J5Lm9wZXJhdGlvbk1vZGUuaW50b2xlcmFuY2VPcmlnaW5hbEFjY3VyYWN5SW5kaWNhdG9yVGl0bGU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZSArICcgdHh0LWFjY3VyYXRlJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBpZD17cHJvcHMuaWR9IHRpdGxlPXt0aXRsZX0+e2FjY3VyYWN5VHlwZX08L3NwYW4+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0ID0gT3JpZ2luYWxNYXJrQWNjdXJhY3k7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9zaGFyZWQvb3JpZ2luYWxtYXJrYWNjdXJhY3kudHN4Il0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQVVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 1230:
/* no static exports found */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/components/worklist/shared/originalmarktotal.tsx ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar enums = __webpack_require__(/*! ../../../components/utility/enums */ 225);\r\n/**\r\n * React component\r\n * @param {Props} props\r\n */\r\n/* tslint:disable:variable-name */\r\nvar OriginalMarkTotal = function (props) {\r\n    /* tslint:enable:variable-name */\r\n    var className = 'large-text';\r\n    if (props.isVisible) {\r\n        switch (props.accuracyIndicatorType) {\r\n            case enums.AccuracyIndicatorType.Accurate:\r\n            case enums.AccuracyIndicatorType.AccurateNR:\r\n                className = className + ' txt-accurate';\r\n                break;\r\n            case enums.AccuracyIndicatorType.OutsideTolerance:\r\n            case enums.AccuracyIndicatorType.OutsideToleranceNR:\r\n                className = className + ' txt-inacurate';\r\n                break;\r\n            case enums.AccuracyIndicatorType.WithinTolerance:\r\n            case enums.AccuracyIndicatorType.WithinToleranceNR:\r\n                className = className + ' txt-intolerence';\r\n                break;\r\n            default:\r\n                className = className + ' txt-accurate';\r\n                break;\r\n        }\r\n    }\r\n    return (React.createElement(\"span\", { className: className, id: props.id }, (props.isVisible) ? props.originalMarkTotal : '--'));\r\n};\r\nmodule.exports = OriginalMarkTotal;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9vcmlnaW5hbG1hcmt0b3RhbC50c3g/OGJlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZW51bXMnKTtcclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIGEgY29tcG9uZW50XHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgaXNOb25OdW1lcmljTWFyazogYm9vbGVhbjtcclxuICAgIG9yaWdpbmFsTWFya1RvdGFsOiBudW1iZXI7XHJcbiAgICBpc1Zpc2libGU6IGJvb2xlYW47XHJcbiAgICBhY2N1cmFjeUluZGljYXRvclR5cGU6IGVudW1zLkFjY3VyYWN5SW5kaWNhdG9yVHlwZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlYWN0IGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge1Byb3BzfSBwcm9wc1xyXG4gKi9cclxuLyogdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZSAqL1xyXG5jb25zdCBPcmlnaW5hbE1hcmtUb3RhbCA9IChwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCA9PiB7XHJcbi8qIHRzbGludDplbmFibGU6dmFyaWFibGUtbmFtZSAqL1xyXG5cclxuICAgIGxldCBjbGFzc05hbWUgPSAnbGFyZ2UtdGV4dCc7XHJcbiAgICBpZiAocHJvcHMuaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgc3dpdGNoIChwcm9wcy5hY2N1cmFjeUluZGljYXRvclR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5BY2N1cmFjeUluZGljYXRvclR5cGUuQWNjdXJhdGU6XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuQWNjdXJhY3lJbmRpY2F0b3JUeXBlLkFjY3VyYXRlTlI6XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgKyAnIHR4dC1hY2N1cmF0ZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5BY2N1cmFjeUluZGljYXRvclR5cGUuT3V0c2lkZVRvbGVyYW5jZTpcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5BY2N1cmFjeUluZGljYXRvclR5cGUuT3V0c2lkZVRvbGVyYW5jZU5SOlxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lICsgJyB0eHQtaW5hY3VyYXRlJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLkFjY3VyYWN5SW5kaWNhdG9yVHlwZS5XaXRoaW5Ub2xlcmFuY2U6XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuQWNjdXJhY3lJbmRpY2F0b3JUeXBlLldpdGhpblRvbGVyYW5jZU5SOlxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lICsgJyB0eHQtaW50b2xlcmVuY2UnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgKyAnIHR4dC1hY2N1cmF0ZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gaWQ9e3Byb3BzLmlkfT57KHByb3BzLmlzVmlzaWJsZSkgPyBwcm9wcy5vcmlnaW5hbE1hcmtUb3RhbCA6ICctLSd9PC9zcGFuPlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCA9IE9yaWdpbmFsTWFya1RvdGFsO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL29yaWdpbmFsbWFya3RvdGFsLnRzeCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFHQTtBQVlBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 1231:
/* no static exports found */
/* all exports used */
/*!******************************************************************!*\
  !*** ./src/components/worklist/shared/pendingworklistbanner.tsx ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/// <reference path='gridtogglebutton.tsx' />\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * Class for displaying worklist message.\r\n */\r\nvar PendingWorklistBanner = /** @class */ (function (_super) {\r\n    __extends(PendingWorklistBanner, _super);\r\n    /**\r\n     * Constructor for worklist message\r\n     * @param props\r\n     */\r\n    function PendingWorklistBanner(props) {\r\n        return _super.call(this, props, null) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    PendingWorklistBanner.prototype.render = function () {\r\n        if (this.props.isVisible) {\r\n            return (React.createElement(\"div\", { className: 'message-bar' },\r\n                React.createElement(\"span\", { className: 'message-content' },\r\n                    React.createElement(\"div\", { className: 'text-left', id: 'pendingWorklistBannerId' }, localeStore.instance.TranslateText('marking.worklist.submitted-editable-worklist-helper')))));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return PendingWorklistBanner;\r\n}(pureRenderComponent));\r\nmodule.exports = PendingWorklistBanner;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9wZW5kaW5nd29ya2xpc3RiYW5uZXIudHN4PzBhMTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD0nZ3JpZHRvZ2dsZWJ1dHRvbi50c3gnIC8+XHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5cclxuLyoqXHJcbiAqIFByb3BzXHJcbiAqIEBwYXJhbSB7UHJvcHN9IHByb3BzXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgaXNWaXNpYmxlOiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogQ2xhc3MgZm9yIGRpc3BsYXlpbmcgd29ya2xpc3QgbWVzc2FnZS5cclxuICovXHJcbmNsYXNzIFBlbmRpbmdXb3JrbGlzdEJhbm5lciBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3IgZm9yIHdvcmtsaXN0IG1lc3NhZ2UgXHJcbiAgICAgKiBAcGFyYW0gcHJvcHNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIGNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5pc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuICg8ZGl2XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9J21lc3NhZ2UtYmFyJz5cclxuICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdtZXNzYWdlLWNvbnRlbnQnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0ZXh0LWxlZnQnIGlkPSdwZW5kaW5nV29ya2xpc3RCYW5uZXJJZCc+XHJcbiAgICAgICAgICAgICAgICAgICAge2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3Quc3VibWl0dGVkLWVkaXRhYmxlLXdvcmtsaXN0LWhlbHBlcicpfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2Pik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCA9IFBlbmRpbmdXb3JrbGlzdEJhbm5lcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3BlbmRpbmd3b3JrbGlzdGJhbm5lci50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVUE7O0FBRUE7QUFDQTtBQUFBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBS0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 1232:
/* no static exports found */
/* all exports used */
/*!*************************************************************!*\
  !*** ./src/components/worklist/shared/responseidcolumn.tsx ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar ResponseIdGridElement = __webpack_require__(/*! ./responseidgridelement */ 370);\r\nvar LastUpdatedDate = __webpack_require__(/*! ./worklistdate */ 594);\r\nvar ResponseTypeLabel = __webpack_require__(/*! ./responsetypelabel */ 593);\r\nvar TotalMarkTile = __webpack_require__(/*! ./totalmarktile */ 1237);\r\n/**\r\n * React component class forthe grid column responseid and last updated date\r\n */\r\nvar ResponseIdColumn = /** @class */ (function (_super) {\r\n    __extends(ResponseIdColumn, _super);\r\n    /**\r\n     * Constructor for ResponseIdColumn\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function ResponseIdColumn(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    ResponseIdColumn.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: 'col wl-id' },\r\n            React.createElement(\"div\", { className: 'col-inner' },\r\n                React.createElement(ResponseIdGridElement, { selectedLanguage: this.props.selectedLanguage, displayId: this.props.displayId, isClickable: this.props.isResponseIdClickable, id: this.props.id, key: 'key_response_id_grid_element_' + this.props.id, isTileView: this.props.isTileView }),\r\n                React.createElement(ResponseTypeLabel, { id: this.props.id + '_Seed', key: this.props.id + '_Seed', isResponseTypeLabelVisible: this.props.isResponseTypeLabelVisible, responseType: this.props.responseType }),\r\n                React.createElement(TotalMarkTile, { id: this.props.id + '_totalmarktile', key: this.props.id + '_totalmarktilekey', selectedLanguage: this.props.selectedLanguage, isNonNumericMark: !this.props.hasNumericMark, maximumMark: 0, totalMark: this.props.totalMarkValue, markingProgress: this.props.markingProgress }),\r\n                React.createElement(LastUpdatedDate, { selectedLanguage: this.props.selectedLanguage, dateType: this.props.worklistDateType, dateValue: this.props.dateValue, id: this.props.id, isTileView: this.props.isTileView, key: 'key_last_updated_date_' + this.props.id }))));\r\n    };\r\n    return ResponseIdColumn;\r\n}(pureRenderComponent));\r\nmodule.exports = ResponseIdColumn;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9yZXNwb25zZWlkY29sdW1uLnRzeD9iNWZiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZW5hYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgUmVzcG9uc2VJZEdyaWRFbGVtZW50ID0gcmVxdWlyZSgnLi9yZXNwb25zZWlkZ3JpZGVsZW1lbnQnKTtcclxuaW1wb3J0IExhc3RVcGRhdGVkRGF0ZSA9IHJlcXVpcmUoJy4vd29ya2xpc3RkYXRlJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IFJlc3BvbnNlVHlwZUxhYmVsID0gcmVxdWlyZSgnLi9yZXNwb25zZXR5cGVsYWJlbCcpO1xyXG5pbXBvcnQgVG90YWxNYXJrVGlsZSA9IHJlcXVpcmUoJy4vdG90YWxtYXJrdGlsZScpO1xyXG5cclxuLyoqXHJcbiAqIFByb3BlcnRpZXMgb2YgcmVzcG9uc2VpZCBhbmQgbGFzdCB1cGRhdGVkIGRhdGUgY29sdW1uXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgZGlzcGxheUlkPzogc3RyaW5nO1xyXG4gICAgZGF0ZVZhbHVlPzogRGF0ZTtcclxuICAgIHdvcmtsaXN0RGF0ZVR5cGU/OiBlbnVtcy5Xb3JrTGlzdERhdGVUeXBlO1xyXG4gICAgaXNSZXNwb25zZUlkQ2xpY2thYmxlPzogYm9vbGVhbjtcclxuICAgIGlzUmVzcG9uc2VUeXBlTGFiZWxWaXNpYmxlPzogYm9vbGVhbjtcclxuXHRpc1RpbGVWaWV3PzogYm9vbGVhbjtcclxuXHRoYXNOdW1lcmljTWFyaz86IGJvb2xlYW47XHJcblx0bWFya2luZ1Byb2dyZXNzPzogbnVtYmVyO1xyXG4gICAgdG90YWxNYXJrVmFsdWU/OiBudW1iZXI7XHJcbiAgICByZXNwb25zZVR5cGU/OiBlbnVtcy5SZXNwb25zZVR5cGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWFjdCBjb21wb25lbnQgY2xhc3MgZm9ydGhlIGdyaWQgY29sdW1uIHJlc3BvbnNlaWQgYW5kIGxhc3QgdXBkYXRlZCBkYXRlXHJcbiAqL1xyXG5jbGFzcyBSZXNwb25zZUlkQ29sdW1uIGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgUmVzcG9uc2VJZENvbHVtblxyXG4gICAgICogQHBhcmFtIHByb3BzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzLCBzdGF0ZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIHN0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBjb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sIHdsLWlkJz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1pbm5lcic+XHJcbiAgICAgICAgICAgICAgICA8UmVzcG9uc2VJZEdyaWRFbGVtZW50IHNlbGVjdGVkTGFuZ3VhZ2U9e3RoaXMucHJvcHMuc2VsZWN0ZWRMYW5ndWFnZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheUlkPXt0aGlzLnByb3BzLmRpc3BsYXlJZH0gaXNDbGlja2FibGUgPSB7dGhpcy5wcm9wcy5pc1Jlc3BvbnNlSWRDbGlja2FibGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmlkfSBrZXk9eydrZXlfcmVzcG9uc2VfaWRfZ3JpZF9lbGVtZW50XycgKyB0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RpbGVWaWV3PXt0aGlzLnByb3BzLmlzVGlsZVZpZXd9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgPFJlc3BvbnNlVHlwZUxhYmVsIGlkID0geyB0aGlzLnByb3BzLmlkICsgJ19TZWVkJyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IHsgdGhpcy5wcm9wcy5pZCArICdfU2VlZCcgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1Jlc3BvbnNlVHlwZUxhYmVsVmlzaWJsZSA9IHsgdGhpcy5wcm9wcy5pc1Jlc3BvbnNlVHlwZUxhYmVsVmlzaWJsZSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZSA9IHsgdGhpcy5wcm9wcy5yZXNwb25zZVR5cGV9Lz5cclxuXHJcblx0XHRcdFx0PFRvdGFsTWFya1RpbGUgaWQ9e3RoaXMucHJvcHMuaWQgKyAnX3RvdGFsbWFya3RpbGUnfVxyXG5cdFx0XHRcdFx0a2V5PXt0aGlzLnByb3BzLmlkICsgJ190b3RhbG1hcmt0aWxla2V5J31cclxuXHRcdFx0XHRcdHNlbGVjdGVkTGFuZ3VhZ2U9e3RoaXMucHJvcHMuc2VsZWN0ZWRMYW5ndWFnZX1cclxuXHRcdFx0XHRcdGlzTm9uTnVtZXJpY01hcms9eyF0aGlzLnByb3BzLmhhc051bWVyaWNNYXJrfVxyXG5cdFx0XHRcdFx0bWF4aW11bU1hcms9ezB9XHJcblx0XHRcdFx0XHR0b3RhbE1hcms9e3RoaXMucHJvcHMudG90YWxNYXJrVmFsdWV9XHJcblx0XHRcdFx0XHRtYXJraW5nUHJvZ3Jlc3M9e3RoaXMucHJvcHMubWFya2luZ1Byb2dyZXNzfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgIDxMYXN0VXBkYXRlZERhdGUgc2VsZWN0ZWRMYW5ndWFnZT17dGhpcy5wcm9wcy5zZWxlY3RlZExhbmd1YWdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlVHlwZT17dGhpcy5wcm9wcy53b3JrbGlzdERhdGVUeXBlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlVmFsdWU9e3RoaXMucHJvcHMuZGF0ZVZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUaWxlVmlldz17dGhpcy5wcm9wcy5pc1RpbGVWaWV3fVxyXG5cdFx0XHRcdFx0XHRrZXk9eydrZXlfbGFzdF91cGRhdGVkX2RhdGVfJyArIHRoaXMucHJvcHMuaWR9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBSZXNwb25zZUlkQ29sdW1uO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9zaGFyZWQvcmVzcG9uc2VpZGNvbHVtbi50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQWtCQTs7QUFFQTtBQUNBO0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBS0E7QUFRQTtBQVNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 1233:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/worklist/shared/reviewedbylabel.tsx ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar operationModeHelper = __webpack_require__(/*! ../../utility/userdetails/userinfo/operationmodehelper */ 289);\r\nvar stringFormatHelper = __webpack_require__(/*! ../../../utility/stringformat/stringformathelper */ 250);\r\n/**\r\n * Stateless reviewed by label component\r\n * @param props\r\n */\r\n/* tslint:disable:variable-name */\r\nvar ReviewedByLabel = function (props) {\r\n    /* tslint:enable:variable-name */\r\n    if (props.reviewedByInitials && props.reviewedBySurname || props.isAutoChecked) {\r\n        return (React.createElement(\"span\", { className: 'dim-text small-text' }, props.isAutoChecked ? localeStore.instance.\r\n            TranslateText('team-management.examiner-worklist.response-data.auto-reviewed') : operationModeHelper &&\r\n            props.reviewedById &&\r\n            operationModeHelper.authorisedExaminerRoleId ===\r\n                props.reviewedById ?\r\n            localeStore.instance.\r\n                TranslateText('team-management.examiner-worklist.response-data.reviewed-by-me') :\r\n            stringFormatHelper.getFormattedExaminerName(props.reviewedByInitials, props.reviewedBySurname)));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\nmodule.exports = ReviewedByLabel;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9yZXZpZXdlZGJ5bGFiZWwudHN4P2VmMTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IFB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgb3BlcmF0aW9uTW9kZUhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvdXNlcmRldGFpbHMvdXNlcmluZm8vb3BlcmF0aW9ubW9kZWhlbHBlcicpO1xyXG5pbXBvcnQgc3RyaW5nRm9ybWF0SGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9zdHJpbmdmb3JtYXQvc3RyaW5nZm9ybWF0aGVscGVyJyk7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgcmV2aWV3ZWRCeUlkOiBudW1iZXI7XHJcbiAgICByZXZpZXdlZEJ5SW5pdGlhbHM6IHN0cmluZztcclxuICAgIHJldmlld2VkQnlTdXJuYW1lOiBzdHJpbmc7XHJcbiAgICBpc0F1dG9DaGVja2VkOiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogU3RhdGVsZXNzIHJldmlld2VkIGJ5IGxhYmVsIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0gcHJvcHNcclxuICovXHJcbi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuY29uc3QgUmV2aWV3ZWRCeUxhYmVsID0gKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50ID0+IHtcclxuICAgIC8qIHRzbGludDplbmFibGU6dmFyaWFibGUtbmFtZSAqL1xyXG4gICAgaWYgKHByb3BzLnJldmlld2VkQnlJbml0aWFscyAmJiBwcm9wcy5yZXZpZXdlZEJ5U3VybmFtZSB8fCBwcm9wcy5pc0F1dG9DaGVja2VkKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPCBzcGFuIGNsYXNzTmFtZT0nZGltLXRleHQgc21hbGwtdGV4dCcgPlxyXG4gICAgICAgICAgICAgICAge3Byb3BzLmlzQXV0b0NoZWNrZWQgPyBsb2NhbGVTdG9yZS5pbnN0YW5jZS5cclxuICAgICAgICAgICAgICAgICAgICBUcmFuc2xhdGVUZXh0KCd0ZWFtLW1hbmFnZW1lbnQuZXhhbWluZXItd29ya2xpc3QucmVzcG9uc2UtZGF0YS5hdXRvLXJldmlld2VkJykgOiBvcGVyYXRpb25Nb2RlSGVscGVyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMucmV2aWV3ZWRCeUlkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uTW9kZUhlbHBlci5hdXRob3Jpc2VkRXhhbWluZXJSb2xlSWQgPT09XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMucmV2aWV3ZWRCeUlkID9cclxuICAgICAgICAgICAgICAgICAgICBsb2NhbGVTdG9yZS5pbnN0YW5jZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgVHJhbnNsYXRlVGV4dCgndGVhbS1tYW5hZ2VtZW50LmV4YW1pbmVyLXdvcmtsaXN0LnJlc3BvbnNlLWRhdGEucmV2aWV3ZWQtYnktbWUnKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nRm9ybWF0SGVscGVyLmdldEZvcm1hdHRlZEV4YW1pbmVyTmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMucmV2aWV3ZWRCeUluaXRpYWxzLCBwcm9wcy5yZXZpZXdlZEJ5U3VybmFtZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0ID0gUmV2aWV3ZWRCeUxhYmVsO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9zaGFyZWQvcmV2aWV3ZWRieWxhYmVsLnRzeCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBU0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 1234:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/components/worklist/shared/samplelabel.tsx ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../../../components/utility/enums */ 225);\r\n/**\r\n * Stateless sample label component\r\n * @param props\r\n */\r\n/* tslint:disable:variable-name */\r\nvar SampleLabel = function (props) {\r\n    /* tslint:enable:variable-name */\r\n    if (props.sampleCommentId === enums.SampleReviewComment.None) {\r\n        return null;\r\n    }\r\n    else {\r\n        return (React.createElement(\"span\", { className: 'dim-text small-text' }, localeStore.instance.\r\n            TranslateText('team-management.response.supervisor-sampling-comments.' + props.sampleCommentId)));\r\n    }\r\n};\r\nmodule.exports = SampleLabel;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9zYW1wbGVsYWJlbC50c3g/ZDJkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgUHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvdXRpbGl0eS9lbnVtcycpO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIHNhbXBsZUNvbW1lbnRJZDogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogU3RhdGVsZXNzIHNhbXBsZSBsYWJlbCBjb21wb25lbnRcclxuICogQHBhcmFtIHByb3BzXHJcbiAqL1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcbmNvbnN0IFNhbXBsZUxhYmVsID0gKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50ID0+IHtcclxuLyogdHNsaW50OmVuYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcbiAgICBpZiAocHJvcHMuc2FtcGxlQ29tbWVudElkID09PSBlbnVtcy5TYW1wbGVSZXZpZXdDb21tZW50Lk5vbmUpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPCBzcGFuIGNsYXNzTmFtZT0gJ2RpbS10ZXh0IHNtYWxsLXRleHQnID5cclxuICAgICAgICAgICAgICAgIHsgbG9jYWxlU3RvcmUuaW5zdGFuY2UuXHJcbiAgICAgICAgICAgICAgICAgICAgVHJhbnNsYXRlVGV4dCgndGVhbS1tYW5hZ2VtZW50LnJlc3BvbnNlLnN1cGVydmlzb3Itc2FtcGxpbmctY29tbWVudHMuJyArIHByb3BzLnNhbXBsZUNvbW1lbnRJZClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgPSBTYW1wbGVMYWJlbDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3NhbXBsZWxhYmVsLnRzeCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBRUE7QUFDQTtBQU1BOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFHQTtBQUlBO0FBQ0E7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 1235:
/* no static exports found */
/* all exports used */
/*!***************************************************************************!*\
  !*** ./src/components/worklist/shared/standardisationworklistmessage.tsx ***!
  \***************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar StandardisationWorkListMessage = /** @class */ (function (_super) {\r\n    __extends(StandardisationWorkListMessage, _super);\r\n    /**\r\n     * Constructor for StandardisationWorklistMessage\r\n     * @param props\r\n     */\r\n    function StandardisationWorkListMessage(props) {\r\n        return _super.call(this, props, null) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    StandardisationWorkListMessage.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: 'grid-holder grid-view' },\r\n            React.createElement(\"div\", { className: 'grid-wrapper', id: this.props.id },\r\n                React.createElement(\"div\", { className: 'message-box worklist-msgs wait-advise-msg' },\r\n                    React.createElement(\"h3\", { className: 'bolder msg-title' }, localeStore.instance.TranslateText('marking.worklist.not-approved-helper.header')),\r\n                    React.createElement(\"p\", { className: 'message-body' }, \" \"),\r\n                    React.createElement(\"p\", null, localeStore.instance.TranslateText('marking.worklist.not-approved-helper.body-line-1')),\r\n                    React.createElement(\"p\", null,\r\n                        localeStore.instance.TranslateText('marking.worklist.not-approved-helper.body-line-2'),\r\n                        \" \"),\r\n                    React.createElement(\"p\", null)))));\r\n    };\r\n    return StandardisationWorkListMessage;\r\n}(pureRenderComponent));\r\nmodule.exports = StandardisationWorkListMessage;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9zdGFuZGFyZGlzYXRpb253b3JrbGlzdG1lc3NhZ2UudHN4P2I4YmIiXSwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IEJ1c3lJbmRpY2F0b3IgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2J1c3lpbmRpY2F0b3IvYnVzeWluZGljYXRvcicpO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxufVxyXG5cclxuY2xhc3MgU3RhbmRhcmRpc2F0aW9uV29ya0xpc3RNZXNzYWdlIGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgU3RhbmRhcmRpc2F0aW9uV29ya2xpc3RNZXNzYWdlXHJcbiAgICAgKiBAcGFyYW0gcHJvcHNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIG51bGwpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBjb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2dyaWQtaG9sZGVyIGdyaWQtdmlldyc+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZ3JpZC13cmFwcGVyJyBpZCA9IHt0aGlzLnByb3BzLmlkfT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWVzc2FnZS1ib3ggd29ya2xpc3QtbXNncyB3YWl0LWFkdmlzZS1tc2cnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9J2JvbGRlciBtc2ctdGl0bGUnPntsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJ21hcmtpbmcud29ya2xpc3Qubm90LWFwcHJvdmVkLWhlbHBlci5oZWFkZXInKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9oMz5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9J21lc3NhZ2UtYm9keSc+IDwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cD57bG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5ub3QtYXBwcm92ZWQtaGVscGVyLmJvZHktbGluZS0xJykgfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cD57bG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5ub3QtYXBwcm92ZWQtaGVscGVyLmJvZHktbGluZS0yJykgfSA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gU3RhbmRhcmRpc2F0aW9uV29ya0xpc3RNZXNzYWdlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9zaGFyZWQvc3RhbmRhcmRpc2F0aW9ud29ya2xpc3RtZXNzYWdlLnRzeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFBQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUtBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 1236:
/* no static exports found */
/* all exports used */
/*!********************************************************************!*\
  !*** ./src/components/worklist/shared/supervisorreviewcomment.tsx ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * Stateless supervisor review comment component\r\n * @param props\r\n */\r\n/* tslint:disable:variable-name */\r\nvar SupervisorReviewComment = function (props) {\r\n    /* tslint:enable:variable-name */\r\n    if (props.reviewCommentId && props.reviewCommentId > 0) {\r\n        return (React.createElement(\"span\", { className: 'dim-text small-text' }, localeStore.instance.TranslateText('team-management.response.review-comments.' + props.reviewCommentId)));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\nmodule.exports = SupervisorReviewComment;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9zdXBlcnZpc29ycmV2aWV3Y29tbWVudC50c3g/MjkyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcclxuXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcbiAgICByZXZpZXdDb21tZW50SWQ6IGVudW1zLlNldEFzUmV2aWV3ZWRDb21tZW50O1xyXG59XHJcblxyXG4vKipcclxuICogU3RhdGVsZXNzIHN1cGVydmlzb3IgcmV2aWV3IGNvbW1lbnQgY29tcG9uZW50XHJcbiAqIEBwYXJhbSBwcm9wc1xyXG4gKi9cclxuLyogdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZSAqL1xyXG5jb25zdCBTdXBlcnZpc29yUmV2aWV3Q29tbWVudCA9IChwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCA9PiB7XHJcbiAgICAvKiB0c2xpbnQ6ZW5hYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuICAgIGlmIChwcm9wcy5yZXZpZXdDb21tZW50SWQgJiYgcHJvcHMucmV2aWV3Q29tbWVudElkID4gMCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDwgc3BhbiBjbGFzc05hbWU9J2RpbS10ZXh0IHNtYWxsLXRleHQnID5cclxuICAgICAgICAgICAgICAgIHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCd0ZWFtLW1hbmFnZW1lbnQucmVzcG9uc2UucmV2aWV3LWNvbW1lbnRzLicgKyBwcm9wcy5yZXZpZXdDb21tZW50SWQpfVxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgPSBTdXBlcnZpc29yUmV2aWV3Q29tbWVudDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3N1cGVydmlzb3JyZXZpZXdjb21tZW50LnRzeCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFPQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 1237:
/* no static exports found */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/components/worklist/shared/totalmarktile.tsx ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar totalMark = __webpack_require__(/*! ./totalmark */ 390);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar markingstore = __webpack_require__(/*! ../../../stores/marking/markingstore */ 236);\r\n/**\r\n * React component\r\n * @param {Props} props\r\n */\r\nvar TotalMarkTile = /** @class */ (function (_super) {\r\n    __extends(TotalMarkTile, _super);\r\n    /**\r\n     * Constructor for TotalMarkTile\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function TotalMarkTile(props, state) {\r\n        return _super.call(this, props) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    TotalMarkTile.prototype.render = function () {\r\n        if (this.props.isNonNumericMark || this.props.markingProgress === 0) {\r\n            return null;\r\n        }\r\n        var hasComplexOptionality = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ComplexOptionality, markingstore.instance.selectedQIGMarkSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        var totalprogress = this.props.markingProgress;\r\n        var result = React.createElement(\"span\", null);\r\n        var totalmark;\r\n        //Hide totalmark based on cc value and totalprogress.\r\n        if (hasComplexOptionality && totalprogress < 100) {\r\n            totalmark = '...';\r\n            result = (React.createElement(\"span\", { title: this.getTranslated('marking.worklist.complex-optionality.total-marks'), className: 'large-text', id: 'totalMark_' + this.props.id }, totalmark));\r\n        }\r\n        else {\r\n            totalmark = this.props.totalMark.toLocaleString(this.currentLocale);\r\n            result = (React.createElement(\"span\", { className: 'large-text', id: 'totalMark_' + this.props.id }, totalmark));\r\n        }\r\n        return (React.createElement(\"p\", { className: 'resp-mark small-text' },\r\n            React.createElement(\"span\", { className: 'dim-text' }, this.getTranslated('marking.worklist.list-view-column-headers.total-mark') + ':'),\r\n            result));\r\n    };\r\n    return TotalMarkTile;\r\n}(totalMark));\r\nmodule.exports = TotalMarkTile;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC90b3RhbG1hcmt0aWxlLnRzeD9kM2EzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgdG90YWxNYXJrID0gcmVxdWlyZSgnLi90b3RhbG1hcmsnKTtcclxuaW1wb3J0IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc0hlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWMvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWNzaGVscGVyJyk7XHJcbmltcG9ydCBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NOYW1lcyA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWMvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWNzbmFtZXMnKTtcclxuaW1wb3J0IG1hcmtpbmdzdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9tYXJraW5nL21hcmtpbmdzdG9yZScpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcblxyXG4vKipcclxuICogUmVhY3QgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7UHJvcHN9IHByb3BzXHJcbiAqL1xyXG5jbGFzcyBUb3RhbE1hcmtUaWxlIGV4dGVuZHMgdG90YWxNYXJrIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ29uc3RydWN0b3IgZm9yIFRvdGFsTWFya1RpbGVcclxuXHQgKiBAcGFyYW0gcHJvcHNcclxuXHQgKiBAcGFyYW0gc3RhdGVcclxuXHQgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBhbnksIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgY29tcG9uZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5pc05vbk51bWVyaWNNYXJrIHx8IHRoaXMucHJvcHMubWFya2luZ1Byb2dyZXNzID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgaGFzQ29tcGxleE9wdGlvbmFsaXR5ID0gY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzSGVscGVyLmdldENoYXJhY3RlcmlzdGljVmFsdWUoXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzLkNvbXBsZXhPcHRpb25hbGl0eSxcclxuICAgICAgICAgICAgbWFya2luZ3N0b3JlLmluc3RhbmNlLnNlbGVjdGVkUUlHTWFya1NjaGVtZUdyb3VwSWQpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJyA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICBsZXQgdG90YWxwcm9ncmVzcyA9IHRoaXMucHJvcHMubWFya2luZ1Byb2dyZXNzO1xyXG4gICAgICAgIGxldCByZXN1bHQgPSA8c3Bhbj48L3NwYW4+O1xyXG4gICAgICAgIGxldCB0b3RhbG1hcms6IHN0cmluZztcclxuICAgICAgICAvL0hpZGUgdG90YWxtYXJrIGJhc2VkIG9uIGNjIHZhbHVlIGFuZCB0b3RhbHByb2dyZXNzLlxyXG4gICAgICAgIGlmIChoYXNDb21wbGV4T3B0aW9uYWxpdHkgJiYgdG90YWxwcm9ncmVzcyA8IDEwMCkge1xyXG4gICAgICAgICAgICB0b3RhbG1hcmsgPSAnLi4uJztcclxuICAgICAgICAgICAgcmVzdWx0ID0gKDxzcGFuIHRpdGxlPXt0aGlzLmdldFRyYW5zbGF0ZWQoJ21hcmtpbmcud29ya2xpc3QuY29tcGxleC1vcHRpb25hbGl0eS50b3RhbC1tYXJrcycpfSBjbGFzc05hbWU9J2xhcmdlLXRleHQnXHJcbiAgICAgICAgICAgICAgICBpZD17J3RvdGFsTWFya18nICsgdGhpcy5wcm9wcy5pZH0+e3RvdGFsbWFya308L3NwYW4+KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0b3RhbG1hcmsgPSB0aGlzLnByb3BzLnRvdGFsTWFyay50b0xvY2FsZVN0cmluZyh0aGlzLmN1cnJlbnRMb2NhbGUpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSAoPHNwYW4gY2xhc3NOYW1lPSdsYXJnZS10ZXh0JyBpZD17J3RvdGFsTWFya18nICsgdGhpcy5wcm9wcy5pZH0+e3RvdGFsbWFya308L3NwYW4+KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICg8cCBjbGFzc05hbWU9J3Jlc3AtbWFyayBzbWFsbC10ZXh0Jz5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdkaW0tdGV4dCc+e3RoaXMuZ2V0VHJhbnNsYXRlZCgnbWFya2luZy53b3JrbGlzdC5saXN0LXZpZXctY29sdW1uLWhlYWRlcnMudG90YWwtbWFyaycpICsgJzonfTwvc3Bhbj5cclxuICAgICAgICAgICAge3Jlc3VsdH1cclxuICAgICAgICA8L3A+KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gVG90YWxNYXJrVGlsZTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC90b3RhbG1hcmt0aWxlLnRzeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTs7O0FBR0E7QUFDQTtBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 1238:
/* no static exports found */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/components/worklist/targetsummary/liveorpooledremarktargetitem.tsx ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar TargetDetails = __webpack_require__(/*! ./targetdetails */ 1239);\r\nvar TargetItem = __webpack_require__(/*! ./targetitem */ 595);\r\nvar ProgressIndicator = __webpack_require__(/*! ../../utility/progressindicator/circularprogressindicator */ 1198);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar LiveOrPooledRemarkTargetItem = /** @class */ (function (_super) {\r\n    __extends(LiveOrPooledRemarkTargetItem, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function LiveOrPooledRemarkTargetItem(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.onTargetClickFun = _this.onTargetClick.bind(_this, _this.props.target.markingModeID, _this.props.remarkRequestTypeID, _this.props.isDirectedRemark);\r\n        var markingModeName;\r\n        if (_this.props.target.markingModeID === enums.MarkingMode.Remarking) {\r\n            _this.markingModeName = enums.RemarkRequestType[_this.props.remarkRequestTypeID];\r\n        }\r\n        else {\r\n            _this.markingModeName = enums.MarkingMode[_this.props.target.markingModeID];\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    LiveOrPooledRemarkTargetItem.prototype.render = function () {\r\n        var idString = this.props.id;\r\n        //If the maximum remarking target is 0, then we don't have to show the particular remark tab\r\n        if (this.props.target.maximumMarkingLimit === 0 && this.props.remarkRequestTypeID !== undefined) {\r\n            return null;\r\n        }\r\n        else {\r\n            return (React.createElement(\"li\", { id: 'target_' + this.markingModeName, className: classNames('panel', {\r\n                    'completed': (this.props.target.isTargetCompleted || this.props.isOverAllTargetCompleted),\r\n                    'disabled': this.props.isDisabled, 'open': this.props.isSelected\r\n                }), onClick: this.onTargetClickFun },\r\n                !this.props.isAggregatedTargetsCCEnabled ? this.renderTargetIndicator() :\r\n                    React.createElement(\"span\", { className: 'menu-count' },\r\n                        React.createElement(\"span\", { className: 'sprite-icon pencil-icon' })),\r\n                this.renderProgressIndicatorSection(idString),\r\n                this.renderTickSection(),\r\n                React.createElement(\"a\", { href: 'javascript:void(0)', id: this.markingModeName + '_title', className: 'left-menu-link panel-link', title: this.markingModeName === enums.getEnumString(enums.MarkingMode, enums.MarkingMode.LiveMarking) ?\r\n                        localeStore.instance.TranslateText('generic.marking-modes.Marking') :\r\n                        localeStore.instance.TranslateText('generic.marking-modes.' + this.markingModeName) },\r\n                    React.createElement(\"span\", { id: this.markingModeName + '_menutext', className: 'menu-text large-text' }, this.markingModeName === enums.getEnumString(enums.MarkingMode, enums.MarkingMode.LiveMarking) ?\r\n                        localeStore.instance.TranslateText('generic.marking-modes.Marking') :\r\n                        localeStore.instance.TranslateText('generic.marking-modes.' + this.markingModeName)),\r\n                    this.renderRemaingDaysSection(),\r\n                    React.createElement(\"div\", { className: 'menu-text-small small-text' },\r\n                        React.createElement(\"span\", { id: this.markingModeName + '_target_date', className: 'menu-label' }, localeStore.instance.TranslateText('marking.worklist.left-panel.target' +\r\n                            ((this.props.target.isTargetCompleted || this.props.isOverAllTargetCompleted)\r\n                                ? '-completed-date-label' : '-date-label'))),\r\n                        React.createElement(\"span\", { id: this.markingModeName + '_targetCompleteDate', className: 'date-text' }, this.getFormattedMarkingCompletionDate()))),\r\n                this.renderTargetDetails()));\r\n        }\r\n    };\r\n    /**\r\n     * Render Target details\r\n     */\r\n    LiveOrPooledRemarkTargetItem.prototype.renderTargetDetails = function () {\r\n        if (this.props.target.markingModeID === enums.MarkingMode.LiveMarking) {\r\n            return (React.createElement(TargetDetails, { id: this.props.id, key: this.props.id, markingTargetsSummary: this.props.target, selectedLanguage: this.props.selectedLanguage, renderdOn: this.props.renderedOn, directedRemarkTarget: this.props.directedRemarkTarget, isTeamManagementMode: this.props.isTeamManagementMode }));\r\n        }\r\n    };\r\n    /**\r\n     * Render the Target Status section, If target is not completed then display open response count for progress wheel animation\r\n     */\r\n    LiveOrPooledRemarkTargetItem.prototype.renderTargetIndicator = function () {\r\n        if ((this.props.target.isCurrentTarget || this.props.target.markingModeID === enums.MarkingMode.Remarking)\r\n            && !this.props.isDisabled && (!this.props.target.isTargetCompleted && !this.props.isOverAllTargetCompleted)) {\r\n            return React.createElement(\"span\", { id: this.markingModeName + '_status', className: 'menu-count graph-transition' }, this.getTotalOpenResponsesCount());\r\n        }\r\n        else if (!this.props.target.isTargetCompleted && !this.props.isOverAllTargetCompleted) {\r\n            return (React.createElement(\"span\", { id: this.markingModeName + '_status', className: 'menu-count' },\r\n                React.createElement(\"span\", { id: this.markingModeName + '_dotindicator', className: 'sprite-icon dot-dot-dot-icon' })));\r\n        }\r\n    };\r\n    /**\r\n     * Render the tick section\r\n     * @returns\r\n     */\r\n    LiveOrPooledRemarkTargetItem.prototype.renderTickSection = function () {\r\n        if (this.props.target.isTargetCompleted || this.props.isOverAllTargetCompleted) {\r\n            return (React.createElement(\"span\", { id: this.markingModeName + '_status', className: 'menu-count-completed' },\r\n                React.createElement(\"span\", { className: 'sprite-icon tick-circle-icon' })));\r\n        }\r\n    };\r\n    /**\r\n     * Renders the progress indicator section\r\n     * @param idString\r\n     */\r\n    LiveOrPooledRemarkTargetItem.prototype.renderProgressIndicatorSection = function (idString) {\r\n        if (!this.props.isOverAllTargetCompleted &&\r\n            !this.props.target.isTargetCompleted &&\r\n            this.props.isSelected &&\r\n            !this.props.isAggregatedTargetsCCEnabled) {\r\n            return (React.createElement(\"div\", { className: 'radial-progress-holder animated', id: this.markingModeName + '_progress' },\r\n                this.renderProgressIndicator(),\r\n                this.renderProgressIndicatorContents(idString)));\r\n        }\r\n    };\r\n    /**\r\n     * Render the progress indicator contents, If target is completed no need to display this section\r\n     */\r\n    LiveOrPooledRemarkTargetItem.prototype.renderProgressIndicatorContents = function (idString) {\r\n        var directedRemarkResponseCountList = this.getDirectedRemarkRequestProgress();\r\n        var totalResponsesCount = this.props.target.examinerProgress.closedResponsesCount +\r\n            +this.props.target.examinerProgress.pendingResponsesCount\r\n            + this.props.target.examinerProgress.openResponsesCount\r\n            + (isNaN(this.props.target.examinerProgress.atypicalOpenResponsesCount) ?\r\n                0 : this.props.target.examinerProgress.atypicalOpenResponsesCount)\r\n            + (isNaN(this.props.target.examinerProgress.atypicalPendingResponsesCount) ?\r\n                0 : this.props.target.examinerProgress.atypicalPendingResponsesCount)\r\n            + (isNaN(this.props.target.examinerProgress.atypicalClosedResponsesCount) ?\r\n                0 : this.props.target.examinerProgress.atypicalClosedResponsesCount)\r\n            + directedRemarkResponseCountList[0]\r\n            + directedRemarkResponseCountList[1]\r\n            + directedRemarkResponseCountList[2];\r\n        // Rendering over allocation\r\n        var overAllocationIndicator = this.renderOverAllocationIndicator(this.props.target, totalResponsesCount);\r\n        if (!this.props.target.isTargetCompleted && !this.props.isOverAllTargetCompleted) {\r\n            return React.createElement(\"div\", { className: 'inset-text' },\r\n                overAllocationIndicator,\r\n                React.createElement(\"div\", { id: 'targetSummaryCount' + idString, className: 'large-text' },\r\n                    this.props.target.examinerProgress.closedResponsesCount\r\n                        + this.props.target.examinerProgress.pendingResponsesCount\r\n                        + (isNaN(this.props.target.examinerProgress.atypicalPendingResponsesCount) ?\r\n                            0 : this.props.target.examinerProgress.atypicalPendingResponsesCount)\r\n                        + (isNaN(this.props.target.examinerProgress.atypicalClosedResponsesCount) ?\r\n                            0 : this.props.target.examinerProgress.atypicalClosedResponsesCount)\r\n                        + directedRemarkResponseCountList[1]\r\n                        + directedRemarkResponseCountList[2],\r\n                    \"/\",\r\n                    (this.props.target.maximumMarkingLimit)),\r\n                React.createElement(\"div\", { className: 'small-text', id: 'submitted-text' + idString }, localeStore.instance.TranslateText('marking.worklist.left-panel.submitted-count-label')));\r\n        }\r\n    };\r\n    /**\r\n     * Renders the over allocation indicator in the progress summary\r\n     * @param target\r\n     * @param totalResponsesCount\r\n     */\r\n    LiveOrPooledRemarkTargetItem.prototype.renderOverAllocationIndicator = function (target, totalResponsesCount) {\r\n        var currentlyInOverAllocation = target.overAllocationCount > 0 ?\r\n            totalResponsesCount >= target.maximumMarkingLimit : false;\r\n        return currentlyInOverAllocation ?\r\n            React.createElement(\"span\", { className: 'sprite-icon lock-open-icon', title: localeStore.instance.TranslateText('marking.worklist.left-panel.over-allocation-tooltip') }) : null;\r\n    };\r\n    /**\r\n     * Render the progress indicator, If target is completed no need to display this section\r\n     */\r\n    LiveOrPooledRemarkTargetItem.prototype.renderProgressIndicator = function () {\r\n        if (!this.props.target.isTargetCompleted && !this.props.isOverAllTargetCompleted) {\r\n            return React.createElement(ProgressIndicator, { size: 104, startDegree: 0, endDegree: 360, trackWidth: 6, trackStyle: 'target-track-style', progress: this.getProgressDetails() });\r\n        }\r\n    };\r\n    /**\r\n     * Get the remaining days section, If target is completed no need to display the section\r\n     * @param markingTarget\r\n     */\r\n    LiveOrPooledRemarkTargetItem.prototype.renderRemaingDaysSection = function () {\r\n        if (!this.props.target.isTargetCompleted && !this.props.isOverAllTargetCompleted) {\r\n            return React.createElement(\"span\", { id: this.markingModeName + '_targetremainingDays', className: 'menu-highlight-text' },\r\n                this.remainingDaysForMarkingCompletion(),\r\n                ' ' + localeStore.instance.TranslateText('marking.worklist.left-panel.days-until-target'));\r\n        }\r\n        else {\r\n            return React.createElement(\"span\", { id: this.markingModeName + '_targetremainingDays', className: 'menu-highlight-text' }, localeStore.instance.TranslateText('marking.worklist.left-panel.target-completed'));\r\n        }\r\n    };\r\n    /**\r\n     * Method will return an array of progress items.\r\n     */\r\n    LiveOrPooledRemarkTargetItem.prototype.getProgressDetails = function () {\r\n        var progressItems = new Array();\r\n        var directedRemarkResponseCountList = this.getDirectedRemarkRequestProgress();\r\n        var total = this.props.target.maximumMarkingLimit;\r\n        // If there are any responses, then colour should be applied to the progress wheel\r\n        if (total > 0) {\r\n            var closedResponsesCount = 0;\r\n            var inGraceResponsesCount = 0;\r\n            var openResponsesCount = 0;\r\n            // Determining the closed responses count\r\n            closedResponsesCount = this.props.target.examinerProgress.closedResponsesCount\r\n                + (isNaN(this.props.target.examinerProgress.atypicalClosedResponsesCount) ?\r\n                    0 : this.props.target.examinerProgress.atypicalClosedResponsesCount)\r\n                + directedRemarkResponseCountList[2];\r\n            // If closed responses count doesn't meet the actual marking target, then determine the in-grace responses count\r\n            if (closedResponsesCount < total) {\r\n                // Determining the in-grace responses count\r\n                inGraceResponsesCount = this.props.target.examinerProgress.pendingResponsesCount\r\n                    + (isNaN(this.props.target.examinerProgress.atypicalPendingResponsesCount) ?\r\n                        0 : this.props.target.examinerProgress.atypicalPendingResponsesCount)\r\n                    + directedRemarkResponseCountList[1];\r\n                // If the in-grace + closed responses count doesn't meet the actual marking target,\r\n                // then determine the open responses count\r\n                if ((inGraceResponsesCount + closedResponsesCount) < total) {\r\n                    // Determining the open responses count\r\n                    openResponsesCount = this.props.target.examinerProgress.openResponsesCount\r\n                        + (isNaN(this.props.target.examinerProgress.atypicalOpenResponsesCount) ?\r\n                            0 : this.props.target.examinerProgress.atypicalOpenResponsesCount)\r\n                        + directedRemarkResponseCountList[0];\r\n                    // If the open + in-grace + closed responses count crosses the actual marking target,\r\n                    // then the open responses count should be the difference between the marking target limit\r\n                    // and the sum of closed and in-grace responses\r\n                    if ((openResponsesCount + inGraceResponsesCount + closedResponsesCount) > total) {\r\n                        openResponsesCount = total - (closedResponsesCount + inGraceResponsesCount);\r\n                    }\r\n                }\r\n                else {\r\n                    // If the in-grace + closed responses count crosses the actual marking target,\r\n                    // then the in-grace responses count should be the difference between the marking target limit\r\n                    // and the count of closed responses\r\n                    inGraceResponsesCount = total - closedResponsesCount;\r\n                }\r\n            }\r\n            else {\r\n                // If the closed responses count crosses the actual marking target,\r\n                // then the closed responses count should be the set as the marking target limit\r\n                closedResponsesCount = total;\r\n            }\r\n            // Determining the closed responses percentage\r\n            var closedPercentage = 100 / total * closedResponsesCount;\r\n            // Determining the pending responses percentage\r\n            var inGracePercentage = 100 / total * inGraceResponsesCount;\r\n            // Determining the open responses percentage\r\n            var openPercentage = 100 / total * openResponsesCount;\r\n            if (closedPercentage > 0) {\r\n                progressItems.push({ progress: closedPercentage, className: 'target-progress-style' });\r\n            }\r\n            if (inGracePercentage > 0) {\r\n                progressItems.push({ progress: inGracePercentage, className: 'target-progress-style2' });\r\n            }\r\n            if (openPercentage > 0) {\r\n                progressItems.push({ progress: openPercentage, className: 'target-progress-style1' });\r\n            }\r\n        }\r\n        return progressItems;\r\n    };\r\n    /**\r\n     * Get directed remark request progress count\r\n     */\r\n    LiveOrPooledRemarkTargetItem.prototype.getDirectedRemarkRequestProgress = function () {\r\n        var directedRemarkTargets = this.props.directedRemarkTarget;\r\n        var directedRemarkResponseCountList = [];\r\n        var open = 0;\r\n        var closed = 0;\r\n        var inGrace = 0;\r\n        if (directedRemarkTargets != null && directedRemarkTargets !== undefined) {\r\n            var directedRemarkTargetsList = directedRemarkTargets.map(function (markingTarget) {\r\n                if (markingTarget.markingModeID === enums.MarkingMode.Remarking\r\n                    && markingTarget.examinerProgress.isDirectedRemark === true) {\r\n                    open += markingTarget.examinerProgress.openResponsesCount;\r\n                    inGrace += markingTarget.examinerProgress.pendingResponsesCount;\r\n                    closed += markingTarget.examinerProgress.closedResponsesCount;\r\n                }\r\n            });\r\n        }\r\n        directedRemarkResponseCountList.push(open);\r\n        directedRemarkResponseCountList.push(inGrace);\r\n        directedRemarkResponseCountList.push(closed);\r\n        return directedRemarkResponseCountList;\r\n    };\r\n    /**\r\n     * Method to return the total open responses count\r\n     */\r\n    LiveOrPooledRemarkTargetItem.prototype.getTotalOpenResponsesCount = function () {\r\n        var directedRemarkResponseCountList = this.getDirectedRemarkRequestProgress();\r\n        var openResponseCount = 0;\r\n        openResponseCount += this.props.target.examinerProgress.openResponsesCount\r\n            + (isNaN(this.props.target.examinerProgress.atypicalOpenResponsesCount) ?\r\n                0 : this.props.target.examinerProgress.atypicalOpenResponsesCount)\r\n            + directedRemarkResponseCountList[0];\r\n        return openResponseCount;\r\n    };\r\n    return LiveOrPooledRemarkTargetItem;\r\n}(TargetItem));\r\nmodule.exports = LiveOrPooledRemarkTargetItem;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1239:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/components/worklist/targetsummary/targetdetails.tsx ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar WorklistType = __webpack_require__(/*! ./worklisttype */ 1240);\r\nvar sortHelper = __webpack_require__(/*! ../../../utility/sorting/sorthelper */ 272);\r\nvar comparerList = __webpack_require__(/*! ../../../utility/sorting/sortbase/comparerlist */ 262);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\n/**\r\n * Class for the Target Details => Progress Graph, Marking Name + Target section and the worklist items for the target.\r\n */\r\nvar TargetDetails = /** @class */ (function (_super) {\r\n    __extends(TargetDetails, _super);\r\n    /**\r\n     * Constructor for Target Details\r\n     * @param props\r\n     */\r\n    function TargetDetails(props) {\r\n        return _super.call(this, props, null) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    TargetDetails.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: 'panel-content clearfix', \"aria-hidden\": 'true' }, this.renderWorklistTypes()));\r\n    };\r\n    /**\r\n     * Render worklist types\r\n     */\r\n    TargetDetails.prototype.renderWorklistTypes = function () {\r\n        if (this.props.markingTargetsSummary.markingModeID === enums.MarkingMode.LiveMarking) {\r\n            var directedRemarkRequestRenderer = this.renderDirectedRemarkWorklistType();\r\n            return (React.createElement(\"ul\", { className: 'shift-right' },\r\n                React.createElement(WorklistType, { id: 'worklist_live', key: 'worklist_live', targetCount: this.props.markingTargetsSummary.examinerProgress.openResponsesCount, worklistType: enums.WorklistType.live, remarkRequestType: enums.RemarkRequestType.Unknown, isDirectedRemark: false, selectedLanguage: this.props.selectedLanguage, isTeamManagementMode: this.props.isTeamManagementMode }),\r\n                React.createElement(WorklistType, { id: 'worklist_atypical', key: 'worklist_atypical', targetCount: this.props.markingTargetsSummary.examinerProgress.atypicalOpenResponsesCount, worklistType: enums.WorklistType.atypical, remarkRequestType: enums.RemarkRequestType.Unknown, isDirectedRemark: false, selectedLanguage: this.props.selectedLanguage, isTeamManagementMode: this.props.isTeamManagementMode }),\r\n                directedRemarkRequestRenderer));\r\n        }\r\n        else {\r\n            return (React.createElement(\"ul\", { className: 'shift-right' },\r\n                React.createElement(WorklistType, { id: 'worklist_' + this.props.id, key: 'worklist_key_' + this.props.id, targetCount: this.props.markingTargetsSummary.examinerProgress.openResponsesCount, worklistType: this.props.markingTargetsSummary.markingModeID, remarkRequestType: enums.RemarkRequestType.Unknown, isDirectedRemark: false, selectedLanguage: this.props.selectedLanguage, isTeamManagementMode: this.props.isTeamManagementMode })));\r\n        }\r\n    };\r\n    /**\r\n     * Render directed remark worklist type\r\n     */\r\n    TargetDetails.prototype.renderDirectedRemarkWorklistType = function () {\r\n        var _this = this;\r\n        var directedRemarkTargets = this.props.directedRemarkTarget;\r\n        if (directedRemarkTargets != null && directedRemarkTargets !== undefined) {\r\n            if (directedRemarkTargets !== undefined && directedRemarkTargets.count() > 0) {\r\n                // Sort the directed remark target based on their locale string\r\n                directedRemarkTargets = Immutable.List(sortHelper.sort(directedRemarkTargets.toArray(), comparerList.remarkRequestTypeComparer));\r\n                var directedRemarkTargetsList = directedRemarkTargets.map(function (markingTarget) {\r\n                    // Get the total response count\r\n                    var responseCount = markingTarget.examinerProgress.openResponsesCount\r\n                        + markingTarget.examinerProgress.pendingResponsesCount\r\n                        + markingTarget.examinerProgress.closedResponsesCount;\r\n                    // Only if open + closed + pending response count is > 0 then display the remark request type\r\n                    if (responseCount > 0) {\r\n                        return (React.createElement(WorklistType, { id: 'worklist_directed_remark_' + enums.RemarkRequestType[markingTarget.remarkRequestTypeID], key: 'worklist_directed_remark_' + enums.RemarkRequestType[markingTarget.remarkRequestTypeID], targetCount: markingTarget.examinerProgress.openResponsesCount, remarkRequestType: markingTarget.remarkRequestTypeID, worklistType: enums.WorklistType.directedRemark, isDirectedRemark: true, selectedLanguage: _this.props.selectedLanguage, isTeamManagementMode: _this.props.isTeamManagementMode }));\r\n                    }\r\n                });\r\n                return directedRemarkTargetsList;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    return TargetDetails;\r\n}(pureRenderComponent));\r\nmodule.exports = TargetDetails;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3RhcmdldHN1bW1hcnkvdGFyZ2V0ZGV0YWlscy50c3g/M2E5NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxu77u/aW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuLyogdHNsaW50OmVuYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBtYXJraW5nVGFyZ2V0U3VtbWFyeSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy93b3JrbGlzdC90eXBpbmdzL21hcmtpbmd0YXJnZXRzdW1tYXJ5Jyk7XHJcbmltcG9ydCBXb3JrbGlzdFR5cGUgPSByZXF1aXJlKCcuL3dvcmtsaXN0dHlwZScpO1xyXG5pbXBvcnQgdGFyZ2V0U3VtbWFyeVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL3dvcmtsaXN0L3RhcmdldHN1bW1hcnlzdG9yZScpO1xyXG5pbXBvcnQgc29ydEhlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvc29ydGluZy9zb3J0aGVscGVyJyk7XHJcbmltcG9ydCBjb21wYXJlckxpc3QgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L3NvcnRpbmcvc29ydGJhc2UvY29tcGFyZXJsaXN0Jyk7XHJcbmltcG9ydCBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIGEgY29tcG9uZW50XHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBQcm9wc0Jhc2UsIExvY2FsZVNlbGVjdGlvbkJhc2Uge1xyXG4gICAgbWFya2luZ1RhcmdldHNTdW1tYXJ5OiBtYXJraW5nVGFyZ2V0U3VtbWFyeTtcclxuICAgIHJlbmRlcmRPbjogbnVtYmVyO1xyXG4gICAgZGlyZWN0ZWRSZW1hcmtUYXJnZXQ/OiBJbW11dGFibGUuTGlzdDxtYXJraW5nVGFyZ2V0U3VtbWFyeT47XHJcbiAgICBpc1RlYW1NYW5hZ2VtZW50TW9kZTogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENsYXNzIGZvciB0aGUgVGFyZ2V0IERldGFpbHMgPT4gUHJvZ3Jlc3MgR3JhcGgsIE1hcmtpbmcgTmFtZSArIFRhcmdldCBzZWN0aW9uIGFuZCB0aGUgd29ya2xpc3QgaXRlbXMgZm9yIHRoZSB0YXJnZXQuXHJcbiAqL1xyXG5jbGFzcyBUYXJnZXREZXRhaWxzIGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgVGFyZ2V0IERldGFpbHNcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgY29tcG9uZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW5kZXIoKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdwYW5lbC1jb250ZW50IGNsZWFyZml4JyBhcmlhLWhpZGRlbj0ndHJ1ZSc+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJXb3JrbGlzdFR5cGVzKCkgfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIHdvcmtsaXN0IHR5cGVzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVuZGVyV29ya2xpc3RUeXBlcygpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5tYXJraW5nVGFyZ2V0c1N1bW1hcnkubWFya2luZ01vZGVJRCA9PT0gZW51bXMuTWFya2luZ01vZGUuTGl2ZU1hcmtpbmcpIHtcclxuICAgICAgICAgICAgbGV0IGRpcmVjdGVkUmVtYXJrUmVxdWVzdFJlbmRlcmVyID0gdGhpcy5yZW5kZXJEaXJlY3RlZFJlbWFya1dvcmtsaXN0VHlwZSgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9J3NoaWZ0LXJpZ2h0Jz5cclxuICAgICAgICAgICAgICAgICAgICA8V29ya2xpc3RUeXBlIGlkPSd3b3JrbGlzdF9saXZlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9eyd3b3JrbGlzdF9saXZlJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q291bnQ9e3RoaXMucHJvcHMubWFya2luZ1RhcmdldHNTdW1tYXJ5LmV4YW1pbmVyUHJvZ3Jlc3Mub3BlblJlc3BvbnNlc0NvdW50IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2xpc3RUeXBlPXtlbnVtcy5Xb3JrbGlzdFR5cGUubGl2ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtYXJrUmVxdWVzdFR5cGU9e2VudW1zLlJlbWFya1JlcXVlc3RUeXBlLlVua25vd259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRGlyZWN0ZWRSZW1hcmsgPXtmYWxzZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRMYW5ndWFnZT17dGhpcy5wcm9wcy5zZWxlY3RlZExhbmd1YWdlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RlYW1NYW5hZ2VtZW50TW9kZSA9IHt0aGlzLnByb3BzLmlzVGVhbU1hbmFnZW1lbnRNb2RlfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Xb3JrbGlzdFR5cGU+XHJcbiAgICAgICAgICAgICAgICAgICAgPFdvcmtsaXN0VHlwZSBpZD0nd29ya2xpc3RfYXR5cGljYWwnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17J3dvcmtsaXN0X2F0eXBpY2FsJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q291bnQ9e3RoaXMucHJvcHMubWFya2luZ1RhcmdldHNTdW1tYXJ5LmV4YW1pbmVyUHJvZ3Jlc3MuYXR5cGljYWxPcGVuUmVzcG9uc2VzQ291bnR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtsaXN0VHlwZT17ZW51bXMuV29ya2xpc3RUeXBlLmF0eXBpY2FsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1hcmtSZXF1ZXN0VHlwZT17ZW51bXMuUmVtYXJrUmVxdWVzdFR5cGUuVW5rbm93bn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXJlY3RlZFJlbWFyayA9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZExhbmd1YWdlPXt0aGlzLnByb3BzLnNlbGVjdGVkTGFuZ3VhZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVGVhbU1hbmFnZW1lbnRNb2RlID0ge3RoaXMucHJvcHMuaXNUZWFtTWFuYWdlbWVudE1vZGV9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1dvcmtsaXN0VHlwZT5cclxuICAgICAgICAgICAgICAgICAgICB7IGRpcmVjdGVkUmVtYXJrUmVxdWVzdFJlbmRlcmVyIH1cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9J3NoaWZ0LXJpZ2h0Jz5cclxuICAgICAgICAgICAgICAgICAgICA8V29ya2xpc3RUeXBlIGlkPXsnd29ya2xpc3RfJyArIHRoaXMucHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleT17J3dvcmtsaXN0X2tleV8nICsgdGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Q291bnQ9e3RoaXMucHJvcHMubWFya2luZ1RhcmdldHNTdW1tYXJ5LmV4YW1pbmVyUHJvZ3Jlc3Mub3BlblJlc3BvbnNlc0NvdW50IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2xpc3RUeXBlPXt0aGlzLnByb3BzLm1hcmtpbmdUYXJnZXRzU3VtbWFyeS5tYXJraW5nTW9kZUlEfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1hcmtSZXF1ZXN0VHlwZT17ZW51bXMuUmVtYXJrUmVxdWVzdFR5cGUuVW5rbm93bn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXJlY3RlZFJlbWFyayA9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZExhbmd1YWdlPXt0aGlzLnByb3BzLnNlbGVjdGVkTGFuZ3VhZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVGVhbU1hbmFnZW1lbnRNb2RlID0ge3RoaXMucHJvcHMuaXNUZWFtTWFuYWdlbWVudE1vZGV9PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvV29ya2xpc3RUeXBlPlxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgZGlyZWN0ZWQgcmVtYXJrIHdvcmtsaXN0IHR5cGVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZW5kZXJEaXJlY3RlZFJlbWFya1dvcmtsaXN0VHlwZSgpIHtcclxuICAgICAgICBsZXQgZGlyZWN0ZWRSZW1hcmtUYXJnZXRzID0gdGhpcy5wcm9wcy5kaXJlY3RlZFJlbWFya1RhcmdldDtcclxuXHJcbiAgICAgICAgaWYgKGRpcmVjdGVkUmVtYXJrVGFyZ2V0cyAhPSBudWxsICYmIGRpcmVjdGVkUmVtYXJrVGFyZ2V0cyAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoZGlyZWN0ZWRSZW1hcmtUYXJnZXRzICE9PSB1bmRlZmluZWQgJiYgZGlyZWN0ZWRSZW1hcmtUYXJnZXRzLmNvdW50KCkgPiAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU29ydCB0aGUgZGlyZWN0ZWQgcmVtYXJrIHRhcmdldCBiYXNlZCBvbiB0aGVpciBsb2NhbGUgc3RyaW5nXHJcbiAgICAgICAgICAgICAgICBkaXJlY3RlZFJlbWFya1RhcmdldHMgPSBJbW11dGFibGUuTGlzdDxhbnk+KHNvcnRIZWxwZXIuc29ydChkaXJlY3RlZFJlbWFya1RhcmdldHMudG9BcnJheSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBhcmVyTGlzdC5yZW1hcmtSZXF1ZXN0VHlwZUNvbXBhcmVyKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGRpcmVjdGVkUmVtYXJrVGFyZ2V0c0xpc3QgPSBkaXJlY3RlZFJlbWFya1RhcmdldHMubWFwKChtYXJraW5nVGFyZ2V0OiBtYXJraW5nVGFyZ2V0U3VtbWFyeSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHRvdGFsIHJlc3BvbnNlIGNvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlQ291bnQgPSBtYXJraW5nVGFyZ2V0LmV4YW1pbmVyUHJvZ3Jlc3Mub3BlblJlc3BvbnNlc0NvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsgbWFya2luZ1RhcmdldC5leGFtaW5lclByb2dyZXNzLnBlbmRpbmdSZXNwb25zZXNDb3VudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICArIG1hcmtpbmdUYXJnZXQuZXhhbWluZXJQcm9ncmVzcy5jbG9zZWRSZXNwb25zZXNDb3VudDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSBpZiBvcGVuICsgY2xvc2VkICsgcGVuZGluZyByZXNwb25zZSBjb3VudCBpcyA+IDAgdGhlbiBkaXNwbGF5IHRoZSByZW1hcmsgcmVxdWVzdCB0eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlQ291bnQgPiAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDxXb3JrbGlzdFR5cGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPSB7ICd3b3JrbGlzdF9kaXJlY3RlZF9yZW1hcmtfJyArIGVudW1zLlJlbWFya1JlcXVlc3RUeXBlW21hcmtpbmdUYXJnZXQucmVtYXJrUmVxdWVzdFR5cGVJRF19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9IHsgJ3dvcmtsaXN0X2RpcmVjdGVkX3JlbWFya18nICsgZW51bXMuUmVtYXJrUmVxdWVzdFR5cGVbbWFya2luZ1RhcmdldC5yZW1hcmtSZXF1ZXN0VHlwZUlEXX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldENvdW50PXttYXJraW5nVGFyZ2V0LmV4YW1pbmVyUHJvZ3Jlc3Mub3BlblJlc3BvbnNlc0NvdW50fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtYXJrUmVxdWVzdFR5cGU9e21hcmtpbmdUYXJnZXQucmVtYXJrUmVxdWVzdFR5cGVJRH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtsaXN0VHlwZT17ZW51bXMuV29ya2xpc3RUeXBlLmRpcmVjdGVkUmVtYXJrfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXJlY3RlZFJlbWFyayA9e3RydWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZExhbmd1YWdlPXt0aGlzLnByb3BzLnNlbGVjdGVkTGFuZ3VhZ2V9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1RlYW1NYW5hZ2VtZW50TW9kZSA9IHt0aGlzLnByb3BzLmlzVGVhbU1hbmFnZW1lbnRNb2RlfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Xb3JrbGlzdFR5cGU+KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGlyZWN0ZWRSZW1hcmtUYXJnZXRzTGlzdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFRhcmdldERldGFpbHM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3RhcmdldHN1bW1hcnkvdGFyZ2V0ZGV0YWlscy50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBWUE7O0FBRUE7QUFDQTtBQUFBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUVBO0FBS0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFTQTtBQVNBO0FBR0E7QUFBQTtBQUNBO0FBRUE7QUFXQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFVQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 1240:
/* no static exports found */
/* all exports used */
/*!****************************************************************!*\
  !*** ./src/components/worklist/targetsummary/worklisttype.tsx ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar worklistActionCreator = __webpack_require__(/*! ../../../actions/worklist/worklistactioncreator */ 261);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar stringHelper = __webpack_require__(/*! ../../../utility/generic/stringhelper */ 254);\r\nvar constants = __webpack_require__(/*! ../../utility/constants */ 241);\r\nvar qualityFeedbackHelper = __webpack_require__(/*! ../../../utility/qualityfeedback/qualityfeedbackhelper */ 309);\r\nvar targetSummaryStore = __webpack_require__(/*! ../../../stores/worklist/targetsummarystore */ 305);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar applicationStore = __webpack_require__(/*! ../../../stores/applicationoffline/applicationstore */ 247);\r\nvar applicationActionCreator = __webpack_require__(/*! ../../../actions/applicationoffline/applicationactioncreator */ 256);\r\nvar markingInstructioActionCreator = __webpack_require__(/*! ../../../actions/markinginstructions/markinginstructionactioncreator */ 476);\r\nvar markingInstructionStore = __webpack_require__(/*! ../../../stores/markinginstruction/markinginstructionstore */ 532);\r\nvar WorklistType = /** @class */ (function (_super) {\r\n    __extends(WorklistType, _super);\r\n    /**\r\n     * Constructor for WorklistType\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function WorklistType(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.isActive = false;\r\n        _this.isDisabled = false;\r\n        /**\r\n         * When live/atypical/supervisor remark selected\r\n         * If we open a response and close that then we need to take the response mode from response store( selected response mode)\r\n         * otherwise It will take the response mode from worklist store.\r\n         */\r\n        _this.markingModeChanged = function () {\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        _this.state = { renderedOn: 0 };\r\n        _this.handleMarkingModeClick = _this.handleMarkingModeClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Subscribe to events\r\n     */\r\n    WorklistType.prototype.componentDidMount = function () {\r\n        /* subscribing to worklist marking mode change event */\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.WORKLIST_MARKING_MODE_CHANGE, this.markingModeChanged);\r\n    };\r\n    /**\r\n     * Unsubscribe events\r\n     */\r\n    WorklistType.prototype.componentWillUnmount = function () {\r\n        /* subscribing to worklist marking mode change event */\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.WORKLIST_MARKING_MODE_CHANGE, this.markingModeChanged);\r\n    };\r\n    /**\r\n     * Render componets\r\n     * @returns formated html result\r\n     */\r\n    WorklistType.prototype.render = function () {\r\n        this.isActive = worklistStore.instance.currentWorklistType === this.props.worklistType\r\n            && worklistStore.instance.getRemarkRequestType === this.props.remarkRequestType;\r\n        this.isDisabled = qualityFeedbackHelper.isWorklistDisabledBasedOnQualityFeedback(this.props.worklistType, this.props.remarkRequestType);\r\n        var targetCount = this.props.targetCount;\r\n        var worklistTypeName;\r\n        if (this.props.worklistType === enums.WorklistType.directedRemark) {\r\n            worklistTypeName = stringHelper.format(localeStore.instance.TranslateText(this.getDirectedRemarkLocaleKey(this.props.remarkRequestType)), [constants.NONBREAKING_HYPHEN_UNICODE]);\r\n        }\r\n        else {\r\n            worklistTypeName = localeStore.instance.TranslateText(this.getMarkingModeLocalekey(this.props.worklistType));\r\n        }\r\n        // Render output\r\n        return (React.createElement(\"li\", { className: classNames('', { 'active': this.isActive }, { 'disabled': this.isDisabled }) },\r\n            React.createElement(\"a\", { id: 'worklistType' + this.props.id, href: 'javascript:void(0)', title: worklistTypeName, className: 'left-submenu-item', onClick: this.handleMarkingModeClick },\r\n                React.createElement(\"span\", { className: 'menu-count' }, targetCount),\r\n                worklistTypeName)));\r\n    };\r\n    /**\r\n     * Notify the worklist change selected event\r\n     * @param event\r\n     */\r\n    WorklistType.prototype.handleMarkingModeClick = function (event) {\r\n        if (!applicationStore.instance.isOnline) {\r\n            applicationActionCreator.checkActionInterrupted();\r\n        }\r\n        else {\r\n            if (markingInstructionStore.instance.isMarkingInstructionPanelOpen) {\r\n                // if the marking instruction panel is opened then close it on clicking the worklist type, \r\n                // this click event is not propagating to worklist since it is stoped from here\r\n                markingInstructioActionCreator.markingInstructionPanelOpenActionCreator(false);\r\n            }\r\n            if (this.isDisabled !== true) {\r\n                /*The “Atypical” label should not be clickable for now(sprint4)*/\r\n                if (this.props.worklistType === enums.WorklistType.live ||\r\n                    this.props.worklistType === enums.WorklistType.atypical ||\r\n                    this.props.worklistType === enums.WorklistType.directedRemark) {\r\n                    var markingMode = worklistStore.instance.getMarkingModeByWorkListType(this.props.worklistType);\r\n                    var responseMode = markerOperationModeFactory.operationMode.responseModeBasedOnQualityFeedback(enums.ResponseMode.open, markingMode, this.props.remarkRequestType, this.props.worklistType);\r\n                    if (qigStore.instance.selectedQIGForMarkerOperation) {\r\n                        worklistActionCreator.notifyWorklistTypeChange(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId, this.props.worklistType, responseMode, this.props.remarkRequestType, this.props.isDirectedRemark, qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember, !(targetSummaryStore.instance.isSupervisorRemarkCreated ||\r\n                            // disable cache if a supervisor remark created or \r\n                            // if whole responses are present. as changes can be made in a different QIG\r\n                            // and mainly in atypical responses which behave as whole response\r\n                            (qigStore.instance.relatedQigList && qigStore.instance.relatedQigList.count() > 1)));\r\n                    }\r\n                }\r\n            }\r\n            event.stopPropagation();\r\n        }\r\n    };\r\n    /**\r\n     * Get the marking mode locale key according to the marking mode selection.\r\n     * @param {enums.WorklistType} worklistType\r\n     * @returns marking mode key\r\n     */\r\n    WorklistType.prototype.getMarkingModeLocalekey = function (worklistType) {\r\n        return 'marking.worklist.worklist-type.' + enums.WorklistType[worklistType];\r\n    };\r\n    /**\r\n     * Get the directed remark locale key according to the directed remark request type.\r\n     * @param {enums.RemarkRequestType} remarkRequestType\r\n     * @returns remark request key\r\n     */\r\n    WorklistType.prototype.getDirectedRemarkLocaleKey = function (remarkRequestType) {\r\n        return 'generic.remark-types.long-names.' + enums.RemarkRequestType[remarkRequestType];\r\n    };\r\n    return WorklistType;\r\n}(pureRenderComponent));\r\nmodule.exports = WorklistType;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1242:
/* no static exports found */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/components/worklist/worklistfilter.tsx ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar ccValues = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsvalues */ 392);\r\n/* tslint:disable:variable-name */\r\nvar FilterItem = function (props) {\r\n    if (props.isVisible) {\r\n        return (React.createElement(\"li\", { id: 'filter' + enums.getEnumString(enums.WorklistSeedFilter, props.filter), className: props.selectedFilter === props.filter ? 'selected' : '' },\r\n            React.createElement(\"input\", { type: 'radio', id: props.id, name: props.name, value: props.selectedFilter === props.filter ? 'selected' : '', checked: props.selectedFilter === props.filter ? true : false }),\r\n            React.createElement(\"label\", { htmlFor: props.id, onClick: function () { props.onFilterChanged(props.filter); } },\r\n                React.createElement(\"span\", { className: 'radio-ui' }),\r\n                React.createElement(\"span\", { className: 'label-text' }, props.label))));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\n/**\r\n * Stateless component for Worklist filter\r\n * @param props\r\n */\r\nvar WorklistFilter = function (props) {\r\n    if (props.isVisible) {\r\n        return (React.createElement(\"div\", { className: 'col-wrap grid-nav padding-bottom-15' },\r\n            React.createElement(\"ul\", { className: 'worklist-radio-filter' },\r\n                React.createElement(\"li\", { className: 'filter-by-title' },\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('team-management.examiner-worklist.filters.filter-by'),\r\n                        \" \")),\r\n                React.createElement(FilterItem, { id: 'fltrAll', key: 'key-fltrAll', name: 'filterSeeds', isVisible: true, onFilterChanged: props.onFilterChanged, label: localeStore.instance.TranslateText('team-management.examiner-worklist.filters.all-responses'), filter: enums.WorklistSeedFilter.All, selectedFilter: props.selectedFilter }),\r\n                React.createElement(FilterItem, { id: 'fltrSeeds', key: 'key-fltrSeeds', name: 'filterSeeds', isVisible: true, onFilterChanged: props.onFilterChanged, label: localeStore.instance.TranslateText('team-management.examiner-worklist.filters.seeds-only'), filter: enums.WorklistSeedFilter.SeedsOnly, selectedFilter: props.selectedFilter }),\r\n                React.createElement(FilterItem, { id: 'fltrUnrevdSeeds', key: 'key-fltrUnrevdSeeds', name: 'filterSeeds', isVisible: !ccValues.seniorExaminerPool(props.markSchemeGroupId), onFilterChanged: props.onFilterChanged, label: localeStore.instance.TranslateText('team-management.examiner-worklist.filters.unreviewed-seeds-only'), filter: enums.WorklistSeedFilter.UnreviewedSeedsOnly, selectedFilter: props.selectedFilter }))));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\nmodule.exports = WorklistFilter;\r\n/* tslint:enable */\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI0Mi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3dvcmtsaXN0ZmlsdGVyLnRzeD8yOGEzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IGNjVmFsdWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpYy9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpY3N2YWx1ZXMnKTtcclxuXHJcblxyXG5pbnRlcmZhY2UgV29ya2xpc3RGaWx0ZXJQcm9wcyBleHRlbmRzIFByb3BzQmFzZSB7XHJcbiAgICBpc1Zpc2libGU6IGJvb2xlYW47XHJcbiAgICBzZWxlY3RlZEZpbHRlcjogZW51bXMuV29ya2xpc3RTZWVkRmlsdGVyO1xyXG4gICAgb25GaWx0ZXJDaGFuZ2VkOiBGdW5jdGlvbjtcclxuICAgIG1hcmtTY2hlbWVHcm91cElkOiBudW1iZXI7XHJcbn1cclxuXHJcbmludGVyZmFjZSBXb3JrbGlzdEZpbHRlckl0ZW1Qcm9wcyBleHRlbmRzIFByb3BzQmFzZSB7XHJcbiAgICBpc1Zpc2libGU6IGJvb2xlYW47XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBsYWJlbDogc3RyaW5nO1xyXG4gICAgb25GaWx0ZXJDaGFuZ2VkOiBGdW5jdGlvbjtcclxuICAgIGZpbHRlcjogZW51bXMuV29ya2xpc3RTZWVkRmlsdGVyO1xyXG4gICAgc2VsZWN0ZWRGaWx0ZXI6IGVudW1zLldvcmtsaXN0U2VlZEZpbHRlcjtcclxufVxyXG5cclxuLyogdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZSAqL1xyXG5cclxuY29uc3QgRmlsdGVySXRlbTogUmVhY3QuU3RhdGVsZXNzQ29tcG9uZW50PFdvcmtsaXN0RmlsdGVySXRlbVByb3BzPiA9IChwcm9wczogV29ya2xpc3RGaWx0ZXJJdGVtUHJvcHMpID0+IHtcclxuICAgIGlmIChwcm9wcy5pc1Zpc2libGUpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8bGkgaWQ9eydmaWx0ZXInICsgZW51bXMuZ2V0RW51bVN0cmluZyhlbnVtcy5Xb3JrbGlzdFNlZWRGaWx0ZXIsIHByb3BzLmZpbHRlcil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3Byb3BzLnNlbGVjdGVkRmlsdGVyID09PSBwcm9wcy5maWx0ZXIgPyAnc2VsZWN0ZWQnIDogJyd9PlxyXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J3JhZGlvJyBpZD17cHJvcHMuaWR9IG5hbWU9e3Byb3BzLm5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3Byb3BzLnNlbGVjdGVkRmlsdGVyID09PSBwcm9wcy5maWx0ZXIgPyAnc2VsZWN0ZWQnIDogJyd9XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17cHJvcHMuc2VsZWN0ZWRGaWx0ZXIgPT09IHByb3BzLmZpbHRlciA/IHRydWUgOiBmYWxzZX0+XHJcbiAgICAgICAgICAgICAgICA8L2lucHV0PlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9e3Byb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHsgcHJvcHMub25GaWx0ZXJDaGFuZ2VkKHByb3BzLmZpbHRlcik7IH19PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0ncmFkaW8tdWknPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2xhYmVsLXRleHQnPntwcm9wcy5sYWJlbH08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8L2xpPik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTdGF0ZWxlc3MgY29tcG9uZW50IGZvciBXb3JrbGlzdCBmaWx0ZXJcclxuICogQHBhcmFtIHByb3BzXHJcbiAqL1xyXG5jb25zdCBXb3JrbGlzdEZpbHRlcjogUmVhY3QuU3RhdGVsZXNzQ29tcG9uZW50PFdvcmtsaXN0RmlsdGVyUHJvcHM+ID0gKHByb3BzOiBXb3JrbGlzdEZpbHRlclByb3BzKSA9PiB7XHJcbiAgICBpZiAocHJvcHMuaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC13cmFwIGdyaWQtbmF2IHBhZGRpbmctYm90dG9tLTE1Jz5cclxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9J3dvcmtsaXN0LXJhZGlvLWZpbHRlcic+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT0nZmlsdGVyLWJ5LXRpdGxlJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ3RlYW0tbWFuYWdlbWVudC5leGFtaW5lci13b3JrbGlzdC5maWx0ZXJzLmZpbHRlci1ieScpfSA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8RmlsdGVySXRlbSBpZD17J2ZsdHJBbGwnfSBrZXk9eydrZXktZmx0ckFsbCd9IG5hbWU9eydmaWx0ZXJTZWVkcyd9IGlzVmlzaWJsZT17dHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25GaWx0ZXJDaGFuZ2VkPXtwcm9wcy5vbkZpbHRlckNoYW5nZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCd0ZWFtLW1hbmFnZW1lbnQuZXhhbWluZXItd29ya2xpc3QuZmlsdGVycy5hbGwtcmVzcG9uc2VzJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcj17ZW51bXMuV29ya2xpc3RTZWVkRmlsdGVyLkFsbH0gc2VsZWN0ZWRGaWx0ZXI9e3Byb3BzLnNlbGVjdGVkRmlsdGVyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxGaWx0ZXJJdGVtIGlkPXsnZmx0clNlZWRzJ30ga2V5PXsna2V5LWZsdHJTZWVkcyd9IG5hbWU9eydmaWx0ZXJTZWVkcyd9IGlzVmlzaWJsZT17dHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25GaWx0ZXJDaGFuZ2VkPXtwcm9wcy5vbkZpbHRlckNoYW5nZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCd0ZWFtLW1hbmFnZW1lbnQuZXhhbWluZXItd29ya2xpc3QuZmlsdGVycy5zZWVkcy1vbmx5Jyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcj17ZW51bXMuV29ya2xpc3RTZWVkRmlsdGVyLlNlZWRzT25seX0gc2VsZWN0ZWRGaWx0ZXI9e3Byb3BzLnNlbGVjdGVkRmlsdGVyfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxGaWx0ZXJJdGVtIGlkPXsnZmx0clVucmV2ZFNlZWRzJ30ga2V5PXsna2V5LWZsdHJVbnJldmRTZWVkcyd9IG5hbWU9eydmaWx0ZXJTZWVkcyd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZT17IWNjVmFsdWVzLnNlbmlvckV4YW1pbmVyUG9vbChwcm9wcy5tYXJrU2NoZW1lR3JvdXBJZCl9IG9uRmlsdGVyQ2hhbmdlZD17cHJvcHMub25GaWx0ZXJDaGFuZ2VkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17bG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgndGVhbS1tYW5hZ2VtZW50LmV4YW1pbmVyLXdvcmtsaXN0LmZpbHRlcnMudW5yZXZpZXdlZC1zZWVkcy1vbmx5Jyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcj17ZW51bXMuV29ya2xpc3RTZWVkRmlsdGVyLlVucmV2aWV3ZWRTZWVkc09ubHl9IHNlbGVjdGVkRmlsdGVyPXtwcm9wcy5zZWxlY3RlZEZpbHRlcn0gLz5cclxuICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0ID0gV29ya2xpc3RGaWx0ZXI7XHJcbi8qIHRzbGludDplbmFibGUgKi9cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3dvcmtsaXN0ZmlsdGVyLnRzeCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBbUJBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFJQTtBQUVBO0FBQ0E7QUFHQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUVBO0FBSUE7QUFJQTtBQU9BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 1243:
/* no static exports found */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/components/worklist/worklisttablewrapper.tsx ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar ReactDom = __webpack_require__(/*! react-dom */ 6);\r\nvar TableControl = __webpack_require__(/*! ../utility/table/tablewrapper */ 445);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar timerHelper = __webpack_require__(/*! ../../utility/generic/timerhelper */ 448);\r\nvar worklistActionCreator = __webpack_require__(/*! ../../actions/worklist/worklistactioncreator */ 261);\r\nvar deviceHelper = __webpack_require__(/*! ../../utility/touch/devicehelper */ 316);\r\nvar eventManagerBase = __webpack_require__(/*! ../base/eventmanager/eventmanagerbase */ 320);\r\nvar eventTypes = __webpack_require__(/*! ../base/eventmanager/eventtypes */ 306);\r\nvar direction = __webpack_require__(/*! ../base/eventmanager/direction */ 333);\r\nvar tableHelper = __webpack_require__(/*! ../utility/table/tablehelper */ 452);\r\nvar SCROLL_DAMPENING_FACTOR = 15;\r\nvar INITIAL_DISPLACEMENT_OFFSET = 20;\r\n/**\r\n * React wrapper component for worklist tables\r\n */\r\nvar WorklistTableWrapper = /** @class */ (function (_super) {\r\n    __extends(WorklistTableWrapper, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function WorklistTableWrapper(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /*checks user action is swipe or pan*/\r\n        _this.isSwipe = false;\r\n        /**\r\n         * on scroll on the worklist set the scroll of the display IDs table\r\n         * @param any\r\n         */\r\n        _this.onScrollHandler = function (e) {\r\n            var tableScrollHolder = _this.refs.tableScrollHolder;\r\n            var scrollTop = _this.refs.tableScrollHolder.scrollTop;\r\n            var scrollleft = _this.refs.tableScrollHolder.scrollLeft;\r\n            _this.refs.frozenTableHolder.scrollTop = scrollTop;\r\n            _this.refs.headerScrollHolder.scrollLeft = scrollleft;\r\n            _this.setScrollablevariable();\r\n            _this.refs.workListGridPanel.className = _this.getGridClass();\r\n        };\r\n        _this.onMouseWheel = function (e) {\r\n            _this.refs.tableScrollHolder.scrollTop = _this.refs.frozenTableHolder.scrollTop + e.deltaY;\r\n            _this.setScrollablevariable();\r\n            _this.refs.workListGridPanel.className = _this.getGridClass();\r\n        };\r\n        /**\r\n         * set the margins and css styles for diff divs and tables in worklist\r\n         */\r\n        _this.setMarginsAndStyle = function () {\r\n            // we need to recalculate the column widths in window resize\r\n            _this.setColumnWidths();\r\n            var tableScrollHolder = _this.refs.tableScrollHolder;\r\n            if (_this.refs.frozenTableHolder) {\r\n                _this.frozenHeadStyle = {};\r\n            }\r\n            if (tableScrollHolder) {\r\n                var hScrollbarWidth = tableScrollHolder.offsetWidth - tableScrollHolder.clientWidth;\r\n                var vScrollbarWidth = tableScrollHolder.offsetHeight - tableScrollHolder.clientHeight;\r\n                _this.cssRowHeaderTableStyle = { marginRight: -hScrollbarWidth };\r\n                _this.cssRowHeaderHeaderTableStyle = { marginRight: hScrollbarWidth };\r\n                _this.cssContentWrapTableStyle = { paddingBottom: vScrollbarWidth, paddingRight: hScrollbarWidth };\r\n                _this.cssBodyWrapTableStyle = { right: -hScrollbarWidth, bottom: -vScrollbarWidth };\r\n                _this.setScrollablevariable();\r\n                timerHelper.handleReactUpdatesOnWindowResize(function () {\r\n                    _this.setState({\r\n                        renderedOn: Date.now()\r\n                    });\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * returns the grid class (for shadow)\r\n         */\r\n        _this.getGridClass = function () {\r\n            var gridClass = classNames('work-list-grid', { 'scrolled-left': _this.isScrolledLeft === true }, { 'scrolled-right': _this.isScrolledRight === true });\r\n            return gridClass;\r\n        };\r\n        _this.onSortClick = function (comparerName, sortDirection) {\r\n            _this.props.onSortClick(comparerName, sortDirection);\r\n        };\r\n        _this.setColumnWidths = function () {\r\n            tableHelper.setColumnWidthsForTable(_this.props.getGridControlId(), 'frozenHeader_', 'rowHeader_');\r\n            tableHelper.setColumnWidthsForTable(_this.props.getGridControlId(), 'columnHeader_', '');\r\n        };\r\n        _this.onScrollHandler = _this.onScrollHandler.bind(_this);\r\n        _this.onMouseWheel = _this.onMouseWheel.bind(_this);\r\n        _this.onSwipeHandler = _this.onSwipeHandler.bind(_this);\r\n        _this.onPanMove = _this.onPanMove.bind(_this);\r\n        //this.onTouchMove = this.onTouchMove.bind(this);\r\n        _this.isScrolledLeft = true;\r\n        _this.isScrolledRight = true;\r\n        _this.onSortClick = _this.onSortClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    WorklistTableWrapper.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: this.getGridClass(), style: this.cssRowHeaderTableStyle, ref: 'workListGridPanel' },\r\n            React.createElement(\"div\", { className: 'table-header-wrap', style: this.cssRowHeaderHeaderTableStyle },\r\n                React.createElement(\"div\", { className: 'table-wrap-lt', ref: 'frozenHeader', style: this.frozenHeadStyle },\r\n                    React.createElement(TableControl, { tableHeaderRows: this.props.frozenHeaderRows, gridStyle: 'table-view', id: 'frozenHeader_' + this.props.getGridControlId(), key: 'key_frozenHeader_' + this.props.id, worklistType: this.props.worklistType, selectedLanguage: this.props.selectedLanguage, onSortClick: this.onSortClick, renderedOn: this.props.renderedOn })),\r\n                React.createElement(\"div\", { className: 'table-wrap-t' },\r\n                    React.createElement(\"div\", { className: 'header-scroll-holder', ref: 'headerScrollHolder' },\r\n                        React.createElement(TableControl, { tableHeaderRows: this.props.columnHeaderRows, gridStyle: 'grid-view', id: 'columnHeader_' + this.props.getGridControlId(), key: 'key_columnHeader_' + this.props.id, worklistType: this.props.worklistType, selectedLanguage: this.props.selectedLanguage, onSortClick: this.onSortClick, renderedOn: this.props.renderedOn })),\r\n                    React.createElement(\"div\", { className: 'drop-shadow' }, \" \"))),\r\n            React.createElement(\"div\", { className: 'table-content-wrap', style: this.cssContentWrapTableStyle },\r\n                React.createElement(\"div\", { className: 'table-wrap-l', ref: 'frozenTableHolder', onWheel: this.onMouseWheel },\r\n                    React.createElement(TableControl, { tableBodyRows: this.props.frozenBodyRows, gridStyle: 'table-view', id: 'rowHeader_' + this.props.getGridControlId(), key: 'key_rowHeader_' + this.props.id, worklistType: this.props.worklistType, selectedLanguage: this.props.selectedLanguage, renderedOn: this.props.renderedOn })),\r\n                React.createElement(\"div\", { className: 'table-body-wrap' },\r\n                    React.createElement(\"div\", { className: 'table-scroll-holder', style: this.cssBodyWrapTableStyle, ref: 'tableScrollHolder', onScroll: this.onScrollHandler },\r\n                        React.createElement(\"div\", { className: 'table-content-holder' },\r\n                            React.createElement(TableControl, { tableBodyRows: this.props.gridRows, gridStyle: 'table-view', id: this.props.getGridControlId(), key: 'key_' + this.props.id, worklistType: this.props.worklistType, selectedLanguage: this.props.selectedLanguage, renderedOn: this.props.renderedOn }))),\r\n                    React.createElement(\"div\", { className: 'drop-shadow' }, \" \")))));\r\n    };\r\n    /**\r\n     * Trigger on swipe move.\r\n     */\r\n    WorklistTableWrapper.prototype.onSwipeHandler = function (event) {\r\n        this.isSwipe = true;\r\n        /** To prevent event bubbling */\r\n        event.srcEvent.preventDefault();\r\n        var displacement = event.deltaY;\r\n        this.refs.tableScrollHolder.scrollTop = this.refs.frozenTableHolder.scrollTop - displacement;\r\n    };\r\n    /**\r\n     * Trigger on touch move.\r\n     */\r\n    //private onTouchMove(event: any) {\r\n    //    /** To prevent the default flickering behavior of ipad safari */\r\n    //    event.preventDefault();\r\n    //}\r\n    /**\r\n     * Trigger on touch move.\r\n     */\r\n    WorklistTableWrapper.prototype.onPanMove = function (event) {\r\n        event.srcEvent.preventDefault();\r\n        var displacement = event.deltaY;\r\n        if (!this.isSwipe) {\r\n            event.srcEvent.preventDefault();\r\n            var displacement_1 = event.deltaY;\r\n            if (Math.abs(displacement_1) > INITIAL_DISPLACEMENT_OFFSET && this.refs.tableScrollHolder && this.refs.frozenTableHolder) {\r\n                // The displacement is divided by a dampening factor to restrict the fast scroll movement \r\n                this.refs.tableScrollHolder.scrollTop = this.refs.frozenTableHolder.scrollTop - (displacement_1 / SCROLL_DAMPENING_FACTOR);\r\n            }\r\n        }\r\n        this.isSwipe = false;\r\n    };\r\n    /**\r\n     * This will setup events\r\n     */\r\n    WorklistTableWrapper.prototype.setUpEvents = function () {\r\n        var element = ReactDom.findDOMNode(this.refs.frozenTableHolder);\r\n        if (element && !this.eventHandler.isInitialized) {\r\n            this.eventHandler.initEvents(element);\r\n            this.eventHandler.get(eventTypes.SWIPE, { direction: direction.DirectionOptions.DIRECTION_VERTICAL, threshold: 5 });\r\n            this.eventHandler.on(eventTypes.SWIPE, this.onSwipeHandler);\r\n            this.eventHandler.get(eventTypes.PAN, { direction: direction.DirectionOptions.DIRECTION_VERTICAL, threshold: 5 });\r\n            this.eventHandler.on(eventTypes.PAN, this.onPanMove);\r\n        }\r\n    };\r\n    /**\r\n     * unsubscribing hammer touch events and handlers\r\n     */\r\n    WorklistTableWrapper.prototype.unRegisterEvents = function () {\r\n        if (this.eventHandler.isInitialized) {\r\n            this.eventHandler.destroy();\r\n        }\r\n    };\r\n    /**\r\n     * margins and styles should be set after first render.\r\n     */\r\n    WorklistTableWrapper.prototype.componentDidUpdate = function () {\r\n        // setting min-width except sorting\r\n        if (this.props.doSetMinWidth) {\r\n            this.setColumnWidths();\r\n        }\r\n    };\r\n    /**\r\n     * margins and styles should be set after first render.\r\n     */\r\n    WorklistTableWrapper.prototype.componentDidMount = function () {\r\n        this.setMarginsAndStyle();\r\n        window.addEventListener('resize', this.setMarginsAndStyle);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.SETSCROLL_WORKLIST_COLUMNS, this.setMarginsAndStyle);\r\n        if (deviceHelper.isTouchDevice()) {\r\n            this.setUpEvents();\r\n        }\r\n    };\r\n    /**\r\n     * Unsubscribe events\r\n     */\r\n    WorklistTableWrapper.prototype.componentWillUnmount = function () {\r\n        window.removeEventListener('resize', this.setMarginsAndStyle);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.SETSCROLL_WORKLIST_COLUMNS, this.setMarginsAndStyle);\r\n        // unregister events\r\n        this.unRegisterEvents();\r\n    };\r\n    /**\r\n     * Comparing the props to check the rerender\r\n     * @param {Props} nextProps\r\n     */\r\n    WorklistTableWrapper.prototype.componentWillReceiveProps = function (nextProps) {\r\n        if (this.props.selectedLanguage !== nextProps.selectedLanguage) {\r\n            worklistActionCreator.setScrollWorklistColumns();\r\n        }\r\n    };\r\n    /**\r\n     * set the left/right scrollable variables\r\n     * @param tableScrollHolder\r\n     */\r\n    WorklistTableWrapper.prototype.setScrollablevariable = function () {\r\n        if (this.refs.tableScrollHolder) {\r\n            if (this.refs.tableScrollHolder.scrollLeft <= 0) {\r\n                this.isScrolledLeft = true;\r\n            }\r\n            else {\r\n                this.isScrolledLeft = false;\r\n            }\r\n            if ((this.refs.tableScrollHolder.scrollLeft + this.refs.tableScrollHolder.offsetWidth) >=\r\n                this.refs.tableScrollHolder.scrollWidth) {\r\n                this.isScrolledRight = true;\r\n            }\r\n            else {\r\n                this.isScrolledRight = false;\r\n            }\r\n        }\r\n    };\r\n    return WorklistTableWrapper;\r\n}(eventManagerBase));\r\nmodule.exports = WorklistTableWrapper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 1446:
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/utility/worklist/worklistfactory.ts ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar remarkworklisthelper = __webpack_require__(/*! ../../components/utility/grid/worklisthelpers/remarkworklisthelper */ 1185);\r\nvar liveworklisthelper = __webpack_require__(/*! ../../components/utility/grid/worklisthelpers/liveworklisthelper */ 1182);\r\nvar atypicalworklisthelper = __webpack_require__(/*! ../../components/utility/grid/worklisthelpers/atypicalworklisthelper */ 1181);\r\nvar practiceworklisthelper = __webpack_require__(/*! ../../components/utility/grid/worklisthelpers/practiceworklisthelper */ 1184);\r\nvar secondstandardisationworklisthelper = __webpack_require__(/*! ../../components/utility/grid/worklisthelpers/secondstandardisationworklisthelper */ 1186);\r\nvar standardisationworklisthelper = __webpack_require__(/*! ../../components/utility/grid/worklisthelpers/standardisationworklisthelper */ 1188);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar markingCheckWorklistHelper = __webpack_require__(/*! ../../components/utility/grid/worklisthelpers/markingcheckworklisthelper */ 1183);\r\nvar simulationWorklistHelper = __webpack_require__(/*! ../../components/utility/grid/worklisthelpers/simulationworklisthelper */ 1187);\r\nvar WorkListFactory = /** @class */ (function () {\r\n    function WorkListFactory() {\r\n    }\r\n    /**\r\n     * returns the worklist helper object based on the type\r\n     * @param worklistType\r\n     */\r\n    WorkListFactory.prototype.getWorklistHelper = function (worklistType) {\r\n        var worklistHelper;\r\n        switch (worklistType) {\r\n            case enums.WorklistType.live:\r\n                worklistHelper = worklistStore.instance.isMarkingCheckMode ?\r\n                    new markingCheckWorklistHelper() : new liveworklisthelper();\r\n                break;\r\n            case enums.WorklistType.atypical:\r\n                worklistHelper = new atypicalworklisthelper();\r\n                break;\r\n            case enums.WorklistType.practice:\r\n                worklistHelper = new practiceworklisthelper();\r\n                break;\r\n            case enums.WorklistType.standardisation:\r\n                worklistHelper = new standardisationworklisthelper();\r\n                break;\r\n            case enums.WorklistType.secondstandardisation:\r\n                worklistHelper = new secondstandardisationworklisthelper();\r\n                break;\r\n            case enums.WorklistType.directedRemark:\r\n            case enums.WorklistType.pooledRemark:\r\n                worklistHelper = new remarkworklisthelper();\r\n                break;\r\n            case enums.WorklistType.simulation:\r\n                worklistHelper = new simulationWorklistHelper();\r\n                break;\r\n        }\r\n        return worklistHelper;\r\n    };\r\n    return WorkListFactory;\r\n}());\r\nvar workListFactory = new WorkListFactory();\r\nmodule.exports = workListFactory;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ0Ni5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy91dGlsaXR5L3dvcmtsaXN0L3dvcmtsaXN0ZmFjdG9yeS50cz84ZGNhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB3b3JrbGlzdEhlbHBlciA9IHJlcXVpcmUoJy4vd29ya2xpc3RoZWxwZXInKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCByZW1hcmt3b3JrbGlzdGhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL3dvcmtsaXN0aGVscGVycy9yZW1hcmt3b3JrbGlzdGhlbHBlcicpO1xyXG5pbXBvcnQgbGl2ZXdvcmtsaXN0aGVscGVyID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2dyaWQvd29ya2xpc3RoZWxwZXJzL2xpdmV3b3JrbGlzdGhlbHBlcicpO1xyXG5pbXBvcnQgYXR5cGljYWx3b3JrbGlzdGhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL3dvcmtsaXN0aGVscGVycy9hdHlwaWNhbHdvcmtsaXN0aGVscGVyJyk7XHJcbmltcG9ydCBwcmFjdGljZXdvcmtsaXN0aGVscGVyID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2dyaWQvd29ya2xpc3RoZWxwZXJzL3ByYWN0aWNld29ya2xpc3RoZWxwZXInKTtcclxuaW1wb3J0IHNlY29uZHN0YW5kYXJkaXNhdGlvbndvcmtsaXN0aGVscGVyID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2dyaWQvd29ya2xpc3RoZWxwZXJzL3NlY29uZHN0YW5kYXJkaXNhdGlvbndvcmtsaXN0aGVscGVyJyk7XHJcbmltcG9ydCBzdGFuZGFyZGlzYXRpb253b3JrbGlzdGhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL3dvcmtsaXN0aGVscGVycy9zdGFuZGFyZGlzYXRpb253b3JrbGlzdGhlbHBlcicpO1xyXG5pbXBvcnQgd29ya2xpc3RTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy93b3JrbGlzdC93b3JrbGlzdHN0b3JlJyk7XHJcbmltcG9ydCBtYXJraW5nQ2hlY2tXb3JrbGlzdEhlbHBlciA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL3dvcmtsaXN0aGVscGVycy9tYXJraW5nY2hlY2t3b3JrbGlzdGhlbHBlcicpO1xyXG5pbXBvcnQgc2ltdWxhdGlvbldvcmtsaXN0SGVscGVyID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2dyaWQvd29ya2xpc3RoZWxwZXJzL3NpbXVsYXRpb253b3JrbGlzdGhlbHBlcicpO1xyXG5cclxuY2xhc3MgV29ya0xpc3RGYWN0b3J5IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIHdvcmtsaXN0IGhlbHBlciBvYmplY3QgYmFzZWQgb24gdGhlIHR5cGVcclxuICAgICAqIEBwYXJhbSB3b3JrbGlzdFR5cGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFdvcmtsaXN0SGVscGVyKHdvcmtsaXN0VHlwZTogZW51bXMuV29ya2xpc3RUeXBlKTogd29ya2xpc3RIZWxwZXIge1xyXG5cclxuICAgICAgICBsZXQgd29ya2xpc3RIZWxwZXI6IHdvcmtsaXN0SGVscGVyO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHdvcmtsaXN0VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLldvcmtsaXN0VHlwZS5saXZlOlxyXG4gICAgICAgICAgICAgICAgd29ya2xpc3RIZWxwZXIgPSB3b3JrbGlzdFN0b3JlLmluc3RhbmNlLmlzTWFya2luZ0NoZWNrTW9kZSA/XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IG1hcmtpbmdDaGVja1dvcmtsaXN0SGVscGVyKCkgOiBuZXcgbGl2ZXdvcmtsaXN0aGVscGVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5Xb3JrbGlzdFR5cGUuYXR5cGljYWw6XHJcbiAgICAgICAgICAgICAgICB3b3JrbGlzdEhlbHBlciA9IG5ldyBhdHlwaWNhbHdvcmtsaXN0aGVscGVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5Xb3JrbGlzdFR5cGUucHJhY3RpY2U6XHJcbiAgICAgICAgICAgICAgICB3b3JrbGlzdEhlbHBlciA9IG5ldyBwcmFjdGljZXdvcmtsaXN0aGVscGVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5Xb3JrbGlzdFR5cGUuc3RhbmRhcmRpc2F0aW9uOlxyXG4gICAgICAgICAgICAgICAgd29ya2xpc3RIZWxwZXIgPSBuZXcgc3RhbmRhcmRpc2F0aW9ud29ya2xpc3RoZWxwZXIoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLldvcmtsaXN0VHlwZS5zZWNvbmRzdGFuZGFyZGlzYXRpb246XHJcbiAgICAgICAgICAgICAgICB3b3JrbGlzdEhlbHBlciA9IG5ldyBzZWNvbmRzdGFuZGFyZGlzYXRpb253b3JrbGlzdGhlbHBlcigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuV29ya2xpc3RUeXBlLmRpcmVjdGVkUmVtYXJrOlxyXG4gICAgICAgICAgICBjYXNlIGVudW1zLldvcmtsaXN0VHlwZS5wb29sZWRSZW1hcms6XHJcbiAgICAgICAgICAgICAgICB3b3JrbGlzdEhlbHBlciA9IG5ldyByZW1hcmt3b3JrbGlzdGhlbHBlcigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuV29ya2xpc3RUeXBlLnNpbXVsYXRpb246XHJcbiAgICAgICAgICAgICAgICB3b3JrbGlzdEhlbHBlciA9IG5ldyBzaW11bGF0aW9uV29ya2xpc3RIZWxwZXIoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHdvcmtsaXN0SGVscGVyO1xyXG4gICAgfVxyXG59XHJcblxyXG5sZXQgd29ya0xpc3RGYWN0b3J5ID0gbmV3IFdvcmtMaXN0RmFjdG9yeSgpO1xyXG5leHBvcnQgPSB3b3JrTGlzdEZhY3Rvcnk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy91dGlsaXR5L3dvcmtsaXN0L3dvcmtsaXN0ZmFjdG9yeS50cyJdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQXNDQTtBQXBDQTs7O0FBR0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 273:
/* no static exports found */
/* all exports used */
/*!**************************************************************************!*\
  !*** ./src/components/utility/grid/standardisationsetupgridcolumns.json ***!
  \**************************************************************************/
/***/ (function(module, exports) {

eval("module.exports = {\"definitions\":{\"Marks\":{\"$id\":\"13\",\"GridColumn\":\"MarksColumn\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.marks\",\"ComparerName\":\"markComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-mark-obt\"},\"LastMarker\":{\"$id\":\"14\",\"GridColumn\":\"LastMarkerColumn\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.last-marker\",\"ComparerName\":\"stdLastMarkerComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-last-marker\"},\"Note\":{\"$id\":\"15\",\"GridColumn\":\"NoteColumn\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.note\",\"ComparerName\":\"stdNoteComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-note\"},\"TagIndicator\":{\"$id\":\"16\",\"GridColumn\":\"TagIndicator\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.tag\",\"CssClass\":\"col-tag\",\"ComparerName\":\"tagComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"selectedTagId\":\"selectedTagId\",\"tagList\":\"tagList\",\"markGroupId\":\"markGroupId\"}},\"LastUpdated\":{\"$id\":\"17\",\"GridColumn\":\"LastUpdatedColumn\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.last-updated\",\"ComparerName\":\"updatedDateComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-modified\",\"ComponentProps\":{\"updatedDate\":\"updatedDate\"}},\"ResponseId\":{\"$id\":\"18\",\"GridColumn\":\"ResponseIdColumn\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.response-id\",\"ComparerName\":\"responseIdComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-response header-col\"},\"LinkedMessageIndicator\":{\"$id\":\"19\",\"GridColumn\":\"LinkedMessageIndicator\",\"ColumnHeader\":\"\",\"CssClass\":\"col-message\",\"ComponentProps\":{\"hasMessages\":\"hasMessages\",\"unreadMessagesCount\":\"unreadMessagesCount\",\"displayId\":\"displayId\",\"isTeamManagementMode\":\"isTeamManagementMode\"}},\"RIGOrder\":{\"$id\":\"20\",\"GridColumn\":\"RigOrderColumn\",\"ColumnHeader\":\"\",\"Sortable\":\"false\"},\"Centre\":{\"$id\":\"31\",\"GridColumn\":\"Centre\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.centre\",\"CssClass\":\"col-centre header-col\",\"ComparerName\":\"centreComparer\",\"Sortable\":\"true\"},\"Scripts\":{\"$id\":\"32\",\"GridColumn\":\"Scripts\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.scripts\",\"CssClass\":\"col-scripts\",\"ComparerName\":\"stdScriptComparer\",\"Sortable\":\"true\"},\"Available\":{\"$id\":\"33\",\"GridColumn\":\"ScriptsAvailable\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.available-scripts\",\"CssClass\":\"col-scripts-available\",\"ComparerName\":\"stdScriptAvailableComparer\",\"Sortable\":\"true\"},\"FirstScanned\":{\"$id\":\"34\",\"GridColumn\":\"FirstScanned\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.first-scanned\",\"CssClass\":\"col-first-scanned\",\"ComparerName\":\"stdFirstScannedComparer\",\"Sortable\":\"true\"},\"ScriptId\":{\"$id\":\"35\",\"GridColumn\":\"ScriptId\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.script-id\",\"ComparerName\":\"stdScriptIdComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-script-id header-col\",\"ComponentProps\":{\"ScriptId\":\"candidateScriptId\"}},\"Candidate\":{\"$id\":\"36\",\"GridColumn\":\"CentreCandidateNum\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.candidate\",\"ComparerName\":\"candidateComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-candidate\",\"ComponentProps\":{\"Candidate\":\"CentreCandidateNum\"}},\"Status\":{\"$id\":\"37\",\"GridColumn\":\"Status\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.status\",\"ComparerName\":\"stdStatusComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-available-status\",\"ComponentProps\":{\"Status\":\"Status\"}},\"SLAOIndicator\":{\"$id\":\"38\",\"GridColumn\":\"SLAOIndicator\",\"ColumnHeader\":\"\",\"CssClass\":\"col-slao\",\"ComponentProps\":{\"hasAdditionalObjects\":\"hasAdditionalObjects\",\"hasAllPagesAnnotated\":\"hasAllPagesAnnotated\",\"markingProgress\":\"markingProgress\"}},\"MarkingProgress\":{\"$id\":\"39\",\"GridColumn\":\"Status\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.status\",\"ComparerName\":\"progressComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-status\",\"ComponentProps\":{\"markingProgress\":\"markingProgress\",\"esmarkGroupId\":\"esmarkGroupId\"}},\"ModifiedDate\":{\"$id\":\"40\",\"GridColumn\":\"Status\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.status\",\"ComparerName\":\"updatedDateComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-status\",\"ComponentProps\":{\"Status\":\"Status\"}},\"AllPageAnnotedIndicator\":{\"$id\":\"41\",\"GridColumn\":\"AllPageAnnotedIndicator\",\"CssClass\":\"col-slao\",\"ColumnHeader\":\"\",\"ComponentProps\":{\"hasAllPagesAnnotated\":\"hasAllPagesAnnotated\",\"markingProgress\":\"markingProgress\"}},\"AllFilesNotViewedIndicator\":{\"$id\":\"42\",\"GridColumn\":\"AllFilesNotViewedIndicator\",\"CssClass\":\"col-slao\",\"ColumnHeader\":\"\",\"ComponentProps\":{\"allFilesViewed\":\"allFilesViewed\",\"markingProgress\":\"markingProgress\",\"isECourseworkComponent\":\"isECourseworkComponent\"}},\"DeClassify\":{\"$id\":\"44\",\"GridColumn\":\"DeClassifyColumn\",\"ColumnHeader\":\"\",\"CssClass\":\"last-cell col-declassify\"},\"QuestionItems\":{\"$id\":\"43\",\"GridColumn\":\"QuestionItems\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.question-items\",\"CssClass\":\"col-question-item\",\"ComponentProps\":{\"QuestionItems\":\"QuestionItems\"}},\"OrginalSession\":{\"$id\":\"45\",\"GridColumn\":\"OrginalSession\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.original-session\",\"ComparerName\":\"stdOrginalSessionComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-org-session\",\"ComponentProps\":{\"Status\":\"OrginalSession\"}},\"OrginalClassification\":{\"$id\":\"46\",\"GridColumn\":\"OrginalClassification\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.original-classification\",\"ComparerName\":\"stdOrginalClassificationComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-org-classification\"},\"Mark\":{\"$id\":\"47\",\"GridColumn\":\"Mark\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.original-mark\",\"ComparerName\":\"marksComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-mark-obt\"},\"OrginalMarksUpdated\":{\"$id\":\"48\",\"GridColumn\":\"OrginalMarksUpdated\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.original-marks-updated\",\"ComparerName\":\"orginalMarksUpdatedComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-updated-mark\"},\"HideResponse\":{\"$id\":\"49\",\"GridColumn\":\"HideResponse\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.hide-response\",\"Sortable\":\"false\",\"CssClass\":\"col-hide-response\"},\"TotalTimeReused\":{\"$id\":\"50\",\"GridColumn\":\"Totaltimereused\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.total-times-reused\",\"ComparerName\":\"totalTimesReusedComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-time-reused text-center\"},\"LastUsed\":{\"$id\":\"51\",\"GridColumn\":\"LastUsed\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.last-used\",\"ComparerName\":\"lastUsedComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-last-used\"},\"TimesReusedInThisSession\":{\"$id\":\"52\",\"GridColumn\":\"TimesReusedInThisSession\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.times-reused-in-this-session\",\"ComparerName\":\"totalTimesReusedSessionComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-time-reused-in-session text-center\"},\"UpdatePending\":{\"$id\":\"53\",\"GridColumn\":\"UpdatePending\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.update-pending\",\"ComparerName\":\"updatePendingComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-update-pending\"},\"IsReused\":{\"$id\":\"54\",\"GridColumn\":\"Status\",\"Sortable\":\"false\",\"CssClass\":\"col-re-use\"},\"IsReusedInThisQIG\":{\"$id\":\"55\",\"GridColumn\":\"IsReusedInThisQIG\",\"ColumnHeader\":\"standardisation-setup.previous-session.reusable-response.re-used-inthis-qig\",\"ComparerName\":\"stdIsReusedInQigComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-re-use\"},\"ReuseCentre\":{\"$id\":\"56\",\"GridColumn\":\"Centre\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.centre\",\"CssClass\":\"col-centre header-col\",\"ComparerName\":\"stdCentreComparer\",\"Sortable\":\"true\"},\"ReuseCandidate\":{\"$id\":\"57\",\"GridColumn\":\"CentreCandidateNum\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.candidate\",\"ComparerName\":\"stdCandidateComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-candidate\",\"ComponentProps\":{\"Candidate\":\"CentreCandidateNum\"}},\"unclassifiedMarkingProgress\":{\"$id\":\"58\",\"GridColumn\":\"Status\",\"ColumnHeader\":\"standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.status\",\"ComparerName\":\"unclassifiedprogressComparer\",\"Sortable\":\"true\",\"CssClass\":\"col-status\",\"ComponentProps\":{\"markingProgress\":\"markingProgress\",\"esmarkGroupId\":\"esmarkGroupId\"}}},\"IsSharedProvisional\":{\"$id\":\"59\",\"GridColumn\":\"IsSharedProvisional\",\"CssClass\":\"col-share header-col\",\"ColumnHeader\":\"\"},\"standardisationsetup\":{\"SelectResponse\":{\"Centre\":{\"GridColumns\":[{\"$ref\":\"31\"},{\"$ref\":\"32\"},{\"$ref\":\"33\"},{\"$ref\":\"34\"}]},\"Script\":{\"GridColumns\":[{\"$ref\":\"36\"},{\"$ref\":\"37\"},{\"$ref\":\"38\"},{\"$ref\":\"43\"}]},\"FrozenRows\":{\"GridColumns\":[{\"$ref\":\"35\"}]}},\"PreviousSession\":{\"ReusableResponse\":{\"GridColumns\":[{\"$ref\":\"56\"},{\"$ref\":\"57\"},{\"$ref\":\"47\"},{\"$ref\":\"48\"},{\"$ref\":\"49\"},{\"$ref\":\"50\"},{\"$ref\":\"52\"},{\"$ref\":\"51\"},{\"$ref\":\"55\"},{\"$ref\":\"53\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"35\"},{\"$ref\":\"54\"},{\"$ref\":\"45\"},{\"$ref\":\"46\"}]}},\"ProvisionalResponse\":{\"totalmarksview\":{\"GridColumns\":[{\"$ref\":\"35\"},{\"$ref\":\"39\"},{\"$ref\":\"31\"},{\"$ref\":\"36\"},{\"$ref\":\"13\"},{\"$ref\":\"15\"},{\"$ref\":\"38\"},{\"$ref\":\"41\"},{\"$ref\":\"42\"},{\"$ref\":\"19\"},{\"$ref\":\"16\"},{\"$ref\":\"17\"}]},\"marksbyquestionview\":{\"GridColumns\":[{\"$ref\":\"13\"},{\"$ref\":\"39\"},{\"$ref\":\"15\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"59\"},{\"$ref\":\"18\"}]}},\"UnClassifiedResponse\":{\"totalmarksview\":{\"GridColumns\":[{\"$ref\":\"35\"},{\"$ref\":\"31\"},{\"$ref\":\"58\"},{\"$ref\":\"36\"},{\"$ref\":\"13\"},{\"$ref\":\"14\"},{\"$ref\":\"15\"},{\"$ref\":\"38\"},{\"$ref\":\"41\"},{\"$ref\":\"19\"},{\"$ref\":\"16\"},{\"$ref\":\"17\"}]},\"marksbyquestionview\":{\"GridColumns\":[{\"$ref\":\"13\"},{\"$ref\":\"58\"},{\"$ref\":\"15\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"18\"}]}},\"ClassifiedResponse\":{\"totalmarksview\":{\"GridColumns\":[{\"$ref\":\"35\"},{\"$ref\":\"31\"},{\"$ref\":\"36\"},{\"$ref\":\"13\"},{\"$ref\":\"14\"},{\"$ref\":\"15\"},{\"$ref\":\"19\"},{\"$ref\":\"16\"},{\"$ref\":\"17\"},{\"$ref\":\"44\"}]},\"marksbyquestionview\":{\"GridColumns\":[{\"$ref\":\"13\"},{\"$ref\":\"14\"},{\"$ref\":\"15\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"20\"},{\"$ref\":\"18\"}]}}}}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 274:
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/components/utility/grid/gridcell.ts ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Cell for GridControl Compoent\r\n */\r\nvar GridCell = /** @class */ (function () {\r\n    function GridCell() {\r\n        this.comparerName = undefined;\r\n        this.sortDirection = undefined;\r\n        this.isSortable = true;\r\n    }\r\n    /**\r\n     * returns the cell style\r\n     */\r\n    GridCell.prototype.getCellStyle = function () {\r\n        return this.cellStyle;\r\n    };\r\n    /**\r\n     * set the cell style\r\n     * @param {string} _cellStyle\r\n     */\r\n    GridCell.prototype.setCellStyle = function (_cellStyle) {\r\n        this.cellStyle = _cellStyle;\r\n    };\r\n    /**\r\n     * returns the additional cell Element\r\n     */\r\n    GridCell.prototype.getAdditionalElement = function () {\r\n        return this.additionalElement;\r\n    };\r\n    /**\r\n     * sets the additional cell Element\r\n     * @param _additionalElement\r\n     */\r\n    GridCell.prototype.setAdditionalElement = function (_additionalElement) {\r\n        this.additionalElement = _additionalElement;\r\n    };\r\n    return GridCell;\r\n}());\r\nmodule.exports = GridCell;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL2dyaWRjZWxsLnRzPzBjNjciXSwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD0ndHlwaW5ncy9jZWxsLnRzJyAvPlxyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi9lbnVtcycpO1xyXG5cclxuLyoqXHJcbiAqIENlbGwgZm9yIEdyaWRDb250cm9sIENvbXBvZW50XHJcbiAqL1xyXG5jbGFzcyBHcmlkQ2VsbCBpbXBsZW1lbnRzIENlbGwge1xyXG5cclxuICAgIHByaXZhdGUgY2VsbFN0eWxlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGFkZGl0aW9uYWxFbGVtZW50OiBKU1guRWxlbWVudDtcclxuXHJcbiAgICAvKipcclxuICAgICAqICBHcmlkIGNlbGwncyBFbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb2x1bW5FbGVtZW50OiBKU1guRWxlbWVudDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIGNlbGwgc3R5bGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENlbGxTdHlsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jZWxsU3R5bGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFxyXG4gICAgICogc2V0IHRoZSBjZWxsIHN0eWxlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gX2NlbGxTdHlsZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0Q2VsbFN0eWxlKF9jZWxsU3R5bGU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuY2VsbFN0eWxlID0gX2NlbGxTdHlsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIGFkZGl0aW9uYWwgY2VsbCBFbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRBZGRpdGlvbmFsRWxlbWVudCgpOiBKU1guRWxlbWVudCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkaXRpb25hbEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXRzIHRoZSBhZGRpdGlvbmFsIGNlbGwgRWxlbWVudFxyXG4gICAgICogQHBhcmFtIF9hZGRpdGlvbmFsRWxlbWVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0QWRkaXRpb25hbEVsZW1lbnQoX2FkZGl0aW9uYWxFbGVtZW50OiBKU1guRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuYWRkaXRpb25hbEVsZW1lbnQgPSBfYWRkaXRpb25hbEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIHJldHVybnMgd2hldGhlciB0aGUgY2VsbCBpcyBoaWRkZW4gKi9cclxuICAgIHB1YmxpYyBpc0hpZGRlbjogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgY29tcGFyZXJOYW1lOiBzdHJpbmcgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgcHVibGljIHNvcnREaXJlY3Rpb246IGVudW1zLlNvcnREaXJlY3Rpb24gPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgcHVibGljIGlzU29ydGFibGU6IGJvb2xlYW4gPSB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgPSBHcmlkQ2VsbDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL2dyaWRjZWxsLnRzIl0sIm1hcHBpbmdzIjoiO0FBR0E7O0FBRUE7QUFDQTtBQUFBO0FBMkNBO0FBRUE7QUFFQTtBQUNBO0FBdENBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 281:
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./src/utility/locale/localehelper.ts ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * helper class with utilty methods for localisation of date, time and number\r\n */\r\nvar LocaleHelper = /** @class */ (function () {\r\n    function LocaleHelper() {\r\n    }\r\n    /**\r\n     * returns the localised string based on the local time zone (machine's locale).\r\n     * @param object - date/time/number to be localised.\r\n     */\r\n    LocaleHelper.toLocaleString = function (object) {\r\n        if (object == null || object === undefined) {\r\n            return '';\r\n        }\r\n        return object.toLocaleString();\r\n    };\r\n    /**\r\n     * returns the localised date string based on the local time zone (machine's locale).\r\n     * @param object - date to be localised.\r\n     */\r\n    LocaleHelper.toLocaleDateString = function (object) {\r\n        if (object == null || object === undefined) {\r\n            return '';\r\n        }\r\n        return object.toLocaleDateString(navigator.language);\r\n    };\r\n    /**\r\n     * returns the localised time string based on the local time zone (machine's locale).\r\n     * @param object - time to be localised.\r\n     */\r\n    LocaleHelper.toLocaleTimeString = function (object) {\r\n        if (object == null || object === undefined) {\r\n            return '';\r\n        }\r\n        // Remove seconds from time.\r\n        return object.toLocaleTimeString(navigator.language);\r\n    };\r\n    /**\r\n     * returns the localised date time string based on the local time zone (machine's locale).\r\n     * @param object - Date and time to be localised.\r\n     */\r\n    LocaleHelper.toLocaleDateTimeString = function (object) {\r\n        if (object == null || object === undefined) {\r\n            return '';\r\n        }\r\n        return object.toLocaleDateString(navigator.language) + ' ' +\r\n            object.toLocaleTimeString(navigator.language);\r\n    };\r\n    /**\r\n     * get the awarding body\r\n     * @param locale\r\n     */\r\n    LocaleHelper.getAwardingBodyLocale = function (locale) {\r\n        //Checking wether browser language exist in languageJson\r\n        var langExist;\r\n        langExist = false;\r\n        languageList.languages.language.map(function (lang) {\r\n            if (lang.code === locale) {\r\n                langExist = true;\r\n            }\r\n        });\r\n        var awardingBody = languageList.languages['awarding-body'];\r\n        if (!langExist) {\r\n            // If the customer doesnt support the browser language select the default language\r\n            locale = languageList.languages['default-culture'];\r\n        }\r\n        /**\r\n         * Splitting the locale to take the langauge code only.The locale conatin both language and country code,\r\n         * the corresponding locale json name contain only language code.\r\n         */\r\n        var localeCode = locale.split('-')[0];\r\n        /**\r\n         * The locale JSON file name should be in a format of awardingbody-locale.json.\r\n         * Populating the url based on te awarding body and locale selected.\r\n         */\r\n        return awardingBody.toLowerCase() + '-' + localeCode;\r\n    };\r\n    return LocaleHelper;\r\n}());\r\nmodule.exports = LocaleHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvbG9jYWxlL2xvY2FsZWhlbHBlci50cz8yOGE1Il0sInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgbGV0IGxhbmd1YWdlTGlzdDogYW55O1xyXG5cclxuLyoqXHJcbiAqIGhlbHBlciBjbGFzcyB3aXRoIHV0aWx0eSBtZXRob2RzIGZvciBsb2NhbGlzYXRpb24gb2YgZGF0ZSwgdGltZSBhbmQgbnVtYmVyXHJcbiAqL1xyXG5jbGFzcyBMb2NhbGVIZWxwZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBsb2NhbGlzZWQgc3RyaW5nIGJhc2VkIG9uIHRoZSBsb2NhbCB0aW1lIHpvbmUgKG1hY2hpbmUncyBsb2NhbGUpLlxyXG4gICAgICogQHBhcmFtIG9iamVjdCAtIGRhdGUvdGltZS9udW1iZXIgdG8gYmUgbG9jYWxpc2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHRvTG9jYWxlU3RyaW5nKG9iamVjdDogYW55KSB7XHJcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsIHx8IG9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9iamVjdC50b0xvY2FsZVN0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyB0aGUgbG9jYWxpc2VkIGRhdGUgc3RyaW5nIGJhc2VkIG9uIHRoZSBsb2NhbCB0aW1lIHpvbmUgKG1hY2hpbmUncyBsb2NhbGUpLlxyXG4gICAgICogQHBhcmFtIG9iamVjdCAtIGRhdGUgdG8gYmUgbG9jYWxpc2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHRvTG9jYWxlRGF0ZVN0cmluZyhvYmplY3Q6IERhdGUpIHtcclxuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwgfHwgb2JqZWN0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqZWN0LnRvTG9jYWxlRGF0ZVN0cmluZyhuYXZpZ2F0b3IubGFuZ3VhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyB0aGUgbG9jYWxpc2VkIHRpbWUgc3RyaW5nIGJhc2VkIG9uIHRoZSBsb2NhbCB0aW1lIHpvbmUgKG1hY2hpbmUncyBsb2NhbGUpLlxyXG4gICAgICogQHBhcmFtIG9iamVjdCAtIHRpbWUgdG8gYmUgbG9jYWxpc2VkLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHRvTG9jYWxlVGltZVN0cmluZyhvYmplY3Q6IERhdGUpIHtcclxuICAgICAgICBpZiAob2JqZWN0ID09IG51bGwgfHwgb2JqZWN0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIHNlY29uZHMgZnJvbSB0aW1lLlxyXG4gICAgICAgIHJldHVybiBvYmplY3QudG9Mb2NhbGVUaW1lU3RyaW5nKG5hdmlnYXRvci5sYW5ndWFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBsb2NhbGlzZWQgZGF0ZSB0aW1lIHN0cmluZyBiYXNlZCBvbiB0aGUgbG9jYWwgdGltZSB6b25lIChtYWNoaW5lJ3MgbG9jYWxlKS5cclxuICAgICAqIEBwYXJhbSBvYmplY3QgLSBEYXRlIGFuZCB0aW1lIHRvIGJlIGxvY2FsaXNlZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyB0b0xvY2FsZURhdGVUaW1lU3RyaW5nKG9iamVjdDogRGF0ZSkge1xyXG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCB8fCBvYmplY3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb2JqZWN0LnRvTG9jYWxlRGF0ZVN0cmluZyhuYXZpZ2F0b3IubGFuZ3VhZ2UpICsgJyAnICtcclxuICAgICAgICAgICAgICAgb2JqZWN0LnRvTG9jYWxlVGltZVN0cmluZyhuYXZpZ2F0b3IubGFuZ3VhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2V0IHRoZSBhd2FyZGluZyBib2R5XHJcbiAgICAgKiBAcGFyYW0gbG9jYWxlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0QXdhcmRpbmdCb2R5TG9jYWxlKGxvY2FsZTogc3RyaW5nKTogc3RyaW5nIHtcclxuXHJcbiAgICAgICAgLy9DaGVja2luZyB3ZXRoZXIgYnJvd3NlciBsYW5ndWFnZSBleGlzdCBpbiBsYW5ndWFnZUpzb25cclxuICAgICAgICBsZXQgbGFuZ0V4aXN0OiBib29sZWFuO1xyXG4gICAgICAgIGxhbmdFeGlzdCA9IGZhbHNlO1xyXG4gICAgICAgIGxhbmd1YWdlTGlzdC5sYW5ndWFnZXMubGFuZ3VhZ2UubWFwKGZ1bmN0aW9uIChsYW5nOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKGxhbmcuY29kZSA9PT0gbG9jYWxlKSB7XHJcbiAgICAgICAgICAgICAgICBsYW5nRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBhd2FyZGluZ0JvZHkgPSBsYW5ndWFnZUxpc3QubGFuZ3VhZ2VzWydhd2FyZGluZy1ib2R5J107XHJcbiAgICAgICAgaWYgKCFsYW5nRXhpc3QpIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGN1c3RvbWVyIGRvZXNudCBzdXBwb3J0IHRoZSBicm93c2VyIGxhbmd1YWdlIHNlbGVjdCB0aGUgZGVmYXVsdCBsYW5ndWFnZVxyXG4gICAgICAgICAgICBsb2NhbGUgPSBsYW5ndWFnZUxpc3QubGFuZ3VhZ2VzWydkZWZhdWx0LWN1bHR1cmUnXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwbGl0dGluZyB0aGUgbG9jYWxlIHRvIHRha2UgdGhlIGxhbmdhdWdlIGNvZGUgb25seS5UaGUgbG9jYWxlIGNvbmF0aW4gYm90aCBsYW5ndWFnZSBhbmQgY291bnRyeSBjb2RlLFxyXG4gICAgICAgICAqIHRoZSBjb3JyZXNwb25kaW5nIGxvY2FsZSBqc29uIG5hbWUgY29udGFpbiBvbmx5IGxhbmd1YWdlIGNvZGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGV0IGxvY2FsZUNvZGUgPSBsb2NhbGUuc3BsaXQoJy0nKVswXTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxvY2FsZSBKU09OIGZpbGUgbmFtZSBzaG91bGQgYmUgaW4gYSBmb3JtYXQgb2YgYXdhcmRpbmdib2R5LWxvY2FsZS5qc29uLlxyXG4gICAgICAgICAqIFBvcHVsYXRpbmcgdGhlIHVybCBiYXNlZCBvbiB0ZSBhd2FyZGluZyBib2R5IGFuZCBsb2NhbGUgc2VsZWN0ZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuIGF3YXJkaW5nQm9keS50b0xvd2VyQ2FzZSgpICsgJy0nICsgbG9jYWxlQ29kZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gTG9jYWxlSGVscGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS9sb2NhbGUvbG9jYWxlaGVscGVyLnRzIl0sIm1hcHBpbmdzIjoiO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBa0ZBO0FBakZBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 283:
/* no static exports found */
/* all exports used */
/*!*********************************************************!*\
  !*** ./src/components/utility/message/messagehelper.ts ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\r\nvar messagestore = __webpack_require__(/*! ../../../stores/message/messagestore */ 240);\r\nvar groupHelper = __webpack_require__(/*! ../../../utility/grouping/grouphelper */ 430);\r\nvar grouperList = __webpack_require__(/*! ../../../utility/grouping/groupingbase/grouperlist */ 427);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\nvar localehelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\nvar stringFormatHelper = __webpack_require__(/*! ../../../utility/stringformat/stringformathelper */ 250);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar messageEditorConstants = __webpack_require__(/*! ../messageeditorconstants */ 325);\r\nvar stringHelper = __webpack_require__(/*! ../../../utility/generic/stringhelper */ 254);\r\nvar htmlUtilities = __webpack_require__(/*! ../../../utility/generic/htmlutilities */ 243);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../markeroperationmode/markeroperationmodefactory */ 232);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar MessageHelper = /** @class */ (function () {\r\n    function MessageHelper() {\r\n    }\r\n    /**\r\n     * Get the Header to display and the related messges\r\n     * @param messages\r\n     */\r\n    MessageHelper.getGroupedMessageObject = function (messages, expandOrCollapseDetails) {\r\n        var _this = this;\r\n        // To store the messages after the grouping and sorting\r\n        var messageList = Immutable.List();\r\n        // Get the messages grouped by QIG\r\n        var groupedMessages = groupHelper.group(messages, grouperList.MessageQigGrouper, enums.GroupByField.qig);\r\n        // Get the key seq\r\n        var groupedKeys = groupedMessages.keySeq();\r\n        // Create the return object\r\n        var returnObj = [];\r\n        // Loop through the keys and find the list of messages for the group.\r\n        groupedKeys.forEach(function (qigId) {\r\n            // Get the messages for the group.\r\n            var currentMessageGroup = groupedMessages.get(qigId);\r\n            // Clear the collection, In each group.\r\n            var messages = [];\r\n            // Get the each messages for the group.\r\n            currentMessageGroup.map(function (message) {\r\n                if (message.status === enums.MessageReadStatus.New && messagestore.instance.isMessageRead(message.examinerMessageId)) {\r\n                    message.status = enums.MessageReadStatus.Read;\r\n                }\r\n                messages.push(message);\r\n            });\r\n            // Get the awarding body name format\r\n            var nameToDisplay = MessageHelper.getDisplayText(messages[0]);\r\n            var messageFolderType = messages[0].messageFolderType;\r\n            // Create an object to store messages\r\n            var groupedObj = {\r\n                qigId: parseInt(qigId),\r\n                isOpen: _this.isQigOpen(parseInt(qigId), messageFolderType, expandOrCollapseDetails),\r\n                textToDisplay: nameToDisplay,\r\n                messages: messages,\r\n                unReadMessages: messages.filter(function (x) {\r\n                    return x.status === enums.MessageReadStatus.New && !messagestore.instance.isMessageRead(x.examinerMessageId);\r\n                }).length\r\n            };\r\n            returnObj.push(groupedObj);\r\n        });\r\n        // Sort the objects based on the display header.\r\n        var getGroupedMessageObject = returnObj.sort(function (obj1, obj2) {\r\n            return obj1.textToDisplay.localeCompare(obj2.textToDisplay);\r\n        });\r\n        // Get the messages as in the order of displaying in the UI\r\n        getGroupedMessageObject.forEach(function (messageObject) {\r\n            messageList = Immutable.List(messageList.concat(messageObject.messages));\r\n        });\r\n        var messageGroupDetails = {\r\n            // Stores the Grouped Object along with those messages\r\n            MessageGroupObjects: getGroupedMessageObject,\r\n            // Store all messages for the UI\r\n            messages: messageList\r\n        };\r\n        return messageGroupDetails;\r\n    };\r\n    /**\r\n     * Returns whether a particular qig is open or not\r\n     * @param expandOrCollapseDetails\r\n     */\r\n    MessageHelper.isQigOpen = function (qigId, messageFolderType, expandOrCollapseDetails) {\r\n        return expandOrCollapseDetails ? expandOrCollapseDetails.get(qigId, true) : true;\r\n    };\r\n    /**\r\n     * Get the time style for the Date\r\n     * @param timeToDisplay\r\n     * @param todayTextConversionRequired : for deciding Today text conversion\r\n     */\r\n    MessageHelper.getDateToDisplay = function (timeToDisplay, todayTextConversionRequired) {\r\n        if (todayTextConversionRequired === void 0) { todayTextConversionRequired = true; }\r\n        var timeToDisplayDate = new Date(timeToDisplay);\r\n        var todaysDate = new Date();\r\n        var time = localehelper.toLocaleTimeString(new Date(timeToDisplay.toString()));\r\n        // call setHours to take the time out of the comparison\r\n        if ((timeToDisplayDate.setHours(0, 0, 0, 0) === todaysDate.setHours(0, 0, 0, 0)) && todayTextConversionRequired) {\r\n            // Date equals today's date. Display date feild as Today.\r\n            return localeStore.instance.TranslateText('messaging.message-lists.message-detail.date-today') + ' ' + time;\r\n        }\r\n        else {\r\n            return localehelper.toLocaleDateString(new Date(timeToDisplay)) + ' ' + time;\r\n        }\r\n    };\r\n    /**\r\n     * Get the Display Header for the Group Header.\r\n     * @param message\r\n     */\r\n    MessageHelper.getDisplayText = function (message) {\r\n        var msg = messagestore.instance.messagesMarkSchemes;\r\n        if (msg) {\r\n            var messageList = msg.filter(function (messages) { return messages.markSchemeGroupId === message.markSchemeGroupId; });\r\n            {\r\n                return stringFormatHelper.formatAwardingBodyQIG(messageList.first().markSchemeGroupName, messageList.first().assessmentCode, messageList.first().sessionName, messageList.first().componentId, messageList.first().questionPaperName, messageList.first().assessmentName, messageList.first().componentName, stringFormatHelper.getOverviewQIGNameFormat());\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Return the Mark Scheme Group Name\r\n     * @param message\r\n     */\r\n    MessageHelper.getMarkSchemeGroupName = function (message) {\r\n        var msg = messagestore.instance.messagesMarkSchemes;\r\n        if (msg) {\r\n            return msg.filter(function (messages) { return messages.markSchemeGroupId === message.markSchemeGroupId; }).\r\n                first().markSchemeGroupName;\r\n        }\r\n    };\r\n    /**\r\n     * Used to create the MessageOrExceptionLinkedItems based on the messages\r\n     * @param messages\r\n     */\r\n    MessageHelper.getMessageLinkedItems = function (messages) {\r\n        var messageOrExceptionLinkedItems = [];\r\n        var items = messages.forEach(function (message) {\r\n            messageOrExceptionLinkedItems.push({\r\n                itemId: message.examinerMessageId,\r\n                senderOrItem: message.toTeam ?\r\n                    localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.entire-team') :\r\n                    MessageHelper.appendExaminer(message),\r\n                priorityOrStatus: message.priorityName,\r\n                subjectOrType: message.subject,\r\n                timeToDisplay: message.displayDate,\r\n                isUnreadOrUnactioned: message.status === enums.MessageReadStatus.New &&\r\n                    !messagestore.instance.isMessageRead(message.examinerMessageId)\r\n            });\r\n        });\r\n        return Immutable.List(messageOrExceptionLinkedItems);\r\n    };\r\n    /**\r\n     * append examiners\r\n     */\r\n    MessageHelper.appendExaminer = function (message) {\r\n        var examiners = '';\r\n        if (message && message.toExaminerDetails != null) {\r\n            message.toExaminerDetails.map(function (item) {\r\n                examiners += item.fullName + ';';\r\n            });\r\n            // removing last item semicolon\r\n            return examiners.replace(/;$/, '');\r\n        }\r\n        else {\r\n            examiners = message.examinerDetails.fullName;\r\n        }\r\n        return examiners;\r\n    };\r\n    /**\r\n     * This method will returns the message content based on the template name\r\n     * @param templateName - template name\r\n     * @param messageBody - message content\r\n     */\r\n    MessageHelper.getMessageContent = function (templateName, messageFrom, date, messageBody) {\r\n        var template;\r\n        switch (templateName) {\r\n            case enums.MessageType.InboxReply:\r\n            case enums.MessageType.ResponseReply:\r\n                template = stringHelper.format(localeStore.instance.TranslateText('messaging.compose-message.new-message-templates.reply'), [messageEditorConstants.TINYMCE_DEFAULT_FONT, messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE,\r\n                    this.getDateToDisplay(date, false), messageFrom, messageBody]);\r\n                break;\r\n            case enums.MessageType.InboxForward:\r\n            case enums.MessageType.ResponseForward:\r\n                template = stringHelper.format(localeStore.instance.TranslateText('messaging.compose-message.new-message-templates.forward'), [messageEditorConstants.TINYMCE_DEFAULT_FONT, messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE,\r\n                    this.getDateToDisplay(date, false), messageFrom, messageBody]);\r\n                break;\r\n            case enums.MessageType.ResponseCompose:\r\n            case enums.MessageType.WorklistCompose:\r\n            case enums.MessageType.InboxCompose:\r\n            case enums.MessageType.TeamCompose:\r\n                template = stringHelper.format(localeStore.instance.TranslateText('messaging.compose-message.new-message-templates.new'), [messageEditorConstants.TINYMCE_DEFAULT_FONT, messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE]);\r\n                break;\r\n        }\r\n        return template;\r\n    };\r\n    /**\r\n     * This method will return the Menu Action items needed based on the folder type\r\n     * @param folderType\r\n     * @param messageActions: an array of message actions\r\n     */\r\n    MessageHelper.getMessageMenuActionItems = function (folderType, messageActions) {\r\n        var _this = this;\r\n        var messageMenuActionItems = [];\r\n        switch (folderType) {\r\n            case enums.MessageFolderType.Inbox:\r\n                if (messageActions && messageActions.length > 0) {\r\n                    messageActions.map(function (x) {\r\n                        var actionItems = _this.messageActionItems(x);\r\n                        if (actionItems) {\r\n                            messageMenuActionItems.push(actionItems);\r\n                        }\r\n                    });\r\n                }\r\n        }\r\n        return messageMenuActionItems;\r\n    };\r\n    /**\r\n     * This method will return the localised message string based on message type\r\n     */\r\n    MessageHelper.getMessageHeader = function (messageType) {\r\n        var messageHeader;\r\n        switch (messageType) {\r\n            case enums.MessageType.InboxCompose:\r\n            case enums.MessageType.WorklistCompose:\r\n            case enums.MessageType.ResponseCompose:\r\n            case enums.MessageType.TeamCompose:\r\n                messageHeader = localeStore.instance.TranslateText('messaging.compose-message.new-message-header');\r\n                break;\r\n            case enums.MessageType.InboxForward:\r\n            case enums.MessageType.ResponseForward:\r\n                messageHeader = localeStore.instance.TranslateText('messaging.compose-message.forward-header');\r\n                break;\r\n            case enums.MessageType.InboxReply:\r\n            case enums.MessageType.ResponseReply:\r\n                messageHeader = localeStore.instance.TranslateText('messaging.compose-message.reply-header');\r\n                break;\r\n            case enums.MessageType.ResponseDetails:\r\n                messageHeader = localeStore.instance.TranslateText('marking.response.message-panel.header');\r\n        }\r\n        return messageHeader;\r\n    };\r\n    /**\r\n     * This method will returns the subject string\r\n     * @param messageType\r\n     * @param subject\r\n     */\r\n    MessageHelper.getSubjectContent = function (messageType, subject) {\r\n        var subjectText;\r\n        var subjectPrefix;\r\n        switch (messageType) {\r\n            case enums.MessageType.InboxCompose:\r\n                subjectText = subject;\r\n                break;\r\n            case enums.MessageType.InboxForward:\r\n            case enums.MessageType.ResponseForward:\r\n                subjectPrefix = localeStore.instance.TranslateText('messaging.compose-message.forward-prefix');\r\n                subjectText = subject.indexOf(subjectPrefix) === -1 ? subjectPrefix + ' ' + subject : subject;\r\n                break;\r\n            case enums.MessageType.InboxReply:\r\n            case enums.MessageType.ResponseReply:\r\n                subjectPrefix = localeStore.instance.TranslateText('messaging.compose-message.reply-prefix');\r\n                subjectText = subject.indexOf(subjectPrefix) === -1 ? subjectPrefix + ' ' + subject : subject;\r\n                break;\r\n        }\r\n        return subjectText;\r\n    };\r\n    Object.defineProperty(MessageHelper, \"getCreateNewMessageText\", {\r\n        /**\r\n         * Get the Create new text for the component.\r\n         */\r\n        get: function () {\r\n            return localeStore.instance.TranslateText('marking.response.message-list-panel.create-new-message');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * This method will return the Menu Action item based on the action parameter\r\n     * @param messageAction\r\n     */\r\n    MessageHelper.messageActionItems = function (messageAction) {\r\n        switch (messageAction) {\r\n            case enums.MessageAction.Reply:\r\n                return ({\r\n                    id: enums.MessageAction.Reply,\r\n                    icon: 'reply-icon',\r\n                    name: localeStore.instance.TranslateText('messaging.message-lists.message-detail.reply-button')\r\n                });\r\n            case enums.MessageAction.Forward:\r\n                if (!markerOperationModeFactory.operationMode.isForwardButtonHidden) {\r\n                    return ({\r\n                        id: enums.MessageAction.Forward,\r\n                        icon: 'forward-icon',\r\n                        name: localeStore.instance.TranslateText('messaging.message-lists.message-detail.forward-button')\r\n                    });\r\n                }\r\n                break;\r\n            case enums.MessageAction.Delete:\r\n                return ({\r\n                    id: enums.MessageAction.Delete,\r\n                    icon: 'delete-icon-small',\r\n                    name: localeStore.instance.TranslateText('messaging.message-lists.message-detail.delete-button')\r\n                });\r\n        }\r\n    };\r\n    /**\r\n     * This method will update the IFrame content with message details\r\n     * @param o\r\n     * @param e\r\n     */\r\n    MessageHelper.addIFrameForMessageDetails = function (o, e) {\r\n        var timeout = 0;\r\n        // add script to init mouse click event in parent window for any 'click' in current window\r\n        var scriptBlock = 'window.addEventListener(\\'click\\', function() { parent.initMouseClickEvent(); });';\r\n        var headTagContent = '<style type=\"text/css\"> p,body{margin:0;padding:0;}</style>';\r\n        if (htmlUtilities.isIPadDevice && htmlUtilities.getUserDevice().browser === 'Safari') {\r\n            //include script to block double tap and pinch zoom in iPad safari\r\n            scriptBlock +=\r\n                'window.addEventListener(\\'touchend\\', blockDoubleTapZoom);' +\r\n                    'window.addEventListener(\\'touchstart\\', blockPinchToZoom);' +\r\n                    //block double tap zoom\r\n                    'let lastTap = 0;' +\r\n                    'function blockDoubleTapZoom ( e ) {' +\r\n                    'let currentTime = new Date().getTime();' +\r\n                    'let tapLength = currentTime - lastTap;' +\r\n                    'if (tapLength < 500 && tapLength > 0) {' +\r\n                    'e.preventDefault();}' +\r\n                    'lastTap = currentTime;' +\r\n                    //init mouse click event\r\n                    'parent.initMouseClickEvent(); }' +\r\n                    //block pinch zoom\r\n                    'function blockPinchToZoom ( e ) {' +\r\n                    'if (e.touches.length > 1) {' +\r\n                    'e.preventDefault();}' +\r\n                    '}';\r\n        }\r\n        else {\r\n            //incluse script to init mouse click event in parent window for any 'touch' in current window\r\n            scriptBlock +=\r\n                'window.addEventListener(\\'touchend\\', function() { parent.initMouseClickEvent(); });';\r\n        }\r\n        var content = e.getContent().trim() +\r\n            '<script>' + scriptBlock + '</script >';\r\n        // put a timeout of 0, otherwise message details are not rendering on first message item click\r\n        if (!htmlUtilities.isTabletOrMobileDevice && htmlUtilities.getUserDevice().browser === 'Firefox') {\r\n            timeout = 50;\r\n        }\r\n        setTimeout(function () {\r\n            $('#msg-iframe_ifr').contents().find('head').html(headTagContent);\r\n            $('#msg-iframe_ifr').contents().find('body').html(content);\r\n        }, timeout);\r\n    };\r\n    /**\r\n     * Returns a boolean indicating whether the message panel is edited.\r\n     */\r\n    MessageHelper.isMessagePanelEdited = function (messageType, messageToFieldValues, messageToFieldIds) {\r\n        if (messagestore.instance.isMessagePanelActive) {\r\n            var currentActiveEditorId = tinymce.activeEditor.id;\r\n            var activeEditor = tinymce.get(MessageHelper.messageEditorId);\r\n            if (messageType === enums.MessageType.InboxCompose || messageType === enums.MessageType.InboxForward ||\r\n                messageType === enums.MessageType.InboxReply) {\r\n                return MessageHelper.messageSubject && MessageHelper.messageSubject.trim().length > 0 ||\r\n                    activeEditor.getContent({ format: 'text' }).trim().length > 0 ||\r\n                    ((messageToFieldValues && messageToFieldValues.length > 0) &&\r\n                        (messageToFieldIds && messageToFieldIds.length > 0));\r\n            }\r\n            else if (messageType === enums.MessageType.ResponseCompose\r\n                || messageType === enums.MessageType.WorklistCompose || messageType === enums.MessageType.ResponseReply\r\n                || messageType === enums.MessageType.ResponseForward || messageType === enums.MessageType.TeamCompose) {\r\n                return MessageHelper.messageSubject && MessageHelper.messageSubject.trim().length > 0 ||\r\n                    activeEditor.getContent({ format: 'text' }).trim().length > 0;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This method revamps the marking mode naming for display in message\r\n     * @param markingMode\r\n     * @param isElectronicStandardisationTeamMember\r\n     */\r\n    MessageHelper.getMarkingModeText = function (markingMode, isElectronicStandardisationTeamMember) {\r\n        if (markingMode === enums.MarkingMode.ES_TeamApproval) {\r\n            if (isElectronicStandardisationTeamMember) {\r\n                return ((localeStore.instance.TranslateText('marking.worklist.response-data.stm-standardisation-response-title')) + ' ');\r\n            }\r\n            else {\r\n                return ((localeStore.instance.TranslateText('marking.worklist.response-data.second-standardisation-response-title')) + ' ');\r\n            }\r\n        }\r\n        else if (markingMode === enums.MarkingMode.Practice) {\r\n            return ((localeStore.instance.TranslateText('marking.worklist.response-data.practice-response-title')) + ' ');\r\n        }\r\n        else if (markingMode === enums.MarkingMode.Approval) {\r\n            return ((localeStore.instance.TranslateText('marking.worklist.response-data.standardisation-response-title')) + ' ');\r\n        }\r\n        else if (markingMode === enums.MarkingMode.ES_TeamApproval) {\r\n            return ((localeStore.instance.TranslateText('marking.worklist.response-data.second-standardisation-response-title')) + ' ');\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    };\r\n    MessageHelper._isPasteEnabled = false;\r\n    MessageHelper.messageEditorId = 'msg-tinymce-editor';\r\n    /**\r\n     * This method will return the selected item for priority dropdown based on priority name\r\n     */\r\n    MessageHelper.getPriorityDropDownSelectedItem = function (priorityName) {\r\n        if (priorityName === enums.getEnumString(enums.MessagePriority, enums.MessagePriority.Standard)) {\r\n            return enums.MessagePriority.Standard;\r\n        }\r\n        else if (priorityName === enums.getEnumString(enums.MessagePriority, enums.MessagePriority.Important)) {\r\n            return enums.MessagePriority.Important;\r\n        }\r\n        else if (priorityName === enums.getEnumString(enums.MessagePriority, enums.MessagePriority.Mandatory)) {\r\n            // When replying and forwarding a  mandatory message,priority need to be reset to standard.\r\n            return enums.MessagePriority.Standard;\r\n        }\r\n    };\r\n    /**\r\n     * returns the navigate to default options for different message types.\r\n     */\r\n    MessageHelper.getNavigateAwayType = function (messageType) {\r\n        var navigateTo = enums.SaveAndNavigate.none;\r\n        switch (messageType) {\r\n            case enums.MessageType.ResponseReply:\r\n            case enums.MessageType.ResponseForward:\r\n            case enums.MessageType.ResponseCompose:\r\n                navigateTo = enums.SaveAndNavigate.toNewResponseMessageCompose;\r\n                break;\r\n        }\r\n        return navigateTo;\r\n    };\r\n    /**\r\n     * Returns true if focus needs to be set in tinymce editor else return false\r\n     */\r\n    MessageHelper.hasFocus = function (messageType) {\r\n        return (messageType === enums.MessageType.InboxForward || messageType === enums.MessageType.InboxReply\r\n            || messageType === enums.MessageType.ResponseReply || messageType === enums.MessageType.ResponseForward);\r\n    };\r\n    MessageHelper.addInitMouseClickEventScriptBlock = function () {\r\n        // we have to close opened priority drop down and user options (logout options) while clicking on outside that. iframe was\r\n        // preventing the click event to propagate outside so closing of those things are not happening while clicking on iframe.\r\n        // dynamically add script to create mouse event\r\n        var scriptElement = document.getElementById('init_mouse_click_event_script_block');\r\n        var isScriptElementPresent = false;\r\n        if (scriptElement != null) {\r\n            isScriptElementPresent = true;\r\n        }\r\n        else {\r\n            scriptElement = document.createElement('script');\r\n            scriptElement.id = 'init_mouse_click_event_script_block';\r\n            scriptElement.innerText =\r\n                'function initMouseClickEvent() {' +\r\n                    'let event = document.createEvent(\\'MouseEvents\\');' +\r\n                    'event.initMouseEvent(\\'click\\', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);' +\r\n                    'window.dispatchEvent(event); }';\r\n        }\r\n        if (!isScriptElementPresent) {\r\n            document.body.appendChild(scriptElement);\r\n        }\r\n    };\r\n    MessageHelper.removeInitMouseClickEventScriptBlock = function () {\r\n        var scriptElement = document.getElementById('init_mouse_click_event_script_block');\r\n        if (htmlUtilities.getUserDevice().browser !== 'IE') {\r\n            document.body.removeChild(scriptElement);\r\n        }\r\n    };\r\n    MessageHelper.setPasteEnabledAction = function (isPasteEnabled) {\r\n        MessageHelper._isPasteEnabled = isPasteEnabled;\r\n    };\r\n    /**\r\n     * Method which gets the selected QIG's name based on the Awarding Body specific QIG Naming format\r\n     */\r\n    MessageHelper.getCurrentQIGName = function () {\r\n        // Calling the helper method to format the QIG Name\r\n        if (qigStore.instance.selectedQIGForMarkerOperation !== undefined) {\r\n            var selectedQig = qigStore.instance.selectedQIGForMarkerOperation;\r\n            return stringFormatHelper.formatAwardingBodyQIG(selectedQig.markSchemeGroupName, selectedQig.assessmentCode, selectedQig.sessionName, selectedQig.componentId, selectedQig.questionPaperName, selectedQig.assessmentName, selectedQig.componentName, stringFormatHelper.getOverviewQIGNameFormat());\r\n        }\r\n        // If a QIG is not selected, return the default text to be shown on the drop down\r\n        return localeStore.instance.TranslateText('messaging.compose-message.please-select-qig-placeholder');\r\n    };\r\n    /**\r\n     * Handles changes in the message panel subject section.\r\n     * @param e\r\n     */\r\n    MessageHelper.handleSubjectChange = function (subject) {\r\n        MessageHelper.messageSubject = subject;\r\n    };\r\n    return MessageHelper;\r\n}());\r\nmodule.exports = MessageHelper;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 42)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9tZXNzYWdlL21lc3NhZ2VoZWxwZXIudHM/NmViOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWVzc2FnZXN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL21lc3NhZ2UvbWVzc2FnZXN0b3JlJyk7XHJcbmltcG9ydCBxaWdTdW1tYXJ5ID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL3FpZ3NlbGVjdG9yL3R5cGluZ3MvcWlnc3VtbWFyeScpO1xyXG5pbXBvcnQgZ3JvdXBIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2dyb3VwaW5nL2dyb3VwaGVscGVyJyk7XHJcbmltcG9ydCBncm91cGVyTGlzdCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvZ3JvdXBpbmcvZ3JvdXBpbmdiYXNlL2dyb3VwZXJsaXN0Jyk7XHJcbmltcG9ydCBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vZW51bXMnKTtcclxuaW1wb3J0IGxvY2FsZWhlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvbG9jYWxlL2xvY2FsZWhlbHBlcicpO1xyXG5pbXBvcnQgc3RyaW5nRm9ybWF0SGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9zdHJpbmdmb3JtYXQvc3RyaW5nZm9ybWF0aGVscGVyJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IG1lc3NhZ2VFZGl0b3JDb25zdGFudHMgPSByZXF1aXJlKCcuLi9tZXNzYWdlZWRpdG9yY29uc3RhbnRzJyk7XHJcbmltcG9ydCBzdHJpbmdIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2dlbmVyaWMvc3RyaW5naGVscGVyJyk7XHJcbmltcG9ydCBodG1sVXRpbGl0aWVzID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9nZW5lcmljL2h0bWx1dGlsaXRpZXMnKTtcclxuaW1wb3J0IG5hdmlnYXRpb25TdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9uYXZpZ2F0aW9uL25hdmlnYXRpb25zdG9yZScpO1xyXG5pbXBvcnQgbWFya2VyT3BlcmF0aW9uTW9kZUZhY3RvcnkgPSByZXF1aXJlKCcuLi9tYXJrZXJvcGVyYXRpb25tb2RlL21hcmtlcm9wZXJhdGlvbm1vZGVmYWN0b3J5Jyk7XHJcbmltcG9ydCBxaWdTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9xaWdzZWxlY3Rvci9xaWdzdG9yZScpO1xyXG5pbXBvcnQgdGVhbU1hbmFnZW1lbnRTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy90ZWFtbWFuYWdlbWVudC90ZWFtbWFuYWdlbWVudHN0b3JlJyk7XHJcbmltcG9ydCBleGFtaW5lclN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL21hcmtlcmluZm9ybWF0aW9uL2V4YW1pbmVyc3RvcmUnKTtcclxuXHJcbmRlY2xhcmUgbGV0IHRpbnltY2U6IGFueTtcclxuXHJcbmNsYXNzIE1lc3NhZ2VIZWxwZXIge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgX2lzUGFzdGVFbmFibGVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgbWVzc2FnZUVkaXRvcklkOiBzdHJpbmcgPSAnbXNnLXRpbnltY2UtZWRpdG9yJztcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBtZXNzYWdlU3ViamVjdDogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBIZWFkZXIgdG8gZGlzcGxheSBhbmQgdGhlIHJlbGF0ZWQgbWVzc2dlc1xyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0R3JvdXBlZE1lc3NhZ2VPYmplY3QobWVzc2FnZXM6IEltbXV0YWJsZS5MaXN0PE1lc3NhZ2U+LCBleHBhbmRPckNvbGxhcHNlRGV0YWlsczogSW1tdXRhYmxlLk1hcDxudW1iZXIsIGJvb2xlYW4+KTpcclxuICAgICAgICBNZXNzYWdlR3JvdXBEZXRhaWxzIHtcclxuICAgICAgICAvLyBUbyBzdG9yZSB0aGUgbWVzc2FnZXMgYWZ0ZXIgdGhlIGdyb3VwaW5nIGFuZCBzb3J0aW5nXHJcbiAgICAgICAgbGV0IG1lc3NhZ2VMaXN0OiBJbW11dGFibGUuTGlzdDxNZXNzYWdlPiA9IEltbXV0YWJsZS5MaXN0PE1lc3NhZ2U+KCk7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUgbWVzc2FnZXMgZ3JvdXBlZCBieSBRSUdcclxuICAgICAgICBsZXQgZ3JvdXBlZE1lc3NhZ2VzID0gZ3JvdXBIZWxwZXIuZ3JvdXAobWVzc2FnZXMsIGdyb3VwZXJMaXN0Lk1lc3NhZ2VRaWdHcm91cGVyLCBlbnVtcy5Hcm91cEJ5RmllbGQucWlnKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBrZXkgc2VxXHJcbiAgICAgICAgbGV0IGdyb3VwZWRLZXlzID0gZ3JvdXBlZE1lc3NhZ2VzLmtleVNlcSgpO1xyXG5cclxuICAgICAgICAvLyBDcmVhdGUgdGhlIHJldHVybiBvYmplY3RcclxuICAgICAgICBsZXQgcmV0dXJuT2JqOiBNZXNzYWdlR3JvdXBEYXRhW10gPSBbXTtcclxuXHJcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHRoZSBrZXlzIGFuZCBmaW5kIHRoZSBsaXN0IG9mIG1lc3NhZ2VzIGZvciB0aGUgZ3JvdXAuXHJcbiAgICAgICAgZ3JvdXBlZEtleXMuZm9yRWFjaCgocWlnSWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIG1lc3NhZ2VzIGZvciB0aGUgZ3JvdXAuXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50TWVzc2FnZUdyb3VwID0gZ3JvdXBlZE1lc3NhZ2VzLmdldChxaWdJZCk7XHJcblxyXG4gICAgICAgICAgICAvLyBDbGVhciB0aGUgY29sbGVjdGlvbiwgSW4gZWFjaCBncm91cC5cclxuICAgICAgICAgICAgbGV0IG1lc3NhZ2VzID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGVhY2ggbWVzc2FnZXMgZm9yIHRoZSBncm91cC5cclxuICAgICAgICAgICAgY3VycmVudE1lc3NhZ2VHcm91cC5tYXAoKG1lc3NhZ2U6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhdHVzID09PSBlbnVtcy5NZXNzYWdlUmVhZFN0YXR1cy5OZXcgJiYgbWVzc2FnZXN0b3JlLmluc3RhbmNlLmlzTWVzc2FnZVJlYWQobWVzc2FnZS5leGFtaW5lck1lc3NhZ2VJZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0YXR1cyA9IGVudW1zLk1lc3NhZ2VSZWFkU3RhdHVzLlJlYWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldCB0aGUgYXdhcmRpbmcgYm9keSBuYW1lIGZvcm1hdFxyXG4gICAgICAgICAgICBsZXQgbmFtZVRvRGlzcGxheSA9IE1lc3NhZ2VIZWxwZXIuZ2V0RGlzcGxheVRleHQobWVzc2FnZXNbMF0pO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1lc3NhZ2VGb2xkZXJUeXBlOiBlbnVtcy5NZXNzYWdlRm9sZGVyVHlwZSA9IG1lc3NhZ2VzWzBdLm1lc3NhZ2VGb2xkZXJUeXBlO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIGFuIG9iamVjdCB0byBzdG9yZSBtZXNzYWdlc1xyXG4gICAgICAgICAgICBsZXQgZ3JvdXBlZE9iajogTWVzc2FnZUdyb3VwRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIHFpZ0lkOiBwYXJzZUludChxaWdJZCksXHJcbiAgICAgICAgICAgICAgICBpc09wZW46IHRoaXMuaXNRaWdPcGVuKHBhcnNlSW50KHFpZ0lkKSwgbWVzc2FnZUZvbGRlclR5cGUsIGV4cGFuZE9yQ29sbGFwc2VEZXRhaWxzKSxcclxuICAgICAgICAgICAgICAgIHRleHRUb0Rpc3BsYXk6IG5hbWVUb0Rpc3BsYXksXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogbWVzc2FnZXMsXHJcbiAgICAgICAgICAgICAgICB1blJlYWRNZXNzYWdlczogbWVzc2FnZXMuZmlsdGVyKCh4OiBNZXNzYWdlKSA9PlxyXG4gICAgICAgICAgICAgICAgICAgIHguc3RhdHVzID09PSBlbnVtcy5NZXNzYWdlUmVhZFN0YXR1cy5OZXcgJiYgIW1lc3NhZ2VzdG9yZS5pbnN0YW5jZS5pc01lc3NhZ2VSZWFkKHguZXhhbWluZXJNZXNzYWdlSWQpKS5sZW5ndGhcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybk9iai5wdXNoKGdyb3VwZWRPYmopO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBTb3J0IHRoZSBvYmplY3RzIGJhc2VkIG9uIHRoZSBkaXNwbGF5IGhlYWRlci5cclxuICAgICAgICBsZXQgZ2V0R3JvdXBlZE1lc3NhZ2VPYmplY3QgPSByZXR1cm5PYmouc29ydChmdW5jdGlvbiAob2JqMTogTWVzc2FnZUdyb3VwRGF0YSwgb2JqMjogTWVzc2FnZUdyb3VwRGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqMS50ZXh0VG9EaXNwbGF5LmxvY2FsZUNvbXBhcmUob2JqMi50ZXh0VG9EaXNwbGF5KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBtZXNzYWdlcyBhcyBpbiB0aGUgb3JkZXIgb2YgZGlzcGxheWluZyBpbiB0aGUgVUlcclxuICAgICAgICBnZXRHcm91cGVkTWVzc2FnZU9iamVjdC5mb3JFYWNoKChtZXNzYWdlT2JqZWN0OiBNZXNzYWdlR3JvdXBEYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VMaXN0ID0gSW1tdXRhYmxlLkxpc3Q8TWVzc2FnZT4obWVzc2FnZUxpc3QuY29uY2F0KG1lc3NhZ2VPYmplY3QubWVzc2FnZXMpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IG1lc3NhZ2VHcm91cERldGFpbHM6IE1lc3NhZ2VHcm91cERldGFpbHMgPSB7XHJcbiAgICAgICAgICAgIC8vIFN0b3JlcyB0aGUgR3JvdXBlZCBPYmplY3QgYWxvbmcgd2l0aCB0aG9zZSBtZXNzYWdlc1xyXG4gICAgICAgICAgICBNZXNzYWdlR3JvdXBPYmplY3RzOiBnZXRHcm91cGVkTWVzc2FnZU9iamVjdCxcclxuXHJcbiAgICAgICAgICAgIC8vIFN0b3JlIGFsbCBtZXNzYWdlcyBmb3IgdGhlIFVJXHJcbiAgICAgICAgICAgIG1lc3NhZ2VzOiBtZXNzYWdlTGlzdFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBtZXNzYWdlR3JvdXBEZXRhaWxzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIGEgcGFydGljdWxhciBxaWcgaXMgb3BlbiBvciBub3RcclxuICAgICAqIEBwYXJhbSBleHBhbmRPckNvbGxhcHNlRGV0YWlscyBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgaXNRaWdPcGVuKHFpZ0lkOiBudW1iZXIsIG1lc3NhZ2VGb2xkZXJUeXBlOiBlbnVtcy5NZXNzYWdlRm9sZGVyVHlwZSxcclxuICAgICAgICBleHBhbmRPckNvbGxhcHNlRGV0YWlsczogSW1tdXRhYmxlLk1hcDxudW1iZXIsIGJvb2xlYW4+KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGV4cGFuZE9yQ29sbGFwc2VEZXRhaWxzID8gZXhwYW5kT3JDb2xsYXBzZURldGFpbHMuZ2V0KHFpZ0lkLCB0cnVlKSA6IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIHRpbWUgc3R5bGUgZm9yIHRoZSBEYXRlXHJcbiAgICAgKiBAcGFyYW0gdGltZVRvRGlzcGxheVxyXG4gICAgICogQHBhcmFtIHRvZGF5VGV4dENvbnZlcnNpb25SZXF1aXJlZCA6IGZvciBkZWNpZGluZyBUb2RheSB0ZXh0IGNvbnZlcnNpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXREYXRlVG9EaXNwbGF5KHRpbWVUb0Rpc3BsYXk6IHN0cmluZywgdG9kYXlUZXh0Q29udmVyc2lvblJlcXVpcmVkOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIGxldCB0aW1lVG9EaXNwbGF5RGF0ZSA9IG5ldyBEYXRlKHRpbWVUb0Rpc3BsYXkpO1xyXG5cclxuICAgICAgICBsZXQgdG9kYXlzRGF0ZSA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgICAgIGxldCB0aW1lOiBzdHJpbmcgPSBsb2NhbGVoZWxwZXIudG9Mb2NhbGVUaW1lU3RyaW5nKG5ldyBEYXRlKHRpbWVUb0Rpc3BsYXkudG9TdHJpbmcoKSkpO1xyXG5cclxuICAgICAgICAvLyBjYWxsIHNldEhvdXJzIHRvIHRha2UgdGhlIHRpbWUgb3V0IG9mIHRoZSBjb21wYXJpc29uXHJcbiAgICAgICAgaWYgKCh0aW1lVG9EaXNwbGF5RGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKSA9PT0gdG9kYXlzRGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKSkgJiYgdG9kYXlUZXh0Q29udmVyc2lvblJlcXVpcmVkKSB7XHJcbiAgICAgICAgICAgIC8vIERhdGUgZXF1YWxzIHRvZGF5J3MgZGF0ZS4gRGlzcGxheSBkYXRlIGZlaWxkIGFzIFRvZGF5LlxyXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWVzc2FnaW5nLm1lc3NhZ2UtbGlzdHMubWVzc2FnZS1kZXRhaWwuZGF0ZS10b2RheScpICsgJyAnICsgdGltZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlaGVscGVyLnRvTG9jYWxlRGF0ZVN0cmluZyhuZXcgRGF0ZSh0aW1lVG9EaXNwbGF5KSkgKyAnICcgKyB0aW1lO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgRGlzcGxheSBIZWFkZXIgZm9yIHRoZSBHcm91cCBIZWFkZXIuXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldERpc3BsYXlUZXh0KG1lc3NhZ2U6IE1lc3NhZ2UpIHtcclxuICAgICAgICBsZXQgbXNnID0gbWVzc2FnZXN0b3JlLmluc3RhbmNlLm1lc3NhZ2VzTWFya1NjaGVtZXM7XHJcbiAgICAgICAgaWYgKG1zZykge1xyXG4gICAgICAgICAgICBsZXQgbWVzc2FnZUxpc3QgPSBtc2cuZmlsdGVyKChtZXNzYWdlczogTWVzc2FnaW5nTWFya1NjaGVtZSkgPT4gbWVzc2FnZXMubWFya1NjaGVtZUdyb3VwSWQgPT09IG1lc3NhZ2UubWFya1NjaGVtZUdyb3VwSWQpO1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nRm9ybWF0SGVscGVyLmZvcm1hdEF3YXJkaW5nQm9keVFJRyhcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlTGlzdC5maXJzdCgpLm1hcmtTY2hlbWVHcm91cE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUxpc3QuZmlyc3QoKS5hc3Nlc3NtZW50Q29kZSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlTGlzdC5maXJzdCgpLnNlc3Npb25OYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VMaXN0LmZpcnN0KCkuY29tcG9uZW50SWQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUxpc3QuZmlyc3QoKS5xdWVzdGlvblBhcGVyTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlTGlzdC5maXJzdCgpLmFzc2Vzc21lbnROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VMaXN0LmZpcnN0KCkuY29tcG9uZW50TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmdGb3JtYXRIZWxwZXIuZ2V0T3ZlcnZpZXdRSUdOYW1lRm9ybWF0KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHRoZSBNYXJrIFNjaGVtZSBHcm91cCBOYW1lXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldE1hcmtTY2hlbWVHcm91cE5hbWUobWVzc2FnZTogTWVzc2FnZSk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IG1zZyA9IG1lc3NhZ2VzdG9yZS5pbnN0YW5jZS5tZXNzYWdlc01hcmtTY2hlbWVzO1xyXG4gICAgICAgIGlmIChtc2cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1zZy5maWx0ZXIoKG1lc3NhZ2VzOiBNZXNzYWdpbmdNYXJrU2NoZW1lKSA9PiBtZXNzYWdlcy5tYXJrU2NoZW1lR3JvdXBJZCA9PT0gbWVzc2FnZS5tYXJrU2NoZW1lR3JvdXBJZCkuXHJcbiAgICAgICAgICAgICAgICBmaXJzdCgpLm1hcmtTY2hlbWVHcm91cE5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlZCB0byBjcmVhdGUgdGhlIE1lc3NhZ2VPckV4Y2VwdGlvbkxpbmtlZEl0ZW1zIGJhc2VkIG9uIHRoZSBtZXNzYWdlc1xyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0TWVzc2FnZUxpbmtlZEl0ZW1zKG1lc3NhZ2VzOiBJbW11dGFibGUuTGlzdDxNZXNzYWdlPik6IEltbXV0YWJsZS5MaXN0PE1lc3NhZ2VPckV4Y2VwdGlvbkxpbmtlZEl0ZW0+IHtcclxuICAgICAgICBsZXQgbWVzc2FnZU9yRXhjZXB0aW9uTGlua2VkSXRlbXM6IE1lc3NhZ2VPckV4Y2VwdGlvbkxpbmtlZEl0ZW1bXSA9IFtdO1xyXG4gICAgICAgIGxldCBpdGVtcyA9IG1lc3NhZ2VzLmZvckVhY2goKG1lc3NhZ2U6IE1lc3NhZ2UpID0+IHtcclxuICAgICAgICAgICAgbWVzc2FnZU9yRXhjZXB0aW9uTGlua2VkSXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBpdGVtSWQ6IG1lc3NhZ2UuZXhhbWluZXJNZXNzYWdlSWQsXHJcbiAgICAgICAgICAgICAgICBzZW5kZXJPckl0ZW06IG1lc3NhZ2UudG9UZWFtID9cclxuICAgICAgICAgICAgICAgICAgICBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtZXNzYWdpbmcuY29tcG9zZS1tZXNzYWdlLnJlY2lwaWVudC1zZWxlY3Rvci5lbnRpcmUtdGVhbScpIDpcclxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlSGVscGVyLmFwcGVuZEV4YW1pbmVyKG1lc3NhZ2UpLFxyXG4gICAgICAgICAgICAgICAgcHJpb3JpdHlPclN0YXR1czogbWVzc2FnZS5wcmlvcml0eU5hbWUsXHJcbiAgICAgICAgICAgICAgICBzdWJqZWN0T3JUeXBlOiBtZXNzYWdlLnN1YmplY3QsXHJcbiAgICAgICAgICAgICAgICB0aW1lVG9EaXNwbGF5OiBtZXNzYWdlLmRpc3BsYXlEYXRlLFxyXG4gICAgICAgICAgICAgICAgaXNVbnJlYWRPclVuYWN0aW9uZWQ6IG1lc3NhZ2Uuc3RhdHVzID09PSBlbnVtcy5NZXNzYWdlUmVhZFN0YXR1cy5OZXcgJiZcclxuICAgICAgICAgICAgICAgICFtZXNzYWdlc3RvcmUuaW5zdGFuY2UuaXNNZXNzYWdlUmVhZChtZXNzYWdlLmV4YW1pbmVyTWVzc2FnZUlkKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIEltbXV0YWJsZS5MaXN0KG1lc3NhZ2VPckV4Y2VwdGlvbkxpbmtlZEl0ZW1zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGFwcGVuZCBleGFtaW5lcnNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgYXBwZW5kRXhhbWluZXIobWVzc2FnZTogTWVzc2FnZSk6IHN0cmluZyB7XHJcblxyXG4gICAgICAgIGxldCBleGFtaW5lcnM6IHN0cmluZyA9ICcnO1xyXG5cclxuICAgICAgICBpZiAobWVzc2FnZSAmJiBtZXNzYWdlLnRvRXhhbWluZXJEZXRhaWxzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbWVzc2FnZS50b0V4YW1pbmVyRGV0YWlscy5tYXAoKGl0ZW06IEV4YW1pbmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBleGFtaW5lcnMgKz0gaXRlbS5mdWxsTmFtZSArICc7JztcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyByZW1vdmluZyBsYXN0IGl0ZW0gc2VtaWNvbG9uXHJcbiAgICAgICAgICAgIHJldHVybiBleGFtaW5lcnMucmVwbGFjZSgvOyQvLCAnJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZXhhbWluZXJzID0gbWVzc2FnZS5leGFtaW5lckRldGFpbHMuZnVsbE5hbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZXhhbWluZXJzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCByZXR1cm5zIHRoZSBtZXNzYWdlIGNvbnRlbnQgYmFzZWQgb24gdGhlIHRlbXBsYXRlIG5hbWVcclxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZU5hbWUgLSB0ZW1wbGF0ZSBuYW1lXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZUJvZHkgLSBtZXNzYWdlIGNvbnRlbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRNZXNzYWdlQ29udGVudCh0ZW1wbGF0ZU5hbWU6IGVudW1zLk1lc3NhZ2VUeXBlLCBtZXNzYWdlRnJvbT86IHN0cmluZywgZGF0ZT86IHN0cmluZywgbWVzc2FnZUJvZHk/OiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgdGVtcGxhdGU6IHN0cmluZztcclxuICAgICAgICBzd2l0Y2ggKHRlbXBsYXRlTmFtZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1lc3NhZ2VUeXBlLkluYm94UmVwbHk6XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZVR5cGUuUmVzcG9uc2VSZXBseTpcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gc3RyaW5nSGVscGVyLmZvcm1hdChsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtZXNzYWdpbmcuY29tcG9zZS1tZXNzYWdlLm5ldy1tZXNzYWdlLXRlbXBsYXRlcy5yZXBseScpLFxyXG4gICAgICAgICAgICAgICAgICAgIFttZXNzYWdlRWRpdG9yQ29uc3RhbnRzLlRJTllNQ0VfREVGQVVMVF9GT05ULCBtZXNzYWdlRWRpdG9yQ29uc3RhbnRzLlRJTllNQ0VfREVGQVVMVF9GT05UU0laRSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldERhdGVUb0Rpc3BsYXkoZGF0ZSwgZmFsc2UpLCBtZXNzYWdlRnJvbSwgbWVzc2FnZUJvZHldKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1lc3NhZ2VUeXBlLkluYm94Rm9yd2FyZDpcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5NZXNzYWdlVHlwZS5SZXNwb25zZUZvcndhcmQ6XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9IHN0cmluZ0hlbHBlci5mb3JtYXQobG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICgnbWVzc2FnaW5nLmNvbXBvc2UtbWVzc2FnZS5uZXctbWVzc2FnZS10ZW1wbGF0ZXMuZm9yd2FyZCcpLFxyXG4gICAgICAgICAgICAgICAgICAgIFttZXNzYWdlRWRpdG9yQ29uc3RhbnRzLlRJTllNQ0VfREVGQVVMVF9GT05ULCBtZXNzYWdlRWRpdG9yQ29uc3RhbnRzLlRJTllNQ0VfREVGQVVMVF9GT05UU0laRSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldERhdGVUb0Rpc3BsYXkoZGF0ZSwgZmFsc2UpLCBtZXNzYWdlRnJvbSwgbWVzc2FnZUJvZHldKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1lc3NhZ2VUeXBlLlJlc3BvbnNlQ29tcG9zZTpcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5NZXNzYWdlVHlwZS5Xb3JrbGlzdENvbXBvc2U6XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZVR5cGUuSW5ib3hDb21wb3NlOlxyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1lc3NhZ2VUeXBlLlRlYW1Db21wb3NlOlxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGUgPSBzdHJpbmdIZWxwZXIuZm9ybWF0KGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21lc3NhZ2luZy5jb21wb3NlLW1lc3NhZ2UubmV3LW1lc3NhZ2UtdGVtcGxhdGVzLm5ldycpLFxyXG4gICAgICAgICAgICAgICAgICAgIFttZXNzYWdlRWRpdG9yQ29uc3RhbnRzLlRJTllNQ0VfREVGQVVMVF9GT05ULCBtZXNzYWdlRWRpdG9yQ29uc3RhbnRzLlRJTllNQ0VfREVGQVVMVF9GT05UU0laRV0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gdGhlIE1lbnUgQWN0aW9uIGl0ZW1zIG5lZWRlZCBiYXNlZCBvbiB0aGUgZm9sZGVyIHR5cGVcclxuICAgICAqIEBwYXJhbSBmb2xkZXJUeXBlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZUFjdGlvbnM6IGFuIGFycmF5IG9mIG1lc3NhZ2UgYWN0aW9uc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldE1lc3NhZ2VNZW51QWN0aW9uSXRlbXMoZm9sZGVyVHlwZTogZW51bXMuTWVzc2FnZUZvbGRlclR5cGUsIG1lc3NhZ2VBY3Rpb25zOiBBcnJheTxlbnVtcy5NZXNzYWdlQWN0aW9uPikge1xyXG4gICAgICAgIGxldCBtZXNzYWdlTWVudUFjdGlvbkl0ZW1zOiBBcnJheTxhbnk+ID0gW107XHJcbiAgICAgICAgc3dpdGNoIChmb2xkZXJUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZUZvbGRlclR5cGUuSW5ib3g6XHJcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZUFjdGlvbnMgJiYgbWVzc2FnZUFjdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VBY3Rpb25zLm1hcCgoeDogZW51bXMuTWVzc2FnZUFjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWN0aW9uSXRlbXMgPSB0aGlzLm1lc3NhZ2VBY3Rpb25JdGVtcyh4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbkl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlTWVudUFjdGlvbkl0ZW1zLnB1c2goYWN0aW9uSXRlbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtZXNzYWdlTWVudUFjdGlvbkl0ZW1zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gdGhlIGxvY2FsaXNlZCBtZXNzYWdlIHN0cmluZyBiYXNlZCBvbiBtZXNzYWdlIHR5cGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRNZXNzYWdlSGVhZGVyKG1lc3NhZ2VUeXBlOiBlbnVtcy5NZXNzYWdlVHlwZSkge1xyXG4gICAgICAgIGxldCBtZXNzYWdlSGVhZGVyOiBzdHJpbmc7XHJcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1lc3NhZ2VUeXBlLkluYm94Q29tcG9zZTpcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5NZXNzYWdlVHlwZS5Xb3JrbGlzdENvbXBvc2U6XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZVR5cGUuUmVzcG9uc2VDb21wb3NlOlxyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1lc3NhZ2VUeXBlLlRlYW1Db21wb3NlOlxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZUhlYWRlciA9IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21lc3NhZ2luZy5jb21wb3NlLW1lc3NhZ2UubmV3LW1lc3NhZ2UtaGVhZGVyJyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5NZXNzYWdlVHlwZS5JbmJveEZvcndhcmQ6XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZVR5cGUuUmVzcG9uc2VGb3J3YXJkOlxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZUhlYWRlciA9IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21lc3NhZ2luZy5jb21wb3NlLW1lc3NhZ2UuZm9yd2FyZC1oZWFkZXInKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1lc3NhZ2VUeXBlLkluYm94UmVwbHk6XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZVR5cGUuUmVzcG9uc2VSZXBseTpcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VIZWFkZXIgPSBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtZXNzYWdpbmcuY29tcG9zZS1tZXNzYWdlLnJlcGx5LWhlYWRlcicpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZVR5cGUuUmVzcG9uc2VEZXRhaWxzOlxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZUhlYWRlciA9IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcucmVzcG9uc2UubWVzc2FnZS1wYW5lbC5oZWFkZXInKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbWVzc2FnZUhlYWRlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJucyB0aGUgc3ViamVjdCBzdHJpbmdcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlVHlwZVxyXG4gICAgICogQHBhcmFtIHN1YmplY3RcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRTdWJqZWN0Q29udGVudChtZXNzYWdlVHlwZTogZW51bXMuTWVzc2FnZVR5cGUsIHN1YmplY3Q6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBzdWJqZWN0VGV4dDogc3RyaW5nO1xyXG4gICAgICAgIGxldCBzdWJqZWN0UHJlZml4OiBzdHJpbmc7XHJcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1lc3NhZ2VUeXBlLkluYm94Q29tcG9zZTpcclxuICAgICAgICAgICAgICAgIHN1YmplY3RUZXh0ID0gc3ViamVjdDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1lc3NhZ2VUeXBlLkluYm94Rm9yd2FyZDpcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5NZXNzYWdlVHlwZS5SZXNwb25zZUZvcndhcmQ6XHJcbiAgICAgICAgICAgICAgICBzdWJqZWN0UHJlZml4ID0gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWVzc2FnaW5nLmNvbXBvc2UtbWVzc2FnZS5mb3J3YXJkLXByZWZpeCcpO1xyXG4gICAgICAgICAgICAgICAgc3ViamVjdFRleHQgPSBzdWJqZWN0LmluZGV4T2Yoc3ViamVjdFByZWZpeCkgPT09IC0xID8gc3ViamVjdFByZWZpeCArICcgJyArIHN1YmplY3QgOiBzdWJqZWN0O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZVR5cGUuSW5ib3hSZXBseTpcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5NZXNzYWdlVHlwZS5SZXNwb25zZVJlcGx5OlxyXG4gICAgICAgICAgICAgICAgc3ViamVjdFByZWZpeCA9IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21lc3NhZ2luZy5jb21wb3NlLW1lc3NhZ2UucmVwbHktcHJlZml4Jyk7XHJcbiAgICAgICAgICAgICAgICBzdWJqZWN0VGV4dCA9IHN1YmplY3QuaW5kZXhPZihzdWJqZWN0UHJlZml4KSA9PT0gLTEgPyBzdWJqZWN0UHJlZml4ICsgJyAnICsgc3ViamVjdCA6IHN1YmplY3Q7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdWJqZWN0VGV4dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgQ3JlYXRlIG5ldyB0ZXh0IGZvciB0aGUgY29tcG9uZW50LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBnZXRDcmVhdGVOZXdNZXNzYWdlVGV4dCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLnJlc3BvbnNlLm1lc3NhZ2UtbGlzdC1wYW5lbC5jcmVhdGUtbmV3LW1lc3NhZ2UnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBNZW51IEFjdGlvbiBpdGVtIGJhc2VkIG9uIHRoZSBhY3Rpb24gcGFyYW1ldGVyXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZUFjdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIG1lc3NhZ2VBY3Rpb25JdGVtcyhtZXNzYWdlQWN0aW9uOiBlbnVtcy5NZXNzYWdlQWN0aW9uKSB7XHJcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlQWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZUFjdGlvbi5SZXBseTpcclxuICAgICAgICAgICAgICAgIHJldHVybiAoe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBlbnVtcy5NZXNzYWdlQWN0aW9uLlJlcGx5LFxyXG4gICAgICAgICAgICAgICAgICAgIGljb246ICdyZXBseS1pY29uJyxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtZXNzYWdpbmcubWVzc2FnZS1saXN0cy5tZXNzYWdlLWRldGFpbC5yZXBseS1idXR0b24nKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZUFjdGlvbi5Gb3J3YXJkOlxyXG4gICAgICAgICAgICAgICAgaWYgKCFtYXJrZXJPcGVyYXRpb25Nb2RlRmFjdG9yeS5vcGVyYXRpb25Nb2RlLmlzRm9yd2FyZEJ1dHRvbkhpZGRlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZW51bXMuTWVzc2FnZUFjdGlvbi5Gb3J3YXJkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnZm9yd2FyZC1pY29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWVzc2FnaW5nLm1lc3NhZ2UtbGlzdHMubWVzc2FnZS1kZXRhaWwuZm9yd2FyZC1idXR0b24nKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZUFjdGlvbi5EZWxldGU6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogZW51bXMuTWVzc2FnZUFjdGlvbi5EZWxldGUsXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogJ2RlbGV0ZS1pY29uLXNtYWxsJyxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtZXNzYWdpbmcubWVzc2FnZS1saXN0cy5tZXNzYWdlLWRldGFpbC5kZWxldGUtYnV0dG9uJylcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBzZWxlY3RlZCBpdGVtIGZvciBwcmlvcml0eSBkcm9wZG93biBiYXNlZCBvbiBwcmlvcml0eSBuYW1lXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0UHJpb3JpdHlEcm9wRG93blNlbGVjdGVkSXRlbSA9IChwcmlvcml0eU5hbWU6IHN0cmluZyk6IGVudW1zLk1lc3NhZ2VQcmlvcml0eSA9PiB7XHJcbiAgICAgICAgaWYgKHByaW9yaXR5TmFtZSA9PT0gZW51bXMuZ2V0RW51bVN0cmluZyhlbnVtcy5NZXNzYWdlUHJpb3JpdHksIGVudW1zLk1lc3NhZ2VQcmlvcml0eS5TdGFuZGFyZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVudW1zLk1lc3NhZ2VQcmlvcml0eS5TdGFuZGFyZDtcclxuICAgICAgICB9IGVsc2UgaWYgKHByaW9yaXR5TmFtZSA9PT0gZW51bXMuZ2V0RW51bVN0cmluZyhlbnVtcy5NZXNzYWdlUHJpb3JpdHksIGVudW1zLk1lc3NhZ2VQcmlvcml0eS5JbXBvcnRhbnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbnVtcy5NZXNzYWdlUHJpb3JpdHkuSW1wb3J0YW50O1xyXG4gICAgICAgIH0gZWxzZSBpZiAocHJpb3JpdHlOYW1lID09PSBlbnVtcy5nZXRFbnVtU3RyaW5nKGVudW1zLk1lc3NhZ2VQcmlvcml0eSwgZW51bXMuTWVzc2FnZVByaW9yaXR5Lk1hbmRhdG9yeSkpIHtcclxuICAgICAgICAgICAgLy8gV2hlbiByZXBseWluZyBhbmQgZm9yd2FyZGluZyBhICBtYW5kYXRvcnkgbWVzc2FnZSxwcmlvcml0eSBuZWVkIHRvIGJlIHJlc2V0IHRvIHN0YW5kYXJkLlxyXG4gICAgICAgICAgICByZXR1cm4gZW51bXMuTWVzc2FnZVByaW9yaXR5LlN0YW5kYXJkO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBuYXZpZ2F0ZSB0byBkZWZhdWx0IG9wdGlvbnMgZm9yIGRpZmZlcmVudCBtZXNzYWdlIHR5cGVzLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldE5hdmlnYXRlQXdheVR5cGUgPSAobWVzc2FnZVR5cGU6IGVudW1zLk1lc3NhZ2VUeXBlKTogZW51bXMuU2F2ZUFuZE5hdmlnYXRlID0+IHtcclxuICAgICAgICBsZXQgbmF2aWdhdGVUbzogZW51bXMuU2F2ZUFuZE5hdmlnYXRlID0gZW51bXMuU2F2ZUFuZE5hdmlnYXRlLm5vbmU7XHJcblxyXG4gICAgICAgIHN3aXRjaCAobWVzc2FnZVR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5NZXNzYWdlVHlwZS5SZXNwb25zZVJlcGx5OlxyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1lc3NhZ2VUeXBlLlJlc3BvbnNlRm9yd2FyZDpcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5NZXNzYWdlVHlwZS5SZXNwb25zZUNvbXBvc2U6XHJcbiAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvID0gZW51bXMuU2F2ZUFuZE5hdmlnYXRlLnRvTmV3UmVzcG9uc2VNZXNzYWdlQ29tcG9zZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRlVG87XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGZvY3VzIG5lZWRzIHRvIGJlIHNldCBpbiB0aW55bWNlIGVkaXRvciBlbHNlIHJldHVybiBmYWxzZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGhhc0ZvY3VzID0gKG1lc3NhZ2VUeXBlOiBlbnVtcy5NZXNzYWdlVHlwZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiAobWVzc2FnZVR5cGUgPT09IGVudW1zLk1lc3NhZ2VUeXBlLkluYm94Rm9yd2FyZCB8fCBtZXNzYWdlVHlwZSA9PT0gZW51bXMuTWVzc2FnZVR5cGUuSW5ib3hSZXBseVxyXG4gICAgICAgICAgICB8fCBtZXNzYWdlVHlwZSA9PT0gZW51bXMuTWVzc2FnZVR5cGUuUmVzcG9uc2VSZXBseSB8fCBtZXNzYWdlVHlwZSA9PT0gZW51bXMuTWVzc2FnZVR5cGUuUmVzcG9uc2VGb3J3YXJkKTtcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBhZGRJbml0TW91c2VDbGlja0V2ZW50U2NyaXB0QmxvY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gd2UgaGF2ZSB0byBjbG9zZSBvcGVuZWQgcHJpb3JpdHkgZHJvcCBkb3duIGFuZCB1c2VyIG9wdGlvbnMgKGxvZ291dCBvcHRpb25zKSB3aGlsZSBjbGlja2luZyBvbiBvdXRzaWRlIHRoYXQuIGlmcmFtZSB3YXNcclxuICAgICAgICAvLyBwcmV2ZW50aW5nIHRoZSBjbGljayBldmVudCB0byBwcm9wYWdhdGUgb3V0c2lkZSBzbyBjbG9zaW5nIG9mIHRob3NlIHRoaW5ncyBhcmUgbm90IGhhcHBlbmluZyB3aGlsZSBjbGlja2luZyBvbiBpZnJhbWUuXHJcbiAgICAgICAgLy8gZHluYW1pY2FsbHkgYWRkIHNjcmlwdCB0byBjcmVhdGUgbW91c2UgZXZlbnRcclxuICAgICAgICBsZXQgc2NyaXB0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbml0X21vdXNlX2NsaWNrX2V2ZW50X3NjcmlwdF9ibG9jaycpO1xyXG4gICAgICAgIGxldCBpc1NjcmlwdEVsZW1lbnRQcmVzZW50OiBib29sZWFuID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHNjcmlwdEVsZW1lbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpc1NjcmlwdEVsZW1lbnRQcmVzZW50ID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzY3JpcHRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgICAgIHNjcmlwdEVsZW1lbnQuaWQgPSAnaW5pdF9tb3VzZV9jbGlja19ldmVudF9zY3JpcHRfYmxvY2snO1xyXG4gICAgICAgICAgICBzY3JpcHRFbGVtZW50LmlubmVyVGV4dCA9XHJcbiAgICAgICAgICAgICAgICAnZnVuY3Rpb24gaW5pdE1vdXNlQ2xpY2tFdmVudCgpIHsnICtcclxuICAgICAgICAgICAgICAgICdsZXQgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcXCdNb3VzZUV2ZW50c1xcJyk7JyArXHJcbiAgICAgICAgICAgICAgICAnZXZlbnQuaW5pdE1vdXNlRXZlbnQoXFwnY2xpY2tcXCcsIHRydWUsIHRydWUsIHdpbmRvdywgMCwgMCwgMCwgODAsIDIwLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgbnVsbCk7JyArXHJcbiAgICAgICAgICAgICAgICAnd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpOyB9JztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc1NjcmlwdEVsZW1lbnRQcmVzZW50KSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0RWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlbW92ZUluaXRNb3VzZUNsaWNrRXZlbnRTY3JpcHRCbG9jayA9ICgpID0+IHtcclxuICAgICAgICBsZXQgc2NyaXB0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbml0X21vdXNlX2NsaWNrX2V2ZW50X3NjcmlwdF9ibG9jaycpO1xyXG4gICAgICAgIGlmIChodG1sVXRpbGl0aWVzLmdldFVzZXJEZXZpY2UoKS5icm93c2VyICE9PSAnSUUnKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2NyaXB0RWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHNldFBhc3RlRW5hYmxlZEFjdGlvbiA9IChpc1Bhc3RlRW5hYmxlZDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIE1lc3NhZ2VIZWxwZXIuX2lzUGFzdGVFbmFibGVkID0gaXNQYXN0ZUVuYWJsZWQ7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgdXBkYXRlIHRoZSBJRnJhbWUgY29udGVudCB3aXRoIG1lc3NhZ2UgZGV0YWlsc1xyXG4gICAgICogQHBhcmFtIG9cclxuICAgICAqIEBwYXJhbSBlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgYWRkSUZyYW1lRm9yTWVzc2FnZURldGFpbHMobzogYW55LCBlOiBhbnkpIHtcclxuICAgICAgICBsZXQgdGltZW91dDogbnVtYmVyID0gMDtcclxuICAgICAgICAvLyBhZGQgc2NyaXB0IHRvIGluaXQgbW91c2UgY2xpY2sgZXZlbnQgaW4gcGFyZW50IHdpbmRvdyBmb3IgYW55ICdjbGljaycgaW4gY3VycmVudCB3aW5kb3dcclxuICAgICAgICBsZXQgc2NyaXB0QmxvY2sgPSAnd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXFwnY2xpY2tcXCcsIGZ1bmN0aW9uKCkgeyBwYXJlbnQuaW5pdE1vdXNlQ2xpY2tFdmVudCgpOyB9KTsnO1xyXG5cclxuICAgICAgICBsZXQgaGVhZFRhZ0NvbnRlbnQgPSAnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPiBwLGJvZHl7bWFyZ2luOjA7cGFkZGluZzowO308L3N0eWxlPic7XHJcblxyXG4gICAgICAgIGlmIChodG1sVXRpbGl0aWVzLmlzSVBhZERldmljZSAmJiBodG1sVXRpbGl0aWVzLmdldFVzZXJEZXZpY2UoKS5icm93c2VyID09PSAnU2FmYXJpJykge1xyXG4gICAgICAgICAgICAvL2luY2x1ZGUgc2NyaXB0IHRvIGJsb2NrIGRvdWJsZSB0YXAgYW5kIHBpbmNoIHpvb20gaW4gaVBhZCBzYWZhcmlcclxuICAgICAgICAgICAgc2NyaXB0QmxvY2sgKz1cclxuICAgICAgICAgICAgICAgICd3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcXCd0b3VjaGVuZFxcJywgYmxvY2tEb3VibGVUYXBab29tKTsnICtcclxuICAgICAgICAgICAgICAgICd3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcXCd0b3VjaHN0YXJ0XFwnLCBibG9ja1BpbmNoVG9ab29tKTsnICtcclxuICAgICAgICAgICAgICAgIC8vYmxvY2sgZG91YmxlIHRhcCB6b29tXHJcbiAgICAgICAgICAgICAgICAnbGV0IGxhc3RUYXAgPSAwOycgK1xyXG4gICAgICAgICAgICAgICAgJ2Z1bmN0aW9uIGJsb2NrRG91YmxlVGFwWm9vbSAoIGUgKSB7JyArXHJcbiAgICAgICAgICAgICAgICAnbGV0IGN1cnJlbnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7JyArXHJcbiAgICAgICAgICAgICAgICAnbGV0IHRhcExlbmd0aCA9IGN1cnJlbnRUaW1lIC0gbGFzdFRhcDsnICtcclxuICAgICAgICAgICAgICAgICdpZiAodGFwTGVuZ3RoIDwgNTAwICYmIHRhcExlbmd0aCA+IDApIHsnICtcclxuICAgICAgICAgICAgICAgICdlLnByZXZlbnREZWZhdWx0KCk7fScgK1xyXG4gICAgICAgICAgICAgICAgJ2xhc3RUYXAgPSBjdXJyZW50VGltZTsnICtcclxuICAgICAgICAgICAgICAgIC8vaW5pdCBtb3VzZSBjbGljayBldmVudFxyXG4gICAgICAgICAgICAgICAgJ3BhcmVudC5pbml0TW91c2VDbGlja0V2ZW50KCk7IH0nICtcclxuICAgICAgICAgICAgICAgIC8vYmxvY2sgcGluY2ggem9vbVxyXG4gICAgICAgICAgICAgICAgJ2Z1bmN0aW9uIGJsb2NrUGluY2hUb1pvb20gKCBlICkgeycgK1xyXG4gICAgICAgICAgICAgICAgJ2lmIChlLnRvdWNoZXMubGVuZ3RoID4gMSkgeycgK1xyXG4gICAgICAgICAgICAgICAgJ2UucHJldmVudERlZmF1bHQoKTt9JyArXHJcbiAgICAgICAgICAgICAgICAnfSc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy9pbmNsdXNlIHNjcmlwdCB0byBpbml0IG1vdXNlIGNsaWNrIGV2ZW50IGluIHBhcmVudCB3aW5kb3cgZm9yIGFueSAndG91Y2gnIGluIGN1cnJlbnQgd2luZG93XHJcbiAgICAgICAgICAgIHNjcmlwdEJsb2NrICs9XHJcbiAgICAgICAgICAgICAgICAnd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXFwndG91Y2hlbmRcXCcsIGZ1bmN0aW9uKCkgeyBwYXJlbnQuaW5pdE1vdXNlQ2xpY2tFdmVudCgpOyB9KTsnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNvbnRlbnQ6IHN0cmluZyA9IGUuZ2V0Q29udGVudCgpLnRyaW0oKSArXHJcbiAgICAgICAgICAgICc8c2NyaXB0PicgKyBzY3JpcHRCbG9jayArICc8L3NjcmlwdCA+JztcclxuICAgICAgICAvLyBwdXQgYSB0aW1lb3V0IG9mIDAsIG90aGVyd2lzZSBtZXNzYWdlIGRldGFpbHMgYXJlIG5vdCByZW5kZXJpbmcgb24gZmlyc3QgbWVzc2FnZSBpdGVtIGNsaWNrXHJcbiAgICAgICAgaWYgKCFodG1sVXRpbGl0aWVzLmlzVGFibGV0T3JNb2JpbGVEZXZpY2UgJiYgaHRtbFV0aWxpdGllcy5nZXRVc2VyRGV2aWNlKCkuYnJvd3NlciA9PT0gJ0ZpcmVmb3gnKSB7XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSA1MDtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICQoJyNtc2ctaWZyYW1lX2lmcicpLmNvbnRlbnRzKCkuZmluZCgnaGVhZCcpLmh0bWwoaGVhZFRhZ0NvbnRlbnQpO1xyXG4gICAgICAgICAgICAkKCcjbXNnLWlmcmFtZV9pZnInKS5jb250ZW50cygpLmZpbmQoJ2JvZHknKS5odG1sKGNvbnRlbnQpO1xyXG4gICAgICAgIH0sIHRpbWVvdXQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWV0aG9kIHdoaWNoIGdldHMgdGhlIHNlbGVjdGVkIFFJRydzIG5hbWUgYmFzZWQgb24gdGhlIEF3YXJkaW5nIEJvZHkgc3BlY2lmaWMgUUlHIE5hbWluZyBmb3JtYXRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRDdXJyZW50UUlHTmFtZSA9ICgpID0+IHtcclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBoZWxwZXIgbWV0aG9kIHRvIGZvcm1hdCB0aGUgUUlHIE5hbWVcclxuICAgICAgICBpZiAocWlnU3RvcmUuaW5zdGFuY2Uuc2VsZWN0ZWRRSUdGb3JNYXJrZXJPcGVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZXQgc2VsZWN0ZWRRaWcgPSBxaWdTdG9yZS5pbnN0YW5jZS5zZWxlY3RlZFFJR0Zvck1hcmtlck9wZXJhdGlvbjtcclxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ0Zvcm1hdEhlbHBlci5mb3JtYXRBd2FyZGluZ0JvZHlRSUcoXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFFpZy5tYXJrU2NoZW1lR3JvdXBOYW1lLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRRaWcuYXNzZXNzbWVudENvZGUsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFFpZy5zZXNzaW9uTmFtZSxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkUWlnLmNvbXBvbmVudElkLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRRaWcucXVlc3Rpb25QYXBlck5hbWUsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFFpZy5hc3Nlc3NtZW50TmFtZSxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkUWlnLmNvbXBvbmVudE5hbWUsXHJcbiAgICAgICAgICAgICAgICBzdHJpbmdGb3JtYXRIZWxwZXIuZ2V0T3ZlcnZpZXdRSUdOYW1lRm9ybWF0KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBJZiBhIFFJRyBpcyBub3Qgc2VsZWN0ZWQsIHJldHVybiB0aGUgZGVmYXVsdCB0ZXh0IHRvIGJlIHNob3duIG9uIHRoZSBkcm9wIGRvd25cclxuICAgICAgICByZXR1cm4gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWVzc2FnaW5nLmNvbXBvc2UtbWVzc2FnZS5wbGVhc2Utc2VsZWN0LXFpZy1wbGFjZWhvbGRlcicpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgbWVzc2FnZSBwYW5lbCBpcyBlZGl0ZWQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNNZXNzYWdlUGFuZWxFZGl0ZWQobWVzc2FnZVR5cGU6IGVudW1zLk1lc3NhZ2VUeXBlLCBtZXNzYWdlVG9GaWVsZFZhbHVlczogQXJyYXk8c3RyaW5nPixcclxuICAgICAgICBtZXNzYWdlVG9GaWVsZElkczogQXJyYXk8bnVtYmVyPikge1xyXG4gICAgICAgIGlmIChtZXNzYWdlc3RvcmUuaW5zdGFuY2UuaXNNZXNzYWdlUGFuZWxBY3RpdmUpIHtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRBY3RpdmVFZGl0b3JJZCA9IHRpbnltY2UuYWN0aXZlRWRpdG9yLmlkO1xyXG4gICAgICAgICAgICBsZXQgYWN0aXZlRWRpdG9yID0gdGlueW1jZS5nZXQoTWVzc2FnZUhlbHBlci5tZXNzYWdlRWRpdG9ySWQpO1xyXG4gICAgICAgICAgICBpZiAobWVzc2FnZVR5cGUgPT09IGVudW1zLk1lc3NhZ2VUeXBlLkluYm94Q29tcG9zZSB8fCBtZXNzYWdlVHlwZSA9PT0gZW51bXMuTWVzc2FnZVR5cGUuSW5ib3hGb3J3YXJkIHx8XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlVHlwZSA9PT0gZW51bXMuTWVzc2FnZVR5cGUuSW5ib3hSZXBseSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1lc3NhZ2VIZWxwZXIubWVzc2FnZVN1YmplY3QgJiYgTWVzc2FnZUhlbHBlci5tZXNzYWdlU3ViamVjdC50cmltKCkubGVuZ3RoID4gMCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUVkaXRvci5nZXRDb250ZW50KHsgZm9ybWF0OiAndGV4dCcgfSkudHJpbSgpLmxlbmd0aCA+IDAgfHxcclxuICAgICAgICAgICAgICAgICAgICAoKG1lc3NhZ2VUb0ZpZWxkVmFsdWVzICYmIG1lc3NhZ2VUb0ZpZWxkVmFsdWVzLmxlbmd0aCA+IDApICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChtZXNzYWdlVG9GaWVsZElkcyAmJiBtZXNzYWdlVG9GaWVsZElkcy5sZW5ndGggPiAwKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZVR5cGUgPT09IGVudW1zLk1lc3NhZ2VUeXBlLlJlc3BvbnNlQ29tcG9zZVxyXG4gICAgICAgICAgICAgICAgfHwgbWVzc2FnZVR5cGUgPT09IGVudW1zLk1lc3NhZ2VUeXBlLldvcmtsaXN0Q29tcG9zZSB8fCBtZXNzYWdlVHlwZSA9PT0gZW51bXMuTWVzc2FnZVR5cGUuUmVzcG9uc2VSZXBseVxyXG4gICAgICAgICAgICAgICAgfHwgbWVzc2FnZVR5cGUgPT09IGVudW1zLk1lc3NhZ2VUeXBlLlJlc3BvbnNlRm9yd2FyZCB8fCBtZXNzYWdlVHlwZSA9PT0gZW51bXMuTWVzc2FnZVR5cGUuVGVhbUNvbXBvc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNZXNzYWdlSGVscGVyLm1lc3NhZ2VTdWJqZWN0ICYmIE1lc3NhZ2VIZWxwZXIubWVzc2FnZVN1YmplY3QudHJpbSgpLmxlbmd0aCA+IDAgfHxcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVFZGl0b3IuZ2V0Q29udGVudCh7IGZvcm1hdDogJ3RleHQnIH0pLnRyaW0oKS5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBjaGFuZ2VzIGluIHRoZSBtZXNzYWdlIHBhbmVsIHN1YmplY3Qgc2VjdGlvbi5cclxuICAgICAqIEBwYXJhbSBlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgaGFuZGxlU3ViamVjdENoYW5nZSA9IChzdWJqZWN0OiBzdHJpbmcpID0+IHtcclxuICAgICAgICBNZXNzYWdlSGVscGVyLm1lc3NhZ2VTdWJqZWN0ID0gc3ViamVjdDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIG1ldGhvZCByZXZhbXBzIHRoZSBtYXJraW5nIG1vZGUgbmFtaW5nIGZvciBkaXNwbGF5IGluIG1lc3NhZ2VcclxuICAgICAqIEBwYXJhbSBtYXJraW5nTW9kZVxyXG4gICAgICogQHBhcmFtIGlzRWxlY3Ryb25pY1N0YW5kYXJkaXNhdGlvblRlYW1NZW1iZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRNYXJraW5nTW9kZVRleHQobWFya2luZ01vZGU6IG51bWJlciwgaXNFbGVjdHJvbmljU3RhbmRhcmRpc2F0aW9uVGVhbU1lbWJlcjogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKG1hcmtpbmdNb2RlID09PSBlbnVtcy5NYXJraW5nTW9kZS5FU19UZWFtQXBwcm92YWwpIHtcclxuICAgICAgICAgICAgaWYgKGlzRWxlY3Ryb25pY1N0YW5kYXJkaXNhdGlvblRlYW1NZW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoKGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHRcclxuICAgICAgICAgICAgICAgICAgICAoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5zdG0tc3RhbmRhcmRpc2F0aW9uLXJlc3BvbnNlLXRpdGxlJykpICsgJyAnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoKGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHRcclxuICAgICAgICAgICAgICAgICAgICAoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5zZWNvbmQtc3RhbmRhcmRpc2F0aW9uLXJlc3BvbnNlLXRpdGxlJykpICsgJyAnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAobWFya2luZ01vZGUgPT09IGVudW1zLk1hcmtpbmdNb2RlLlByYWN0aWNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5wcmFjdGljZS1yZXNwb25zZS10aXRsZScpKSArICcgJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtYXJraW5nTW9kZSA9PT0gZW51bXMuTWFya2luZ01vZGUuQXBwcm92YWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuICgobG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLnN0YW5kYXJkaXNhdGlvbi1yZXNwb25zZS10aXRsZScpKSArICcgJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtYXJraW5nTW9kZSA9PT0gZW51bXMuTWFya2luZ01vZGUuRVNfVGVhbUFwcHJvdmFsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHRcclxuICAgICAgICAgICAgICAgICgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLnNlY29uZC1zdGFuZGFyZGlzYXRpb24tcmVzcG9uc2UtdGl0bGUnKSkgKyAnICcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IE1lc3NhZ2VIZWxwZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvbWVzc2FnZS9tZXNzYWdlaGVscGVyLnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFNQTtBQUFBO0FBd2hCQTtBQWhoQkE7OztBQUdBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBMkVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF1QkE7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQXJoQkE7QUFFQTtBQTRVQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQXFEQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQXlCQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUEyQkE7QUFBQTtBQUVBOztBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 292:
/* no static exports found */
/* all exports used */
/*!***************************************************************************************************!*\
  !*** ./src/components/utility/grid/standardisationsetuphelpers/standardisationsetuphelperbase.ts ***!
  \***************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar gridRow = __webpack_require__(/*! ../../../utility/grid/gridrow */ 296);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar localeStore = __webpack_require__(/*! ../../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar GenericComponentWrapper = __webpack_require__(/*! ../genericcomponentwrapper */ 365);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar ColumnHeader = __webpack_require__(/*! ../../../worklist/shared/columnheader */ 329);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar jsonRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar GenericTextColumn = __webpack_require__(/*! ../../../worklist/shared/generictextcolumn */ 387);\r\nvar comparerList = __webpack_require__(/*! ../../../../utility/sorting/sortbase/comparerlist */ 262);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../markeroperationmode/markeroperationmodefactory */ 232);\r\nvar immutable = __webpack_require__(/*! immutable */ 40);\r\nvar standardisationSetupGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/standardisationsetupgridcolumns.json */ 273);\r\nvar blueBannerMessage = __webpack_require__(/*! ../../../standardisationsetup/shared/bluebanner */ 401);\r\nvar totalMark = __webpack_require__(/*! ../../../worklist/shared/totalmarkdetail */ 391);\r\nvar TagList = __webpack_require__(/*! ../../../response/responsescreen/taglist */ 313);\r\nvar stdResponseId = __webpack_require__(/*! ../../../standardisationsetup/shared/standardisationresponseid */ 406);\r\nvar LinkedMessageIndicator = __webpack_require__(/*! ../../../worklist/shared/linkedmessageindicator */ 389);\r\nvar LastUpdatedColumn = __webpack_require__(/*! ../../../worklist/shared/lastupdatedcolumn */ 388);\r\nvar scriptidgridelement = __webpack_require__(/*! ../../../standardisationsetup/shared/scriptidgridelement */ 403);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar ecourseWorkHelper = __webpack_require__(/*! ../../ecoursework/ecourseworkhelper */ 238);\r\nvar RigOrder = __webpack_require__(/*! ../../../standardisationsetup/shared/rigorder */ 402);\r\nvar tagStore = __webpack_require__(/*! ../../../../stores/tags/tagstore */ 331);\r\nvar slaoAnnotationIndicator = __webpack_require__(/*! ../../../worklist/shared/slaoannotationindicator */ 371);\r\nvar MarkingProgress = __webpack_require__(/*! ../../../worklist/shared/markingprogress */ 369);\r\nvar marksColumn = __webpack_require__(/*! ../../../worklist/shared/markscolumn */ 415);\r\nvar allPageAnnotationIndicator = __webpack_require__(/*! ../../../worklist/shared/allpageannotationindicator */ 368);\r\nvar allFilesNotViewedIndicator = __webpack_require__(/*! ../../../worklist/shared/allfilesnotviewedindicator */ 386);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../ecoursework/ecourseworkhelper */ 238);\r\nvar submitHelper = __webpack_require__(/*! ../../submit/submithelper */ 282);\r\nvar DeclassifyButton = __webpack_require__(/*! ../../../standardisationsetup/declassifybutton */ 400);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\nvar stringFormatHelper = __webpack_require__(/*! ../../../../utility/stringformat/stringformathelper */ 250);\r\nvar genericDate = __webpack_require__(/*! ../../../worklist/shared/genericdate */ 315);\r\nvar xmlHelper = __webpack_require__(/*! ../../../../utility/generic/xmlhelper */ 379);\r\nvar sortHelper = __webpack_require__(/*! ../../../../utility/sorting/sorthelper */ 272);\r\nvar sharedResponseIndicatorElement = __webpack_require__(/*! ../../../standardisationsetup/shared/sharedresponseindicator */ 405);\r\n/**\r\n * class for WorkList Helper implementation\r\n */\r\nvar StandardisationSetupHelperBase = /** @class */ (function () {\r\n    function StandardisationSetupHelperBase() {\r\n        var _this = this;\r\n        this._dateLengthInPixel = 0;\r\n        this._isNonNumeric = false;\r\n        /**\r\n         * returns the blue banner element\r\n         * @param selectedWorkList\r\n         * @param targetCount\r\n         * @param isESTeamMember\r\n         * @param selectedSession\r\n         */\r\n        this.getBlueBannerForTargets = function (selectedWorkList, targetCount, isESTeamMember, selectedSession) {\r\n            var componentProps;\r\n            componentProps = {\r\n                key: selectedWorkList + '_blueBanner',\r\n                blueBannerMessageKey: _this.getRightContainerBlueBannerKey(selectedWorkList, targetCount, isESTeamMember, selectedSession)\r\n            };\r\n            return React.createElement(blueBannerMessage, componentProps);\r\n        };\r\n        /**\r\n         * returns the blue banner message key for resource file\r\n         * @param selectedWorkList\r\n         * @param targetCount\r\n         * @param isESTeamMember\r\n         * @param selectedSession\r\n         */\r\n        this.getRightContainerBlueBannerKey = function (selectedWorkList, targetCount, isESTeamMember, selectedSession) {\r\n            if (isESTeamMember === void 0) { isESTeamMember = false; }\r\n            var key;\r\n            switch (selectedWorkList) {\r\n                case enums.StandardisationSetup.None:\r\n                    key = 'standardisation-setup.right-container.select-response-bluebanner-message';\r\n                    break;\r\n                case enums.StandardisationSetup.SelectResponse:\r\n                    if (selectedSession !== null && selectedSession !== undefined\r\n                        && selectedSession === enums.StandardisationSessionTab.PreviousSession) {\r\n                        targetCount === 0 ?\r\n                            key = 'standardisation-setup.right-container.select-response-previouse-session-empty-message' :\r\n                            key = 'standardisation-setup.right-container.select-response-previouse-session-default-message';\r\n                    }\r\n                    else {\r\n                        key = 'standardisation-setup.right-container.select-response-bluebanner-message';\r\n                    }\r\n                    break;\r\n                case enums.StandardisationSetup.ProvisionalResponse:\r\n                    key = targetCount > 0 ? 'standardisation-setup.right-container.provisional-bluebanner-message' :\r\n                        'standardisation-setup.right-container.empty-responses-provisional-bluebanner-message';\r\n                    break;\r\n                case enums.StandardisationSetup.UnClassifiedResponse:\r\n                    var isSeedVisible = standardisationSetupStore.instance.stdSetupPermissionCCData ?\r\n                        standardisationSetupStore.instance.stdSetupPermissionCCData.role.viewByClassification.classifications.seeding :\r\n                        false;\r\n                    // Check whether the logged in examiner role is present in the 'StandardisationSetupPermissions' CC\r\n                    var isLoggedInExaminerRolePresentInCC = standardisationSetupStore.instance.stdSetupPermissionCCData.isLoggedInExaminerRolePresentInCC;\r\n                    var loggedInExaminerRole = standardisationSetupStore.instance.stdSetupPermissionCCData.role.name;\r\n                    key = targetCount > 0 ?\r\n                        ((isESTeamMember && (isSeedVisible === false || isSeedVisible === undefined)) ?\r\n                            'standardisation-setup.right-container.unclassified-bluebanner-message-for-esteam' :\r\n                            'standardisation-setup.right-container.unclassified-bluebanner-message') :\r\n                        (isESTeamMember && !isLoggedInExaminerRolePresentInCC) ?\r\n                            'standardisation-setup.right-container.empty-responses-unclassified-without-role-bluebanner-message' :\r\n                            'standardisation-setup.right-container.empty-responses-unclassified-bluebanner-message';\r\n                    break;\r\n                case enums.StandardisationSetup.ClassifiedResponse:\r\n                    key = targetCount > 0 ? 'standardisation-setup.right-container.classified-bluebanner-message' :\r\n                        'standardisation-setup.right-container.empty-responses-classified-bluebanner-message';\r\n                    break;\r\n            }\r\n            return key;\r\n        };\r\n    }\r\n    /**\r\n     * Get the Configurable characteristic value.\r\n     * @param ccName\r\n     * @returns\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getCCValue = function (ccName, markSchemeGroupId) {\r\n        return configurableCharacteristicsHelper.getCharacteristicValue(ccName, markSchemeGroupId);\r\n    };\r\n    /**\r\n     * Get Session tab visibilty in SSU\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getSessionTabVisibiltyinSelectResponse = function () {\r\n        return (configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ReuseRIG).toLowerCase() === 'true'\r\n            && standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.reuseResponses);\r\n    };\r\n    /**\r\n     * Get the retain provisional CC\r\n     */\r\n    StandardisationSetupHelperBase.prototype.isRetainProvisionalMarksCCOn = function () {\r\n        return configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.RetainProvisionalMarks, standardisationSetupStore.instance.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n    };\r\n    /**\r\n     * generateStandardisationRowDefinion is used for generating row collection for WorkList Grid\r\n     * @param comparerName\r\n     * @param sortDirection\r\n     * @param workListSelection\r\n     * @param gridType\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateStandardisationRowDefinion = function (comparerName, sortDirection, workListSelection, gridType) {\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Generating Reusable response worklist grid row definition\r\n     * @param reusableResponsesList\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateReusableResponsesRowDefinition = function (reusableResponsesList) {\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Generating frozen row body for reusable responses grid\r\n     * @param reusableResponsesList\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateStandardisationFrozenRowBodyReusableGrid = function (reusableResponsesList, comparerName, sortDirection) {\r\n        return this._stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * generateScriptRowDefinition is used for generating row collection for Select response Script Grid\r\n     * @param standardisationScriptList\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateScriptRowDefinition = function (standardisationScriptList) {\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * GenerateTableHeader is used for generating header collection.\r\n     * @param standardisationSetupType\r\n     * @param comparerName\r\n     * @param sortDirection\r\n     * @param gridType\r\n     * @param selectedSessionTab\r\n     * @param centreOrScript\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateTableHeader = function (standardisationSetupType, comparerName, sortDirection, gridType, selectedSessionTab, centreOrScript) {\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        var _tableHeaderCollection = this.getTableHeader(standardisationSetupType, comparerName, sortDirection, selectedSessionTab, gridType, centreOrScript);\r\n        return _tableHeaderCollection;\r\n    };\r\n    /**\r\n     * generateFrozenRowBody is used for generating row collection for Standardisation Setup Grid\r\n     * @param standardisationSetupDetailsList\r\n     * @param standardisationSetupType\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateFrozenRowBody = function (standardisationSetupDetailsList, standardisationSetupType, gridType, comparerName, sortDirection) {\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        var _workListFrozenRowBodyCollection = this.getFrozenRowBodyForListView(standardisationSetupDetailsList, standardisationSetupType, gridType, comparerName, sortDirection);\r\n        return _workListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Is used for generating row header collection for WorkList table\r\n     * @param comparerName\r\n     * @param sortDirection\r\n     * @param standardisationSetupType\r\n     * @param selectedSessionTab\r\n     * @param isSortable\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateFrozenRowHeader = function (comparerName, sortDirection, standardisationSetupType, selectedSessionTab, isSortable) {\r\n        if (selectedSessionTab === void 0) { selectedSessionTab = enums.StandardisationSessionTab.CurrentSession; }\r\n        if (isSortable === void 0) { isSortable = true; }\r\n        // Get the frozen column list from json\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        var _frozenRowHeaderCollection = this.getFrozenRowHeader(comparerName, sortDirection, isSortable, standardisationSetupType, selectedSessionTab);\r\n        return _frozenRowHeaderCollection;\r\n    };\r\n    /**\r\n     * Is used for generating frozen row body collection for STD WorkList table\r\n     * @param standardisationResponseListData\r\n     * @param standardisationSetupType\r\n     * @param gridType\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateStandardisationFrozenRowBody = function (comparerName, sortDirection, standardisationSetupType, gridType) {\r\n        return this._stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * create a wraper for grid column\r\n     * @param elements\r\n     * @param className\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getWrappedColumn = function (elements, className, seq) {\r\n        var componentProps;\r\n        var _workListCell;\r\n        var _gridCell = new gridCell();\r\n        var element;\r\n        componentProps = {\r\n            key: seq,\r\n            divClassName: className,\r\n            componentList: elements\r\n        };\r\n        _workListCell = new gridCell();\r\n        _workListCell.columnElement = React.createElement(GenericComponentWrapper, componentProps);\r\n        return _workListCell;\r\n    };\r\n    /**\r\n     * creating grid columns collection\r\n     * @param gridgridLeftColumn\r\n     * @param gridMiddleColumn\r\n     * @param key\r\n     * @param gridRightColumn - to display AMD and TMD based on Accuracy Indicator\r\n     * @returns grid cell collection.\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getGridCells = function (gridgridLeftColumn, gridMiddleColumn, key, gridRightColumn) {\r\n        var _gridCells = new Array();\r\n        _gridCells.push(this.getWrappedColumn(Immutable.List(gridgridLeftColumn), 'col left-col', 'Grid_left_' + key));\r\n        _gridCells.push(this.getWrappedColumn(Immutable.List(gridMiddleColumn), 'col centre-col', 'Grid_centre_' + key));\r\n        // create column for AMD and TMD only if gridRightColumn is not null\r\n        if (gridRightColumn !== null) {\r\n            _gridCells.push(this.getWrappedColumn(Immutable.List(gridRightColumn), 'col right-col', 'Grid_right_' + key));\r\n        }\r\n        return _gridCells;\r\n    };\r\n    /**\r\n     * Group the elements based on the classNames.\r\n     * @param {string} groupClassName\r\n     * @param {string} seq\r\n     * @returns the grouped JSX.Element.\r\n     * @Summary groupClassName is the root element className and the column list may contain\r\n     * the key same as groupClassName. Then that will not group the elements instead add it as\r\n     * immediate child node.\r\n     */\r\n    StandardisationSetupHelperBase.prototype.groupColumnElements = function (groupClassName, seq) {\r\n        var elements = Immutable.List();\r\n        // loop through the class group names to find the child and group.\r\n        for (var key in this._groupColumns) {\r\n            if (this._groupColumns[key].values) {\r\n                var componentProps_1 = {\r\n                    id: this._groupColumns[key] + seq,\r\n                    key: this._groupColumns[key] + seq,\r\n                    divClassName: key,\r\n                    componentList: this._groupColumns[key].values\r\n                };\r\n                // If the key same as main group className then we dont need to create a childnode.\r\n                // treating it as immediate child of the main element.\r\n                if (key !== groupClassName) {\r\n                    elements = elements.push(React.createElement(GenericComponentWrapper, componentProps_1));\r\n                }\r\n                else {\r\n                    this._groupColumns[key].values.map(function (x) {\r\n                        elements = elements.push(x);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        var componentProps = {\r\n            id: groupClassName + seq,\r\n            key: groupClassName + seq,\r\n            divClassName: groupClassName,\r\n            componentList: elements\r\n        };\r\n        return React.createElement(GenericComponentWrapper, componentProps);\r\n    };\r\n    /**\r\n     * Start with fresh group.\r\n     */\r\n    StandardisationSetupHelperBase.prototype.emptyGroupColumns = function () {\r\n        // start with a fresh list of column group set.\r\n        this._groupColumns = {};\r\n    };\r\n    Object.defineProperty(StandardisationSetupHelperBase.prototype, \"groupColumns\", {\r\n        /**\r\n         * Return the group columns\r\n         * @returns\r\n         */\r\n        get: function () {\r\n            return this._groupColumns;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Mapping the each elements to a group.\r\n     * This add the elements to a dictionary which has className as key\r\n     * and list of elements that  grouped under the className.\r\n     * @param {string} className\r\n     * @param {JSX.Element} element\r\n     */\r\n    StandardisationSetupHelperBase.prototype.mapGroupColumns = function (className, element) {\r\n        // If not group class has been added create a new object\r\n        // otherwise add to the existing.\r\n        if (this._groupColumns[className] === undefined) {\r\n            this._groupColumns[className] = { values: Immutable.List() };\r\n        }\r\n        this._groupColumns[className].values = this._groupColumns[className].values.push(element);\r\n    };\r\n    /**\r\n     * creating react element for the  Column Header component\r\n     * @param seq - key value for the component\r\n     * @param displayText - the text to append with the display id.\r\n     * @returns JSX.Element.\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getColumnHeaderElement = function (seq, headerText, gridColumn, isCurrentSort, isSortRequired, sortDirection) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            headerText: headerText,\r\n            sortDirection: sortDirection,\r\n            isCurrentSort: isCurrentSort,\r\n            isSortingRequired: isSortRequired\r\n        };\r\n        return React.createElement(ColumnHeader, componentProps);\r\n    };\r\n    /**\r\n     * returns the table row collection for table header.\r\n     * @param standardisationSetupType\r\n     * @param comparerName\r\n     * @param sortDirection\r\n     * @param selectedSessionTab\r\n     * @param gridType\r\n     * @param centreOrScript\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getTableHeader = function (standardisationSetupType, comparerName, sortDirection, selectedSessionTab, gridType, centreOrScript) {\r\n        if (selectedSessionTab === void 0) { selectedSessionTab = enums.StandardisationSessionTab.CurrentSession; }\r\n        var _columnHeaderCollection = Array();\r\n        var _cell;\r\n        var _row = new gridRow();\r\n        var _columnHeaderCellcollection = new Array();\r\n        var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, standardisationSetupType, false, gridType, selectedSessionTab, centreOrScript);\r\n        var gridColumnLength = gridColumns.length;\r\n        this.resetDynamicColumnSettings();\r\n        // Getting the classified worklist columns\r\n        for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n            _cell = new gridCell();\r\n            var _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n            var headerText = gridColumns[gridColumnCount].ColumnHeader;\r\n            var _comparerName = gridColumns[gridColumnCount].ComparerName;\r\n            headerText = (headerText && headerText !== '') ? localeStore.instance.TranslateText(headerText) : '';\r\n            var key = 'columnHeader_' + gridColumnCount;\r\n            var isCurrentSort = standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse ?\r\n                undefined : (comparerName === _comparerName);\r\n            var isSortRequired = standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse ?\r\n                false : (gridColumns[gridColumnCount].Sortable === 'true');\r\n            var currentSortDirection = standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse ?\r\n                undefined : sortDirection;\r\n            _cell.columnElement = this.getColumnHeaderElement(key, headerText, _responseColumn, isCurrentSort, isSortRequired, currentSortDirection);\r\n            _cell.isHidden = this.getCellVisibility(_responseColumn);\r\n            // No sort for classification\r\n            if (standardisationSetupType !== enums.StandardisationSetup.ClassifiedResponse) {\r\n                _cell.comparerName = _comparerName;\r\n                _cell.sortDirection = this.getSortDirection((comparerName === _comparerName), sortDirection);\r\n            }\r\n            var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n            _cell.setCellStyle(cellStyle);\r\n            // Creating the grid row collection.\r\n            _columnHeaderCellcollection.push(_cell);\r\n        }\r\n        // Get Dynamic Headers for Individual question when Mark By question view selected\r\n        if (gridType === enums.GridType.markByQuestion) {\r\n            var standardisationResponseListData = Immutable.List(standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses);\r\n            _columnHeaderCellcollection.concat(this.getDynamicHeadersForMarks(standardisationResponseListData, _columnHeaderCellcollection));\r\n            if (standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse &&\r\n                (standardisationSetupStore.instance.stdSetupPermissionCCData &&\r\n                    standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.declassify) &&\r\n                this.isRetainProvisionalMarksCCOn() &&\r\n                !qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete) {\r\n                var key = 'columnHeader_Declassify';\r\n                var cellStyle = 'last-cell-header';\r\n                _cell = new gridCell();\r\n                // create question header element for each question.\r\n                _cell.columnElement = this.getColumnHeaderElement(key, '', undefined, undefined, false, undefined);\r\n                _cell.isHidden = false;\r\n                _cell.setCellStyle(cellStyle);\r\n                // Creating the grid row collection.\r\n                _columnHeaderCellcollection.push(_cell);\r\n            }\r\n            else {\r\n                //Adding the 'last-cell' column as this column is not added to classified worklst by default\r\n                var key = 'columnHeader_Declassify';\r\n                var cellStyle = 'last-cell-header';\r\n                _cell = new gridCell();\r\n                _cell.isHidden = false;\r\n                _cell.setCellStyle(cellStyle);\r\n                // Creating the grid row collection.\r\n                _columnHeaderCellcollection.push(_cell);\r\n            }\r\n        }\r\n        _row.setRowId(1);\r\n        _row.setCells(_columnHeaderCellcollection);\r\n        _columnHeaderCollection.push(_row);\r\n        var _standardisationTableHeaderCollection = Immutable.fromJS(_columnHeaderCollection);\r\n        return _standardisationTableHeaderCollection;\r\n    };\r\n    /**\r\n     * returns the table row collection of frozen table\r\n     * @param standardisationSetupDetailsList\r\n     * @param standardisationSetupType\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getFrozenRowBodyForListView = function (standardisationSetupDetailsList, standardisationSetupType, gridType, comparerName, sortDirection) {\r\n        var _rowHeaderCellcollection = Array();\r\n        var _row;\r\n        var _rowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _cell;\r\n        var key;\r\n        var cssClass;\r\n        var submitResponse = new submitHelper();\r\n        if (standardisationSetupDetailsList != null) {\r\n            var gridSeq = void 0;\r\n            var _responseListData = void 0;\r\n            var gridColumns = void 0;\r\n            var gridRowIdColumn = void 0;\r\n            switch (standardisationSetupType) {\r\n                case enums.StandardisationSetup.SelectResponse:\r\n                    if (standardisationSetupDetailsList.standardisationScriptDetailsList) {\r\n                        gridSeq = standardisationSetupDetailsList.standardisationScriptDetailsList.centreScriptList.keySeq();\r\n                        _responseListData = standardisationSetupDetailsList.standardisationScriptDetailsList.centreScriptList.toArray();\r\n                        gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, standardisationSetupType, true, null, enums.StandardisationSessionTab.CurrentSession, 'Script');\r\n                        gridRowIdColumn = 'candidateScriptId';\r\n                    }\r\n                    else {\r\n                        return;\r\n                    }\r\n                    break;\r\n                case enums.StandardisationSetup.ProvisionalResponse:\r\n                    _responseListData = standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses;\r\n                    var sortedData = void 0;\r\n                    sortedData = Immutable.List(sortHelper.sort(_responseListData, comparerList[comparerName]));\r\n                    _responseListData = sortedData.toArray();\r\n                    gridSeq = Immutable.List(_responseListData).keySeq();\r\n                    gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, standardisationSetupType, true, gridType);\r\n                    break;\r\n                case enums.StandardisationSetup.None:\r\n                    break;\r\n            }\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the list data row\r\n                _row = new gridRow();\r\n                _rowHeaderCellcollection = new Array();\r\n                var responseData = _responseListData[responseListCount];\r\n                var gridColumnLength = gridColumns.length;\r\n                var responseStatuses = submitResponse.submitButtonValidate(responseData, responseData.markingProgress, false, false);\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _cell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    //Switch statement for adding frozen columns.\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.ScriptId:\r\n                            key = gridSeq.get(responseListCount) + '_ScriptId_' + gridColumnCount;\r\n                            _cell.columnElement = this.getScriptIdElement(responseData, componentPropsJson, key, (localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.script-id')\r\n                                + ' '), true);\r\n                            _cell.setCellStyle('col-script-id header-col');\r\n                            _rowHeaderCellcollection.push(_cell);\r\n                            break;\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _cell.columnElement = this.getResponseIdColumnElement(responseData, key, true);\r\n                            _cell.setCellStyle('col-response header-col');\r\n                            _rowHeaderCellcollection.push(_cell);\r\n                            break;\r\n                        case gridColumnNames.IsSharedProvisional:\r\n                            var isSharedProvisional = this.isCommonProvisionalStandardisationOn()\r\n                                && standardisationSetupStore.instance.stdSetupPermissionCCData.role\r\n                                    .permissions.viewCommonProvisionalAvailableResponses\r\n                                && responseData.isSharedProvisional;\r\n                            key = gridSeq.get(responseListCount) + '_ShareResponseIndicatorColumn_' + gridColumnCount;\r\n                            _cell.columnElement = this.getSharedResponseIndicatorElement(isSharedProvisional, key);\r\n                            _cell.setCellStyle('col-share');\r\n                            _rowHeaderCellcollection.push(_cell);\r\n                            break;\r\n                    }\r\n                }\r\n                // Creating the table row collection.\r\n                _rowCollection.push(this.getGridRow(responseData[gridRowIdColumn], _rowHeaderCellcollection, undefined, cssClass, responseStatuses));\r\n            }\r\n        }\r\n        var _frozenRowBodyCollection = Immutable.fromJS(_rowCollection);\r\n        return _frozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * get Script Id Element\r\n     * @param standardisationScriptDetails\r\n     * @param propsNames\r\n     * @param seq\r\n     * @param displayText\r\n     * @param isScriptIdClickable\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getScriptIdElement = function (standardisationScriptDetails, propsNames, seq, displayText, isScriptIdClickable) {\r\n        if (isScriptIdClickable === void 0) { isScriptIdClickable = true; }\r\n        var componentProps;\r\n        var _displayText;\r\n        _displayText = standardisationScriptDetails[propsNames.ScriptId];\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            displayId: standardisationScriptDetails[propsNames.ScriptId],\r\n            displayText: _displayText,\r\n            isClickable: isScriptIdClickable\r\n        };\r\n        return React.createElement(scriptidgridelement, componentProps);\r\n    };\r\n    /**\r\n     * returns the table row elements for frozen table header\r\n     * @param comparerName\r\n     * @param sortDirection\r\n     * @param isSortable\r\n     * @param standardisationSetupType\r\n     * @param selectedTab\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getFrozenRowHeader = function (comparerName, sortDirection, isSortable, standardisationSetupType, selectedSessionTab) {\r\n        var _columnHeaderCollection = Array();\r\n        var _row = new gridRow();\r\n        var _columnHeaderCellcollection = new Array();\r\n        var _comparerName;\r\n        var _gridColumnName = '';\r\n        var _cellStyle = '';\r\n        switch (standardisationSetupType) {\r\n            case enums.StandardisationSetup.SelectResponse:\r\n                switch (selectedSessionTab) {\r\n                    case enums.StandardisationSessionTab.CurrentSession:\r\n                        _comparerName = comparerList.stdScriptIdComparer;\r\n                        _gridColumnName = localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.script-id');\r\n                        _cellStyle = 'col-script-id header-col';\r\n                        // Creating the grid row collection.\r\n                        _columnHeaderCellcollection.push(this.setFrozenColumnHeaders(standardisationSetupType, _gridColumnName, _cellStyle, comparerName, isSortable, _comparerName, sortDirection));\r\n                        break;\r\n                    case enums.StandardisationSessionTab.PreviousSession:\r\n                        var _cell = void 0;\r\n                        var gridColumns_1 = this.getGridColumns(this.resolvedGridColumnsJson, enums.StandardisationSetup.SelectResponse, true, null, enums.StandardisationSessionTab.PreviousSession);\r\n                        var gridColumnLength_1 = gridColumns_1.length;\r\n                        for (var gridColumnCount = 0; gridColumnCount < gridColumnLength_1; gridColumnCount++) {\r\n                            _cell = new gridCell();\r\n                            var key = 'frozenRowHeader_' + gridColumnCount;\r\n                            var currentComparer = gridColumns_1[gridColumnCount].ComparerName;\r\n                            var isSortRequired = gridColumns_1[gridColumnCount].Sortable === 'true';\r\n                            var headerText = gridColumns_1[gridColumnCount].ColumnHeader;\r\n                            headerText = (headerText && headerText !== '') ? localeStore.instance.TranslateText(headerText) : '';\r\n                            var cellStyle = (gridColumns_1[gridColumnCount].CssClass) ? gridColumns_1[gridColumnCount].CssClass : '';\r\n                            // Creating the grid row collection.\r\n                            _columnHeaderCellcollection.push(this.setFrozenColumnHeaders(standardisationSetupType, headerText, cellStyle, comparerName, isSortRequired, comparerList[currentComparer], sortDirection));\r\n                        }\r\n                        break;\r\n                }\r\n                break;\r\n            case enums.StandardisationSetup.ClassifiedResponse:\r\n                _gridColumnName =\r\n                    localeStore.instance.\r\n                        TranslateText('standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.response-id');\r\n                _cellStyle = 'col-response header-col';\r\n                // Creating the grid row collection.\r\n                _columnHeaderCellcollection.push(this.setFrozenColumnHeaders(standardisationSetupType, '', 'col-std-classify-items header-col', '', false));\r\n                _columnHeaderCellcollection.push(this.setFrozenColumnHeaders(standardisationSetupType, _gridColumnName, _cellStyle, '', false));\r\n                break;\r\n            case enums.StandardisationSetup.ProvisionalResponse:\r\n                var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, standardisationSetupType, true);\r\n                var gridColumnLength = gridColumns.length;\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    var currentComparer = gridColumns[gridColumnCount].ComparerName;\r\n                    _gridColumnName = gridColumns[gridColumnCount].ColumnHeader;\r\n                    _gridColumnName = (_gridColumnName && _gridColumnName !== '') ?\r\n                        localeStore.instance.TranslateText(_gridColumnName) : '';\r\n                    _cellStyle = (gridColumns[gridColumnCount].CssClass) ?\r\n                        gridColumns[gridColumnCount].CssClass : ''; // 'col-response header-col';\r\n                    var isSortRequired = gridColumns[gridColumnCount].Sortable === 'true';\r\n                    // Creating the grid row collection.\r\n                    _columnHeaderCellcollection.push(this.setFrozenColumnHeaders(standardisationSetupType, _gridColumnName, _cellStyle, comparerName, isSortRequired, comparerList[currentComparer], sortDirection));\r\n                }\r\n                break;\r\n            case enums.StandardisationSetup.UnClassifiedResponse:\r\n                _gridColumnName =\r\n                    localeStore.instance.\r\n                        TranslateText('standardisation-setup.standardisation-setup-worklist.total-mark-view-column-headers.response-id');\r\n                _cellStyle = 'col-response header-col';\r\n                _comparerName = comparerList.responseIdComparer;\r\n                // Creating the grid row collection.\r\n                _columnHeaderCellcollection.push(this.setFrozenColumnHeaders(standardisationSetupType, _gridColumnName, _cellStyle, comparerName, isSortable, _comparerName, sortDirection));\r\n                break;\r\n            case enums.StandardisationSetup.None:\r\n                break;\r\n        }\r\n        _row.setRowId(1);\r\n        _row.setCells(_columnHeaderCellcollection);\r\n        _columnHeaderCollection.push(_row);\r\n        var _frozenRowHeaderCollection = Immutable.fromJS(_columnHeaderCollection);\r\n        return _frozenRowHeaderCollection;\r\n    };\r\n    /**\r\n     * Setting frozen header columns (Rig order empty column/Response Id for Classifed)\r\n     * @param columnHeader\r\n     * @param cellStyle\r\n     */\r\n    StandardisationSetupHelperBase.prototype.setFrozenColumnHeaders = function (standardisationSetupType, columnHeader, cellStyle, currentComparer, isSortable, _comparerName, sortDirection) {\r\n        var _cell;\r\n        _cell = new gridCell();\r\n        var key = 'frozenRowHeader';\r\n        var isCurrentSort = standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse ?\r\n            undefined : (comparerList[currentComparer] === _comparerName);\r\n        var isSortRequired = standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse ?\r\n            false : isSortable;\r\n        var currentSortDirection = standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse ?\r\n            undefined : sortDirection;\r\n        //TODO : Move the magic strings outside (json?)\r\n        _cell.columnElement = this.getColumnHeaderElement(key, columnHeader, '', isCurrentSort, isSortRequired, currentSortDirection);\r\n        if (standardisationSetupType !== enums.StandardisationSetup.ClassifiedResponse) {\r\n            _cell.comparerName = comparerList[_comparerName];\r\n            _cell.sortDirection = this.getSortDirection((comparerList[currentComparer] === _comparerName), sortDirection);\r\n        }\r\n        _cell.setCellStyle(cellStyle);\r\n        return _cell;\r\n    };\r\n    /**\r\n     * returns the gridcolumns based on the response mode and worklist type\r\n     * @param resolvedGridColumnsJson\r\n     * @param standardisationSetupType\r\n     * @param isFrozen\r\n     * @param selectedSessionTab\r\n     * @param centreOrScript\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getGridColumns = function (resolvedGridColumnsJson, standardisationSetupType, isFrozen, gridType, selectedSessionTab, centreOrScript) {\r\n        if (isFrozen === void 0) { isFrozen = false; }\r\n        var gridColumns;\r\n        switch (standardisationSetupType) {\r\n            case enums.StandardisationSetup.SelectResponse:\r\n                if (selectedSessionTab === enums.StandardisationSessionTab.CurrentSession) {\r\n                    if (centreOrScript === 'Script') {\r\n                        gridColumns = (isFrozen === false) ? resolvedGridColumnsJson.standardisationsetup.SelectResponse.Script.GridColumns\r\n                            : resolvedGridColumnsJson.standardisationsetup.SelectResponse.FrozenRows.GridColumns;\r\n                    }\r\n                    else {\r\n                        gridColumns = resolvedGridColumnsJson.standardisationsetup.SelectResponse.Centre.GridColumns;\r\n                    }\r\n                }\r\n                else if (selectedSessionTab === enums.StandardisationSessionTab.PreviousSession) {\r\n                    gridColumns = (isFrozen === false) ?\r\n                        resolvedGridColumnsJson.standardisationsetup.PreviousSession.ReusableResponse.GridColumns\r\n                        : resolvedGridColumnsJson.standardisationsetup.PreviousSession.frozenRows.GridColumns;\r\n                }\r\n                break;\r\n            case enums.StandardisationSetup.ProvisionalResponse:\r\n                gridColumns = (isFrozen === false) ? (gridType === enums.GridType.totalMarks ?\r\n                    resolvedGridColumnsJson.standardisationsetup.ProvisionalResponse.totalmarksview.GridColumns\r\n                    : resolvedGridColumnsJson.standardisationsetup.ProvisionalResponse.marksbyquestionview.GridColumns)\r\n                    : resolvedGridColumnsJson.standardisationsetup.ProvisionalResponse.frozenRows.GridColumns;\r\n                break;\r\n            case enums.StandardisationSetup.UnClassifiedResponse:\r\n                gridColumns = (isFrozen === false) ? (gridType === enums.GridType.totalMarks ?\r\n                    resolvedGridColumnsJson.standardisationsetup.UnClassifiedResponse.totalmarksview.GridColumns\r\n                    : resolvedGridColumnsJson.standardisationsetup.UnClassifiedResponse.marksbyquestionview.GridColumns)\r\n                    : resolvedGridColumnsJson.standardisationsetup.UnClassifiedResponse.frozenRows.GridColumns;\r\n                break;\r\n            case enums.StandardisationSetup.ClassifiedResponse:\r\n                gridColumns = (isFrozen === false) ? (gridType === enums.GridType.totalMarks ?\r\n                    resolvedGridColumnsJson.standardisationsetup.ClassifiedResponse.totalmarksview.GridColumns\r\n                    : resolvedGridColumnsJson.standardisationsetup.ClassifiedResponse.marksbyquestionview.GridColumns)\r\n                    : resolvedGridColumnsJson.standardisationsetup.ClassifiedResponse.frozenRows.GridColumns;\r\n                break;\r\n            case enums.StandardisationSetup.None:\r\n                break;\r\n        }\r\n        return gridColumns;\r\n    };\r\n    /**\r\n     * returns whether the the given column is hidden or not\r\n     * @param responseColumn\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getCellVisibility = function (column) {\r\n        if (ecourseWorkHelper.isECourseworkComponent && column === 'FirstScanned') {\r\n            return true;\r\n        }\r\n        if (!(configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.eBookmarking).toLowerCase() === 'true' ? true : false) && column === 'QuestionItems') {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Reset dynamic column\r\n     */\r\n    StandardisationSetupHelperBase.prototype.resetDynamicColumnSettings = function () {\r\n        this._dateLengthInPixel = 0;\r\n    };\r\n    /**\r\n     * return the sort direction - if it is current sort just reverse the direction otherwise asc as defaualt direction.\r\n     * @param isCurrentSort\r\n     * @param sortDirection\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getSortDirection = function (isCurrentSort, sortDirection) {\r\n        return ((isCurrentSort === true) ?\r\n            ((sortDirection === enums.SortDirection.Ascending) ? enums.SortDirection.Descending : enums.SortDirection.Ascending)\r\n            : enums.SortDirection.Ascending);\r\n    };\r\n    /**\r\n     * Get the text value for Grid Column\r\n     * @param textValue\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getGenericTextElement = function (textValue, seq, title) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            textValue: textValue,\r\n            title: title\r\n        };\r\n        return React.createElement(GenericTextColumn, componentProps);\r\n    };\r\n    /**\r\n     * Get the Formatted date element.\r\n     * @param value\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getGenericFormattedDateElement = function (value, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            dateValue: new Date(value.toString()),\r\n            className: 'dim-text txt-val small-text'\r\n        };\r\n        return React.createElement(genericDate, componentProps);\r\n    };\r\n    /**\r\n     * Get the Converted text value for Grid Column\r\n     *  @param textValue\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getConvertTextElement = function (textValue, seq) {\r\n        var componentProps;\r\n        switch (textValue) {\r\n            case 'true':\r\n                textValue = 'Yes';\r\n                break;\r\n            case 'false':\r\n                textValue = 'No';\r\n                break;\r\n        }\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            textValue: textValue\r\n        };\r\n        return React.createElement(GenericTextColumn, componentProps);\r\n    };\r\n    /**\r\n     * Get the Marks Grid Column\r\n     * @param textValue\r\n     * @param seq\r\n     * @param usedInTotal\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getMarksColumn = function (textValue, seq, usedInTotal) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            textValue: textValue,\r\n            usedInTotal: usedInTotal\r\n        };\r\n        return React.createElement(marksColumn, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  TotalMark component\r\n     * @param mark\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getTotalMarkElement = function (mark, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            isNonNumericMark: false,\r\n            maximumMark: 100,\r\n            totalMark: mark,\r\n            markingProgress: 100,\r\n            selectedLanguage: localeStore.instance.Locale\r\n        };\r\n        return React.createElement(totalMark, componentProps);\r\n    };\r\n    /**\r\n     * returns the Selected Tag Id of response.\r\n     * @param seq\r\n     * @param tagId\r\n     * @param tagList\r\n     * @param markGroupId\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getTag = function (seq, tagId, tagList, markGroupId, markingMode) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedTagId: tagId,\r\n            tagList: tagList,\r\n            markGroupId: markGroupId,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            // isESResponse = true when tag updated from standardisation setup.\r\n            isESResponse: true,\r\n            markingMode: markingMode\r\n        };\r\n        return React.createElement(TagList, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  ResponseIdColumn component\r\n     * @param stdResponseData\r\n     * @param seq\r\n     * @param isResponseIdClickable\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getResponseIdColumnElement = function (stdResponseData, seq, isResponseIdClickable, isReusableResponseView, candidateScriptId) {\r\n        if (isResponseIdClickable === void 0) { isResponseIdClickable = true; }\r\n        if (isReusableResponseView === void 0) { isReusableResponseView = false; }\r\n        if (candidateScriptId === void 0) { candidateScriptId = ''; }\r\n        var componentProps;\r\n        var displayId = stdResponseData.displayId;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            displayId: displayId.toString(),\r\n            isResponseIdClickable: isResponseIdClickable,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isReusableResponseView: isReusableResponseView,\r\n            candidateScriptId: '1' + stdResponseData.candidateScriptId\r\n        };\r\n        return React.createElement(stdResponseId, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  LinkedMessagrIndicator component\r\n     * @param responseData\r\n     * @param propsNames\r\n     * @param seq\r\n     * @param isTileView\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getLinkedMessageElement = function (responseData, propsNames, seq, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            messageCount: responseData[propsNames.unreadMessagesCount],\r\n            hasMessages: responseData[propsNames.hasMessages],\r\n            displayId: responseData[propsNames.displayId],\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isTileView: isTileView,\r\n            isTeamManagementMode: markerOperationModeFactory.operationMode.isTeamManagementMode\r\n        };\r\n        return React.createElement(LinkedMessageIndicator, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  Last updated component\r\n     * @param lastUpdatedDate\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getLastUpdatedElement = function (stdResponseData, propsNames, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            dateType: enums.WorkListDateType.lastUpdatedDate,\r\n            dateValue: new Date(stdResponseData[propsNames.updatedDate]),\r\n            isTileView: false\r\n        };\r\n        return React.createElement(LastUpdatedColumn, componentProps);\r\n    };\r\n    /**\r\n     * create react element for declassify button\r\n     * @param title\r\n     * @param anchorclassName\r\n     * @param spanclassName\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getDeclassifyButtonElement = function (title, anchorclassName, spanclassName, seq, displayId, totalMarkValue, candidateScriptId, esCandidateScriptMarkSchemeGroupId, markingModeId, rigOrder, esMarkGroupRowVersion) {\r\n        var componentProps;\r\n        componentProps = {\r\n            title: title,\r\n            id: seq,\r\n            anchorclassName: anchorclassName,\r\n            spanclassName: spanclassName,\r\n            displayId: displayId,\r\n            totalMarkValue: totalMarkValue,\r\n            candidateScriptId: candidateScriptId,\r\n            esCandidateScriptMarkSchemeGroupId: esCandidateScriptMarkSchemeGroupId,\r\n            markSchemeGroupId: standardisationSetupStore.instance.markSchemeGroupId,\r\n            markingModeId: markingModeId,\r\n            rigOrder: rigOrder,\r\n            esMarkGroupRowVersion: esMarkGroupRowVersion\r\n        };\r\n        return React.createElement(DeclassifyButton, componentProps);\r\n    };\r\n    /**\r\n     * creating grid row\r\n     * @param {string} uniqueId\r\n     * @param {Array<gridCell>} gridCells\r\n     * @param {JSX.Element} [additionalComponent]\r\n     * @param {string} [cssClass]\r\n     * @param {Immutable.List<enums.ResponseStatus>} [responseStatus]\r\n     * @param {boolean} [overClassified]\r\n     * @returns {gridRow}\r\n     * @memberof StandardisationSetupHelperBase\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getGridRow = function (uniqueId, gridCells, additionalComponent, cssClass, responseStatus, overClassified) {\r\n        var _gridRow = new gridRow();\r\n        var className = this.setRowStyle(responseStatus, overClassified);\r\n        className = (cssClass) ? (className + ' ' + cssClass) : className;\r\n        _gridRow.setRowStyle(className);\r\n        _gridRow.setRowId(parseFloat(uniqueId));\r\n        _gridRow.setCells(gridCells);\r\n        _gridRow.setAdditionalElement(additionalComponent);\r\n        return _gridRow;\r\n    };\r\n    /**\r\n     * Set row style to amber if the response has blocking exceptions or other reasons\r\n     * @param {Immutable.List<enums.ResponseStatus>} responseStatus\r\n     * @returns {string}\r\n     * @memberof StandardisationSetupHelperBase\r\n     */\r\n    StandardisationSetupHelperBase.prototype.setRowStyle = function (responseStatus, overClassified) {\r\n        // Check whetehr the classifcation type exceeded the current target,\r\n        // if so highlight the exceeded last rows with amber color.\r\n        if ((responseStatus && (responseStatus.contains(enums.ResponseStatus.hasException) ||\r\n            responseStatus.contains(enums.ResponseStatus.hasZoningException) ||\r\n            responseStatus.contains(enums.ResponseStatus.notAllPagesAnnotated) ||\r\n            responseStatus.contains(enums.ResponseStatus.markChangeReasonNotExist) ||\r\n            responseStatus.contains(enums.ResponseStatus.supervisorRemarkDecisionNotSelected) ||\r\n            responseStatus.contains(enums.ResponseStatus.notAllFilesViewed))) || overClassified) {\r\n            return 'row warning-alert';\r\n        }\r\n        else {\r\n            return 'row';\r\n        }\r\n    };\r\n    /**\r\n     * Generate Centre Row Definition\r\n     * @param standardisationCentreList\r\n     */\r\n    StandardisationSetupHelperBase.prototype.generateCentreRowDefinition = function (standardisationCentreList) {\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Return the dynamic headers for questions\r\n     * @param standardisationResponseListData\r\n     * @param _columnHeaderCellcollection\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getDynamicHeadersForMarks = function (standardisationResponseListData, _columnHeaderCellcollection) {\r\n        // Get the Standardisation marks for the response if exist.\r\n        var _stdMarksData = standardisationResponseListData.first().standardisationMarks;\r\n        var questionsCount = _stdMarksData.length;\r\n        var _cell;\r\n        // iterate through each questions and get the display label.\r\n        for (var questionItemCount = 0; questionItemCount < questionsCount; questionItemCount++) {\r\n            _cell = new gridCell();\r\n            var headerText = _stdMarksData[questionItemCount].displayLabel;\r\n            var _comparerName = '';\r\n            headerText = (headerText && headerText !== '') ? headerText : '';\r\n            var key = 'columnHeader_' + questionItemCount;\r\n            // create question header element for each question.\r\n            _cell.columnElement = this.getColumnHeaderElement(key, headerText, undefined, undefined, false, undefined);\r\n            _cell.isHidden = false;\r\n            _cell.comparerName = _comparerName;\r\n            var cellStyle = 'col-question-item';\r\n            _cell.setCellStyle(cellStyle);\r\n            // Creating the grid row collection.\r\n            _columnHeaderCellcollection.push(_cell);\r\n        }\r\n        return _columnHeaderCellcollection;\r\n    };\r\n    /**\r\n     * Get Dynamic Value For Marks\r\n     * @param gridSeq\r\n     * @param stdResponseData\r\n     * @param _stdRowHeaderCellcollection\r\n     * @param index\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getDynamicValueForMarks = function (stdResponseData, _stdRowHeaderCellcollection, index) {\r\n        var _stdGridCell;\r\n        var key;\r\n        // Get the Standardisation marks for the response if exist.\r\n        var stdMarks = stdResponseData.standardisationMarks;\r\n        var noOfQuestions = stdMarks.length;\r\n        var mark;\r\n        var usedInTotal;\r\n        // Getting the Marks Data\r\n        for (var questionItemCount = 0; questionItemCount < noOfQuestions; questionItemCount++) {\r\n            _stdGridCell = new gridCell();\r\n            key = index + '_Questions_' + questionItemCount;\r\n            mark = isNaN(parseInt(stdMarks[questionItemCount].mark.toString())) ?\r\n                stdMarks[questionItemCount].mark : parseInt(stdMarks[questionItemCount].mark.toString());\r\n            usedInTotal = stdMarks[questionItemCount].usedInTotal;\r\n            _stdGridCell.columnElement = this.getMarksColumn(mark, key, usedInTotal);\r\n            _stdGridCell.isHidden = false;\r\n            var cellStyle = 'col-question-item';\r\n            _stdGridCell.setCellStyle(cellStyle);\r\n            _stdRowHeaderCellcollection.push(_stdGridCell);\r\n        }\r\n        return _stdRowHeaderCellcollection;\r\n    };\r\n    /**\r\n     * Method to create Frozen Body Data for different std worklists.\r\n     * @param stdResponseData\r\n     * @param gridSeq\r\n     * @param gridType\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getFrozenRowData = function (stdResponseData, gridType, gridColumns, index, overClassified) {\r\n        var _stdWorkListRowHeaderCellcollection = Array();\r\n        var _stdWorkListCell;\r\n        var key;\r\n        var cellStyle;\r\n        var _stdResponseColumn;\r\n        var componentPropsJson;\r\n        var gridColumnLength = gridColumns.length;\r\n        var submitResponse = new submitHelper();\r\n        var responseStatuses = submitResponse.submitButtonValidate(stdResponseData, stdResponseData.markingProgress, false, false);\r\n        // Set rig order as \"Seed\" for seed responses.\r\n        var isSeed = (stdResponseData.markingModeId === enums.MarkingMode.Seeding);\r\n        // Getting the STD worklist columns\r\n        for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n            _stdResponseColumn = gridColumns[gridColumnCount].GridColumn;\r\n            _stdWorkListCell = new gridCell();\r\n            componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n            //Switch statement for adding frozen columns in future.\r\n            switch (_stdResponseColumn) {\r\n                case gridColumnNames.RigOrderColumn:\r\n                    key = index + '_RigOrderColumn_' + gridColumnCount;\r\n                    var className = 'dim-text small-text classify-index';\r\n                    _stdWorkListCell.columnElement = this.getRIGOrderColumnElement(key, className, undefined, isSeed ? 'Seed' : stdResponseData.rigOrder.toString());\r\n                    cellStyle = 'col-std-classify-items header-col';\r\n                    break;\r\n                case gridColumnNames.ResponseIdColumn:\r\n                    key = index + '_ResponseIdColumn_' + gridColumnCount;\r\n                    _stdWorkListCell.columnElement = this.getResponseIdColumnElement(stdResponseData, key, true);\r\n                    cellStyle = 'col-response header-col';\r\n                    break;\r\n            }\r\n            _stdWorkListCell.setCellStyle(cellStyle);\r\n            _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n        }\r\n        // Return the table row.\r\n        return this.getGridRow(stdResponseData.displayId.toString(), _stdWorkListRowHeaderCellcollection, undefined, undefined, responseStatuses, overClassified);\r\n    };\r\n    /**\r\n     * Method to return ufrozen row data for different type.\r\n     * @param stdResponseListData\r\n     * @param gridColumns\r\n     * @param gridSeq\r\n     * @param gridType\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getRowData = function (stdResponseListData, gridColumns, gridType, index, standardisationSetupType) {\r\n        var _this = this;\r\n        var stdGridRowCollection = Array();\r\n        var submitResponse = new submitHelper();\r\n        // Loop through each response\r\n        stdResponseListData.map(function (stdResponseData) {\r\n            var stdGridRowHeaderCellcollection = Array();\r\n            var _stdResponseColumn;\r\n            var componentPropsJson;\r\n            var _stdGridCell;\r\n            var key;\r\n            var responseStatuses = submitResponse.submitButtonValidate(stdResponseData, stdResponseData.markingProgress, false, false);\r\n            // Getting the worklist columns\r\n            for (var gridColumnCount = 0; gridColumnCount < gridColumns.length; gridColumnCount++) {\r\n                _stdResponseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                _stdGridCell = new gridCell();\r\n                switch (_stdResponseColumn) {\r\n                    case gridColumnNames.ScriptId:\r\n                        key = index + '_ScriptId_' + gridColumnCount;\r\n                        var candidateScriptId = '1' + stdResponseData.candidateScriptId.toString();\r\n                        _stdGridCell.columnElement = _this.getGenericTextElement(candidateScriptId, key);\r\n                        break;\r\n                    case gridColumnNames.Centre:\r\n                        key = index + '_Centre_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getGenericTextElement(stdResponseData.centreNumber, key);\r\n                        break;\r\n                    case gridColumnNames.CentreCandidateNum:\r\n                        key = index + '_Candidate_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getGenericTextElement(stdResponseData.centreCandidateNumber, key);\r\n                        break;\r\n                    case gridColumnNames.MarksColumn:\r\n                        key = index + '_Marks_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getTotalMarkElement(stdResponseData.totalMarkValue, key);\r\n                        break;\r\n                    case gridColumnNames.LastMarkerColumn:\r\n                        key = index + '_LastMarker_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getGenericTextElement(stringFormatHelper.getFormattedExaminerName(stdResponseData.lastMarkerInitials, stdResponseData.lastMarkerSurname), key);\r\n                        break;\r\n                    case gridColumnNames.NoteColumn:\r\n                        key = index + '_Note_' + gridColumnCount;\r\n                        var title = stdResponseData.note;\r\n                        _stdGridCell.columnElement = _this.getGenericTextElement(stdResponseData.note, key, title);\r\n                        break;\r\n                    case gridColumnNames.LinkedMessageIndicator:\r\n                        key = index + '_LinkedMessage_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getLinkedMessageElement(stdResponseData, componentPropsJson, key, false);\r\n                        break;\r\n                    case gridColumnNames.TagIndicator:\r\n                        key = index + '_TagIndicator_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getTag(key, stdResponseData.tagId, tagStore.instance.tags, stdResponseData.esMarkGroupId, stdResponseData.markingModeId);\r\n                        break;\r\n                    case gridColumnNames.LastUpdatedColumn:\r\n                        key = index + '_LastUpdated_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getLastUpdatedElement(stdResponseData, componentPropsJson, key);\r\n                        break;\r\n                    case gridColumnNames.Status:\r\n                        responseStatuses = submitResponse.submitButtonValidate(stdResponseData, stdResponseData.markingProgress, false, false);\r\n                        key = index + '_Status_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = _this.getMarkingProgressElement(stdResponseData, componentPropsJson, key, responseStatuses, standardisationSetupType);\r\n                        break;\r\n                    case gridColumnNames.DeClassifyColumn:\r\n                        if ((standardisationSetupStore.instance.stdSetupPermissionCCData &&\r\n                            standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.declassify) &&\r\n                            _this.isRetainProvisionalMarksCCOn() &&\r\n                            !qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete) {\r\n                            key = index + '_DeClassify_' + gridColumnCount;\r\n                            _stdGridCell.columnElement = _this.getDeclassifyButtonElement('Declassify', 'close-icon-link', 'close-icon', key, stdResponseData.displayId, stdResponseData.totalMarkValue, stdResponseData.candidateScriptId, stdResponseData.esCandidateScriptMarkSchemeGroupId, stdResponseData.markingModeId, stdResponseData.rigOrder, stdResponseData.esMarkGroupRowVersion);\r\n                        }\r\n                        else {\r\n                            //Adding the 'last-cell' column as this column is not added to classified worklst by default\r\n                            key = index + '_DeClassify_' + gridColumnCount;\r\n                        }\r\n                        break;\r\n                    case gridColumnNames.SLAOIndicator:\r\n                        key = index + '_SLAOIndicator_' + gridColumnCount;\r\n                        _stdGridCell.columnElement = (_this.getSLAOIndicatorElementForStandardisationResponses(stdResponseData, componentPropsJson, key, true, false));\r\n                        break;\r\n                    case gridColumnNames.AllPageAnnotedIndicator:\r\n                        key = index + '_AllPageAnnotated_' + gridColumnCount;\r\n                        // Create annotation indicator element.\r\n                        _stdGridCell.columnElement = _this.getAllPageAnnotationIndicatorElement(stdResponseData, componentPropsJson, key);\r\n                        break;\r\n                    case gridColumnNames.AllFilesNotViewedIndicator:\r\n                        key = index + '_AllFilesNotViewed_' + gridColumnCount;\r\n                        // Create annotation indicator element.\r\n                        _stdGridCell.columnElement = _this.getAllFilesNotViewedIndicatorElement(stdResponseData, componentPropsJson, key);\r\n                        break;\r\n                    default:\r\n                }\r\n                _stdGridCell.isHidden = _this.getCellVisibility(_stdResponseColumn);\r\n                var cellStyle = gridColumns[gridColumnCount].CssClass\r\n                    ? gridColumns[gridColumnCount].CssClass\r\n                    : '';\r\n                _stdGridCell.setCellStyle(cellStyle);\r\n                stdGridRowHeaderCellcollection.push(_stdGridCell);\r\n            }\r\n            // Get individual question's marks if Mark by question view.\r\n            if (gridType === enums.GridType.markByQuestion) {\r\n                stdGridRowHeaderCellcollection.concat(_this.getDynamicValueForMarks(stdResponseData, stdGridRowHeaderCellcollection, index));\r\n                if (standardisationSetupType === enums.StandardisationSetup.ClassifiedResponse &&\r\n                    (standardisationSetupStore.instance.stdSetupPermissionCCData &&\r\n                        standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.declassify) &&\r\n                    _this.isRetainProvisionalMarksCCOn() &&\r\n                    !qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete) {\r\n                    _stdGridCell = new gridCell();\r\n                    key = index + '_DeClassify_' + stdGridRowHeaderCellcollection.length + 1;\r\n                    _stdGridCell.columnElement = _this.getDeclassifyButtonElement('Declassify', 'close-icon-link', 'close-icon', key, stdResponseData.displayId, stdResponseData.totalMarkValue, stdResponseData.candidateScriptId, stdResponseData.esCandidateScriptMarkSchemeGroupId, stdResponseData.markingModeId, stdResponseData.rigOrder, stdResponseData.esMarkGroupRowVersion);\r\n                    _stdGridCell.isHidden = _this.getCellVisibility(_stdResponseColumn);\r\n                    var cellStyle = 'last-cell col-declassify';\r\n                    _stdGridCell.setCellStyle(cellStyle);\r\n                    stdGridRowHeaderCellcollection.push(_stdGridCell);\r\n                }\r\n                else {\r\n                    //Adding the 'last-cell' column as this column is not added to classified worklst by default\r\n                    _stdGridCell = new gridCell();\r\n                    key = index + '_DeClassify_' + stdGridRowHeaderCellcollection.length + 1;\r\n                    _stdGridCell.isHidden = _this.getCellVisibility(_stdResponseColumn);\r\n                    var cellStyle = 'last-cell';\r\n                    _stdGridCell.setCellStyle(cellStyle);\r\n                    stdGridRowHeaderCellcollection.push(_stdGridCell);\r\n                }\r\n            }\r\n            // Check whetehr the classifcation type exceeded the current target,\r\n            // if so highlight the exceeded last rows with amber color.\r\n            // Applicable for Classified Worklist\r\n            var overClassified = _this.isSSUTargetsOverClassified(standardisationSetupType, stdResponseData.markingModeId, stdResponseData.rigOrder);\r\n            // Creating the grid row collection.\r\n            stdGridRowCollection.push(_this.getGridRow(stdResponseData.displayId.toString(), stdGridRowHeaderCellcollection, undefined, undefined, responseStatuses, overClassified));\r\n            index++;\r\n        });\r\n        // Return the STD Set up row collection for Unfrozen data.\r\n        return stdGridRowCollection;\r\n    };\r\n    /**\r\n     * Creating react element for the  RIG Order Column component\r\n     * @param seq\r\n     * @param className\r\n     * @param classificationType\r\n     * @param rigOrder\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getRIGOrderColumnElement = function (seq, className, classificationType, rigOrder) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            classificationType: classificationType,\r\n            rigOrder: rigOrder,\r\n            className: className\r\n        };\r\n        return React.createElement(RigOrder, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  getSLAOIndicatorElement component\r\n     * @param standardisationScriptDetails\r\n     * @param propsNames\r\n     * @param seq\r\n     * @param showMarkingProgress\r\n     * @param isTileView\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getSLAOIndicatorElement = function (standardisationScriptDetails, propsNames, seq, showMarkingProgress, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isResponseHasSLAO: standardisationScriptDetails.hasAdditionalObjects,\r\n            isAllAnnotated: false,\r\n            isMarkingCompleted: false,\r\n            isTileView: isTileView,\r\n            markSchemeGroupId: standardisationSetupStore.instance.markSchemeGroupId\r\n        };\r\n        return React.createElement(slaoAnnotationIndicator, componentProps);\r\n    };\r\n    /**\r\n     * Getting SLAO Indicator Element for Standardisation Responses\r\n     * @param {StandardisationResponseDetails} standardisationResponseDetails\r\n     * @param {*} propsNames\r\n     * @param {string} seq\r\n     * @param {boolean} showMarkingProgress\r\n     * @param {boolean} [isTileView=true]\r\n     * @returns {JSX.Element}\r\n     * @memberof StandardisationSetupHelperBase\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getSLAOIndicatorElementForStandardisationResponses = function (standardisationResponseDetails, propsNames, seq, showMarkingProgress, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isResponseHasSLAO: standardisationResponseDetails.hasAdditionalObjects,\r\n            isAllAnnotated: standardisationResponseDetails.hasAllPagesAnnotated,\r\n            isMarkingCompleted: ((showMarkingProgress ? standardisationResponseDetails.markingProgress : 100) === 100) ? true : false,\r\n            isTileView: isTileView,\r\n            markSchemeGroupId: standardisationSetupStore.instance.markSchemeGroupId\r\n        };\r\n        return React.createElement(slaoAnnotationIndicator, componentProps);\r\n    };\r\n    /**\r\n     * Creating react element for the  MarkingProgress component.\r\n     * @param standardisationResponses\r\n     * @param propsNames\r\n     * @param seq\r\n     * @param responseStatuses\r\n     * @param standardisationSetup\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getMarkingProgressElement = function (standardisationResponses, propsNames, seq, responseStatuses, standardisationSetup) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            responseStatus: responseStatuses,\r\n            progress: standardisationResponses.markingProgress,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            markGroupId: standardisationResponses.esMarkGroupId,\r\n            isSubmitDisabled: false,\r\n            standardisationSetupTab: standardisationSetup,\r\n            stdResponseDetails: standardisationResponses\r\n        };\r\n        return React.createElement(MarkingProgress, componentProps);\r\n    };\r\n    /**\r\n     * Show the AllPageAnnotationIndicator when the CC is on and marking is completed\r\n     * blocking submission.\r\n     * @param {ResponseBase} responseData\r\n     * @param {any} propsNames\r\n     * @param {string} seq\r\n     * @returns\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getAllPageAnnotationIndicatorElement = function (responseData, propsNames, seq, showMarkingProgress) {\r\n        if (showMarkingProgress === void 0) { showMarkingProgress = true; }\r\n        var isForceAnnotationCCOn = this.getCCValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, responseData.markSchemeGroupId);\r\n        var markingProgress = responseData[propsNames.markingProgress];\r\n        // we need to show this in tile view only if we 100% marked responses and\r\n        // all page annotation cc is on.\r\n        if (isForceAnnotationCCOn === 'true' && markingProgress === 100) {\r\n            var componentProps = void 0;\r\n            componentProps = {\r\n                key: seq,\r\n                id: seq,\r\n                selectedLanguage: localeStore.instance.Locale,\r\n                isAllAnnotated: responseData[propsNames.hasAllPagesAnnotated],\r\n                isMarkingCompleted: ((showMarkingProgress ? responseData[propsNames.markingProgress] : 100) === 100) ? true : false,\r\n                isTileView: false,\r\n                markSchemeGroupId: responseData.markSchemeGroupId\r\n            };\r\n            var allPageElement = Immutable.List([React.createElement(allPageAnnotationIndicator, componentProps)]);\r\n            return this.getWrappedColumn(allPageElement, 'col wl-slao-holder', seq + 'wrapped').columnElement;\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * creating react element for the  getAllPageAnnotatedIndicatorElement component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the component\r\n     * @param seq - key value for the component\r\n     * @param showMarkingProgress - key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getAllFilesNotViewedIndicatorElement = function (responseData, propsNames, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            allFilesViewed: responseData[propsNames.allFilesViewed],\r\n            isMarkingCompleted: responseData[propsNames.markingProgress] === 100 ? true : false,\r\n            isTileView: false,\r\n            isECourseworkComponent: eCourseworkHelper.isECourseworkComponent\r\n        };\r\n        return React.createElement(allFilesNotViewedIndicator, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  Shared Response Indicator component\r\n     * @param stdResponseData\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getSharedResponseIndicatorElement = function (isSharedProvisional, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isSharedProvisional: isSharedProvisional\r\n        };\r\n        return React.createElement(sharedResponseIndicatorElement, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  Shared Response Indicator component\r\n     * @param stdResponseData\r\n     * @param seq\r\n     */\r\n    StandardisationSetupHelperBase.prototype.isCommonProvisionalStandardisationOn = function () {\r\n        return this.getCCValue(configurableCharacteristicsNames.CommonProvisionalStandardisation, standardisationSetupStore.instance.markSchemeGroupId).toLowerCase() === 'true';\r\n    };\r\n    /**\r\n     * Get restricted Classification types\r\n     * which should be highlighted as amber when over classified.\r\n     * @param markSchemeGroupId\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getRestrictedSSUTarget = function (markSchemeGroupId) {\r\n        var restrictSSUTargetsCCValue = configurableCharacteristicsHelper.getCharacteristicValue('RestrictStandardisationSetupTargets', markSchemeGroupId);\r\n        if (restrictSSUTargetsCCValue !== '') {\r\n            var xmlHelperObj = new xmlHelper(restrictSSUTargetsCCValue);\r\n            var restrictedTargetNodes = xmlHelperObj.getAllChildNodes();\r\n            var restrictedTargets = immutable.List();\r\n            if (restrictedTargetNodes) {\r\n                // get targets which are restricted. exclude seed.\r\n                for (var node = 0; node < restrictedTargetNodes.length; node++) {\r\n                    switch (restrictedTargetNodes[node].firstChild.nodeValue) {\r\n                        case 'Practice':\r\n                            restrictedTargets =\r\n                                immutable.List(restrictedTargets.concat(enums.MarkingMode.Practice));\r\n                            break;\r\n                        case 'Standardisation':\r\n                            restrictedTargets =\r\n                                immutable.List(restrictedTargets.concat(enums.MarkingMode.Approval));\r\n                            break;\r\n                        case 'STMStandardisation':\r\n                            restrictedTargets =\r\n                                immutable.List(restrictedTargets.concat(enums.MarkingMode.ES_TeamApproval));\r\n                            break;\r\n                    }\r\n                }\r\n                return restrictedTargets;\r\n            }\r\n            return undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Get Standardisation Setup Required Targets\r\n     */\r\n    StandardisationSetupHelperBase.prototype.getStandardisationSetupRequiredTargets = function () {\r\n        var standardisationSetupRequiredTargetsCCValue = configurableCharacteristicsHelper.getCharacteristicValue('StandardisationSetupRequiredTargets');\r\n        if (standardisationSetupRequiredTargetsCCValue !== '') {\r\n            var xmlHelperObj = new xmlHelper(standardisationSetupRequiredTargetsCCValue);\r\n            var requiredTargetNodes = xmlHelperObj.getAllChildNodes();\r\n            var requiredTargets = Immutable.List();\r\n            if (requiredTargetNodes) {\r\n                // get targets which are restricted. exclude seed.\r\n                for (var node = 0; node < requiredTargetNodes.length; node++) {\r\n                    if (requiredTargetNodes[node].firstChild !== null) {\r\n                        switch (requiredTargetNodes[node].firstChild.nodeValue) {\r\n                            case 'Practice':\r\n                                requiredTargets =\r\n                                    Immutable.List(requiredTargets.concat(enums.MarkingMode.Practice));\r\n                                break;\r\n                            case 'Standardisation':\r\n                                requiredTargets =\r\n                                    Immutable.List(requiredTargets.concat(enums.MarkingMode.Approval));\r\n                                break;\r\n                            case 'STMStandardisation':\r\n                                requiredTargets =\r\n                                    Immutable.List(requiredTargets.concat(enums.MarkingMode.ES_TeamApproval));\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                return requiredTargets;\r\n            }\r\n            return undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Check whether the specified target ov3erclassified\r\n     * @param tabSelection\r\n     * @param markingMode\r\n     * @param rigOrder\r\n     */\r\n    StandardisationSetupHelperBase.prototype.isSSUTargetsOverClassified = function (tabSelection, markingMode, rigOrder) {\r\n        // Hold the Restricted targets which should be highlighted when over classified.\r\n        var restrictedSSUTargets = this.getRestrictedSSUTarget(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId);\r\n        var classificationSummaryTargetDetails = standardisationSetupStore.instance.classificationSummaryTargetDetails;\r\n        return tabSelection === enums.StandardisationSetup.ClassifiedResponse &&\r\n            restrictedSSUTargets && restrictedSSUTargets.contains(markingMode) &&\r\n            classificationSummaryTargetDetails.some(function (x) { return x.markingModeId === markingMode &&\r\n                x.markingModeId !== enums.MarkingMode.Seeding &&\r\n                x.count > x.target && rigOrder > x.target; });\r\n    };\r\n    return StandardisationSetupHelperBase;\r\n}());\r\nmodule.exports = StandardisationSetupHelperBase;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 296:
/* no static exports found */
/* all exports used */
/*!************************************************!*\
  !*** ./src/components/utility/grid/gridrow.ts ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Row Definition for Grid Compoent\r\n */\r\nvar GridRow = /** @class */ (function () {\r\n    function GridRow() {\r\n    }\r\n    /**\r\n     * returns the rowId\r\n     */\r\n    GridRow.prototype.getRowId = function () {\r\n        return this.rowId;\r\n    };\r\n    /**\r\n     * returns the cells\r\n     */\r\n    GridRow.prototype.getCells = function () {\r\n        return this.cells;\r\n    };\r\n    /**\r\n     * set the cells\r\n     */\r\n    GridRow.prototype.setCells = function (_cells) {\r\n        this.cells = _cells;\r\n    };\r\n    /**\r\n     * returns the rowStyle\r\n     */\r\n    GridRow.prototype.getRowStyle = function () {\r\n        return this.rowStyle;\r\n    };\r\n    /**\r\n     * set the rowStyle\r\n     */\r\n    GridRow.prototype.setRowStyle = function (_rowStyle) {\r\n        this.rowStyle = _rowStyle;\r\n    };\r\n    /**\r\n     * set the rowId\r\n     * @param rowId\r\n     */\r\n    GridRow.prototype.setRowId = function (rowId) {\r\n        this.rowId = rowId;\r\n    };\r\n    /**\r\n     * returns the rowTitle\r\n     */\r\n    GridRow.prototype.getRowTitle = function () {\r\n        return this.rowTitle;\r\n    };\r\n    /**\r\n     * returns the rowTitle\r\n     */\r\n    GridRow.prototype.setRowTitle = function (title) {\r\n        this.rowTitle = title;\r\n    };\r\n    /**\r\n     * returns the additional row Element\r\n     */\r\n    GridRow.prototype.getAdditionalElement = function () {\r\n        return this.additionalElement;\r\n    };\r\n    /**\r\n     * returns the additional row Element\r\n     */\r\n    GridRow.prototype.setAdditionalElement = function (_additionalElement) {\r\n        this.additionalElement = _additionalElement;\r\n    };\r\n    return GridRow;\r\n}());\r\nmodule.exports = GridRow;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL2dyaWRyb3cudHM/ZTk1YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPSd0eXBpbmdzL3Jvdy50cycgLz5cclxuaW1wb3J0IGdyaWRDZWxsID0gcmVxdWlyZSgnLi9ncmlkY2VsbCcpO1xyXG5cclxuLyoqXHJcbiAqIFJvdyBEZWZpbml0aW9uIGZvciBHcmlkIENvbXBvZW50XHJcbiAqL1xyXG5jbGFzcyBHcmlkUm93IGltcGxlbWVudHMgUm93IHtcclxuXHJcbiAgICBwcml2YXRlIGNlbGxzOiBBcnJheTxncmlkQ2VsbD47XHJcbiAgICBwcml2YXRlIHJvd1N0eWxlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHJvd0lkOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHJvd1RpdGxlOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGFkZGl0aW9uYWxFbGVtZW50OiBKU1guRWxlbWVudDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIHJvd0lkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRSb3dJZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb3dJZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIGNlbGxzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRDZWxscygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jZWxscztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldCB0aGUgY2VsbHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldENlbGxzKF9jZWxsczogQXJyYXk8Z3JpZENlbGw+KSB7XHJcbiAgICAgICAgdGhpcy5jZWxscyA9IF9jZWxscztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIHJvd1N0eWxlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRSb3dTdHlsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb3dTdHlsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldCB0aGUgcm93U3R5bGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldFJvd1N0eWxlKF9yb3dTdHlsZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5yb3dTdHlsZSA9IF9yb3dTdHlsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldCB0aGUgcm93SWRcclxuICAgICAqIEBwYXJhbSByb3dJZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0Um93SWQocm93SWQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMucm93SWQgPSByb3dJZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIHJvd1RpdGxlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRSb3dUaXRsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb3dUaXRsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdGhlIHJvd1RpdGxlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRSb3dUaXRsZSh0aXRsZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5yb3dUaXRsZSA9IHRpdGxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyB0aGUgYWRkaXRpb25hbCByb3cgRWxlbWVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0QWRkaXRpb25hbEVsZW1lbnQoKTogSlNYLkVsZW1lbnQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZGl0aW9uYWxFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJucyB0aGUgYWRkaXRpb25hbCByb3cgRWxlbWVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0QWRkaXRpb25hbEVsZW1lbnQoX2FkZGl0aW9uYWxFbGVtZW50OiBKU1guRWxlbWVudCkge1xyXG4gICAgICAgIHRoaXMuYWRkaXRpb25hbEVsZW1lbnQgPSBfYWRkaXRpb25hbEVsZW1lbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IEdyaWRSb3c7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ3JpZC9ncmlkcm93LnRzIl0sIm1hcHBpbmdzIjoiO0FBR0E7O0FBRUE7QUFDQTtBQUFBO0FBOEVBO0FBdEVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 304:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/utility/worklistvalidators/worklistvalidatorlist.ts ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * List of validators used for worklists. An entry should be added to this enum for all worklist validators\r\n */\r\nvar WorklistValidatorList;\r\n(function (WorklistValidatorList) {\r\n    WorklistValidatorList[WorklistValidatorList[\"liveOpen\"] = 0] = \"liveOpen\";\r\n    WorklistValidatorList[WorklistValidatorList[\"atypicalOpen\"] = 1] = \"atypicalOpen\";\r\n    WorklistValidatorList[WorklistValidatorList[\"standardisationOpen\"] = 2] = \"standardisationOpen\";\r\n    WorklistValidatorList[WorklistValidatorList[\"practiceOpen\"] = 3] = \"practiceOpen\";\r\n    WorklistValidatorList[WorklistValidatorList[\"directedRemarkOpen\"] = 4] = \"directedRemarkOpen\";\r\n    WorklistValidatorList[WorklistValidatorList[\"simulationOpen\"] = 5] = \"simulationOpen\";\r\n})(WorklistValidatorList || (WorklistValidatorList = {}));\r\nmodule.exports = WorklistValidatorList;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvd29ya2xpc3R2YWxpZGF0b3JzL3dvcmtsaXN0dmFsaWRhdG9ybGlzdC50cz9lZTc5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBMaXN0IG9mIHZhbGlkYXRvcnMgdXNlZCBmb3Igd29ya2xpc3RzLiBBbiBlbnRyeSBzaG91bGQgYmUgYWRkZWQgdG8gdGhpcyBlbnVtIGZvciBhbGwgd29ya2xpc3QgdmFsaWRhdG9yc1xyXG4gKi9cclxuXHJcbmVudW0gV29ya2xpc3RWYWxpZGF0b3JMaXN0IHtcclxuICAgIGxpdmVPcGVuLFxyXG4gICAgYXR5cGljYWxPcGVuLFxyXG4gICAgc3RhbmRhcmRpc2F0aW9uT3BlbixcclxuICAgIHByYWN0aWNlT3BlbixcclxuICAgIGRpcmVjdGVkUmVtYXJrT3BlbixcclxuICAgIHNpbXVsYXRpb25PcGVuXHJcbn1cclxuZXhwb3J0ID0gV29ya2xpc3RWYWxpZGF0b3JMaXN0O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS93b3JrbGlzdHZhbGlkYXRvcnMvd29ya2xpc3R2YWxpZGF0b3JsaXN0LnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7O0FBRUE7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 306:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/components/base/eventmanager/eventtypes.ts ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar EventTypes;\r\n(function (EventTypes) {\r\n    EventTypes.PAN = 'pan';\r\n    EventTypes.PAN_START = 'panstart';\r\n    EventTypes.PAN_END = 'panend';\r\n    EventTypes.PAN_MOVE = 'panmove';\r\n    EventTypes.PAN_CANCEL = 'pancancel';\r\n    EventTypes.PAN_LEFT = 'panleft';\r\n    EventTypes.PAN_RIGHT = 'panright';\r\n    EventTypes.PAN_UP = 'panup';\r\n    EventTypes.PAN_DOWN = 'pandown';\r\n    EventTypes.TAP = 'tap';\r\n    EventTypes.PRESS = 'press';\r\n    EventTypes.PRESS_UP = 'pressup';\r\n    EventTypes.SWIPE_LEFT = 'swipeleft';\r\n    EventTypes.SWIPE_RIGHT = 'swiperight';\r\n    EventTypes.SWIPE_UP = 'swipeup';\r\n    EventTypes.SWIPE_DOWN = 'swipedown';\r\n    EventTypes.INPUT = 'input';\r\n    EventTypes.SWIPE = 'swipe';\r\n    EventTypes.PINCH = 'pinch';\r\n    EventTypes.PINCH_START = 'pinchstart';\r\n    EventTypes.PINCH_IN = 'pinchin';\r\n    EventTypes.PINCH_OUT = 'pinchout';\r\n    EventTypes.PINCH_END = 'pinchend';\r\n    EventTypes.PINCH_CANCEL = 'pinchcancel';\r\n})(EventTypes || (EventTypes = {}));\r\nmodule.exports = EventTypes;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmFzZS9ldmVudG1hbmFnZXIvZXZlbnR0eXBlcy50cz9kMTgwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSBFdmVudFR5cGVzIHtcclxuICAgIGV4cG9ydCBjb25zdCBQQU4gPSAncGFuJztcclxuICAgIGV4cG9ydCBjb25zdCBQQU5fU1RBUlQgPSAncGFuc3RhcnQnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFBBTl9FTkQgPSAncGFuZW5kJztcclxuICAgIGV4cG9ydCBjb25zdCBQQU5fTU9WRSA9ICdwYW5tb3ZlJztcclxuICAgIGV4cG9ydCBjb25zdCBQQU5fQ0FOQ0VMID0gJ3BhbmNhbmNlbCc7XHJcbiAgICBleHBvcnQgY29uc3QgUEFOX0xFRlQgPSAncGFubGVmdCc7XHJcbiAgICBleHBvcnQgY29uc3QgUEFOX1JJR0hUID0gJ3BhbnJpZ2h0JztcclxuICAgIGV4cG9ydCBjb25zdCBQQU5fVVAgPSAncGFudXAnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFBBTl9ET1dOID0gJ3BhbmRvd24nO1xyXG4gICAgZXhwb3J0IGNvbnN0IFRBUCA9ICd0YXAnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFBSRVNTID0gJ3ByZXNzJztcclxuICAgIGV4cG9ydCBjb25zdCBQUkVTU19VUCA9ICdwcmVzc3VwJztcclxuICAgIGV4cG9ydCBjb25zdCBTV0lQRV9MRUZUID0gJ3N3aXBlbGVmdCc7XHJcbiAgICBleHBvcnQgY29uc3QgU1dJUEVfUklHSFQgPSAnc3dpcGVyaWdodCc7XHJcbiAgICBleHBvcnQgY29uc3QgU1dJUEVfVVAgPSAnc3dpcGV1cCc7XHJcbiAgICBleHBvcnQgY29uc3QgU1dJUEVfRE9XTiA9ICdzd2lwZWRvd24nO1xyXG4gICAgZXhwb3J0IGNvbnN0IElOUFVUID0gJ2lucHV0JztcclxuICAgIGV4cG9ydCBjb25zdCBTV0lQRSA9ICdzd2lwZSc7XHJcbiAgICBleHBvcnQgY29uc3QgUElOQ0ggPSAncGluY2gnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFBJTkNIX1NUQVJUID0gJ3BpbmNoc3RhcnQnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFBJTkNIX0lOID0gJ3BpbmNoaW4nO1xyXG4gICAgZXhwb3J0IGNvbnN0IFBJTkNIX09VVCA9ICdwaW5jaG91dCc7XHJcbiAgICBleHBvcnQgY29uc3QgUElOQ0hfRU5EID0gJ3BpbmNoZW5kJztcclxuICAgIGV4cG9ydCBjb25zdCBQSU5DSF9DQU5DRUwgPSAncGluY2hjYW5jZWwnO1xyXG59XHJcblxyXG5leHBvcnQgPSBFdmVudFR5cGVzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9iYXNlL2V2ZW50bWFuYWdlci9ldmVudHR5cGVzLnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 315:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/components/worklist/shared/genericdate.tsx ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n    React component for generic date.\r\n*/\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeHelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\n/**\r\n * Stateless component for generic date.\r\n * @param props\r\n */\r\nvar genericDate = function (props) {\r\n    var dateValue = props.displayText ? props.displayText : localeHelper.toLocaleDateTimeString(props.dateValue);\r\n    return (React.createElement(\"span\", { id: props.id, className: props.className }, dateValue));\r\n};\r\nmodule.exports = genericDate;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2dlbmVyaWNkYXRlLnRzeD83YmYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgICBSZWFjdCBjb21wb25lbnQgZm9yIGdlbmVyaWMgZGF0ZS5cclxuKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgbG9jYWxlSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9sb2NhbGUvbG9jYWxlaGVscGVyJyk7XHJcbmltcG9ydCBzdHJpbmdIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2dlbmVyaWMvc3RyaW5naGVscGVyJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IGNvbnN0YW50ID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9jb25zdGFudHMnKTtcclxuXHJcbmludGVyZmFjZSBHZW5lcmljRGF0ZSBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcbiAgICBkYXRlVmFsdWU/OiBEYXRlO1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGNsYXNzTmFtZTogc3RyaW5nO1xyXG4gICAgZGlzcGxheVRleHQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdGF0ZWxlc3MgY29tcG9uZW50IGZvciBnZW5lcmljIGRhdGUuXHJcbiAqIEBwYXJhbSBwcm9wc1xyXG4gKi9cclxuY29uc3QgZ2VuZXJpY0RhdGU6IFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDxHZW5lcmljRGF0ZT4gPSAocHJvcHM6IEdlbmVyaWNEYXRlKSA9PiB7XHJcbiAgICBsZXQgZGF0ZVZhbHVlIDogc3RyaW5nID0gcHJvcHMuZGlzcGxheVRleHQgPyBwcm9wcy5kaXNwbGF5VGV4dCA6IGxvY2FsZUhlbHBlci50b0xvY2FsZURhdGVUaW1lU3RyaW5nKHByb3BzLmRhdGVWYWx1ZSk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxzcGFuIGlkPXtwcm9wcy5pZH0gY2xhc3NOYW1lPXtwcm9wcy5jbGFzc05hbWV9PlxyXG4gICAgICAgICAgICB7ZGF0ZVZhbHVlfVxyXG4gICAgICAgIDwvc3Bhbj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgPSBnZW5lcmljRGF0ZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2dlbmVyaWNkYXRlLnRzeCJdLCJtYXBwaW5ncyI6IjtBQUFBOztBQUVBO0FBQ0E7QUFFQTtBQVlBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 316:
/* no static exports found */
/* all exports used */
/*!*******************************************!*\
  !*** ./src/utility/touch/devicehelper.ts ***!
  \*******************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar DeviceHelper = /** @class */ (function () {\r\n    function DeviceHelper() {\r\n    }\r\n    /**\r\n     * return true if the device is supported touch.\r\n     */\r\n    DeviceHelper.isTouchDevice = function () {\r\n        var isTouchDevice = 'ontouchstart' in document.documentElement;\r\n        /* it returns a zero on a mouse only computer, or 1 or more on a touch enabled computer(for IE) */\r\n        var touchpoints = navigator.maxTouchPoints;\r\n        return (isTouchDevice || touchpoints > 0);\r\n    };\r\n    /**\r\n     * return true for Microsoft touch devices\r\n     */\r\n    DeviceHelper.isMSTouchDevice = function () {\r\n        return navigator.pointerEnabled ||\r\n            navigator.msPointerEnabled ||\r\n            (navigator.userAgent.match(/Windows/i) && this.isTouchDevice());\r\n    };\r\n    return DeviceHelper;\r\n}());\r\nmodule.exports = DeviceHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvdG91Y2gvZGV2aWNlaGVscGVyLnRzPzZiM2EiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgRGV2aWNlSGVscGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJuIHRydWUgaWYgdGhlIGRldmljZSBpcyBzdXBwb3J0ZWQgdG91Y2guXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNUb3VjaERldmljZSgpOiBib29sZWFuIHtcclxuXHJcbiAgICAgICAgbGV0IGlzVG91Y2hEZXZpY2UgPSAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICAgICAgLyogaXQgcmV0dXJucyBhIHplcm8gb24gYSBtb3VzZSBvbmx5IGNvbXB1dGVyLCBvciAxIG9yIG1vcmUgb24gYSB0b3VjaCBlbmFibGVkIGNvbXB1dGVyKGZvciBJRSkgKi9cclxuICAgICAgICBsZXQgdG91Y2hwb2ludHMgPSBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHM7XHJcblxyXG4gICAgICAgIHJldHVybiAoaXNUb3VjaERldmljZSB8fCB0b3VjaHBvaW50cyA+IDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmV0dXJuIHRydWUgZm9yIE1pY3Jvc29mdCB0b3VjaCBkZXZpY2VzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgaXNNU1RvdWNoRGV2aWNlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQgfHxcclxuICAgICAgICAgICAgbmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQgfHxcclxuICAgICAgICAgICAgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1dpbmRvd3MvaSkgJiYgdGhpcy5pc1RvdWNoRGV2aWNlKCkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCA9IERldmljZUhlbHBlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL3V0aWxpdHkvdG91Y2gvZGV2aWNlaGVscGVyLnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQTtBQXFCQTtBQXBCQTs7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 319:
/* no static exports found */
/* all exports used */
/*!********************************************************************!*\
  !*** ./src/utility/worklistvalidators/worklistvalidatorfactory.ts ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar worklistValidatorList = __webpack_require__(/*! ./worklistvalidatorlist */ 304);\r\nvar liveWorklistValidator = __webpack_require__(/*! ./liveworklistvalidator */ 421);\r\nvar standardisationWorklistValidator = __webpack_require__(/*! ./standardisationworklistvalidator */ 424);\r\nvar practiceWorklistValidator = __webpack_require__(/*! ./practiceworklistvalidator */ 422);\r\nvar directedRemarkWorlistValidator = __webpack_require__(/*! ./directedremarkworklistvalidator */ 420);\r\nvar simulationkWorlistValidator = __webpack_require__(/*! ./simulationworklistvalidator */ 423);\r\nvar WorklistValidatorFactory = /** @class */ (function () {\r\n    function WorklistValidatorFactory() {\r\n    }\r\n    /**\r\n     * returns the validator object.\r\n     * @param comparerName - Name of the validator - should be a member of the worklistvalidatorlist enum.\r\n     */\r\n    WorklistValidatorFactory.prototype.getValidator = function (validatorName) {\r\n        var worklistValidator = undefined;\r\n        switch (validatorName) {\r\n            /** instance of liveWorklistValidator to be registered in this factory */\r\n            case worklistValidatorList.liveOpen:\r\n            case worklistValidatorList.atypicalOpen:\r\n                worklistValidator = new liveWorklistValidator();\r\n                break;\r\n            case worklistValidatorList.standardisationOpen:\r\n                worklistValidator = new standardisationWorklistValidator();\r\n                break;\r\n            case worklistValidatorList.practiceOpen:\r\n                worklistValidator = new practiceWorklistValidator();\r\n                break;\r\n            case worklistValidatorList.directedRemarkOpen:\r\n                worklistValidator = new directedRemarkWorlistValidator();\r\n                break;\r\n            case worklistValidatorList.simulationOpen:\r\n                worklistValidator = new simulationkWorlistValidator();\r\n        }\r\n        /** returns the validator object corresponding to  the name */\r\n        return worklistValidator;\r\n    };\r\n    return WorklistValidatorFactory;\r\n}());\r\nvar validatorFactory = new WorklistValidatorFactory();\r\nmodule.exports = validatorFactory;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvd29ya2xpc3R2YWxpZGF0b3JzL3dvcmtsaXN0dmFsaWRhdG9yZmFjdG9yeS50cz8wNzM2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB3b3JrbGlzdFZhbGlkYXRvckxpc3QgPSByZXF1aXJlKCcuL3dvcmtsaXN0dmFsaWRhdG9ybGlzdCcpO1xyXG5pbXBvcnQgbGl2ZVdvcmtsaXN0VmFsaWRhdG9yID0gcmVxdWlyZSgnLi9saXZld29ya2xpc3R2YWxpZGF0b3InKTtcclxuaW1wb3J0IHdvcmtsaXN0dmFsaWRhdG9yc2NoZW1hID0gcmVxdWlyZSgnLi93b3JrbGlzdHZhbGlkYXRvcnNjaGVtYScpO1xyXG5pbXBvcnQgc3RhbmRhcmRpc2F0aW9uV29ya2xpc3RWYWxpZGF0b3IgPSByZXF1aXJlKCcuL3N0YW5kYXJkaXNhdGlvbndvcmtsaXN0dmFsaWRhdG9yJyk7XHJcbmltcG9ydCBwcmFjdGljZVdvcmtsaXN0VmFsaWRhdG9yID0gcmVxdWlyZSgnLi9wcmFjdGljZXdvcmtsaXN0dmFsaWRhdG9yJyk7XHJcbmltcG9ydCBkaXJlY3RlZFJlbWFya1dvcmxpc3RWYWxpZGF0b3IgPSByZXF1aXJlKCcuL2RpcmVjdGVkcmVtYXJrd29ya2xpc3R2YWxpZGF0b3InKTtcclxuaW1wb3J0IHNpbXVsYXRpb25rV29ybGlzdFZhbGlkYXRvciA9IHJlcXVpcmUoJy4vc2ltdWxhdGlvbndvcmtsaXN0dmFsaWRhdG9yJyk7XHJcblxyXG5jbGFzcyBXb3JrbGlzdFZhbGlkYXRvckZhY3Rvcnkge1xyXG4gICAvKipcclxuICAgICogcmV0dXJucyB0aGUgdmFsaWRhdG9yIG9iamVjdC5cclxuICAgICogQHBhcmFtIGNvbXBhcmVyTmFtZSAtIE5hbWUgb2YgdGhlIHZhbGlkYXRvciAtIHNob3VsZCBiZSBhIG1lbWJlciBvZiB0aGUgd29ya2xpc3R2YWxpZGF0b3JsaXN0IGVudW0uXHJcbiAgICAqL1xyXG4gICAgcHVibGljIGdldFZhbGlkYXRvcih2YWxpZGF0b3JOYW1lOiB3b3JrbGlzdFZhbGlkYXRvckxpc3QpOiB3b3JrbGlzdHZhbGlkYXRvcnNjaGVtYSB7XHJcbiAgICAgICAgbGV0IHdvcmtsaXN0VmFsaWRhdG9yOiB3b3JrbGlzdHZhbGlkYXRvcnNjaGVtYSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgc3dpdGNoICh2YWxpZGF0b3JOYW1lKSB7XHJcbiAgICAgICAgICAgIC8qKiBpbnN0YW5jZSBvZiBsaXZlV29ya2xpc3RWYWxpZGF0b3IgdG8gYmUgcmVnaXN0ZXJlZCBpbiB0aGlzIGZhY3RvcnkgKi9cclxuXHRcdFx0Y2FzZSB3b3JrbGlzdFZhbGlkYXRvckxpc3QubGl2ZU9wZW46XHJcblx0XHRcdGNhc2Ugd29ya2xpc3RWYWxpZGF0b3JMaXN0LmF0eXBpY2FsT3BlbjpcclxuICAgICAgICAgICAgICAgIHdvcmtsaXN0VmFsaWRhdG9yID0gbmV3IGxpdmVXb3JrbGlzdFZhbGlkYXRvcigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2Ugd29ya2xpc3RWYWxpZGF0b3JMaXN0LnN0YW5kYXJkaXNhdGlvbk9wZW46XHJcbiAgICAgICAgICAgICAgICB3b3JrbGlzdFZhbGlkYXRvciA9IG5ldyBzdGFuZGFyZGlzYXRpb25Xb3JrbGlzdFZhbGlkYXRvcigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2Ugd29ya2xpc3RWYWxpZGF0b3JMaXN0LnByYWN0aWNlT3BlbjpcclxuICAgICAgICAgICAgICAgIHdvcmtsaXN0VmFsaWRhdG9yID0gbmV3IHByYWN0aWNlV29ya2xpc3RWYWxpZGF0b3IoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIHdvcmtsaXN0VmFsaWRhdG9yTGlzdC5kaXJlY3RlZFJlbWFya09wZW46XHJcbiAgICAgICAgICAgICAgICB3b3JrbGlzdFZhbGlkYXRvciA9IG5ldyBkaXJlY3RlZFJlbWFya1dvcmxpc3RWYWxpZGF0b3IoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIHdvcmtsaXN0VmFsaWRhdG9yTGlzdC5zaW11bGF0aW9uT3BlbjpcclxuICAgICAgICAgICAgICAgIHdvcmtsaXN0VmFsaWRhdG9yID0gbmV3IHNpbXVsYXRpb25rV29ybGlzdFZhbGlkYXRvcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqIHJldHVybnMgdGhlIHZhbGlkYXRvciBvYmplY3QgY29ycmVzcG9uZGluZyB0byAgdGhlIG5hbWUgKi9cclxuICAgICAgICByZXR1cm4gd29ya2xpc3RWYWxpZGF0b3I7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCB2YWxpZGF0b3JGYWN0b3J5ID0gbmV3IFdvcmtsaXN0VmFsaWRhdG9yRmFjdG9yeSgpO1xyXG5leHBvcnQgPSB2YWxpZGF0b3JGYWN0b3J5O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS93b3JrbGlzdHZhbGlkYXRvcnMvd29ya2xpc3R2YWxpZGF0b3JmYWN0b3J5LnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQThCQTtBQTdCQTs7O0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 320:
/* no static exports found */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/components/base/eventmanager/eventmanagerbase.ts ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar hammerHandler = __webpack_require__(/*! ./hammerhandler */ 436);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\n/**\r\n * Base class for handling letious event types using this class object we can\r\n * switch between hammer and native events\r\n */\r\nvar EventManagerBase = /** @class */ (function (_super) {\r\n    __extends(EventManagerBase, _super);\r\n    /**\r\n     * event manager constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function EventManagerBase(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    Object.defineProperty(EventManagerBase.prototype, \"eventHandler\", {\r\n        /**\r\n         * returns the current event handler\r\n         */\r\n        get: function () {\r\n            if (!this._hammerHandler) {\r\n                this._hammerHandler = new hammerHandler();\r\n            }\r\n            return this._hammerHandler;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return EventManagerBase;\r\n}(pureRenderComponent));\r\nmodule.exports = EventManagerBase;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmFzZS9ldmVudG1hbmFnZXIvZXZlbnRtYW5hZ2VyYmFzZS50cz9mMDQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBoYW1tZXJIYW5kbGVyID0gcmVxdWlyZSgnLi9oYW1tZXJoYW5kbGVyJyk7XHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBmb3IgaGFuZGxpbmcgbGV0aW91cyBldmVudCB0eXBlcyB1c2luZyB0aGlzIGNsYXNzIG9iamVjdCB3ZSBjYW5cclxuICogc3dpdGNoIGJldHdlZW4gaGFtbWVyIGFuZCBuYXRpdmUgZXZlbnRzXHJcbiAqL1xyXG5jbGFzcyBFdmVudE1hbmFnZXJCYXNlIGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxhbnksIGFueT4ge1xyXG5cclxuICAgIHByaXZhdGUgX2hhbW1lckhhbmRsZXI6IEV2ZW50TWFuYWdlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGV2ZW50IG1hbmFnZXIgY29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBhbnksIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIHJldHVybnMgdGhlIGN1cnJlbnQgZXZlbnQgaGFuZGxlclxyXG4gICAgKi9cclxuICAgcHVibGljIGdldCBldmVudEhhbmRsZXIoKTogRXZlbnRNYW5hZ2VyIHtcclxuICAgICAgIGlmICghdGhpcy5faGFtbWVySGFuZGxlcikge1xyXG4gICAgICAgICAgIHRoaXMuX2hhbW1lckhhbmRsZXIgPSBuZXcgaGFtbWVySGFuZGxlcigpO1xyXG4gICAgICAgfVxyXG4gICAgICAgcmV0dXJuIHRoaXMuX2hhbW1lckhhbmRsZXI7XHJcbiAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gRXZlbnRNYW5hZ2VyQmFzZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvYmFzZS9ldmVudG1hbmFnZXIvZXZlbnRtYW5hZ2VyYmFzZS50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFBQTtBQUlBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 325:
/* no static exports found */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/components/utility/messageeditorconstants.ts ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar MessageEditorConstants;\r\n(function (MessageEditorConstants) {\r\n    MessageEditorConstants.TINYMCE_THEME = 'advanced';\r\n    MessageEditorConstants.TINYMCE_PLUGINS = 'link textcolor advlist';\r\n    MessageEditorConstants.TINYMCE_TOOLBAR = 'bold italic underline | fontselect fontsizeselect | alignleft aligncenter alignright | bullist numlist | link';\r\n    MessageEditorConstants.TINYMCE_FONTSIZES = '8px 10px 12px 14px 18px 24px 36px';\r\n    MessageEditorConstants.TINYMCE_FONTS = 'Andale Mono=andale mono,times;'\r\n        + 'Arial=arial,helvetica,sans-serif;'\r\n        + 'Arial Black=arial black,avant garde;'\r\n        + 'Book Antiqua=book antiqua,palatino;'\r\n        + 'Comic Sans MS=comic sans ms,sans-serif;'\r\n        + 'Courier New=courier new,courier;'\r\n        + 'Georgia=georgia,palatino;'\r\n        + 'Helvetica=helvetica;'\r\n        + 'Impact=impact,chicago;'\r\n        + 'Tahoma=tahoma,arial,helvetica,sans-serif;'\r\n        + 'Terminal=terminal,monaco;'\r\n        + 'Times New Roman=times new roman,times;'\r\n        + 'Trebuchet MS=trebuchet ms,geneva;'\r\n        + 'Verdana=verdana,geneva;';\r\n    MessageEditorConstants.TINYMCE_TEXTCOLOR_PALETTE = [\r\n        '000000', '',\r\n        '993300', '',\r\n        '333300', '',\r\n        '003300', '',\r\n        '003366', '',\r\n        '000080', '',\r\n        '333399', '',\r\n        '333333', '',\r\n        '800000', '',\r\n        '808000', '',\r\n        '008000', '',\r\n        '008080', '',\r\n        '0000FF', '',\r\n        '666699', '',\r\n        '808080', '',\r\n        'FF0000', '',\r\n        '99CC00', '',\r\n        '339966', '',\r\n        '33CCCC', '',\r\n        '3366FF', '',\r\n        '800080', '',\r\n        '999999', '',\r\n        'FF00FF', '',\r\n        '00FF00', '',\r\n        '00FFFF', '',\r\n        '00CCFF', '',\r\n        '993366', '',\r\n        'FFFFFF', '',\r\n        '99CCFF', '',\r\n    ];\r\n    MessageEditorConstants.TINYMCE_FONTNAME_CMD = 'FontName';\r\n    MessageEditorConstants.TINYMCE_FONTSIZE_CMD = 'FontSize';\r\n    MessageEditorConstants.TINYMCE_DEFAULT_FONT = 'arial,helvetica,sans-serif';\r\n    MessageEditorConstants.TINYMCE_DEFAULT_FONTSIZE = '12px';\r\n})(MessageEditorConstants || (MessageEditorConstants = {}));\r\nmodule.exports = MessageEditorConstants;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9tZXNzYWdlZWRpdG9yY29uc3RhbnRzLnRzP2NkZmYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIE1lc3NhZ2VFZGl0b3JDb25zdGFudHMge1xyXG4gICAgZXhwb3J0IGNvbnN0IFRJTllNQ0VfVEhFTUUgPSAnYWR2YW5jZWQnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFRJTllNQ0VfUExVR0lOUyA9ICdsaW5rIHRleHRjb2xvciBhZHZsaXN0JztcclxuICAgIGV4cG9ydCBjb25zdCBUSU5ZTUNFX1RPT0xCQVIgPVxyXG4gICAgICAgICdib2xkIGl0YWxpYyB1bmRlcmxpbmUgfCBmb250c2VsZWN0IGZvbnRzaXplc2VsZWN0IHwgYWxpZ25sZWZ0IGFsaWduY2VudGVyIGFsaWducmlnaHQgfCBidWxsaXN0IG51bWxpc3QgfCBsaW5rJztcclxuICAgIGV4cG9ydCBjb25zdCBUSU5ZTUNFX0ZPTlRTSVpFUyA9ICc4cHggMTBweCAxMnB4IDE0cHggMThweCAyNHB4IDM2cHgnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFRJTllNQ0VfRk9OVFMgPSAnQW5kYWxlIE1vbm89YW5kYWxlIG1vbm8sdGltZXM7J1xyXG4gICAgICAgICsgJ0FyaWFsPWFyaWFsLGhlbHZldGljYSxzYW5zLXNlcmlmOydcclxuICAgICAgICArICdBcmlhbCBCbGFjaz1hcmlhbCBibGFjayxhdmFudCBnYXJkZTsnXHJcbiAgICAgICAgKyAnQm9vayBBbnRpcXVhPWJvb2sgYW50aXF1YSxwYWxhdGlubzsnXHJcbiAgICAgICAgKyAnQ29taWMgU2FucyBNUz1jb21pYyBzYW5zIG1zLHNhbnMtc2VyaWY7J1xyXG4gICAgICAgICsgJ0NvdXJpZXIgTmV3PWNvdXJpZXIgbmV3LGNvdXJpZXI7J1xyXG4gICAgICAgICsgJ0dlb3JnaWE9Z2VvcmdpYSxwYWxhdGlubzsnXHJcbiAgICAgICAgKyAnSGVsdmV0aWNhPWhlbHZldGljYTsnXHJcbiAgICAgICAgKyAnSW1wYWN0PWltcGFjdCxjaGljYWdvOydcclxuICAgICAgICArICdUYWhvbWE9dGFob21hLGFyaWFsLGhlbHZldGljYSxzYW5zLXNlcmlmOydcclxuICAgICAgICArICdUZXJtaW5hbD10ZXJtaW5hbCxtb25hY287J1xyXG4gICAgICAgICsgJ1RpbWVzIE5ldyBSb21hbj10aW1lcyBuZXcgcm9tYW4sdGltZXM7J1xyXG4gICAgICAgICsgJ1RyZWJ1Y2hldCBNUz10cmVidWNoZXQgbXMsZ2VuZXZhOydcclxuICAgICAgICArICdWZXJkYW5hPXZlcmRhbmEsZ2VuZXZhOyc7XHJcbiAgICBleHBvcnQgY29uc3QgVElOWU1DRV9URVhUQ09MT1JfUEFMRVRURSA9IFtcclxuICAgICAgICAnMDAwMDAwJywgJycsXHJcbiAgICAgICAgJzk5MzMwMCcsICcnLFxyXG4gICAgICAgICczMzMzMDAnLCAnJyxcclxuICAgICAgICAnMDAzMzAwJywgJycsXHJcbiAgICAgICAgJzAwMzM2NicsICcnLFxyXG4gICAgICAgICcwMDAwODAnLCAnJyxcclxuICAgICAgICAnMzMzMzk5JywgJycsXHJcbiAgICAgICAgJzMzMzMzMycsICcnLFxyXG4gICAgICAgICc4MDAwMDAnLCAnJyxcclxuICAgICAgICAnODA4MDAwJywgJycsXHJcbiAgICAgICAgJzAwODAwMCcsICcnLFxyXG4gICAgICAgICcwMDgwODAnLCAnJyxcclxuICAgICAgICAnMDAwMEZGJywgJycsXHJcbiAgICAgICAgJzY2NjY5OScsICcnLFxyXG4gICAgICAgICc4MDgwODAnLCAnJyxcclxuICAgICAgICAnRkYwMDAwJywgJycsXHJcbiAgICAgICAgJzk5Q0MwMCcsICcnLFxyXG4gICAgICAgICczMzk5NjYnLCAnJyxcclxuICAgICAgICAnMzNDQ0NDJywgJycsXHJcbiAgICAgICAgJzMzNjZGRicsICcnLFxyXG4gICAgICAgICc4MDAwODAnLCAnJyxcclxuICAgICAgICAnOTk5OTk5JywgJycsXHJcbiAgICAgICAgJ0ZGMDBGRicsICcnLFxyXG4gICAgICAgICcwMEZGMDAnLCAnJyxcclxuICAgICAgICAnMDBGRkZGJywgJycsXHJcbiAgICAgICAgJzAwQ0NGRicsICcnLFxyXG4gICAgICAgICc5OTMzNjYnLCAnJyxcclxuICAgICAgICAnRkZGRkZGJywgJycsXHJcbiAgICAgICAgJzk5Q0NGRicsICcnLFxyXG4gICAgXTtcclxuICAgIGV4cG9ydCBjb25zdCBUSU5ZTUNFX0ZPTlROQU1FX0NNRCA9ICdGb250TmFtZSc7XHJcbiAgICBleHBvcnQgY29uc3QgVElOWU1DRV9GT05UU0laRV9DTUQgPSAnRm9udFNpemUnO1xyXG4gICAgZXhwb3J0IGNvbnN0IFRJTllNQ0VfREVGQVVMVF9GT05UID0gJ2FyaWFsLGhlbHZldGljYSxzYW5zLXNlcmlmJztcclxuICAgIGV4cG9ydCBjb25zdCBUSU5ZTUNFX0RFRkFVTFRfRk9OVFNJWkUgPSAnMTJweCc7XHJcbn1cclxuZXhwb3J0ID0gTWVzc2FnZUVkaXRvckNvbnN0YW50cztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9tZXNzYWdlZWRpdG9yY29uc3RhbnRzLnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 326:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/stores/busyindicator/busyindicatorstore.ts ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar storeBase = __webpack_require__(/*! ../base/storebase */ 285);\r\nvar dispatcher = __webpack_require__(/*! ../../app/dispatcher */ 242);\r\nvar actionType = __webpack_require__(/*! ../../actions/base/actiontypes */ 228);\r\n/* The busy indicator store */\r\nvar BusyIndicatorStore = /** @class */ (function (_super) {\r\n    __extends(BusyIndicatorStore, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function BusyIndicatorStore() {\r\n        var _this = _super.call(this) || this;\r\n        _this.dispatchToken = dispatcher.register(function (action) {\r\n            if (action.actionType === actionType.BUSY_INDICATOR) {\r\n                _this.busyIndicatorInvoker = action.getBusyIndicatorInvoker;\r\n                _this.emit(BusyIndicatorStore.BUSY_INDICATOR);\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    Object.defineProperty(BusyIndicatorStore.prototype, \"getBusyIndicatorInvoker\", {\r\n        /**\r\n         * Returns the busy indicator invoker\r\n         * @returns\r\n         */\r\n        get: function () {\r\n            return this.busyIndicatorInvoker;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    BusyIndicatorStore.BUSY_INDICATOR = 'setBusyIndicatorInvoker';\r\n    return BusyIndicatorStore;\r\n}(storeBase));\r\nvar instance = new BusyIndicatorStore();\r\nmodule.exports = { BusyIndicatorStore: BusyIndicatorStore, instance: instance };\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3Jlcy9idXN5aW5kaWNhdG9yL2J1c3lpbmRpY2F0b3JzdG9yZS50cz83OTVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdG9yZUJhc2UgPSByZXF1aXJlKCcuLi9iYXNlL3N0b3JlYmFzZScpO1xyXG5pbXBvcnQgZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uLy4uL2FwcC9kaXNwYXRjaGVyJyk7XHJcbmltcG9ydCBhY3Rpb24gPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL2Jhc2UvYWN0aW9uJyk7XHJcbmltcG9ydCBhY3Rpb25UeXBlID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy9iYXNlL2FjdGlvbnR5cGVzJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvdXRpbGl0eS9lbnVtcycpO1xyXG5pbXBvcnQgYnVzeUluZGljYXRvckFjdGlvbiA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbnMvYnVzeWluZGljYXRvci9idXN5aW5kaWNhdG9yYWN0aW9uJyk7XHJcblxyXG4vKiBUaGUgYnVzeSBpbmRpY2F0b3Igc3RvcmUgKi9cclxuY2xhc3MgQnVzeUluZGljYXRvclN0b3JlIGV4dGVuZHMgc3RvcmVCYXNlIHtcclxuICAgIHByaXZhdGUgYnVzeUluZGljYXRvckludm9rZXI6IGVudW1zLkJ1c3lJbmRpY2F0b3JJbnZva2VyO1xyXG4gICAgcHVibGljIHN0YXRpYyBCVVNZX0lORElDQVRPUiA9ICdzZXRCdXN5SW5kaWNhdG9ySW52b2tlcic7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoVG9rZW4gPSBkaXNwYXRjaGVyLnJlZ2lzdGVyKChhY3Rpb246IGFjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYWN0aW9uLmFjdGlvblR5cGUgPT09IGFjdGlvblR5cGUuQlVTWV9JTkRJQ0FUT1IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnVzeUluZGljYXRvckludm9rZXIgPSAoYWN0aW9uIGFzIGJ1c3lJbmRpY2F0b3JBY3Rpb24pLmdldEJ1c3lJbmRpY2F0b3JJbnZva2VyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KEJ1c3lJbmRpY2F0b3JTdG9yZS5CVVNZX0lORElDQVRPUik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBidXN5IGluZGljYXRvciBpbnZva2VyXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG4gICAgcHVibGljIGdldCBnZXRCdXN5SW5kaWNhdG9ySW52b2tlcigpOiBlbnVtcy5CdXN5SW5kaWNhdG9ySW52b2tlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVzeUluZGljYXRvckludm9rZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCBpbnN0YW5jZSA9IG5ldyBCdXN5SW5kaWNhdG9yU3RvcmUoKTtcclxuZXhwb3J0ID0geyBCdXN5SW5kaWNhdG9yU3RvcmUsIGluc3RhbmNlIH07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9zdG9yZXMvYnVzeWluZGljYXRvci9idXN5aW5kaWNhdG9yc3RvcmUudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUFBO0FBSUE7O0FBRUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBTUE7QUFKQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBckJBO0FBc0JBO0FBQUE7QUFFQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 327:
/* no static exports found */
/* all exports used */
/*!**********************************************************!*\
  !*** ./src/stores/teammanagement/warningmessagestore.ts ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar dispatcher = __webpack_require__(/*! ../../app/dispatcher */ 242);\r\nvar storeBase = __webpack_require__(/*! ../base/storebase */ 285);\r\nvar actionType = __webpack_require__(/*! ../../actions/base/actiontypes */ 228);\r\n/**\r\n * Warning Message store\r\n */\r\nvar WarningMessageStore = /** @class */ (function (_super) {\r\n    __extends(WarningMessageStore, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function WarningMessageStore() {\r\n        var _this = _super.call(this) || this;\r\n        _this._dispatchToken = dispatcher.register(function (action) {\r\n            switch (action.actionType) {\r\n                case actionType.WARNING_MESSAGE_ACTION:\r\n                    var validateAction = action;\r\n                    _this.emit(WarningMessageStore.WARNING_MESSAGE_EVENT, validateAction.failureCode, validateAction.warningMessageAction);\r\n                    break;\r\n                case actionType.WARNING_MESSAGE_NAVIGATION_ACTION:\r\n                    var navigationAction = action;\r\n                    _this.emit(WarningMessageStore.WARNING_MESSAGE_NAVIGATION_EVENT, navigationAction.failureCode, navigationAction.warningMessageAction);\r\n                    break;\r\n            }\r\n        });\r\n        return _this;\r\n    }\r\n    // Warning message event\r\n    WarningMessageStore.WARNING_MESSAGE_EVENT = 'warningessageevent';\r\n    // Warning message event\r\n    WarningMessageStore.WARNING_MESSAGE_NAVIGATION_EVENT = 'warningessagenavigationevent';\r\n    return WarningMessageStore;\r\n}(storeBase));\r\nvar instance = new WarningMessageStore();\r\nmodule.exports = { WarningMessageStore: WarningMessageStore, instance: instance };\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3Jlcy90ZWFtbWFuYWdlbWVudC93YXJuaW5nbWVzc2FnZXN0b3JlLnRzP2I0ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRpc3BhdGNoZXIgPSByZXF1aXJlKCcuLi8uLi9hcHAvZGlzcGF0Y2hlcicpO1xyXG5pbXBvcnQgYWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy9iYXNlL2FjdGlvbicpO1xyXG5pbXBvcnQgc3RvcmVCYXNlID0gcmVxdWlyZSgnLi4vYmFzZS9zdG9yZWJhc2UnKTtcclxuaW1wb3J0IGFjdGlvblR5cGUgPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL2Jhc2UvYWN0aW9udHlwZXMnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCB2YWxpZGF0aW9uQWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy90ZWFtbWFuYWdlbWVudC92YWxpZGF0aW9uYWN0aW9uJyk7XHJcbmltcG9ydCB3YXJuaW5nTWVzc2FnZU5hdmlnYXRpb25BY3Rpb24gPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL3RlYW1tYW5hZ2VtZW50L3dhcm5pbmdtZXNzYWdlbmF2aWdhdGlvbmFjdGlvbicpO1xyXG5cclxuLyoqXHJcbiAqIFdhcm5pbmcgTWVzc2FnZSBzdG9yZVxyXG4gKi9cclxuY2xhc3MgV2FybmluZ01lc3NhZ2VTdG9yZSBleHRlbmRzIHN0b3JlQmFzZSB7XHJcblxyXG4gICAgLy8gV2FybmluZyBtZXNzYWdlIGV2ZW50XHJcbiAgICBwdWJsaWMgc3RhdGljIFdBUk5JTkdfTUVTU0FHRV9FVkVOVCA9ICd3YXJuaW5nZXNzYWdlZXZlbnQnO1xyXG5cclxuICAgIC8vIFdhcm5pbmcgbWVzc2FnZSBldmVudFxyXG4gICAgcHVibGljIHN0YXRpYyBXQVJOSU5HX01FU1NBR0VfTkFWSUdBVElPTl9FVkVOVCA9ICd3YXJuaW5nZXNzYWdlbmF2aWdhdGlvbmV2ZW50JztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoVG9rZW4gPSBkaXNwYXRjaGVyLnJlZ2lzdGVyKChhY3Rpb246IGFjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGFjdGlvbi5hY3Rpb25UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGFjdGlvblR5cGUuV0FSTklOR19NRVNTQUdFX0FDVElPTjpcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsaWRhdGVBY3Rpb24gPSAoYWN0aW9uIGFzIHZhbGlkYXRpb25BY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdChXYXJuaW5nTWVzc2FnZVN0b3JlLldBUk5JTkdfTUVTU0FHRV9FVkVOVCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3Rpb24uZmFpbHVyZUNvZGUsIHZhbGlkYXRlQWN0aW9uLndhcm5pbmdNZXNzYWdlQWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgYWN0aW9uVHlwZS5XQVJOSU5HX01FU1NBR0VfTkFWSUdBVElPTl9BQ1RJT046XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5hdmlnYXRpb25BY3Rpb24gPSAoYWN0aW9uIGFzIHdhcm5pbmdNZXNzYWdlTmF2aWdhdGlvbkFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KFdhcm5pbmdNZXNzYWdlU3RvcmUuV0FSTklOR19NRVNTQUdFX05BVklHQVRJT05fRVZFTlQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRpb25BY3Rpb24uZmFpbHVyZUNvZGUsIG5hdmlnYXRpb25BY3Rpb24ud2FybmluZ01lc3NhZ2VBY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCBpbnN0YW5jZSA9IG5ldyBXYXJuaW5nTWVzc2FnZVN0b3JlKCk7XHJcbmV4cG9ydCA9IHsgV2FybmluZ01lc3NhZ2VTdG9yZSwgaW5zdGFuY2UgfTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9zdG9yZXMvdGVhbW1hbmFnZW1lbnQvd2FybmluZ21lc3NhZ2VzdG9yZS50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUVBO0FBQ0E7QUFLQTs7QUFFQTtBQUNBO0FBQUE7QUFRQTs7QUFFQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7O0FBQ0E7QUF6QkE7QUFDQTtBQUVBO0FBQ0E7QUFzQkE7QUFBQTtBQUVBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 329:
/* no static exports found */
/* all exports used */
/*!*********************************************************!*\
  !*** ./src/components/worklist/shared/columnheader.tsx ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar SortArrow = __webpack_require__(/*! ../../utility/table/sortarrow */ 340);\r\n/* tslint:disable:variable-name */\r\nvar ColumnHeader = function (props) {\r\n    if (props.isSortingRequired) {\r\n        return (React.createElement(\"a\", { className: getSortClassName(), href: 'javascript:void(0)', title: getTitleText() },\r\n            React.createElement(\"div\", { className: 'frozen-header' },\r\n                React.createElement(\"span\", { className: 'sort-head-text', id: 'col_' + props.headerText.replace(/ /g, '') }, props.headerText),\r\n                React.createElement(SortArrow, { sortOption: props.sortOption }))));\r\n    }\r\n    else {\r\n        return (React.createElement(\"div\", { className: 'frozen-header' },\r\n            React.createElement(\"span\", { className: 'sort-head-text', id: 'col_' + props.headerText.replace(/ /g, '') }, props.headerText)));\r\n    }\r\n    /**\r\n     * This method will return the sort className\r\n     */\r\n    function getSortClassName() {\r\n        if (!props.isSortingRequired) {\r\n            return '';\r\n        }\r\n        if (props.isCurrentSort) {\r\n            if (props.sortOption === undefined || props.sortOption === enums.SortOption.Both) {\r\n                return (props.sortDirection === enums.SortDirection.Descending) ?\r\n                    'sortable-link desc' : 'sortable-link asc';\r\n            }\r\n            else if (props.sortOption === enums.SortOption.Up) {\r\n                return ('sortable-link asc');\r\n            }\r\n            else {\r\n                return ('sortable-link desc');\r\n            }\r\n        }\r\n        else {\r\n            return 'sortable-link';\r\n        }\r\n    }\r\n    /**\r\n     * Gets Title text.\r\n     */\r\n    function getTitleText() {\r\n        if (props.headerText && props.headerText !== '') {\r\n            return localeStore.instance.TranslateText('marking.worklist.list-view-column-headers.sort-by-tooltip') + ' ' + props.headerText;\r\n        }\r\n    }\r\n};\r\nmodule.exports = ColumnHeader;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2NvbHVtbmhlYWRlci50c3g/NWY3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IFNvcnRBcnJvdyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvdGFibGUvc29ydGFycm93Jyk7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBQcm9wc0Jhc2Uge1xyXG4gICAgaGVhZGVyVGV4dDogc3RyaW5nO1xyXG4gICAgc29ydERpcmVjdGlvbj86IGVudW1zLlNvcnREaXJlY3Rpb247XHJcbiAgICBpc0N1cnJlbnRTb3J0PzogYm9vbGVhbjtcclxuICAgIGlzU29ydGluZ1JlcXVpcmVkPzogYm9vbGVhbjtcclxuICAgIHNvcnRPcHRpb24/OiBlbnVtcy5Tb3J0T3B0aW9uO1xyXG59XHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcbmNvbnN0IENvbHVtbkhlYWRlciA9IChwcm9wczogUHJvcHMpID0+IHtcclxuXHJcbiAgICBpZiAocHJvcHMuaXNTb3J0aW5nUmVxdWlyZWQpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9e2dldFNvcnRDbGFzc05hbWUoKX1cclxuICAgICAgICAgICAgICAgIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKSdcclxuICAgICAgICAgICAgICAgIHRpdGxlPXtnZXRUaXRsZVRleHQoKX0gPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Zyb3plbi1oZWFkZXInPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nc29ydC1oZWFkLXRleHQnIGlkPXsnY29sXycgKyBwcm9wcy5oZWFkZXJUZXh0LnJlcGxhY2UoLyAvZywgJycpfT57cHJvcHMuaGVhZGVyVGV4dH08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNvcnRBcnJvdyBzb3J0T3B0aW9uPXtwcm9wcy5zb3J0T3B0aW9ufSAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvYT4pO1xyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Zyb3plbi1oZWFkZXInPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdzb3J0LWhlYWQtdGV4dCcgaWQ9eydjb2xfJyArIHByb3BzLmhlYWRlclRleHQucmVwbGFjZSgvIC9nLCAnJyl9Pntwcm9wcy5oZWFkZXJUZXh0fTwvc3Bhbj5cclxuICAgICAgICAgICAgPC9kaXY+KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBzb3J0IGNsYXNzTmFtZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRTb3J0Q2xhc3NOYW1lKCkge1xyXG4gICAgICAgIGlmICghcHJvcHMuaXNTb3J0aW5nUmVxdWlyZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHByb3BzLmlzQ3VycmVudFNvcnQpIHtcclxuICAgICAgICAgICAgaWYgKHByb3BzLnNvcnRPcHRpb24gPT09IHVuZGVmaW5lZCB8fCBwcm9wcy5zb3J0T3B0aW9uID09PSBlbnVtcy5Tb3J0T3B0aW9uLkJvdGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAocHJvcHMuc29ydERpcmVjdGlvbiA9PT0gZW51bXMuU29ydERpcmVjdGlvbi5EZXNjZW5kaW5nKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgJ3NvcnRhYmxlLWxpbmsgZGVzYycgOiAnc29ydGFibGUtbGluayBhc2MnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BzLnNvcnRPcHRpb24gPT09IGVudW1zLlNvcnRPcHRpb24uVXApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoJ3NvcnRhYmxlLWxpbmsgYXNjJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCdzb3J0YWJsZS1saW5rIGRlc2MnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnc29ydGFibGUtbGluayc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBUaXRsZSB0ZXh0LlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBnZXRUaXRsZVRleHQoKSB7XHJcbiAgICAgICAgaWYgKHByb3BzLmhlYWRlclRleHQgJiYgcHJvcHMuaGVhZGVyVGV4dCAhPT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHRcclxuICAgICAgICAgICAgICAgICgnbWFya2luZy53b3JrbGlzdC5saXN0LXZpZXctY29sdW1uLWhlYWRlcnMuc29ydC1ieS10b29sdGlwJykgKyAnICcgKyBwcm9wcy5oZWFkZXJUZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCA9IENvbHVtbkhlYWRlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2NvbHVtbmhlYWRlci50c3giXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVVBO0FBQ0E7QUFFQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQUVBO0FBRUE7QUFFQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 333:
/* no static exports found */
/* all exports used */
/*!*******************************************************!*\
  !*** ./src/components/base/eventmanager/direction.ts ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar Direction;\r\n(function (Direction) {\r\n    /**\r\n     * Enum for the Login Form components\r\n     *\r\n     * @export DirectionOptions\r\n     * @enum {number}\r\n     */\r\n    var DirectionOptions;\r\n    (function (DirectionOptions) {\r\n        DirectionOptions[DirectionOptions[\"DIRECTION_NONE\"] = 1] = \"DIRECTION_NONE\";\r\n        DirectionOptions[DirectionOptions[\"DIRECTION_LEFT\"] = 2] = \"DIRECTION_LEFT\";\r\n        DirectionOptions[DirectionOptions[\"DIRECTION_RIGHT\"] = 4] = \"DIRECTION_RIGHT\";\r\n        DirectionOptions[DirectionOptions[\"DIRECTION_UP\"] = 8] = \"DIRECTION_UP\";\r\n        DirectionOptions[DirectionOptions[\"DIRECTION_DOWN\"] = 16] = \"DIRECTION_DOWN\";\r\n        DirectionOptions[DirectionOptions[\"DIRECTION_HORIZONTAL\"] = 6] = \"DIRECTION_HORIZONTAL\";\r\n        DirectionOptions[DirectionOptions[\"DIRECTION_VERTICAL\"] = 24] = \"DIRECTION_VERTICAL\";\r\n        DirectionOptions[DirectionOptions[\"DIRECTION_ALL\"] = 30] = \"DIRECTION_ALL\";\r\n    })(DirectionOptions = Direction.DirectionOptions || (Direction.DirectionOptions = {}));\r\n})(Direction || (Direction = {}));\r\nmodule.exports = Direction;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmFzZS9ldmVudG1hbmFnZXIvZGlyZWN0aW9uLnRzP2UxODMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIERpcmVjdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbnVtIGZvciB0aGUgTG9naW4gRm9ybSBjb21wb25lbnRzXHJcbiAgICAgKiBcclxuICAgICAqIEBleHBvcnQgRGlyZWN0aW9uT3B0aW9uc1xyXG4gICAgICogQGVudW0ge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGVudW0gRGlyZWN0aW9uT3B0aW9ucyB7XHJcbiAgICAgICAgRElSRUNUSU9OX05PTkUgPSAxLFxyXG4gICAgICAgIERJUkVDVElPTl9MRUZUID0gMixcclxuICAgICAgICBESVJFQ1RJT05fUklHSFQgPSA0LFxyXG4gICAgICAgIERJUkVDVElPTl9VUCA9IDgsXHJcbiAgICAgICAgRElSRUNUSU9OX0RPV04gPSAxNixcclxuICAgICAgICBESVJFQ1RJT05fSE9SSVpPTlRBTCA9IDYsXHJcbiAgICAgICAgRElSRUNUSU9OX1ZFUlRJQ0FMID0gMjQsXHJcbiAgICAgICAgRElSRUNUSU9OX0FMTCA9ICAzMFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBEaXJlY3Rpb247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL2Jhc2UvZXZlbnRtYW5hZ2VyL2RpcmVjdGlvbi50cyJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQUE7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 336:
/* no static exports found */
/* all exports used */
/*!*************************************************************************!*\
  !*** ./src/utility/standardisationsetup/standardisationsetupfactory.ts ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar classifiedHelper = __webpack_require__(/*! ../../components/utility/grid/standardisationsetuphelpers/classifiedhelper */ 411);\r\nvar unclassifiedHelper = __webpack_require__(/*! ../../components/utility/grid/standardisationsetuphelpers/unclassifiedhelper */ 414);\r\nvar provisionalHelper = __webpack_require__(/*! ../../components/utility/grid/standardisationsetuphelpers/provisionalhelper */ 412);\r\nvar selectResponseHelper = __webpack_require__(/*! ../../components/utility/grid/standardisationsetuphelpers/selectresponsehelper */ 413);\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar StandardisationSetupFactory = /** @class */ (function () {\r\n    function StandardisationSetupFactory() {\r\n    }\r\n    /**\r\n     * returns the standard helper object based on the type\r\n     * @param teamManagementTab\r\n     */\r\n    StandardisationSetupFactory.prototype.getStandardisationSetUpWorklistHelper = function (standardisationSetUpWorkList) {\r\n        var standardisationSetUpHelper;\r\n        switch (standardisationSetUpWorkList) {\r\n            case enums.StandardisationSetup.SelectResponse:\r\n                standardisationSetUpHelper = new selectResponseHelper();\r\n                break;\r\n            case enums.StandardisationSetup.ProvisionalResponse:\r\n                standardisationSetUpHelper = new provisionalHelper();\r\n                break;\r\n            case enums.StandardisationSetup.UnClassifiedResponse:\r\n                standardisationSetUpHelper = new unclassifiedHelper();\r\n                break;\r\n            case enums.StandardisationSetup.ClassifiedResponse:\r\n                standardisationSetUpHelper = new classifiedHelper();\r\n                break;\r\n        }\r\n        return standardisationSetUpHelper;\r\n    };\r\n    return StandardisationSetupFactory;\r\n}());\r\nvar standardisationSetupFactory = new StandardisationSetupFactory();\r\nmodule.exports = standardisationSetupFactory;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc3RhbmRhcmRpc2F0aW9uc2V0dXBmYWN0b3J5LnRzPzhmODEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsYXNzaWZpZWRIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZ3JpZC9zdGFuZGFyZGlzYXRpb25zZXR1cGhlbHBlcnMvY2xhc3NpZmllZGhlbHBlcicpO1xyXG5pbXBvcnQgdW5jbGFzc2lmaWVkSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2dyaWQvc3RhbmRhcmRpc2F0aW9uc2V0dXBoZWxwZXJzL3VuY2xhc3NpZmllZGhlbHBlcicpO1xyXG5pbXBvcnQgcHJvdmlzaW9uYWxIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZ3JpZC9zdGFuZGFyZGlzYXRpb25zZXR1cGhlbHBlcnMvcHJvdmlzaW9uYWxoZWxwZXInKTtcclxuaW1wb3J0IHNlbGVjdFJlc3BvbnNlSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2dyaWQvc3RhbmRhcmRpc2F0aW9uc2V0dXBoZWxwZXJzL3NlbGVjdHJlc3BvbnNlaGVscGVyJyk7XHJcblxyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZW51bXMnKTtcclxuXHJcbmNsYXNzIFN0YW5kYXJkaXNhdGlvblNldHVwRmFjdG9yeSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBzdGFuZGFyZCBoZWxwZXIgb2JqZWN0IGJhc2VkIG9uIHRoZSB0eXBlXHJcbiAgICAgKiBAcGFyYW0gdGVhbU1hbmFnZW1lbnRUYWJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFN0YW5kYXJkaXNhdGlvblNldFVwV29ya2xpc3RIZWxwZXIoc3RhbmRhcmRpc2F0aW9uU2V0VXBXb3JrTGlzdDogZW51bXMuU3RhbmRhcmRpc2F0aW9uU2V0dXApIHtcclxuXHJcbiAgICAgICAgbGV0IHN0YW5kYXJkaXNhdGlvblNldFVwSGVscGVyO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHN0YW5kYXJkaXNhdGlvblNldFVwV29ya0xpc3QpIHtcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cC5TZWxlY3RSZXNwb25zZTpcclxuICAgICAgICAgICAgICAgIHN0YW5kYXJkaXNhdGlvblNldFVwSGVscGVyID0gbmV3IHNlbGVjdFJlc3BvbnNlSGVscGVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cC5Qcm92aXNpb25hbFJlc3BvbnNlOlxyXG4gICAgICAgICAgICAgICAgc3RhbmRhcmRpc2F0aW9uU2V0VXBIZWxwZXIgPSBuZXcgcHJvdmlzaW9uYWxIZWxwZXIoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLlN0YW5kYXJkaXNhdGlvblNldHVwLlVuQ2xhc3NpZmllZFJlc3BvbnNlOlxyXG4gICAgICAgICAgICAgICAgc3RhbmRhcmRpc2F0aW9uU2V0VXBIZWxwZXIgPSBuZXcgdW5jbGFzc2lmaWVkSGVscGVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cC5DbGFzc2lmaWVkUmVzcG9uc2U6XHJcbiAgICAgICAgICAgICAgICBzdGFuZGFyZGlzYXRpb25TZXRVcEhlbHBlciA9IG5ldyBjbGFzc2lmaWVkSGVscGVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdGFuZGFyZGlzYXRpb25TZXRVcEhlbHBlcjtcclxuICAgIH1cclxufVxyXG5cclxubGV0IHN0YW5kYXJkaXNhdGlvblNldHVwRmFjdG9yeSA9IG5ldyBTdGFuZGFyZGlzYXRpb25TZXR1cEZhY3RvcnkoKTtcclxuZXhwb3J0ID0gc3RhbmRhcmRpc2F0aW9uU2V0dXBGYWN0b3J5O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS9zdGFuZGFyZGlzYXRpb25zZXR1cC9zdGFuZGFyZGlzYXRpb25zZXR1cGZhY3RvcnkudHMiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFBQTtBQTJCQTtBQXpCQTs7O0FBR0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 340:
/* no static exports found */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/components/utility/table/sortarrow.tsx ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\n/* tslint:disable:variable-name */\r\nvar SortArrow = function (props) {\r\n    switch (props.sortOption) {\r\n        case enums.SortOption.Up:\r\n            return (React.createElement(\"span\", { className: 'sort-arrow' },\r\n                React.createElement(\"span\", { className: 'sort-arrow-up' })));\r\n        case enums.SortOption.Down:\r\n            return (React.createElement(\"span\", { className: 'sort-arrow' },\r\n                React.createElement(\"span\", { className: 'sort-arrow-down' })));\r\n        default:// enums.SortOption.both or undefined\r\n            return (React.createElement(\"span\", { className: 'sort-arrow' },\r\n                React.createElement(\"span\", { className: 'sort-arrow-up' }),\r\n                React.createElement(\"span\", { className: 'sort-arrow-down' })));\r\n    }\r\n};\r\nmodule.exports = SortArrow;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS90YWJsZS9zb3J0YXJyb3cudHN4PzdjYzYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vZW51bXMnKTtcclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuY29uc3QgU29ydEFycm93ID0gKHByb3BzOiB7IHNvcnRPcHRpb246IGVudW1zLlNvcnRPcHRpb24gfSkgPT4ge1xyXG4gICAgc3dpdGNoIChwcm9wcy5zb3J0T3B0aW9uKSB7XHJcbiAgICAgICAgY2FzZSBlbnVtcy5Tb3J0T3B0aW9uLlVwOlxyXG4gICAgICAgICAgICByZXR1cm4gKDwgc3BhbiBjbGFzc05hbWU9J3NvcnQtYXJyb3cnID5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nc29ydC1hcnJvdy11cCc+PC9zcGFuPlxyXG4gICAgICAgICAgICA8L3NwYW4gPik7XHJcbiAgICAgICAgY2FzZSBlbnVtcy5Tb3J0T3B0aW9uLkRvd246XHJcbiAgICAgICAgICAgIHJldHVybiAoPCBzcGFuIGNsYXNzTmFtZT0nc29ydC1hcnJvdycgPlxyXG4gICAgICAgICAgICAgICAgPCBzcGFuIGNsYXNzTmFtZT0nc29ydC1hcnJvdy1kb3duJyA+PC9zcGFuID5cclxuICAgICAgICAgICAgPC9zcGFuID4pO1xyXG4gICAgICAgIGRlZmF1bHQ6IC8vIGVudW1zLlNvcnRPcHRpb24uYm90aCBvciB1bmRlZmluZWRcclxuICAgICAgICAgICAgcmV0dXJuICg8IHNwYW4gY2xhc3NOYW1lPSdzb3J0LWFycm93JyA+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3NvcnQtYXJyb3ctdXAnPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwgc3BhbiBjbGFzc05hbWU9J3NvcnQtYXJyb3ctZG93bicgPjwvc3BhbiA+XHJcbiAgICAgICAgICAgIDwvc3BhbiA+KTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCA9IFNvcnRBcnJvdztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS90YWJsZS9zb3J0YXJyb3cudHN4Il0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 361:
/* no static exports found */
/* all exports used */
/*!****************************************************!*\
  !*** ./src/components/utility/genericcheckbox.tsx ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/**\r\n * generic check box component.\r\n * @param props\r\n */\r\nvar genericCheckbox = function (props) {\r\n    return (React.createElement(\"div\", { className: props.containerClassName },\r\n        React.createElement(\"input\", { type: 'checkbox', id: props.id, className: props.className, checked: props.isChecked, disabled: props.disabled, onChange: function () { props.onSelectionChange(); } }),\r\n        React.createElement(\"label\", { htmlFor: props.id, className: props.labelClassName }, props.labelContent)));\r\n};\r\nmodule.exports = genericCheckbox;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9nZW5lcmljY2hlY2tib3gudHN4PzU3NTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIG9uU2VsZWN0aW9uQ2hhbmdlPzogRnVuY3Rpb247XHJcbiAgICBpc0NoZWNrZWQ/OiBib29sZWFuO1xyXG4gICAgbGFiZWxDb250ZW50Pzogc3RyaW5nO1xyXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gICAgbGFiZWxDbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgICBjb250YWluZXJDbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBnZW5lcmljIGNoZWNrIGJveCBjb21wb25lbnQuXHJcbiAqIEBwYXJhbSBwcm9wc1xyXG4gKi9cclxuY29uc3QgZ2VuZXJpY0NoZWNrYm94ID0gKHByb3BzOiBQcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17cHJvcHMuY29udGFpbmVyQ2xhc3NOYW1lfT5cclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9J2NoZWNrYm94J1xyXG4gICAgICAgICAgICAgICAgaWQ9e3Byb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtwcm9wcy5jbGFzc05hbWV9XHJcbiAgICAgICAgICAgICAgICBjaGVja2VkPXtwcm9wcy5pc0NoZWNrZWR9XHJcbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuZGlzYWJsZWR9XHJcbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4geyBwcm9wcy5vblNlbGVjdGlvbkNoYW5nZSgpOyB9fS8+XHJcbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPXtwcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17cHJvcHMubGFiZWxDbGFzc05hbWV9Pntwcm9wcy5sYWJlbENvbnRlbnR9PC9sYWJlbD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgPSBnZW5lcmljQ2hlY2tib3g7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ2VuZXJpY2NoZWNrYm94LnRzeCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBYUE7OztBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBTUE7QUFJQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 362:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/components/utility/genericpopupwithradiobuttons.tsx ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar _this = this;\r\n/*\r\n  React component for Generic button.\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/**\r\n * React component class for Generic popup with radio buttons implementation.\r\n */\r\nvar genericPopupWithRadioButtons = function (props) {\r\n    var that = _this;\r\n    var toRender = (React.createElement(\"ul\", { id: props.id, key: 'key_ul_genericpopup', className: props.className }, props.items && props.items.map(function (item) {\r\n        return React.createElement(\"li\", { id: 'li_genericpopup_' + item.id, className: props.liClassName, key: 'key_li_genericpopup_' + item.id },\r\n            React.createElement(\"input\", { checked: item.isChecked, type: 'radio', id: item.id.toString(), onClick: function () { props.onCheckedChange(item); }, key: 'key_' + item.id, name: 'genericpopup', value: item.isChecked ? 'true' : 'false' }),\r\n            React.createElement(\"label\", { htmlFor: item.id.toString() },\r\n                React.createElement(\"span\", { className: 'radio-ui' }),\r\n                React.createElement(\"span\", { className: 'label-text' }, item.name),\r\n                React.createElement(\"span\", { className: 'label-text error' }, item.errorText)));\r\n    })));\r\n    return toRender;\r\n};\r\nmodule.exports = genericPopupWithRadioButtons;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9nZW5lcmljcG9wdXB3aXRocmFkaW9idXR0b25zLnRzeD8wMWU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gIFJlYWN0IGNvbXBvbmVudCBmb3IgR2VuZXJpYyBidXR0b24uXG4qL1xuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXG5pbXBvcnQgZ2VuZXJpY1JhZGlvQnV0dG9uSXRlbXMgPSByZXF1aXJlKCcuLi91dGlsaXR5L2dlbmVyaWNyYWRpb2J1dHRvbml0ZW1zJyk7XG5cblxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcbiAgICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgb25DaGVja2VkQ2hhbmdlPzogRnVuY3Rpb247XG4gICAgaXRlbXM/OiBBcnJheTxnZW5lcmljUmFkaW9CdXR0b25JdGVtcz47XG4gICAgcmVuZGVyZWRPbj86IG51bWJlcjtcbiAgICBsaUNsYXNzTmFtZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZWFjdCBjb21wb25lbnQgY2xhc3MgZm9yIEdlbmVyaWMgcG9wdXAgd2l0aCByYWRpbyBidXR0b25zIGltcGxlbWVudGF0aW9uLlxuICovXG5jb25zdCBnZW5lcmljUG9wdXBXaXRoUmFkaW9CdXR0b25zOiBSZWFjdC5TdGF0ZWxlc3NDb21wb25lbnQ8UHJvcHM+ID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICBsZXQgdG9SZW5kZXIgPSAoPHVsIGlkPXtwcm9wcy5pZH0ga2V5PSdrZXlfdWxfZ2VuZXJpY3BvcHVwJyBjbGFzc05hbWU9e3Byb3BzLmNsYXNzTmFtZX0gPlxuICAgICAgICB7XG4gICAgICAgICAgICBwcm9wcy5pdGVtcyAmJiBwcm9wcy5pdGVtcy5tYXAoKGl0ZW06IGdlbmVyaWNSYWRpb0J1dHRvbkl0ZW1zKSA9PlxuICAgICAgICAgICAgICAgIDxsaSBpZD17J2xpX2dlbmVyaWNwb3B1cF8nICsgaXRlbS5pZH0gY2xhc3NOYW1lPXtwcm9wcy5saUNsYXNzTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgIGtleT17J2tleV9saV9nZW5lcmljcG9wdXBfJyArIGl0ZW0uaWR9PlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2hlY2tlZD17aXRlbS5pc0NoZWNrZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPSdyYWRpbycgaWQ9e2l0ZW0uaWQudG9TdHJpbmcoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHsgcHJvcHMub25DaGVja2VkQ2hhbmdlKGl0ZW0pOyB9fVxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXsna2V5XycgKyBpdGVtLmlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0nZ2VuZXJpY3BvcHVwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2l0ZW0uaXNDaGVja2VkID8gJ3RydWUnIDogJ2ZhbHNlJ30gLz5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9e2l0ZW0uaWQudG9TdHJpbmcoKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3JhZGlvLXVpJz48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2xhYmVsLXRleHQnPntpdGVtLm5hbWV9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdsYWJlbC10ZXh0IGVycm9yJz57aXRlbS5lcnJvclRleHR9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICA8L3VsPik7XG5cbiAgICByZXR1cm4gdG9SZW5kZXI7XG59O1xuXG5leHBvcnQgPSBnZW5lcmljUG9wdXBXaXRoUmFkaW9CdXR0b25zO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ2VuZXJpY3BvcHVwd2l0aHJhZGlvYnV0dG9ucy50c3giXSwibWFwcGluZ3MiOiI7QUFJQTtBQUpBOztBQUVBO0FBQ0E7QUFDQTtBQWFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBWEE7QUFrQkE7QUFDQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 363:
/* no static exports found */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/components/utility/genericradiobuttonitems.ts ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Radio Button Items\r\n */\r\nvar GenericRadioButtonItems = /** @class */ (function () {\r\n    function GenericRadioButtonItems() {\r\n    }\r\n    return GenericRadioButtonItems;\r\n}());\r\nmodule.exports = GenericRadioButtonItems;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9nZW5lcmljcmFkaW9idXR0b25pdGVtcy50cz80ZmUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBSYWRpbyBCdXR0b24gSXRlbXNcclxuICovXHJcbmNsYXNzIEdlbmVyaWNSYWRpb0J1dHRvbkl0ZW1zIHtcclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgaWQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyBpc0NoZWNrZWQ6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgc2VxdWVuY2VObzogbnVtYmVyO1xyXG4gICAgcHVibGljIGVycm9yVGV4dD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0ID0gR2VuZXJpY1JhZGlvQnV0dG9uSXRlbXM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ2VuZXJpY3JhZGlvYnV0dG9uaXRlbXMudHMiXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBQUE7QUFNQTtBQUFBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 365:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/components/utility/grid/genericcomponentwrapper.tsx ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\n/**\r\n * React component class for GenericWrapper\r\n */\r\nvar GenericComponentWrapper = /** @class */ (function (_super) {\r\n    __extends(GenericComponentWrapper, _super);\r\n    /**\r\n     * Constructor GenericComponentWrapper\r\n     * @param properties\r\n     * @param state\r\n     */\r\n    function GenericComponentWrapper(properties, state) {\r\n        return _super.call(this, properties, state) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    GenericComponentWrapper.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: this.props.divClassName }, this.props.componentList));\r\n    };\r\n    return GenericComponentWrapper;\r\n}(pureRenderComponent));\r\nmodule.exports = GenericComponentWrapper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL2dlbmVyaWNjb21wb25lbnR3cmFwcGVyLnRzeD9jYjU5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIGEgY29tcG9uZW50IEdlbmVyaWNXcmFwcGVyXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgZGl2Q2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgICBjb21wb25lbnRMaXN0OiBJbW11dGFibGUuTGlzdDxKU1guRWxlbWVudD47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWFjdCBjb21wb25lbnQgY2xhc3MgZm9yIEdlbmVyaWNXcmFwcGVyXHJcbiAqL1xyXG5jbGFzcyBHZW5lcmljQ29tcG9uZW50V3JhcHBlciBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3IgR2VuZXJpY0NvbXBvbmVudFdyYXBwZXJcclxuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcGVydGllczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wZXJ0aWVzLCBzdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgY29tcG9uZW50XHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lID0ge3RoaXMucHJvcHMuZGl2Q2xhc3NOYW1lfSA+XHJcbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jb21wb25lbnRMaXN0fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBHZW5lcmljQ29tcG9uZW50V3JhcHBlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL2dlbmVyaWNjb21wb25lbnR3cmFwcGVyLnRzeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBV0E7O0FBRUE7QUFDQTtBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 367:
/* no static exports found */
/* all exports used */
/*!********************************************************************************************************************!*\
  !*** ./src/components/utility/savemarksandannotations/savemarksandannotationsnonrecoverableerrordialogcontents.ts ***!
  \********************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar marksAndAnnotationsSaveHelper = __webpack_require__(/*! ../../../utility/marking/marksandannotationssavehelper */ 295);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\n/**\r\n * Class for generating Save Marks and annotations error dialog.\r\n */\r\nvar SaveMarksAndAnnotationsNonRecoverableErrorDialogContents = /** @class */ (function () {\r\n    /**\r\n     * @constructor\r\n     */\r\n    function SaveMarksAndAnnotationsNonRecoverableErrorDialogContents(detailedError) {\r\n        this._detailedError = false;\r\n        this._detailedError = detailedError;\r\n    }\r\n    Object.defineProperty(SaveMarksAndAnnotationsNonRecoverableErrorDialogContents.prototype, \"header\", {\r\n        /**\r\n         * returns the error dialog header.\r\n         */\r\n        get: function () {\r\n            return localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.header-error-saving-marks');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SaveMarksAndAnnotationsNonRecoverableErrorDialogContents.prototype, \"content\", {\r\n        /**\r\n         * returns the error dialog content based on the dialog type\r\n         */\r\n        get: function () {\r\n            var isDefinitive = standardisationSetupStore.instance.selectedStandardisationSetupWorkList\r\n                === enums.StandardisationSetup.UnClassifiedResponse;\r\n            if (!this._detailedError) {\r\n                return localeStore.instance.TranslateText(isDefinitive ? 'marking.response.saving-marks-error-dialog.body-error-saving-def-marks-single-response' :\r\n                    'marking.response.saving-marks-error-dialog.body-error-saving-marks-single-response');\r\n            }\r\n            else {\r\n                return localeStore.instance.TranslateText(isDefinitive ? 'marking.response.saving-marks-error-dialog.body-error-saving-def-marks-multiple-responses' :\r\n                    'marking.response.saving-marks-error-dialog.body-error-saving-marks-multiple-responses');\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SaveMarksAndAnnotationsNonRecoverableErrorDialogContents.prototype, \"tableContent\", {\r\n        /**\r\n         * This will returns the non-recoverable error items (displayIds)\r\n         */\r\n        get: function () {\r\n            return marksAndAnnotationsSaveHelper.markGroupItemsWithNonRecoverableErrors;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return SaveMarksAndAnnotationsNonRecoverableErrorDialogContents;\r\n}());\r\nmodule.exports = SaveMarksAndAnnotationsNonRecoverableErrorDialogContents;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9zYXZlbWFya3NhbmRhbm5vdGF0aW9ucy9zYXZlbWFya3NhbmRhbm5vdGF0aW9uc25vbnJlY292ZXJhYmxlZXJyb3JkaWFsb2djb250ZW50cy50cz9mMTE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtYXJrc0FuZEFubm90YXRpb25zU2F2ZUhlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvbWFya2luZy9tYXJrc2FuZGFubm90YXRpb25zc2F2ZWhlbHBlcicpO1xyXG5pbXBvcnQgc3RhbmRhcmRpc2F0aW9uU2V0dXBTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9zdGFuZGFyZGlzYXRpb25zZXR1cC9zdGFuZGFyZGlzYXRpb25zZXR1cHN0b3JlJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vZW51bXMnKTtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyBmb3IgZ2VuZXJhdGluZyBTYXZlIE1hcmtzIGFuZCBhbm5vdGF0aW9ucyBlcnJvciBkaWFsb2cuXHJcbiAqL1xyXG5jbGFzcyBTYXZlTWFya3NBbmRBbm5vdGF0aW9uc05vblJlY292ZXJhYmxlRXJyb3JEaWFsb2dDb250ZW50cyB7XHJcblxyXG4gICAgcHJpdmF0ZSBfZGV0YWlsZWRFcnJvcjogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZGV0YWlsZWRFcnJvcjogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2RldGFpbGVkRXJyb3IgPSBkZXRhaWxlZEVycm9yO1xyXG4gICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIHJldHVybnMgdGhlIGVycm9yIGRpYWxvZyBoZWFkZXIuXHJcbiAgICAqL1xyXG4gICAgcHVibGljIGdldCBoZWFkZXIoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dFxyXG4gICAgICAgICAgICAgICAgKCdtYXJraW5nLnJlc3BvbnNlLnNhdmluZy1tYXJrcy1lcnJvci1kaWFsb2cuaGVhZGVyLWVycm9yLXNhdmluZy1tYXJrcycpO1xyXG4gICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIHJldHVybnMgdGhlIGVycm9yIGRpYWxvZyBjb250ZW50IGJhc2VkIG9uIHRoZSBkaWFsb2cgdHlwZVxyXG4gICAgKi9cclxuICAgIHB1YmxpYyBnZXQgY29udGVudCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBpc0RlZmluaXRpdmU6IGJvb2xlYW4gPSBzdGFuZGFyZGlzYXRpb25TZXR1cFN0b3JlLmluc3RhbmNlLnNlbGVjdGVkU3RhbmRhcmRpc2F0aW9uU2V0dXBXb3JrTGlzdFxyXG4gICAgICAgICAgICA9PT0gZW51bXMuU3RhbmRhcmRpc2F0aW9uU2V0dXAuVW5DbGFzc2lmaWVkUmVzcG9uc2U7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9kZXRhaWxlZEVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0XHJcbiAgICAgICAgICAgICAgICAoaXNEZWZpbml0aXZlID8gJ21hcmtpbmcucmVzcG9uc2Uuc2F2aW5nLW1hcmtzLWVycm9yLWRpYWxvZy5ib2R5LWVycm9yLXNhdmluZy1kZWYtbWFya3Mtc2luZ2xlLXJlc3BvbnNlJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgJ21hcmtpbmcucmVzcG9uc2Uuc2F2aW5nLW1hcmtzLWVycm9yLWRpYWxvZy5ib2R5LWVycm9yLXNhdmluZy1tYXJrcy1zaW5nbGUtcmVzcG9uc2UnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dFxyXG4gICAgICAgICAgICAgICAgKGlzRGVmaW5pdGl2ZSA/ICdtYXJraW5nLnJlc3BvbnNlLnNhdmluZy1tYXJrcy1lcnJvci1kaWFsb2cuYm9keS1lcnJvci1zYXZpbmctZGVmLW1hcmtzLW11bHRpcGxlLXJlc3BvbnNlcycgOlxyXG4gICAgICAgICAgICAgICAgICAgICdtYXJraW5nLnJlc3BvbnNlLnNhdmluZy1tYXJrcy1lcnJvci1kaWFsb2cuYm9keS1lcnJvci1zYXZpbmctbWFya3MtbXVsdGlwbGUtcmVzcG9uc2VzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIFRoaXMgd2lsbCByZXR1cm5zIHRoZSBub24tcmVjb3ZlcmFibGUgZXJyb3IgaXRlbXMgKGRpc3BsYXlJZHMpXHJcbiAgICAqL1xyXG4gICAgcHVibGljIGdldCB0YWJsZUNvbnRlbnQoKTogQXJyYXk8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIG1hcmtzQW5kQW5ub3RhdGlvbnNTYXZlSGVscGVyLm1hcmtHcm91cEl0ZW1zV2l0aE5vblJlY292ZXJhYmxlRXJyb3JzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBTYXZlTWFya3NBbmRBbm5vdGF0aW9uc05vblJlY292ZXJhYmxlRXJyb3JEaWFsb2dDb250ZW50cztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9zYXZlbWFya3NhbmRhbm5vdGF0aW9ucy9zYXZlbWFya3NhbmRhbm5vdGF0aW9uc25vbnJlY292ZXJhYmxlZXJyb3JkaWFsb2djb250ZW50cy50cyJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUdBOztBQUVBO0FBQ0E7QUFKQTtBQUtBO0FBQ0E7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUVBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQUFBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 368:
/* no static exports found */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/components/worklist/shared/allpageannotationindicator.tsx ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for All pages annotation indicator\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\n/**\r\n * React component class for SLAO annotation indicator\r\n */\r\nvar AllPageAnnotationIndicator = /** @class */ (function (_super) {\r\n    __extends(AllPageAnnotationIndicator, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function AllPageAnnotationIndicator(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    /**\r\n     * returns true or false to display or hide the icon\r\n     */\r\n    AllPageAnnotationIndicator.prototype.isAllPageAnnotationIndiactorIconShow = function () {\r\n        /**\r\n         * If allpage annotated cc on, all pages are not annotated and marking is completed\r\n         * then the icon will show. in all other cases icon won't be there\r\n         */\r\n        /**\r\n         * taking the cc from cc helper\r\n         */\r\n        var _isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, this.props.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        if (_isAllPagesAnnotatedCC && this.props.isAllAnnotated === false && this.props.isMarkingCompleted) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Render component\r\n     */\r\n    AllPageAnnotationIndicator.prototype.render = function () {\r\n        var className = 'sprite-icon';\r\n        var title = '';\r\n        var isIconVisible = this.isAllPageAnnotationIndiactorIconShow();\r\n        if (isIconVisible) {\r\n            return ((this.props.isTileView) ?\r\n                (React.createElement(\"div\", { className: 'col-inner' },\r\n                    React.createElement(\"span\", { id: 'allPagesAnnotated_' + this.props.id, key: 'allPagesAnnotated_key_' + this.props.id, className: 'sprite-icon note-and-cross-icon', title: localeStore.instance.TranslateText('marking.worklist.response-data.not-all-pages-annotated-icon-tooltip') }))) :\r\n                (React.createElement(\"span\", { className: 'sprite-icon note-and-cross-icon', id: 'allPagesAnnotated_' + this.props.id, key: 'allPagesAnnotated_key_' + this.props.id, title: localeStore.instance.TranslateText('marking.worklist.response-data.not-all-pages-annotated-icon-tooltip') })));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return AllPageAnnotationIndicator;\r\n}(pureRenderComponent));\r\nmodule.exports = AllPageAnnotationIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2FsbHBhZ2Vhbm5vdGF0aW9uaW5kaWNhdG9yLnRzeD8wY2ViIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgUmVhY3QgY29tcG9uZW50IGZvciBBbGwgcGFnZXMgYW5ub3RhdGlvbiBpbmRpY2F0b3JcclxuKi9cclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljL2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljc2hlbHBlcicpO1xyXG5pbXBvcnQgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzTmFtZXMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljL2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljc25hbWVzJyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBTTEFPIGFubm90YXRpb24gaW5kaWNhdG9yXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgaXNBbGxBbm5vdGF0ZWQ/OiBib29sZWFuO1xyXG4gICAgaXNNYXJraW5nQ29tcGxldGVkOiBib29sZWFuO1xyXG4gICAgaXNUaWxlVmlldz86IGJvb2xlYW47XHJcbiAgICBtYXJrU2NoZW1lR3JvdXBJZDogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogUmVhY3QgY29tcG9uZW50IGNsYXNzIGZvciBTTEFPIGFubm90YXRpb24gaW5kaWNhdG9yXHJcbiAqL1xyXG5jbGFzcyBBbGxQYWdlQW5ub3RhdGlvbkluZGljYXRvciBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzLCBzdGF0ZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIHN0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJldHVybnMgdHJ1ZSBvciBmYWxzZSB0byBkaXNwbGF5IG9yIGhpZGUgdGhlIGljb25cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpc0FsbFBhZ2VBbm5vdGF0aW9uSW5kaWFjdG9ySWNvblNob3coKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAvKipcclxuICAgICAgICAgICAqIElmIGFsbHBhZ2UgYW5ub3RhdGVkIGNjIG9uLCBhbGwgcGFnZXMgYXJlIG5vdCBhbm5vdGF0ZWQgYW5kIG1hcmtpbmcgaXMgY29tcGxldGVkXHJcbiAgICAgICAgICAgKiB0aGVuIHRoZSBpY29uIHdpbGwgc2hvdy4gaW4gYWxsIG90aGVyIGNhc2VzIGljb24gd29uJ3QgYmUgdGhlcmVcclxuICAgICAgICAgICAqL1xyXG5cclxuICAgICAgICAvKiogXHJcbiAgICAgICAgICogdGFraW5nIHRoZSBjYyBmcm9tIGNjIGhlbHBlclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxldCBfaXNBbGxQYWdlc0Fubm90YXRlZENDID0gY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzSGVscGVyLmdldENoYXJhY3RlcmlzdGljVmFsdWUoXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzLkZvcmNlQW5ub3RhdGlvbk9uRWFjaFBhZ2UsXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMubWFya1NjaGVtZUdyb3VwSWQpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJyA/IHRydWUgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKF9pc0FsbFBhZ2VzQW5ub3RhdGVkQ0MgJiYgdGhpcy5wcm9wcy5pc0FsbEFubm90YXRlZCA9PT0gZmFsc2UgJiYgdGhpcy5wcm9wcy5pc01hcmtpbmdDb21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBjb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgY2xhc3NOYW1lID0gJ3Nwcml0ZS1pY29uJztcclxuICAgICAgICBsZXQgdGl0bGU6IHN0cmluZyA9ICcnO1xyXG4gICAgICAgIGxldCBpc0ljb25WaXNpYmxlID0gdGhpcy5pc0FsbFBhZ2VBbm5vdGF0aW9uSW5kaWFjdG9ySWNvblNob3coKTtcclxuXHJcbiAgICAgICAgaWYgKGlzSWNvblZpc2libGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgICh0aGlzLnByb3BzLmlzVGlsZVZpZXcpID9cclxuICAgICAgICAgICAgICAgICAgICAoPGRpdiBjbGFzc05hbWU9J2NvbC1pbm5lcic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD17J2FsbFBhZ2VzQW5ub3RhdGVkXycgKyB0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17J2FsbFBhZ2VzQW5ub3RhdGVkX2tleV8nICsgdGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3Nwcml0ZS1pY29uIG5vdGUtYW5kLWNyb3NzLWljb24nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCdtYXJraW5nLndvcmtsaXN0LnJlc3BvbnNlLWRhdGEubm90LWFsbC1wYWdlcy1hbm5vdGF0ZWQtaWNvbi10b29sdGlwJyl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pIDpcclxuICAgICAgICAgICAgICAgICAgICAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nc3ByaXRlLWljb24gbm90ZS1hbmQtY3Jvc3MtaWNvbicgaWQ9eydhbGxQYWdlc0Fubm90YXRlZF8nICsgdGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXsnYWxsUGFnZXNBbm5vdGF0ZWRfa2V5XycgKyB0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17bG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLm5vdC1hbGwtcGFnZXMtYW5ub3RhdGVkLWljb24tdG9vbHRpcCcpIH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBBbGxQYWdlQW5ub3RhdGlvbkluZGljYXRvcjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9hbGxwYWdlYW5ub3RhdGlvbmluZGljYXRvci50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVlBOztBQUVBO0FBQ0E7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUVBOztBQUVBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBT0E7QUFPQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 369:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/worklist/shared/markingprogress.tsx ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for login header\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar SubmitResponse = __webpack_require__(/*! ./submitresponse */ 372);\r\nvar localeHelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar ClassifyResponse = __webpack_require__(/*! ../../standardisationsetup/shared/classifyresponse */ 383);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\n/**\r\n * React component class for marking progress\r\n */\r\nvar MarkingProgress = /** @class */ (function (_super) {\r\n    __extends(MarkingProgress, _super);\r\n    /**\r\n     * Constructor for MarkingProgress\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function MarkingProgress(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * Open classify multi option pop with unclassified response details\r\n         */\r\n        _this.classifyMultiOptionPopUpOpen = function (esMarkGroupId) {\r\n            standardisationActionCreator.reclassifyMultiOptionPopupOpen(esMarkGroupId);\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    MarkingProgress.prototype.render = function () {\r\n        if (this.props.responseStatus !== undefined) {\r\n            if (this.props.responseStatus.contains(enums.ResponseStatus.readyToSubmit) &&\r\n                !(this.props.isTeamManagementMode ||\r\n                    worklistStore.instance.isMarkingCheckMode)) {\r\n                if (this.props.standardisationSetupTab === enums.StandardisationSetup.UnClassifiedResponse) {\r\n                    return (React.createElement(ClassifyResponse, { id: this.props.id, key: this.props.id + '_key', isDisabled: false, buttonTextResourceKey: 'standardisation-setup.right-container.classify-button', esMarkGroupId: this.props.markGroupId, onClickAction: this.classifyMultiOptionPopUpOpen }));\r\n                }\r\n                else {\r\n                    return (React.createElement(SubmitResponse, { isSubmitAll: false, selectedLanguage: this.props.selectedLanguage, id: this.props.id, key: 'key_' + this.props.id, markGroupId: this.props.markGroupId, isDisabled: this.props.isSubmitDisabled, isTileView: this.props.isTileView, standardisationSetupType: this.props.standardisationSetupTab, stdResponseDetails: this.props.stdResponseDetails }));\r\n                }\r\n            }\r\n            else if (this.props.responseStatus.contains(enums.ResponseStatus.markingNotStarted)) {\r\n                return (((!this.props.isTileView) ? null :\r\n                    React.createElement(\"div\", { className: 'col wl-status text-center', id: this.props.id + '_markingProgress' },\r\n                        React.createElement(\"div\", { className: 'col-inner' }))));\r\n            }\r\n            else if (this.props.responseStatus.contains(enums.ResponseStatus.definitiveMarkingNotStarted) ||\r\n                this.props.responseStatus.contains(enums.ResponseStatus.NoViewDefinitivesPermisssion)) {\r\n                return (React.createElement(\"span\", { className: 'dim-text txt-val small-text', id: this.props.id + '_provisional' }, localeStore.instance.TranslateText('standardisation-setup.right-container.status-provisional')));\r\n            }\r\n            else {\r\n                return (((!this.props.isTileView) ? React.createElement(\"span\", { className: classNames('inline-bubble oval', {\r\n                        'pink': (this.props.responseStatus.contains(enums.ResponseStatus.hasException) ||\r\n                            this.props.responseStatus.contains(enums.ResponseStatus.hasZoningException) ||\r\n                            this.props.responseStatus.contains(enums.ResponseStatus.markChangeReasonNotExist) ||\r\n                            this.props.responseStatus.contains(enums.ResponseStatus.supervisorRemarkDecisionNotSelected) ||\r\n                            this.props.responseStatus.contains(enums.ResponseStatus.wholeResponseNotAvailable) ||\r\n                            this.props.responseStatus.contains(enums.ResponseStatus.notAllPagesAnnotated)) &&\r\n                            !worklistStore.instance.isMarkingCheckMode ?\r\n                            false : true\r\n                    }), id: this.props.id + '_markingProgress' },\r\n                    \" \",\r\n                    markerOperationModeFactory.operationMode.showMarkingProgressWithPercentage(this.props.responseStatus.contains(enums.ResponseStatus.markingInProgress))\r\n                        ? localeHelper.toLocaleString(this.props.progress) + '%' : '')\r\n                    :\r\n                        React.createElement(\"div\", { className: 'col wl-status text-center', id: this.props.id + '_markingProgress' },\r\n                            React.createElement(\"div\", { className: 'col-inner' },\r\n                                React.createElement(\"span\", { className: classNames('inline-bubble oval', {\r\n                                        'pink': this.props.responseStatus.contains(enums.ResponseStatus.hasException) ||\r\n                                            this.props.responseStatus.contains(enums.ResponseStatus.hasZoningException) ||\r\n                                            this.props.responseStatus.contains(enums.ResponseStatus.markChangeReasonNotExist) ||\r\n                                            this.props.responseStatus.contains(enums.ResponseStatus.supervisorRemarkDecisionNotSelected) ||\r\n                                            this.props.responseStatus.contains(enums.ResponseStatus.wholeResponseNotAvailable) ||\r\n                                            this.props.responseStatus.contains(enums.ResponseStatus.notAllPagesAnnotated) ?\r\n                                            false : true\r\n                                    }) }, this.props.responseStatus.contains(enums.ResponseStatus.markingInProgress)\r\n                                    ? localeHelper.toLocaleString(this.props.progress) + '%' : '')))));\r\n            }\r\n        }\r\n        else {\r\n            return (null);\r\n        }\r\n    };\r\n    /**\r\n     * Checks if Share button text is visible\r\n     */\r\n    MarkingProgress.prototype.isShareButtonVisible = function () {\r\n        return this.props.standardisationSetupTab === enums.StandardisationSetup.ProvisionalResponse;\r\n    };\r\n    return MarkingProgress;\r\n}(PureRenderComponent));\r\nmodule.exports = MarkingProgress;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 370:
/* no static exports found */
/* all exports used */
/*!******************************************************************!*\
  !*** ./src/components/worklist/shared/responseidgridelement.tsx ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar stringHelper = __webpack_require__(/*! ../../../utility/generic/stringhelper */ 254);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar markSchemeHelper = __webpack_require__(/*! ../../../utility/markscheme/markschemehelper */ 276);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar messageStore = __webpack_require__(/*! ../../../stores/message/messagestore */ 240);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../../actions/messaging/messagingactioncreator */ 268);\r\nvar responseHelper = __webpack_require__(/*! ../../utility/responsehelper/responsehelper */ 249);\r\nvar teamManagementStore = __webpack_require__(/*! ../../../stores/teammanagement/teammanagementstore */ 245);\r\nvar teamManagementActionCreator = __webpack_require__(/*! ../../../actions/teammanagement/teammanagementactioncreator */ 263);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../utility/ecoursework/ecourseworkhelper */ 238);\r\nvar applicationStore = __webpack_require__(/*! ../../../stores/applicationoffline/applicationstore */ 247);\r\nvar applicationActionCreator = __webpack_require__(/*! ../../../actions/applicationoffline/applicationactioncreator */ 256);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\n/**\r\n * React component class for response id\r\n */\r\nvar ResponseIdGridElement = /** @class */ (function (_super) {\r\n    __extends(ResponseIdGridElement, _super);\r\n    /**\r\n     * Constructor for ResponseIdGridElement\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function ResponseIdGridElement(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.classNameText = '';\r\n        /**\r\n         * This will initiate open response action\r\n         */\r\n        _this.handleResponseClick = function () {\r\n            //TO DO Remove this on enabling response click.\r\n            if (!_this.props.isClickable) {\r\n                return;\r\n            }\r\n            if (!applicationStore.instance.isOnline) {\r\n                applicationActionCreator.checkActionInterrupted();\r\n            }\r\n            else {\r\n                // Ideally marking mode should be read from the opened response,\r\n                // since multiple marking modes won't come in the same worklist now this will work.\r\n                _this.selectedMarkingMode = worklistStore.instance.getMarkingModeByWorkListType(worklistStore.instance.currentWorklistType);\r\n                _this.actualDisplayId = _this.props.displayId.toString();\r\n                if (!messageStore.instance.isMessagePanelActive) {\r\n                    if (markerOperationModeFactory.operationMode.isHelpExaminersView) {\r\n                        var dataCollection = new Array();\r\n                        var examinerSEPAction = {\r\n                            examinerRoleId: qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId,\r\n                            markSchemeGroupId: qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId,\r\n                            requestedByExaminerRoleId: qigStore.instance.getSelectedQIGForTheLoggedInUser.examinerRoleId\r\n                        };\r\n                        dataCollection.push(examinerSEPAction);\r\n                        var examinerSEPActions = Immutable.List(dataCollection);\r\n                        var doSEPApprovalManagementActionArgument = {\r\n                            actionIdentifier: enums.SEPAction.ViewResponse,\r\n                            examiners: examinerSEPActions\r\n                        };\r\n                        teamManagementActionCreator.ExecuteApprovalManagementAction(doSEPApprovalManagementActionArgument);\r\n                    }\r\n                    else if (worklistStore.instance.isMarkingCheckMode) {\r\n                        teamManagementActionCreator.teamManagementExaminerValidation(qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, 0, worklistStore.instance.selectedMarkingCheckExaminer.fromExaminerID, enums.ExaminerValidationArea.MarkCheckWorklist, false, _this.actualDisplayId, _this.selectedMarkingMode);\r\n                    }\r\n                    else {\r\n                        _this.openResponse(_this.actualDisplayId, _this.selectedMarkingMode);\r\n                    }\r\n                }\r\n                else {\r\n                    var messageNavigationArguments = {\r\n                        responseId: parseInt(_this.actualDisplayId),\r\n                        canNavigate: false,\r\n                        navigateTo: enums.MessageNavigation.toResponse,\r\n                        navigationConfirmed: false,\r\n                        hasMessageContainsDirtyValue: undefined,\r\n                        triggerPoint: enums.TriggerPoint.None\r\n                    };\r\n                    messagingActionCreator.canMessageNavigate(messageNavigationArguments);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * This will initiate the SEP action while opening a response\r\n         */\r\n        _this.onApprovalManagementActionExecuted = function (actionIdentifier) {\r\n            if (actionIdentifier === enums.SEPAction.ViewResponse) {\r\n                if (_this.actualDisplayId && _this.selectedMarkingMode) {\r\n                    _this.openResponse(_this.actualDisplayId, _this.selectedMarkingMode);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Method to open response if the loggined examiner is valid.\r\n         */\r\n        _this.validateExaminerStatus = function (displayId, markingMode) {\r\n            if (displayId && markingMode !== enums.MarkingMode.None) {\r\n                _this.openResponse(displayId, markingMode);\r\n            }\r\n        };\r\n        _this.handleResponseClick = _this.handleResponseClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    ResponseIdGridElement.prototype.render = function () {\r\n        var title = (this.props.isReusableResponseView) ?\r\n            stringHelper.format(localeStore.instance.\r\n                TranslateText('standardisation-setup.standardisation-setup-worklist.response-data.script-id-tooltip'), [String(this.props.candidateScriptId)])\r\n            : stringHelper.format(localeStore.instance.TranslateText('marking.worklist.response-data.response-id-tooltip'), [(this.props.displayText) ? String(this.props.displayText) : String(this.props.displayId)]);\r\n        (this.props.isTileView) ? this.classNameText = 'resp-id response-display-id' :\r\n            this.classNameText = 'response-display-id resp-id';\r\n        return (React.createElement(\"div\", { className: this.classNameText },\r\n            React.createElement(\"a\", { href: 'javascript:void(0)', id: 'res_' + this.props.id, key: 'res_key_' + this.props.id, title: title, className: (this.props.isTileView) ? 'dark-link large-text' : '', onClick: this.handleResponseClick }, (this.props.isReusableResponseView) ? String(this.props.candidateScriptId)\r\n                : (this.props.displayText) ? String(this.props.displayText) : String(this.props.displayId))));\r\n    };\r\n    /**\r\n     * Componet did mount\r\n     */\r\n    ResponseIdGridElement.prototype.componentDidMount = function () {\r\n        teamManagementStore.instance.setMaxListeners(0);\r\n        if (markerOperationModeFactory.operationMode.isHelpExaminersView) {\r\n            teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.APPROVAL_MANAGEMENT_ACTION_EXECUTED, this.onApprovalManagementActionExecuted);\r\n        }\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.EXAMINER_VALIDATED_OPEN_RESPONSE_EVENT, this.validateExaminerStatus);\r\n    };\r\n    /**\r\n     * Component will unmount\r\n     */\r\n    ResponseIdGridElement.prototype.componentWillUnmount = function () {\r\n        if (markerOperationModeFactory.operationMode.isHelpExaminersView) {\r\n            teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.APPROVAL_MANAGEMENT_ACTION_EXECUTED, this.onApprovalManagementActionExecuted);\r\n        }\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.EXAMINER_VALIDATED_OPEN_RESPONSE_EVENT, this.validateExaminerStatus);\r\n    };\r\n    /**\r\n     * This will open the response\r\n     * @param actualDisplayId contains the actual display id\r\n     * @param selectedMarkingMode contains the selected marking mode\r\n     */\r\n    ResponseIdGridElement.prototype.openResponse = function (actualDisplayId, selectedMarkingMode) {\r\n        var openedResponseDetails = markerOperationModeFactory.operationMode.openedResponseDetails(actualDisplayId);\r\n        responseHelper.openResponse(parseInt(actualDisplayId), enums.ResponseNavigation.specific, markerOperationModeFactory.operationMode.isStandardisationSetupMode ?\r\n            (standardisationSetupStore.instance.selectedStandardisationSetupWorkList === enums.StandardisationSetup.SelectResponse &&\r\n                standardisationSetupStore.instance.selectedTabInSelectResponse === enums.StandardisationSessionTab.PreviousSession) ?\r\n                enums.ResponseMode.closed : enums.ResponseMode.open :\r\n            worklistStore.instance.getResponseMode, markerOperationModeFactory.operationMode.isStandardisationSetupMode ?\r\n            openedResponseDetails.esMarkGroupId : openedResponseDetails.markGroupId, enums.ResponseViewMode.zoneView, enums.TriggerPoint.None, openedResponseDetails.sampleReviewCommentId, openedResponseDetails.sampleReviewCommentCreatedBy);\r\n        markSchemeHelper.getMarks(parseInt(actualDisplayId), selectedMarkingMode, false, true);\r\n        eCourseworkHelper.fetchECourseWorkCandidateScriptMetadata(parseInt(actualDisplayId));\r\n    };\r\n    return ResponseIdGridElement;\r\n}(pureRenderComponent));\r\nmodule.exports = ResponseIdGridElement;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 371:
/* no static exports found */
/* all exports used */
/*!********************************************************************!*\
  !*** ./src/components/worklist/shared/slaoannotationindicator.tsx ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for SLAO annotation indicator\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\n/**\r\n * React component class for SLAO annotation indicator\r\n */\r\nvar SLAOAnnotationIndicator = /** @class */ (function (_super) {\r\n    __extends(SLAOAnnotationIndicator, _super);\r\n    /**\r\n     * Constructor fot SLAOAnnotationIndicator\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function SLAOAnnotationIndicator(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    /**\r\n     * returns the below values which define the type of SLAO indicator icon displayed\r\n     *       true        - icon without cross\r\n     *       false       - icon with cross\r\n     *       undefined   - no icon\r\n     */\r\n    SLAOAnnotationIndicator.prototype.getIconType = function () {\r\n        /**\r\n         * taking the cc from cc helper\r\n         */\r\n        var _isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, this.props.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        var _isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, this.props.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        /**\r\n         * If the response has no SLAO's ther will not be an icon in the column, so returning undefined\r\n         */\r\n        if (!this.props.isResponseHasSLAO) {\r\n            return undefined;\r\n        }\r\n        else if (!this.props.isMarkingCompleted && !this.props.isTileView) {\r\n            /**\r\n             * If the response has SLAO and marking is ot completed the icon without cross will display\r\n             * on the grid column(returning true)\r\n             */\r\n            return true;\r\n        }\r\n        else if (!_isAllPagesAnnotatedCC && _isAllSLAOAnnotatedCC && this.props.isAllAnnotated === false\r\n            && this.props.isMarkingCompleted) {\r\n            /**\r\n             * If the marking is completed an icon with cross mark will display if the All SLALO CC is on\r\n             * and all SLAO's are not annotated\r\n             */\r\n            return false;\r\n        }\r\n        else if (!this.props.isTileView && this.props.isMarkingCompleted && this.props.isAllAnnotated === true) {\r\n            /**\r\n             * If the marking is completed , all slo annotated  and listview\r\n             * show sprite-icon bundle-icon\r\n             */\r\n            return true;\r\n        }\r\n        else if (!this.props.isTileView) {\r\n            /**\r\n             * show 'sprite-icon bundle-icon' in listview in all other cases otherthan mentioned above.\r\n             * will not show, if the response has no SLAO's.\r\n             */\r\n            return true;\r\n        }\r\n        /**\r\n         * no need to display 'sprite-icon bundle-icon' in tileview .\r\n         */\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Render component\r\n     */\r\n    SLAOAnnotationIndicator.prototype.render = function () {\r\n        var className = 'sprite-icon';\r\n        var title = '';\r\n        var id = '';\r\n        var iconType = this.getIconType();\r\n        /**\r\n         * choosing the class name and title based on the icon type returned from the getIconType() method\r\n         */\r\n        if (iconType === undefined) {\r\n            return null;\r\n        }\r\n        else if (iconType === true) {\r\n            className = 'sprite-icon bundle-icon';\r\n            title = localeStore.instance.TranslateText('marking.worklist.response-data.additional-objects-icon-tooltip');\r\n        }\r\n        else if (iconType === false) {\r\n            className = 'sprite-icon bundle-icon-cross';\r\n            id = 'sprite-icon bundle-icon-cross-id';\r\n            title = localeStore.instance.TranslateText('marking.worklist.response-data.additional-objects-not-annotated-icon-tooltip');\r\n        }\r\n        return ((this.props.isTileView) ?\r\n            React.createElement(\"div\", { className: 'slao' },\r\n                React.createElement(\"a\", { id: 'slaoAnnotation_' + this.props.id, key: 'slaoAnnotation_key_' + this.props.id, href: 'javascript:void(0)', title: title },\r\n                    React.createElement(\"span\", { className: className, id: id }, \"slao\")))\r\n            : React.createElement(\"span\", { className: 'Response has additional answer pages' },\r\n                React.createElement(\"a\", { id: 'slaoAnnotation_' + this.props.id, key: 'slaoAnnotation_key_' + this.props.id, href: 'javascript:void(0)', title: title },\r\n                    React.createElement(\"span\", { className: className }, \"slao\"))));\r\n    };\r\n    return SLAOAnnotationIndicator;\r\n}(pureRenderComponent));\r\nmodule.exports = SLAOAnnotationIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3NsYW9hbm5vdGF0aW9uaW5kaWNhdG9yLnRzeD9hZTdhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgUmVhY3QgY29tcG9uZW50IGZvciBTTEFPIGFubm90YXRpb24gaW5kaWNhdG9yXHJcbiovXHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWNzL2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljc3N0b3JlJyk7XHJcbmltcG9ydCBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljL2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljc2hlbHBlcicpO1xyXG5pbXBvcnQgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzTmFtZXMgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljL2NvbmZpZ3VyYWJsZWNoYXJhY3RlcmlzdGljc25hbWVzJyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBTTEFPIGFubm90YXRpb24gaW5kaWNhdG9yXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgaXNSZXNwb25zZUhhc1NMQU86IGJvb2xlYW47XHJcbiAgICBpc0FsbEFubm90YXRlZD86IGJvb2xlYW47XHJcbiAgICBpc01hcmtpbmdDb21wbGV0ZWQ6IGJvb2xlYW47XHJcbiAgICBpc1RpbGVWaWV3PzogYm9vbGVhbjtcclxuICAgIG1hcmtTY2hlbWVHcm91cElkOiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWFjdCBjb21wb25lbnQgY2xhc3MgZm9yIFNMQU8gYW5ub3RhdGlvbiBpbmRpY2F0b3JcclxuICovXHJcbmNsYXNzIFNMQU9Bbm5vdGF0aW9uSW5kaWNhdG9yIGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3QgU0xBT0Fubm90YXRpb25JbmRpY2F0b3JcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcywgc3RhdGU6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBzdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIHRoZSBiZWxvdyB2YWx1ZXMgd2hpY2ggZGVmaW5lIHRoZSB0eXBlIG9mIFNMQU8gaW5kaWNhdG9yIGljb24gZGlzcGxheWVkXHJcbiAgICAgKiAgICAgICB0cnVlICAgICAgICAtIGljb24gd2l0aG91dCBjcm9zc1xyXG4gICAgICogICAgICAgZmFsc2UgICAgICAgLSBpY29uIHdpdGggY3Jvc3NcclxuICAgICAqICAgICAgIHVuZGVmaW5lZCAgIC0gbm8gaWNvblxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldEljb25UeXBlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8qKiBcclxuICAgICAgICAgKiB0YWtpbmcgdGhlIGNjIGZyb20gY2MgaGVscGVyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGV0IF9pc0FsbFBhZ2VzQW5ub3RhdGVkQ0MgPSBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NIZWxwZXIuZ2V0Q2hhcmFjdGVyaXN0aWNWYWx1ZShcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzTmFtZXMuRm9yY2VBbm5vdGF0aW9uT25FYWNoUGFnZSxcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5tYXJrU2NoZW1lR3JvdXBJZCkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIGxldCBfaXNBbGxTTEFPQW5ub3RhdGVkQ0MgPSBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NIZWxwZXIuZ2V0Q2hhcmFjdGVyaXN0aWNWYWx1ZShcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzTmFtZXMuU0xBT0ZvcmNlZEFubm90YXRpb25zLFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm1hcmtTY2hlbWVHcm91cElkKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgICAgIC8qKiBcclxuICAgICAgICAgKiBJZiB0aGUgcmVzcG9uc2UgaGFzIG5vIFNMQU8ncyB0aGVyIHdpbGwgbm90IGJlIGFuIGljb24gaW4gdGhlIGNvbHVtbiwgc28gcmV0dXJuaW5nIHVuZGVmaW5lZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmICghdGhpcy5wcm9wcy5pc1Jlc3BvbnNlSGFzU0xBTykge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMucHJvcHMuaXNNYXJraW5nQ29tcGxldGVkICYmICF0aGlzLnByb3BzLmlzVGlsZVZpZXcpIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIElmIHRoZSByZXNwb25zZSBoYXMgU0xBTyBhbmQgbWFya2luZyBpcyBvdCBjb21wbGV0ZWQgdGhlIGljb24gd2l0aG91dCBjcm9zcyB3aWxsIGRpc3BsYXlcclxuICAgICAgICAgICAgICogb24gdGhlIGdyaWQgY29sdW1uKHJldHVybmluZyB0cnVlKVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIGlmICghX2lzQWxsUGFnZXNBbm5vdGF0ZWRDQyAmJiBfaXNBbGxTTEFPQW5ub3RhdGVkQ0MgJiYgdGhpcy5wcm9wcy5pc0FsbEFubm90YXRlZCA9PT0gZmFsc2VcclxuICAgICAgICAgICAgJiYgdGhpcy5wcm9wcy5pc01hcmtpbmdDb21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIElmIHRoZSBtYXJraW5nIGlzIGNvbXBsZXRlZCBhbiBpY29uIHdpdGggY3Jvc3MgbWFyayB3aWxsIGRpc3BsYXkgaWYgdGhlIEFsbCBTTEFMTyBDQyBpcyBvblxyXG4gICAgICAgICAgICAgKiBhbmQgYWxsIFNMQU8ncyBhcmUgbm90IGFubm90YXRlZFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMucHJvcHMuaXNUaWxlVmlldyAmJiB0aGlzLnByb3BzLmlzTWFya2luZ0NvbXBsZXRlZCAmJiB0aGlzLnByb3BzLmlzQWxsQW5ub3RhdGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBJZiB0aGUgbWFya2luZyBpcyBjb21wbGV0ZWQgLCBhbGwgc2xvIGFubm90YXRlZCAgYW5kIGxpc3R2aWV3XHJcbiAgICAgICAgICAgICAqIHNob3cgc3ByaXRlLWljb24gYnVuZGxlLWljb24gXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLnByb3BzLmlzVGlsZVZpZXcpIHtcclxuICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgKiBzaG93ICdzcHJpdGUtaWNvbiBidW5kbGUtaWNvbicgaW4gbGlzdHZpZXcgaW4gYWxsIG90aGVyIGNhc2VzIG90aGVydGhhbiBtZW50aW9uZWQgYWJvdmUuXHJcbiAgICAgICAgICAgICogd2lsbCBub3Qgc2hvdywgaWYgdGhlIHJlc3BvbnNlIGhhcyBubyBTTEFPJ3MuXHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBubyBuZWVkIHRvIGRpc3BsYXkgJ3Nwcml0ZS1pY29uIGJ1bmRsZS1pY29uJyBpbiB0aWxldmlldyAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBjb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuICAgICAgICBsZXQgY2xhc3NOYW1lID0gJ3Nwcml0ZS1pY29uJztcclxuICAgICAgICBsZXQgdGl0bGU6IHN0cmluZyA9ICcnO1xyXG4gICAgICAgIGxldCBpZDogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgbGV0IGljb25UeXBlID0gdGhpcy5nZXRJY29uVHlwZSgpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBjaG9vc2luZyB0aGUgY2xhc3MgbmFtZSBhbmQgdGl0bGUgYmFzZWQgb24gdGhlIGljb24gdHlwZSByZXR1cm5lZCBmcm9tIHRoZSBnZXRJY29uVHlwZSgpIG1ldGhvZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChpY29uVHlwZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaWNvblR5cGUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgY2xhc3NOYW1lID0gJ3Nwcml0ZS1pY29uIGJ1bmRsZS1pY29uJztcclxuICAgICAgICAgICAgdGl0bGUgPSBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LnJlc3BvbnNlLWRhdGEuYWRkaXRpb25hbC1vYmplY3RzLWljb24tdG9vbHRpcCcpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaWNvblR5cGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9ICdzcHJpdGUtaWNvbiBidW5kbGUtaWNvbi1jcm9zcyc7XHJcbiAgICAgICAgICAgIGlkID0gJ3Nwcml0ZS1pY29uIGJ1bmRsZS1pY29uLWNyb3NzLWlkJztcclxuICAgICAgICAgICAgdGl0bGUgPSBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LnJlc3BvbnNlLWRhdGEuYWRkaXRpb25hbC1vYmplY3RzLW5vdC1hbm5vdGF0ZWQtaWNvbi10b29sdGlwJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICh0aGlzLnByb3BzLmlzVGlsZVZpZXcpID9cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdzbGFvJz5cclxuICAgICAgICAgICAgICAgICAgICA8YSBpZD17J3NsYW9Bbm5vdGF0aW9uXycgKyB0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9eydzbGFvQW5ub3RhdGlvbl9rZXlfJyArIHRoaXMucHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKScgdGl0bGU9e3RpdGxlfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjbGFzc05hbWV9IGlkID17aWR9PnNsYW88L3NwYW4+PC9hPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA6IDxzcGFuIGNsYXNzTmFtZT0nUmVzcG9uc2UgaGFzIGFkZGl0aW9uYWwgYW5zd2VyIHBhZ2VzJz5cclxuICAgICAgICAgICAgICAgICAgICA8YSBpZD17J3NsYW9Bbm5vdGF0aW9uXycgKyB0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9eydzbGFvQW5ub3RhdGlvbl9rZXlfJyArIHRoaXMucHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKScgdGl0bGU9e3RpdGxlfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjbGFzc05hbWV9PnNsYW88L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFNMQU9Bbm5vdGF0aW9uSW5kaWNhdG9yO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9zaGFyZWQvc2xhb2Fubm90YXRpb25pbmRpY2F0b3IudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFhQTs7QUFFQTtBQUNBO0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFHQTtBQUlBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUdBO0FBSUE7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 372:
/* no static exports found */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/components/worklist/shared/submitresponse.tsx ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for Submit response header\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar submitActionCreator = __webpack_require__(/*! ../../../actions/submit/submitactioncreator */ 297);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar busyIndicatorActionCreator = __webpack_require__(/*! ../../../actions/busyindicator/busyindicatoractioncreator */ 279);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar markingStore = __webpack_require__(/*! ../../../stores/marking/markingstore */ 236);\r\nvar markingActionCreator = __webpack_require__(/*! ../../../actions/marking/markingactioncreator */ 246);\r\nvar submitHelper = __webpack_require__(/*! ../../utility/submit/submithelper */ 282);\r\nvar markingHelper = __webpack_require__(/*! ../../../utility/markscheme/markinghelper */ 267);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar combinedWarningPopupHelper = __webpack_require__(/*! ../../utility/popup/responseerrordialoghelper */ 438);\r\nvar eCourseWorkFileStore = __webpack_require__(/*! ../../../stores/response/digital/ecourseworkfilestore */ 278);\r\nvar applicationActionCreator = __webpack_require__(/*! ../../../actions/applicationoffline/applicationactioncreator */ 256);\r\nvar standardisationsetupActionCreator = __webpack_require__(/*! ../../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\n/**\r\n * React component class for submit button\r\n */\r\nvar SubmitResponse = /** @class */ (function (_super) {\r\n    __extends(SubmitResponse, _super);\r\n    /**\r\n     * Constructor for SubmitResponse\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function SubmitResponse(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * Change visibility of mark change reason\r\n         */\r\n        _this.showHideMarkChangeReason = function () {\r\n            if (_this.props.checkIsSubmitVisible()) {\r\n                _this.isVisible = true;\r\n            }\r\n            else {\r\n                _this.isVisible = false;\r\n            }\r\n            _this.setState({ reRender: Date.now() });\r\n        };\r\n        /**\r\n         * File read status updated event.\r\n         */\r\n        _this.fileReadStatusUpdated = function () {\r\n            _this.isVisible = _this.props.checkIsSubmitVisible();\r\n            _this.setState({ reRender: Date.now() });\r\n        };\r\n        _this.submitResponseFromMarkscheme = function () {\r\n            if (markingStore.instance.navigateTo === enums.SaveAndNavigate.submit) {\r\n                busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.submitInResponseScreen);\r\n                submitHelper.saveAndSubmitResponse(_this.props.markGroupId);\r\n            }\r\n        };\r\n        _this.state = {\r\n            reRender: Date.now()\r\n        };\r\n        _this.onSubmit = _this.onSubmit.bind(_this);\r\n        _this.showHideMarkChangeReason = _this.showHideMarkChangeReason.bind(_this);\r\n        _this.isVisible = _this.props.isVisible;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    SubmitResponse.prototype.render = function () {\r\n        /**\r\n         * show multiple/single response submit button\r\n         */\r\n        if (this.props.isSubmitAll) {\r\n            return (React.createElement(\"button\", { id: 'submitResponseAll_' + this.props.id, key: 'submitResponseAll_key_' + this.props.id, title: !this.props.isDisabled ? '' :\r\n                    localeStore.instance.TranslateText('marking.worklist.action-buttons.submit-button-not-approved-tooltip'), disabled: this.props.isDisabled ? true : false, className: classNames('button primary rounded', {\r\n                    'disabled submit-all-rsp-btn': this.props.isDisabled\r\n                }), onClick: this.onSubmit },\r\n                localeStore.instance.TranslateText('marking.worklist.action-buttons.submit-button'),\r\n                this.renderSubTextItem()));\r\n        }\r\n        else if (this.props.fromMarkScheme) {\r\n            if (this.isVisible) {\r\n                return (React.createElement(\"div\", { className: 'submit-holder show' }, this.getSubmitButton()));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return (((!this.props.isTileView) ?\r\n                this.getSubmitButton() :\r\n                React.createElement(\"div\", { className: 'col wl-status text-center' },\r\n                    React.createElement(\"div\", { className: 'col-inner' }, this.getSubmitButton()))));\r\n        }\r\n    };\r\n    /**\r\n     * To get the submit button\r\n     */\r\n    SubmitResponse.prototype.getSubmitButton = function () {\r\n        var isfromStandardisationProvResponse = this.props.standardisationSetupType === enums.StandardisationSetup.ProvisionalResponse;\r\n        var className = isfromStandardisationProvResponse ? 'primary button rounded popup-nav shareProv'\r\n            : 'button primary rounded submit-button';\r\n        var id = isfromStandardisationProvResponse ? 'shareProvResponse_'\r\n            : 'submitSingleResponse_';\r\n        var toolTip = isfromStandardisationProvResponse ?\r\n            localeStore.instance.TranslateText('standardisation-setup.right-container.share-button-tooltip') : '';\r\n        if (this.props.fromMarkScheme) {\r\n            className = ' submit-mark rounded primary';\r\n        }\r\n        else if (this.props.isDisabled) {\r\n            className = className + ' disabled';\r\n        }\r\n        var result = React.createElement(\"button\", null);\r\n        result = React.createElement(\"button\", { id: id + this.props.id, key: 'submitSingleResponse_key_' + this.props.id, disabled: this.props.isDisabled ? true : false, title: !this.props.isDisabled ? toolTip :\r\n                localeStore.instance.TranslateText('marking.worklist.action-buttons.submit-button-not-approved-tooltip'), className: className, onClick: this.onSubmit }, \r\n        // For provisional worklist in standardisationsetup, instead of submit we should show share button\r\n        isfromStandardisationProvResponse ?\r\n            localeStore.instance.TranslateText('standardisation-setup.right-container.share-button') :\r\n            localeStore.instance.TranslateText('marking.worklist.response-data.submit-button'));\r\n        return result;\r\n    };\r\n    /**\r\n     * componentDidMount\r\n     */\r\n    SubmitResponse.prototype.componentDidMount = function () {\r\n        markingStore.instance.addListener(markingStore.MarkingStore.READY_TO_NAVIGATE, this.submitResponseFromMarkscheme);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.MARK_CHANGE_REASON_VISIBILITY_UPDATED, this.showHideMarkChangeReason);\r\n        eCourseWorkFileStore.instance.addListener(eCourseWorkFileStore.ECourseWorkFileStore.FILE_READ_STATUS_UPDATED, this.fileReadStatusUpdated);\r\n    };\r\n    /**\r\n     * componentWillUnmount\r\n     */\r\n    SubmitResponse.prototype.componentWillUnmount = function () {\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.READY_TO_NAVIGATE, this.submitResponseFromMarkscheme);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.MARK_CHANGE_REASON_VISIBILITY_UPDATED, this.showHideMarkChangeReason);\r\n        eCourseWorkFileStore.instance.removeListener(eCourseWorkFileStore.ECourseWorkFileStore.FILE_READ_STATUS_UPDATED, this.fileReadStatusUpdated);\r\n    };\r\n    /**\r\n     * Comparing the props to check the updats are made by self\r\n     * @param {Props} nextProps\r\n     */\r\n    SubmitResponse.prototype.componentWillReceiveProps = function (nextProps) {\r\n        this.isVisible = nextProps.isVisible;\r\n    };\r\n    /**\r\n     * Method to indicate whether to show the sub text for the case where Submit button is disabled;\r\n     * since the subtext needs to be shown only in disabled state\r\n     */\r\n    SubmitResponse.prototype.renderSubTextItem = function () {\r\n        if (this.props.isDisabled) {\r\n            return (React.createElement(\"span\", { className: classNames('', {\r\n                    'awaiting-feedback-msg text-middle small-text': this.props.isDisabled\r\n                }) }, localeStore.instance.TranslateText('marking.worklist.action-buttons.submit-button-suspended-indicator')));\r\n        }\r\n    };\r\n    /**\r\n     * On clicking submit\r\n     */\r\n    SubmitResponse.prototype.onSubmit = function (e) {\r\n        //on submitting simulation response, show a confirmation popup before submit\r\n        if (!applicationActionCreator.checkActionInterrupted()) {\r\n            return;\r\n        }\r\n        if (this.props.standardisationSetupType === enums.StandardisationSetup.ProvisionalResponse) {\r\n            //ActionCreator for showing Share Response Popup\r\n            var navigatePossible = true;\r\n            if (this.props.fromMarkScheme) {\r\n                this.props.stdResponseDetails.totalMarkValue = Number(this.props.updatedTotalMarks);\r\n                var responseNavigationFailureReasons = markingHelper.canNavigateAwayFromCurrentResponse();\r\n                if (responseNavigationFailureReasons.length > 0) {\r\n                    navigatePossible = false;\r\n                    var combinedWarningMessages = combinedWarningPopupHelper.getCombinedWarningMessage(enums.SaveAndNavigate.submit, responseNavigationFailureReasons);\r\n                    markingActionCreator.showResponseNavigationFailureReasons(enums.SaveAndNavigate.submit, combinedWarningMessages);\r\n                }\r\n            }\r\n            if (navigatePossible) {\r\n                standardisationsetupActionCreator.displayShareResponsePopup(this.props.stdResponseDetails, this.props.fromMarkScheme);\r\n                return;\r\n            }\r\n        }\r\n        if (worklistStore.instance.currentWorklistType === enums.WorklistType.simulation) {\r\n            markingActionCreator.showSimulationResponseSubmitConfirmationPopup(this.props.markGroupId, this.props.fromMarkScheme);\r\n            if (!this.props.fromMarkScheme) {\r\n                /* stopping propagation because the parent li has a click event in tile view\r\n                which should not work when submit is clicked\r\n                 */\r\n                e.stopPropagation();\r\n            }\r\n        }\r\n        else if (this.props.fromMarkScheme) {\r\n            var navigatePossible = true;\r\n            var responseNavigationFailureReasons = markingHelper.canNavigateAwayFromCurrentResponse();\r\n            if (responseNavigationFailureReasons.length > 0) {\r\n                navigatePossible = false;\r\n                var combinedWarningMessages = combinedWarningPopupHelper.getCombinedWarningMessage(enums.SaveAndNavigate.submit, responseNavigationFailureReasons);\r\n                markingActionCreator.showResponseNavigationFailureReasons(enums.SaveAndNavigate.submit, combinedWarningMessages);\r\n            }\r\n            if (navigatePossible) {\r\n                busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.submitInResponseScreen);\r\n                markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.submit);\r\n            }\r\n        }\r\n        else {\r\n            var markGroupId = void 0;\r\n            if (this.props.isSubmitAll) {\r\n                markGroupId = 0;\r\n            }\r\n            else {\r\n                markGroupId = this.props.markGroupId;\r\n            }\r\n            submitActionCreator.submitResponseStarted(markGroupId);\r\n            /* stopping propagation because the parent li has a click event in tile view\r\n            which should not work when submit is clicked\r\n             */\r\n            e.stopPropagation();\r\n        }\r\n    };\r\n    return SubmitResponse;\r\n}(PureRenderComponent));\r\nmodule.exports = SubmitResponse;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 373:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/worklist/worklistcomponenthelper.ts ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar worklistValidatorFactory = __webpack_require__(/*! ../../utility/worklistvalidators/worklistvalidatorfactory */ 319);\r\nvar worklistValidatorList = __webpack_require__(/*! ../../utility/worklistvalidators/worklistvalidatorlist */ 304);\r\nvar submitStore = __webpack_require__(/*! ../../stores/submit/submitstore */ 293);\r\nvar customError = __webpack_require__(/*! ../base/customerror */ 398);\r\nvar targetHelper = __webpack_require__(/*! ../../utility/target/targethelper */ 300);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar teamManagementStore = __webpack_require__(/*! ../../stores/teammanagement/teammanagementstore */ 245);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\n/**\r\n * Helper class for worklist\r\n */\r\nvar WorklistComponentHelper = /** @class */ (function () {\r\n    function WorklistComponentHelper() {\r\n    }\r\n    /**\r\n     * Method which returns array of mark group ids to submit\r\n     */\r\n    WorklistComponentHelper.createMarkgroupIdCollectionForLiveSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        var relatedMarkGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            /* looping through each response to determine whether the same is eligible for submit */\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.liveOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    if (response.isWholeResponse) {\r\n                        relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(response.markGroupId));\r\n                    }\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (worklistData &&\r\n                worklistData.responses.count() > 0 &&\r\n                worklistData.responses.filter(function (x) { return x.markGroupId === singleResponseMarkGroupId; }).first().isWholeResponse) {\r\n                relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(singleResponseMarkGroupId));\r\n            }\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        if (relatedMarkGroupIds.length > 0) {\r\n            markGroupIds = markGroupIds.concat(relatedMarkGroupIds);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Raturns the markgroup ids of practice response to submit.\r\n     * @param {PracticeOpenWorklist} worklistData\r\n     * @param {number} singleResponseMarkGroupId\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.createMarkGroupIdCollectionForPracticeSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.practiceOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Raturns the markgroup ids of standardization response to submit.\r\n     * @param {StandardisationOpenWorklist} worklistData\r\n     * @param {number} singleResponseMarkGroupId\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.createMarkGroupIdCollectionForStandardizationSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.standardisationOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Raturns the markgroup ids of directed remark response to submit.\r\n     * @param {StandardisationOpenWorklist} worklistData\r\n     * @param {number} singleResponseMarkGroupId\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.createMarkGroupIdCollectionForDirectedRemarkSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        var relatedMarkGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            /* looping through each response to determine whether the same is eligible for submit */\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.directedRemarkOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    if (response.isWholeResponse) {\r\n                        // grouping related mark-group id's for the whole response.\r\n                        relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(response.markGroupId));\r\n                    }\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (worklistData &&\r\n                worklistData.responses.count() > 0 &&\r\n                worklistData.responses.filter(function (x) { return x.markGroupId === singleResponseMarkGroupId; }).first().isWholeResponse) {\r\n                // grouping related mark-group id's for the whole response.\r\n                relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(singleResponseMarkGroupId));\r\n            }\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        if (relatedMarkGroupIds.length > 0) {\r\n            markGroupIds = markGroupIds.concat(relatedMarkGroupIds);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Raturns the markgroup ids of pooled remark response to submit.\r\n     * @param {PooledRemarkOpenWorklist} worklistData\r\n     * @param {number} singleResponseMarkGroupId\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.createMarkGroupIdCollectionForPooledRemarkSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        var relatedMarkGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            /* looping through each response to determine whether the same is eligible for submit */\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.directedRemarkOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    // grouping related mark-group id's for the whole response.\r\n                    if (response.isWholeResponse) {\r\n                        relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(response.markGroupId));\r\n                    }\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            if (worklistData &&\r\n                worklistData.responses.count() > 0 &&\r\n                worklistData.responses.filter(function (x) { return x.markGroupId === singleResponseMarkGroupId; }).first().isWholeResponse) {\r\n                // grouping related mark-group id's for the whole response.\r\n                relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(singleResponseMarkGroupId));\r\n            }\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        if (relatedMarkGroupIds.length > 0) {\r\n            markGroupIds = markGroupIds.concat(relatedMarkGroupIds);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Method which returns array of mark group ids to submit simulation response/s\r\n     */\r\n    WorklistComponentHelper.createMarkgroupIdCollectionForSimulationSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            /* looping through each response to determine whether the same is eligible for submit */\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.simulationOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Method which returns array of mark group ids to submit\r\n     * @param worklistData\r\n     * @param singleResponseMarkGroupId\r\n     */\r\n    WorklistComponentHelper.createMarkgroupIdCollectionForAtypicalSubmit = function (worklistData, singleResponseMarkGroupId) {\r\n        var markGroupIds = new Array();\r\n        /* Collection of Mark Group Ids of realted RIGs in other QIGs */\r\n        var relatedMarkGroupIds = new Array();\r\n        if (submitStore.instance.getMarkGroupId === 0) {\r\n            /* looping through each response to determine whether the same is eligible for submit */\r\n            worklistData.responses.map(function (response) {\r\n                worklistValidatorFactory.getValidator(worklistValidatorList.atypicalOpen).submitButtonValidate(response);\r\n                if (response.isSubmitEnabled) {\r\n                    relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(response.markGroupId));\r\n                    markGroupIds.push(response.markGroupId);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            relatedMarkGroupIds = relatedMarkGroupIds.concat(worklistStore.instance.getRelatedMarkGroupIdsForWholeResponse(singleResponseMarkGroupId));\r\n            markGroupIds.push(singleResponseMarkGroupId);\r\n        }\r\n        if (relatedMarkGroupIds.length > 0) {\r\n            markGroupIds = markGroupIds.concat(relatedMarkGroupIds);\r\n        }\r\n        return markGroupIds;\r\n    };\r\n    /**\r\n     * Get the error message key to show when submit response fails\r\n     */\r\n    WorklistComponentHelper.showMessageOnSubmitResponse = function (submittedResponseCount) {\r\n        var messageKey = '';\r\n        var messageHeaderKey = undefined;\r\n        if (submitStore.instance.getErrorCode > 0) {\r\n            var isInStandardisationworklist = worklistStore.instance.currentWorklistType === enums.WorklistType.practice ||\r\n                worklistStore.instance.currentWorklistType === enums.WorklistType.standardisation ||\r\n                worklistStore.instance.currentWorklistType === enums.WorklistType.secondstandardisation;\r\n            // If standardisation worklist, then no need to check the not approved status\r\n            if (submitStore.instance.getSubmitResponseReturn.examinerApprovalStatus === enums.ExaminerApproval.Suspended) {\r\n                if (submitStore.instance.getSubmitResponseReturn.hasQualityFeedbackOutstanding) {\r\n                    messageKey = 'marking.worklist.approval-status-changed-dialog.body-quality-feedback';\r\n                }\r\n                else {\r\n                    messageKey = 'marking.worklist.approval-status-changed-dialog.body';\r\n                }\r\n                messageHeaderKey = submittedResponseCount === 0 ?\r\n                    'marking.worklist.response-submission-error-dialog.header' : 'marking.worklist.approval-status-changed-dialog.header';\r\n            }\r\n            else if (submitStore.instance.getSubmitResponseReturn.examinerApprovalStatus === enums.ExaminerApproval.NotApproved &&\r\n                !isInStandardisationworklist &&\r\n                worklistStore.instance.currentWorklistType !== enums.WorklistType.simulation) {\r\n                messageKey = 'marking.worklist.approval-status-changed-dialog.body';\r\n                messageHeaderKey = submittedResponseCount === 0 ?\r\n                    'marking.worklist.response-submission-error-dialog.header' : 'marking.worklist.approval-status-changed-dialog.header';\r\n            }\r\n            else {\r\n                switch (submitStore.instance.getErrorCode) {\r\n                    case enums.SubmitResponseErrorCode.responseNotFullyMarked:\r\n                    case enums.SubmitResponseErrorCode.responseHasExceptions:\r\n                    case enums.SubmitResponseErrorCode.allSLAOsNotAnnotated:\r\n                    case enums.SubmitResponseErrorCode.allPagesNotAnnotated:\r\n                    case enums.SubmitResponseErrorCode.onHold:\r\n                    case enums.SubmitResponseErrorCode.mandateMarkschemeNotCommented:\r\n                    case enums.SubmitResponseErrorCode.notAllFilesViewed:\r\n                    case enums.SubmitResponseErrorCode.hasZoningException:\r\n                        messageHeaderKey = submitStore.instance.getMarkGroupId > 0 ?\r\n                            'marking.worklist.submit-response-dialog.header' :\r\n                            'marking.worklist.submit-all-responses-dialog.header';\r\n                        messageKey = submitStore.instance.getMarkGroupId > 0 ?\r\n                            'marking.worklist.response-submission-error-dialog.body-single-response-not-submitted' :\r\n                            'marking.worklist.response-submission-error-dialog.body-some-responses-not-submitted';\r\n                        break;\r\n                    case enums.SubmitResponseErrorCode.responseAlreadySubmitted:\r\n                        if (submitStore.instance.getMarkGroupId > 0) {\r\n                            messageHeaderKey = 'marking.worklist.submit-response-dialog.header';\r\n                            messageKey = 'marking.worklist.response-submission-error-dialog.body-single-response-already-submitted';\r\n                        }\r\n                        else {\r\n                            messageHeaderKey = 'marking.worklist.submit-all-responses-dialog.header';\r\n                            messageKey = 'marking.worklist.response-submission-error-dialog.body-some-responses-already-submitted';\r\n                        }\r\n                        break;\r\n                    case enums.SubmitResponseErrorCode.examinerNotApproved:\r\n                        messageKey = 'marking.worklist.approval-status-changed-dialog.body-relatedQIG';\r\n                        messageHeaderKey = submittedResponseCount === 0 ?\r\n                            'marking.worklist.response-submission-error-dialog.header' :\r\n                            'marking.worklist.approval-status-changed-dialog.header';\r\n                        break;\r\n                    case enums.SubmitResponseErrorCode.examinerSuspended:\r\n                        if (submitStore.instance.getSubmitResponseReturn.hasQualityFeedbackOutstanding) {\r\n                            messageKey = 'marking.worklist.approval-status-changed-dialog.body-quality-feedback';\r\n                        }\r\n                        else {\r\n                            messageKey = 'marking.worklist.approval-status-changed-dialog.body';\r\n                        }\r\n                        messageHeaderKey = submittedResponseCount === 0 ?\r\n                            'marking.worklist.response-submission-error-dialog.header' :\r\n                            'marking.worklist.approval-status-changed-dialog.header';\r\n                        break;\r\n                    case enums.SubmitResponseErrorCode.examinerWithdrawn:\r\n                        //This code added for whole response case and the examinerApprovalStatus contains only current qig’s status, \r\n                        //but SubmitResponseErrorCode contains status against any qig etc.\r\n                        messageKey = 'marking.worklist.approval-status-changed-dialog.body-withdrawn';\r\n                        messageHeaderKey = submittedResponseCount === 0 ?\r\n                            'marking.worklist.response-submission-error-dialog.header' :\r\n                            'marking.worklist.approval-status-changed-dialog.header';\r\n                        break;\r\n                    default:\r\n                        messageKey = '';\r\n                }\r\n            }\r\n        }\r\n        if (messageKey !== '' && submittedResponseCount === 0) {\r\n            /** Creating custom error message to show */\r\n            var submitErrorMessage = {\r\n                messageHeader: messageHeaderKey,\r\n                messageContent: messageKey\r\n            };\r\n            return submitErrorMessage;\r\n        }\r\n        else if (messageKey !== '') {\r\n            /** Creating custom error message to show */\r\n            var submitResponseError = new customError('Submit', messageKey, messageHeaderKey, false);\r\n            window.onerror('', '', null, null, submitResponseError);\r\n            return undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Sets the auto approval Secondary content\r\n     * @param submittedResponseCount\r\n     */\r\n    WorklistComponentHelper.getAutoApprovalSecondaryContent = function (submittedResponseCount) {\r\n        var deleteResponseOnAutoApproval = targetHelper.isResponsesDeletedOnAutoApproval(submittedResponseCount);\r\n        return ((targetHelper.currentMarkingMode === enums.MarkingMode.ES_TeamApproval\r\n            && qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember === false) ?\r\n            ((deleteResponseOnAutoApproval === false) ?\r\n                'marking.worklist.auto-approved-dialog.body-standardisation'\r\n                : 'marking.worklist.auto-approved-dialog.body-excess-second-standardisation-responses-removed')\r\n            : ((targetHelper.currentMarkingMode === enums.MarkingMode.Approval\r\n                && qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember === false) ?\r\n                ((deleteResponseOnAutoApproval === false) ?\r\n                    'marking.worklist.auto-approved-dialog.body-standardisation'\r\n                    : 'marking.worklist.auto-approved-dialog.body-excess-standardisation-responses-removed')\r\n                : ((deleteResponseOnAutoApproval === false) ?\r\n                    'marking.worklist.auto-approved-dialog.body-stm-standardisation'\r\n                    : 'marking.worklist.auto-approved-dialog.body-excess-stm-standardisation-responses-removed')));\r\n    };\r\n    /**\r\n     * Returns the markgroup id collection for response submission\r\n     * @param {enums.MarkingMode} markingMode\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.getMarkgroupIdCollectionForSubmit = function (markingMode) {\r\n        switch (markingMode) {\r\n            case enums.MarkingMode.LiveMarking:\r\n                if (worklistStore.instance.currentWorklistType !== enums.WorklistType.atypical) {\r\n                    return WorklistComponentHelper.createMarkgroupIdCollectionForLiveSubmit(worklistStore.instance.getLiveOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n                }\r\n                return WorklistComponentHelper.createMarkgroupIdCollectionForAtypicalSubmit(worklistStore.instance.getAtypicalOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n            case enums.MarkingMode.Practice:\r\n                return WorklistComponentHelper.createMarkGroupIdCollectionForPracticeSubmit(worklistStore.instance.getPracticeOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n            case enums.MarkingMode.Approval:\r\n                return WorklistComponentHelper.createMarkGroupIdCollectionForStandardizationSubmit(worklistStore.instance.getStandardisationOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n            case enums.MarkingMode.ES_TeamApproval:\r\n                return WorklistComponentHelper.createMarkGroupIdCollectionForStandardizationSubmit(worklistStore.instance.getSecondStandardisationOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n            case enums.MarkingMode.Remarking:\r\n                if (worklistStore.instance.isDirectedRemark) {\r\n                    return WorklistComponentHelper.createMarkGroupIdCollectionForDirectedRemarkSubmit(worklistStore.instance.getDirectedRemarkOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n                }\r\n                else {\r\n                    return WorklistComponentHelper.createMarkGroupIdCollectionForPooledRemarkSubmit(worklistStore.instance.getPooledRemarkOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n                }\r\n            case enums.MarkingMode.Simulation:\r\n                return WorklistComponentHelper.createMarkgroupIdCollectionForSimulationSubmit(worklistStore.instance.getSimulationOpenWorklistDetails, submitStore.instance.getMarkGroupId);\r\n        }\r\n    };\r\n    /**\r\n     * Get remark request type\r\n     * @param worklistType\r\n     */\r\n    WorklistComponentHelper.getRemarkRequestType = function (worklistType) {\r\n        return worklistType === enums.WorklistType.directedRemark || worklistType === enums.WorklistType.pooledRemark ?\r\n            worklistStore.instance.getRemarkRequestType : enums.RemarkRequestType.Unknown;\r\n    };\r\n    /**\r\n     * Get is directed remark\r\n     * @param worklistType\r\n     */\r\n    WorklistComponentHelper.getIsDirectedRemark = function (worklistType) {\r\n        return worklistType === enums.WorklistType.directedRemark || worklistType === enums.WorklistType.pooledRemark ?\r\n            worklistStore.instance.isDirectedRemark : false;\r\n    };\r\n    /**\r\n     * Method which returns whether the quality feedback related message should be shown on submitting\r\n     * seeds accurately/within tolerance\r\n     */\r\n    WorklistComponentHelper.shouldShowQualityFeedbackMessage = function () {\r\n        var _automaticQualityFeedback = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.AutomaticQualityFeedback, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        var _seedSubmissionStatus = submitStore.instance.getSubmitResponseReturn.seedSubmissionStatus;\r\n        return _automaticQualityFeedback &&\r\n            _seedSubmissionStatus === enums.SeedSubmissionStatus.SeedsSubmittedWithinToleranceOrAccurately;\r\n    };\r\n    /**\r\n     * Get the tab details that needs to be shown in the live worklist\r\n     * @param targetSummary\r\n     */\r\n    WorklistComponentHelper.getLiveWorklistTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        // Only closed tab is displaying in help examiners,\r\n        if (teamManagementStore.instance.selectedTeamManagementTab !== enums.TeamManagement.HelpExaminers) {\r\n            worklistTabDetails.push({\r\n                responseMode: enums.ResponseMode.open,\r\n                responseCount: targetSummary.examinerProgress.openResponsesCount\r\n            });\r\n            worklistTabDetails.push({\r\n                responseMode: enums.ResponseMode.pending,\r\n                responseCount: targetSummary.examinerProgress.pendingResponsesCount\r\n            });\r\n        }\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.closed,\r\n            responseCount: targetSummary.examinerProgress.closedResponsesCount\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Get the tab details that needs to be shown in the atypical worklist\r\n     * @param targetSummary\r\n     */\r\n    WorklistComponentHelper.getAtypicalWorklistTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.open,\r\n            responseCount: (isNaN(targetSummary.examinerProgress.atypicalOpenResponsesCount)\r\n                ? 0 : targetSummary.examinerProgress.atypicalOpenResponsesCount)\r\n        });\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.pending,\r\n            responseCount: (isNaN(targetSummary.examinerProgress.atypicalPendingResponsesCount)\r\n                ? 0 : targetSummary.examinerProgress.atypicalPendingResponsesCount)\r\n        });\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.closed,\r\n            responseCount: (isNaN(targetSummary.examinerProgress.atypicalClosedResponsesCount)\r\n                ? 0 : targetSummary.examinerProgress.atypicalClosedResponsesCount)\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Get the tab details that needs to be shown in the live worklist\r\n     * @param targetSummary\r\n     */\r\n    WorklistComponentHelper.getPracticeWorklistTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        if (!targetSummary.isTargetCompleted) {\r\n            worklistTabDetails.push({\r\n                responseMode: enums.ResponseMode.open,\r\n                responseCount: targetSummary.examinerProgress.openResponsesCount\r\n            });\r\n        }\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.closed,\r\n            responseCount: targetSummary.examinerProgress.closedResponsesCount\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Returns StandardisationWorklist TabDetails\r\n     * @param {markingTargetSummary} targetSummary\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.getStandardisationWorklistTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        if (markerOperationModeFactory.operationMode.shouldDisplayStandardisationOpenTab(targetSummary)) {\r\n            if (targetHelper.isESTargetCompleted(enums.MarkingMode.Approval) === false) {\r\n                worklistTabDetails.push({\r\n                    responseMode: enums.ResponseMode.open,\r\n                    responseCount: targetSummary.examinerProgress.openResponsesCount\r\n                });\r\n            }\r\n        }\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.closed,\r\n            responseCount: targetSummary.examinerProgress.closedResponsesCount\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Returns SecondStandardization TabDetails\r\n     * @param {markingTargetSummary} targetSummary\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.getSecondStandardizationTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        if (markerOperationModeFactory.operationMode.shouldDisplayStandardisationOpenTab(targetSummary)) {\r\n            if (targetHelper.isESTargetCompleted(enums.MarkingMode.ES_TeamApproval) === false) {\r\n                worklistTabDetails.push({\r\n                    responseMode: enums.ResponseMode.open,\r\n                    responseCount: targetSummary.examinerProgress.openResponsesCount\r\n                });\r\n            }\r\n        }\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.closed,\r\n            responseCount: targetSummary.examinerProgress.closedResponsesCount\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Get the tab details that needs to be shown in the remark worklist\r\n     * @param targetSummary\r\n     */\r\n    WorklistComponentHelper.getRemarkWorklistTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.open,\r\n            responseCount: targetSummary.examinerProgress.openResponsesCount\r\n        });\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.pending,\r\n            responseCount: targetSummary.examinerProgress.pendingResponsesCount\r\n        });\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.closed,\r\n            responseCount: targetSummary.examinerProgress.closedResponsesCount\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Returns the worklist tab details\r\n     * @param {enums.MarkingMode} markingMode\r\n     * @returns\r\n     */\r\n    WorklistComponentHelper.getWorklistTabDetails = function (markingMode, isTargetRefresh) {\r\n        if (isTargetRefresh === void 0) { isTargetRefresh = false; }\r\n        var worklistTabDetails = [];\r\n        var markingTargetsSummary;\r\n        /** Getting  markingTargetsSummary from worklist store,\r\n         * it will be updated if the worklist response collection changes\r\n         */\r\n        if (isTargetRefresh) {\r\n            /** If calling from refreshTargetProgress in worklist, will return summary data from targetSummaryStore */\r\n            markingTargetsSummary = targetHelper.getExaminerMarkingTargetProgress;\r\n        }\r\n        else {\r\n            /** If calling from markingmodechanged in worklist, will return summary data from workliststore\r\n             * worklist target summary collection is updated based on resposecount in the worklist\r\n             */\r\n            markingTargetsSummary = worklistStore.instance.getExaminerMarkingTargetProgress(markerOperationModeFactory.operationMode.isSelectedExaminerSTM);\r\n        }\r\n        switch (markingMode) {\r\n            case enums.MarkingMode.LiveMarking:\r\n                if (worklistStore.instance.currentWorklistType === enums.WorklistType.atypical) {\r\n                    worklistTabDetails = this.getAtypicalWorklistTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.LiveMarking; }).first());\r\n                }\r\n                else {\r\n                    worklistTabDetails = this.getLiveWorklistTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.LiveMarking; }).first());\r\n                }\r\n                break;\r\n            case enums.MarkingMode.Practice:\r\n                worklistTabDetails = this.getPracticeWorklistTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.Practice; }).first());\r\n                break;\r\n            case enums.MarkingMode.Approval:\r\n                worklistTabDetails = this.getStandardisationWorklistTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.Approval; }).first());\r\n                break;\r\n            case enums.MarkingMode.ES_TeamApproval:\r\n                worklistTabDetails = this.getSecondStandardizationTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.ES_TeamApproval; }).first());\r\n                break;\r\n            case enums.MarkingMode.Remarking:\r\n                worklistTabDetails = this.getRemarkWorklistTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.Remarking\r\n                    && x.remarkRequestTypeID === worklistStore.instance.getRemarkRequestType; }).first());\r\n                break;\r\n            case enums.MarkingMode.Simulation:\r\n                worklistTabDetails = this.getSimulationWorklistTabDetails(markingTargetsSummary.filter(function (x) { return x.markingModeID === enums.MarkingMode.Simulation; }).first());\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return worklistTabDetails;\r\n    };\r\n    /**\r\n     * Get the tab details that needs to be shown in the simulation worklist\r\n     * @param targetSummary\r\n     */\r\n    WorklistComponentHelper.getSimulationWorklistTabDetails = function (targetSummary) {\r\n        var worklistTabDetails = [];\r\n        worklistTabDetails.push({\r\n            responseMode: enums.ResponseMode.open,\r\n            responseCount: targetSummary.examinerProgress.openResponsesCount\r\n        });\r\n        return worklistTabDetails;\r\n    };\r\n    return WorklistComponentHelper;\r\n}());\r\nmodule.exports = WorklistComponentHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 382:
/* no static exports found */
/* all exports used */
/*!***********************************!*\
  !*** ./src/components/footer.tsx ***!
  \***********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ./base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../stores/locale/localestore */ 226);\r\nvar ConfirmationDialog = __webpack_require__(/*! ./utility/confirmationdialog */ 408);\r\nvar userOptionsHelper = __webpack_require__(/*! ../utility/useroption/useroptionshelper */ 265);\r\nvar logoutArgument = __webpack_require__(/*! ../dataservices/authentication/logoutargument */ 416);\r\nvar logoutActionCreator = __webpack_require__(/*! ../actions/logout/logoutactioncreator */ 396);\r\nvar loginSession = __webpack_require__(/*! ../app/loginsession */ 252);\r\nvar loginStore = __webpack_require__(/*! ../stores/login/loginstore */ 286);\r\nvar useroptionKeys = __webpack_require__(/*! ../utility/useroption/useroptionkeys */ 264);\r\nvar userOptionStore = __webpack_require__(/*! ../stores/useroption/useroptionstore */ 302);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ./utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar enums = __webpack_require__(/*! ./utility/enums */ 225);\r\nvar marksAndAnnotationsSaveHelper = __webpack_require__(/*! ../utility/marking/marksandannotationssavehelper */ 295);\r\nvar markingStore = __webpack_require__(/*! ../stores/marking/markingstore */ 236);\r\nvar markingActionCreator = __webpack_require__(/*! ../actions/marking/markingactioncreator */ 246);\r\nvar worklistStore = __webpack_require__(/*! ../stores/worklist/workliststore */ 231);\r\nvar BusyIndicator = __webpack_require__(/*! ./utility/busyindicator/busyindicator */ 312);\r\nvar navigationHelper = __webpack_require__(/*! ./utility/navigation/navigationhelper */ 248);\r\nvar navigationStore = __webpack_require__(/*! ../stores/navigation/navigationstore */ 275);\r\nvar applicationActionCreator = __webpack_require__(/*! ../actions/applicationoffline/applicationactioncreator */ 256);\r\nvar GenericDialog = __webpack_require__(/*! ./utility/genericdialog */ 317);\r\nvar saveMarksAndAnnotationsNonRecoverableErrorDialogContents = __webpack_require__(/*! ./utility/savemarksandannotations/savemarksandannotationsnonrecoverableerrordialogcontents */ 367);\r\nvar htmlUtilities = __webpack_require__(/*! ../utility/generic/htmlutilities */ 243);\r\nvar worklistActionCreator = __webpack_require__(/*! ../actions/worklist/worklistactioncreator */ 261);\r\nvar qigStore = __webpack_require__(/*! ../stores/qigselector/qigstore */ 230);\r\nvar keyDownHelper = __webpack_require__(/*! ../utility/generic/keydownhelper */ 258);\r\nvar qigActionCreator = __webpack_require__(/*! ../actions/qigselector/qigselectoractioncreator */ 253);\r\nvar messageStore = __webpack_require__(/*! ../stores/message/messagestore */ 240);\r\nvar exceptionStore = __webpack_require__(/*! ../stores/exception/exceptionstore */ 277);\r\nvar popUpDisplayActionCreator = __webpack_require__(/*! ../actions/popupdisplay/popupdisplayactioncreator */ 328);\r\nvar examinerStore = __webpack_require__(/*! ../stores/markerinformation/examinerstore */ 259);\r\nvar responseActionCreator = __webpack_require__(/*! ../actions/response/responseactioncreator */ 257);\r\nvar qualityFeedbackHelper = __webpack_require__(/*! ../utility/qualityfeedback/qualityfeedbackhelper */ 309);\r\nvar colouredAnnotationsHelper = __webpack_require__(/*! ../utility/stamppanel/colouredannotationshelper */ 314);\r\nvar submitStore = __webpack_require__(/*! ../stores/submit/submitstore */ 293);\r\nvar worklistComponentHelper = __webpack_require__(/*! ./worklist/worklistcomponenthelper */ 373);\r\nvar submitHelper = __webpack_require__(/*! ./utility/submit/submithelper */ 282);\r\nvar targetHelper = __webpack_require__(/*! ../utility/target/targethelper */ 300);\r\nvar busyIndicatorActionCreator = __webpack_require__(/*! ../actions/busyindicator/busyindicatoractioncreator */ 279);\r\nvar busyIndicatorStore = __webpack_require__(/*! ../stores/busyindicator/busyindicatorstore */ 326);\r\nvar messagingActionCreator = __webpack_require__(/*! ../actions/messaging/messagingactioncreator */ 268);\r\nvar messageHelper = __webpack_require__(/*! ./utility/message/messagehelper */ 283);\r\nvar stdSetupPermissionHelper = __webpack_require__(/*! ../utility/standardisationsetup/standardisationsetuppermissionhelper */ 332);\r\nvar responseHelper = __webpack_require__(/*! ./utility/responsehelper/responsehelper */ 249);\r\nvar standardisationSetupFactory = __webpack_require__(/*! ../utility/standardisationsetup/standardisationsetupfactory */ 336);\r\n/* tslint:disable:variable-name */\r\nvar IdleTimer = __webpack_require__(/*! react-idle-timer */ 43).default;\r\nvar applicationStore = __webpack_require__(/*! ../stores/applicationoffline/applicationstore */ 247);\r\nvar submitActionCreator = __webpack_require__(/*! ../actions/submit/submitactioncreator */ 297);\r\nvar responseStore = __webpack_require__(/*! ../stores/response/responsestore */ 235);\r\nvar storageAdapterHelper = __webpack_require__(/*! ../dataservices/storageadapters/storageadapterhelper */ 269);\r\nvar teamManagementStore = __webpack_require__(/*! ../stores/teammanagement/teammanagementstore */ 245);\r\nvar userInfoActionCreator = __webpack_require__(/*! ../actions/userinfo/userinfoactioncreator */ 255);\r\nvar loadContainerActionCreator = __webpack_require__(/*! ../actions/navigation/loadcontaineractioncreator */ 397);\r\nvar operationModeHelper = __webpack_require__(/*! ./utility/userdetails/userinfo/operationmodehelper */ 289);\r\nvar worklistHistoryInfo = __webpack_require__(/*! ../utility/breadcrumb/worklisthistoryinfo */ 456);\r\nvar teamManagementHistoryInfo = __webpack_require__(/*! ../utility/breadcrumb/teammanagementhistoryinfo */ 455);\r\nvar historyItem = __webpack_require__(/*! ../utility/breadcrumb/historyitem */ 454);\r\nvar teamManagementActionCreator = __webpack_require__(/*! ../actions/teammanagement/teammanagementactioncreator */ 263);\r\nvar markingCheckActionCreator = __webpack_require__(/*! ../actions/markingcheck/markingcheckactioncreator */ 311);\r\nvar rememberQig = __webpack_require__(/*! ../stores/useroption/typings/rememberqig */ 446);\r\nvar userOptionKeys = __webpack_require__(/*! ../utility/useroption/useroptionkeys */ 264);\r\nvar WarningMessagePopup = __webpack_require__(/*! ./teammanagement/warningmessagepopup */ 407);\r\nvar LocksInQigPopup = __webpack_require__(/*! ./qigselector/locksinqigpopup */ 399);\r\nvar ccActionCreator = __webpack_require__(/*! ../actions/configurablecharacteristics/configurablecharacteristicsactioncreator */ 310);\r\nvar Promise = __webpack_require__(/*! es6-promise */ 41);\r\nvar stringHelper = __webpack_require__(/*! ../utility/generic/stringhelper */ 254);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar simulationModeHelper = __webpack_require__(/*! ../utility/simulation/simulationmodehelper */ 324);\r\nvar stringFormatHelper = __webpack_require__(/*! ../utility/stringformat/stringformathelper */ 250);\r\nvar ccStore = __webpack_require__(/*! ../stores/configurablecharacteristics/configurablecharacteristicsstore */ 341);\r\nvar ecourseworkHelper = __webpack_require__(/*! ./utility/ecoursework/ecourseworkhelper */ 238);\r\nvar ecourseworkFileStore = __webpack_require__(/*! ../stores/response/digital/ecourseworkfilestore */ 278);\r\nvar acetatesActionCreator = __webpack_require__(/*! ../actions/acetates/acetatesactioncreator */ 393);\r\nvar configurableCharacteristicHelper = __webpack_require__(/*! ../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicNames = __webpack_require__(/*! ../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar targetSummaryStore = __webpack_require__(/*! ../stores/worklist/targetsummarystore */ 305);\r\nvar imageZoneStore = __webpack_require__(/*! ../stores/imagezones/imagezonestore */ 376);\r\nvar auditLoggingHelper = __webpack_require__(/*! ./utility/auditlogger/auditlogginghelper */ 298);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar MultiOptionConfirmationDialog = __webpack_require__(/*! ./utility/multioptionconfirmationdialog */ 338);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../actions/standardisationsetup/standardisationactioncreator */ 251);\r\nvar userinfostore = __webpack_require__(/*! ../stores/userinfo/userinfostore */ 244);\r\nvar genericRadioButtonItems = __webpack_require__(/*! ./utility/genericradiobuttonitems */ 363);\r\nvar GenericPopupWithRadioButton = __webpack_require__(/*! ./utility/genericpopupwithradiobuttons */ 362);\r\nvar genericCheckBoxItems = __webpack_require__(/*! ./utility/genericcheckboxitems */ 409);\r\nvar GenericPopupWithCheckBoxes = __webpack_require__(/*! ./utility/genericpopupwithcheckboxes */ 410);\r\nvar awardingHelper = __webpack_require__(/*! ./utility/awarding/awardinghelper */ 360);\r\nvar awardingStore = __webpack_require__(/*! ../stores/awarding/awardingstore */ 270);\r\nvar standardisationSetupHistoryInfo = __webpack_require__(/*! ../utility/breadcrumb/standardisationsetuphistoryinfo */ 418);\r\nvar Footer = /** @class */ (function (_super) {\r\n    __extends(Footer, _super);\r\n    /**\r\n     * Constructor\r\n     * @param {Props} props\r\n     * @param {State} state\r\n     */\r\n    function Footer(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        // Indicates if logout has been triggered\r\n        _this._onLogoutTriggered = false;\r\n        _this._failureReason = enums\r\n            .ResponseNavigateFailureReason.None;\r\n        _this.expiredMarkGroupId = 0;\r\n        _this.currentSaveMarksAndAnnotationTriggeringPoint = undefined;\r\n        // variable for save marks and annotations dialog contents\r\n        _this.saveMarksAndAnnotationsErrorDialogContents = new saveMarksAndAnnotationsNonRecoverableErrorDialogContents(false);\r\n        // variable to save examiner Approval status\r\n        _this.examinerApprovalStatus = enums\r\n            .SaveMarksAndAnnotationErrorCode.None;\r\n        //variable to know where the reponse is navigated to\r\n        _this.navigateReponse = enums.SaveAndNavigate.none;\r\n        // Holds the Pop data for displaying the contents of popup\r\n        _this.popUpData = {};\r\n        // Indicates if logout has been triggered through Idle TimeOut\r\n        _this._isAutoLogOut = false;\r\n        // Holds the idle time out value in milli seconds -- default:10 mins\r\n        _this._idleTimeOut = 600000;\r\n        //  This will hold the mandatory message checking trigger points\r\n        _this.mandatoryMessageTriggeringPoint = enums.TriggerPoint.None;\r\n        _this.isConcurrentSessionActive = false;\r\n        _this.storageAdapterHelper = new storageAdapterHelper();\r\n        _this.messageDetails = { messageHeader: '', messageString: '' };\r\n        _this.triggerPointAfterClose = 0;\r\n        _this.offlineErrorMessage = null;\r\n        _this.submitMessageErrorPopupContent = undefined;\r\n        _this.copyMarksAsDefinitiveSelected = true;\r\n        _this.classifyResponseDetails = undefined;\r\n        _this.reclassifyResponseDetails = undefined;\r\n        _this.reuseResponseDetails = undefined;\r\n        _this.isClassifyResponseOkButtonDisabled = true;\r\n        _this.concurrentSaveFailArea = enums.PageContainers.None;\r\n        /**\r\n         * Fires after email save\r\n         */\r\n        _this.userInfoSaved = function () {\r\n            _this.setState({\r\n                isSaveEmailMessageDisplaying: true\r\n            });\r\n        };\r\n        /**\r\n         * Email save success message ok click\r\n         */\r\n        _this.onOkClickOfEmailSucessMessage = function () {\r\n            _this.setState({\r\n                isSaveEmailMessageDisplaying: false\r\n            });\r\n        };\r\n        /**\r\n         * Method to be invoked when a ExamBody CC is loaded.\r\n         */\r\n        _this.onExamBodyCCLoaded = function () {\r\n            // show locks and simulation exited popup if it is not already shown and exambodycc is loaded\r\n            _this.setState({\r\n                reRenderLocksInQigPopUp: _this.state.reRenderLocksInQigPopUp && ccStore.instance.isExamBodyCCLoaded,\r\n                renderedOn: Date.now(),\r\n                showSimulationExitedPopup: _this.state.showSimulationExitedPopup && ccStore.instance.isExamBodyCCLoaded\r\n            });\r\n        };\r\n        /**\r\n         * Updates the Marker information panel.\r\n         */\r\n        _this.updateMarkerInformationPanel = function () {\r\n            // Check the Marker got with drawn from the QIG, If So show the message\r\n            if (examinerStore.instance.getMarkerInformation.approvalStatus ===\r\n                enums.ExaminerApproval.Withdrawn) {\r\n                if (qigStore.instance.getOverviewData) {\r\n                    var currentQig = qigStore.instance.getOverviewData.qigSummary\r\n                        .filter(function (qig) {\r\n                        return qig.examinerRoleId ===\r\n                            examinerStore.instance.getMarkerInformation.examinerRoleId;\r\n                    })\r\n                        .first();\r\n                    // removing entry from recent history\r\n                    teamManagementActionCreator.removeHistoryItem(currentQig ? currentQig.markSchemeGroupId : 0);\r\n                }\r\n                _this.setState({ isWithdrawnResponseError: true, isBusy: false });\r\n            }\r\n        };\r\n        /**\r\n         * Updates qig selector if the examiner session is closed for the qig.\r\n         */\r\n        _this.updateQigForSessionClose = function () {\r\n            // Check the Marker got with drawn from the QIG, If So show the message\r\n            _this.setState({ isQigsessionClosedError: true, isBusy: false });\r\n        };\r\n        /**\r\n         * On response submission started\r\n         */\r\n        _this.onSubmitResponseStarted = function () {\r\n            /**\r\n             * for submit all the markgroup id will always be zero\r\n             */\r\n            if (submitStore.instance.getMarkGroupId > 0) {\r\n                _this.submitConfirmationDialogueContent = localeStore.instance.TranslateText('marking.worklist.submit-response-dialog.body');\r\n                _this.submitConfirmationDialogueHeader = localeStore.instance.TranslateText('marking.worklist.submit-response-dialog.header');\r\n            }\r\n            else {\r\n                _this.submitConfirmationDialogueContent = localeStore.instance.TranslateText('marking.worklist.submit-all-responses-dialog.body');\r\n                _this.submitConfirmationDialogueHeader = localeStore.instance.TranslateText('marking.worklist.submit-all-responses-dialog.header');\r\n            }\r\n            _this.setConfirmationDialogueState(true);\r\n        };\r\n        /**\r\n         * Show busy indicator when submit is clicked in live open worklist\r\n         */\r\n        _this.setBusyIndicator = function () {\r\n            _this.setState({\r\n                isBusy: busyIndicatorStore.instance.getBusyIndicatorInvoker ===\r\n                    enums.BusyIndicatorInvoker.none\r\n                    ? false\r\n                    : true\r\n            });\r\n        };\r\n        /**\r\n         * hiding busy indicator\r\n         */\r\n        _this.resetBusyIndicator = function () {\r\n            _this.setState({\r\n                isBusy: busyIndicatorStore.instance.getBusyIndicatorInvoker !==\r\n                    enums.BusyIndicatorInvoker.none\r\n                    ? false\r\n                    : true\r\n            });\r\n        };\r\n        /**\r\n         * hiding busy indicator on ok click of validation of std setup\r\n         */\r\n        _this.resetBusyIndicatorStdSetupNotComplete = function () {\r\n            if (standardisationSetupStore.instance.iscompleteStandardisationSuccess === false) {\r\n                _this.setState({\r\n                    isBusy: busyIndicatorStore.instance.getBusyIndicatorInvoker ===\r\n                        enums.BusyIndicatorInvoker.none\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Marks retrieval event.\r\n         */\r\n        _this.marksRetrieved = function (markGroupId) {\r\n            if ((markingStore.instance.currentResponseMode === enums.ResponseMode.open ||\r\n                markingStore.instance.currentResponseMode === enums.ResponseMode.pending) &&\r\n                !markerOperationModeFactory.operationMode.isTeamManagementMode) {\r\n                var isColourUpdated = colouredAnnotationsHelper.updateAnnotationColourIfNeeded(markGroupId);\r\n                if (isColourUpdated) {\r\n                    // Updating the queue to let know the background process to save the dirty marks and annotations\r\n                    marksAndAnnotationsSaveHelper.updateMarksAndAnnotationsQueue();\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Handles the action event while message priority updation.\r\n         */\r\n        _this.messagePriorityUpdate = function () {\r\n            _this.setState({ doShowMandatoryMessageValidationPopup: false });\r\n        };\r\n        /**\r\n         * Updates user session data by changing the logged_out status to 1.\r\n         * logged_out status 1 means user logged out properly by clicking on the\r\n         * log out button.\r\n         */\r\n        _this.updateUserSession = function () {\r\n            /**\r\n             * Trigger save mark for the currently selected item when logging out\r\n             */\r\n            if (markingStore.instance.isMarkingInProgress) {\r\n                markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.toLogout);\r\n            }\r\n            else {\r\n                /**\r\n                 * navigating from a response which is in view mode doesn't require to call save marks\r\n                 */\r\n                var logoutData = new logoutArgument();\r\n                logoutData.MarkingSessionTrackingId = parseInt(loginSession.MARKING_SESSION_TRACKING_ID);\r\n                logoutActionCreator.updateUserSession(logoutData);\r\n            }\r\n        };\r\n        /**\r\n         * setting login invalid state.\r\n         */\r\n        _this.onConcurrentSessionActive = function () {\r\n            _this.isConcurrentSessionActive = true;\r\n            _this.clearSession();\r\n        };\r\n        /**\r\n         * Clears the session after user option saved and logged_out status updated.\r\n         */\r\n        _this.clearSession = function () {\r\n            window.removeEventListener('beforeunload', navigationHelper.onBeforeWindowUnload);\r\n            /* tslint:disable:no-string-literal */\r\n            if (_this.isConcurrentSessionActive) {\r\n                window.sessionStorage['invaliduser'] = 'true';\r\n            }\r\n            else if (_this._isAutoLogOut) {\r\n                window.sessionStorage['autologout'] = 'true';\r\n            }\r\n            /* tslint:enable:no-string-literal */\r\n            userOptionsHelper.resetTokensAndRedirect();\r\n            navigationHelper.loadLoginPage();\r\n        };\r\n        /**\r\n         *  clear marks and annotations queue entry and update isDirty fields\r\n         */\r\n        _this.onSaveMarksAndAnnotations = function (markGroupId, saveMarksAndAnnotationTriggeringPoint, queueOperation, isnetworkerror) {\r\n            var saveErrorCode = markingStore.instance.getSaveMarksAndAnnotationErrorCode(markGroupId);\r\n            // selectedQIGForMarkerOperation become undefined when the marker is withdrawn from the selected qig.\r\n            // so added undefined check as part of bug 57226.\r\n            if (qigStore.instance.selectedQIGForMarkerOperation &&\r\n                qigStore.instance.selectedQIGForMarkerOperation.currentMarkingTarget.markingMode ===\r\n                    enums.MarkingMode.Simulation &&\r\n                qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete) {\r\n                _this.triggerPointAfterClose = saveMarksAndAnnotationTriggeringPoint;\r\n                if (_this.triggerPointAfterClose ===\r\n                    enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Submit) {\r\n                    _this.triggerPointAfterClose =\r\n                        enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse;\r\n                }\r\n                saveMarksAndAnnotationTriggeringPoint =\r\n                    enums.SaveMarksAndAnnotationsProcessingTriggerPoint.BackgroundWorker;\r\n                saveErrorCode = enums.SaveMarksAndAnnotationErrorCode.None;\r\n                marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, enums.MarksAndAnnotationsQueueOperation.Remove);\r\n                _this.setState({\r\n                    showSimulationExitedPopup: true\r\n                });\r\n            }\r\n            if (saveMarksAndAnnotationTriggeringPoint !==\r\n                enums.SaveMarksAndAnnotationsProcessingTriggerPoint.None) {\r\n                // reset the saveinprogress flag when savingmarks has been completed\r\n                marksAndAnnotationsSaveHelper.resetSaveInProgress();\r\n                /**\r\n                 * set the current marks and annotations save triggering point.\r\n                 */\r\n                _this.currentSaveMarksAndAnnotationTriggeringPoint = saveMarksAndAnnotationTriggeringPoint;\r\n                if (saveErrorCode === enums.SaveMarksAndAnnotationErrorCode.ResponseRemoved) {\r\n                    worklistActionCreator.getWorklistMarkerProgressData(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation\r\n                        .isElectronicStandardisationTeamMember);\r\n                    _this.expiredMarkGroupId = markGroupId;\r\n                    marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, queueOperation);\r\n                    _this.setState({\r\n                        isDisplayingResponseRemovedError: markingStore.instance.currentResponseMode === enums.ResponseMode.pending,\r\n                        doShowSavingMarksAndAnnotationsIndicator: false\r\n                    });\r\n                }\r\n                else if (saveErrorCode === enums.SaveMarksAndAnnotationErrorCode.ClosedResponse) {\r\n                    worklistActionCreator.getWorklistMarkerProgressData(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation\r\n                        .isElectronicStandardisationTeamMember);\r\n                    _this.expiredMarkGroupId = markGroupId;\r\n                    marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, queueOperation);\r\n                    _this.setState({\r\n                        isDisplayingGraceResponseExpiredError: markingStore.instance.currentResponseMode === enums.ResponseMode.pending,\r\n                        doShowSavingMarksAndAnnotationsIndicator: false\r\n                    });\r\n                }\r\n                else if (saveErrorCode === enums.SaveMarksAndAnnotationErrorCode.WithdrawnResponse) {\r\n                    /**\r\n                     * Calling the helper method to update the marks and annotations queue\r\n                     */\r\n                    marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, queueOperation);\r\n                    _this.onWithdrawnResponse(enums.SaveMarksAndAnnotationErrorCode.WithdrawnResponse, markingStore.instance.navigateTo);\r\n                }\r\n                else if (saveErrorCode === enums.SaveMarksAndAnnotationErrorCode.UnallocatedResponse ||\r\n                    saveErrorCode === enums.SaveMarksAndAnnotationErrorCode.MarksAndAnnotationsOutOfDate) {\r\n                    /**\r\n                     * Calling the helper method to update the marks and annotations queue\r\n                     */\r\n                    marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, queueOperation);\r\n                    if (saveMarksAndAnnotationTriggeringPoint ===\r\n                        enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Submit) {\r\n                        /**\r\n                         * When there are errors in saving marks and annotations we have to hide the busy indicator\r\n                         */\r\n                        busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.none);\r\n                        _this.setState({\r\n                            doShowSavingMarksAndAnnotationsIndicator: false,\r\n                            nonRecoverableSaveMarksAndAnnotationsErrorMessage: true\r\n                        });\r\n                    }\r\n                    else {\r\n                        if (saveMarksAndAnnotationTriggeringPoint ===\r\n                            enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse) {\r\n                            _this.saveMarksAndAnnotationsWithNonRecoverableError(saveMarksAndAnnotationTriggeringPoint, markGroupId, queueOperation);\r\n                        }\r\n                        else {\r\n                            // hide the saving marks and annotations busy indicator\r\n                            if (_this.state.doShowSavingMarksAndAnnotationsIndicator) {\r\n                                _this.setState({\r\n                                    doShowSavingMarksAndAnnotationsIndicator: false\r\n                                });\r\n                            }\r\n                            navigationHelper.loadContainerIfNeeded(enums.PageContainers.WorkList, enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse);\r\n                            _this.initiateContentRefresh();\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    _this.saveMarksAndAnnotationsWithNonRecoverableError(saveMarksAndAnnotationTriggeringPoint, markGroupId, queueOperation);\r\n                }\r\n            }\r\n            _this.setState({\r\n                isOnline: !isnetworkerror\r\n            });\r\n        };\r\n        /**\r\n         * show the error message when a marker is withdrawn from background\r\n         */\r\n        _this.onWithdrawnResponse = function (saveMarksAndAnnotationErrorCode, navigatingTo) {\r\n            _this.examinerApprovalStatus = saveMarksAndAnnotationErrorCode;\r\n            _this.navigateReponse = navigatingTo;\r\n            var currentQig = qigStore.instance.getOverviewData.qigSummary\r\n                .filter(function (qig) {\r\n                return qig.examinerRoleId ===\r\n                    examinerStore.instance.getMarkerInformation.examinerRoleId;\r\n            })\r\n                .first();\r\n            // removes entry from recent history\r\n            teamManagementActionCreator.removeHistoryItem(currentQig ? currentQig.markSchemeGroupId : 0);\r\n            _this.setState({\r\n                doShowSavingMarksAndAnnotationsIndicator: false,\r\n                isWithdrawnResponseError: true,\r\n                isBusy: false\r\n            });\r\n        };\r\n        /**\r\n         *  This will remove the item from marksAndAnnotations save processing queue.\r\n         */\r\n        _this.onSetHasNonRecoverableError = function (markGroupId) {\r\n            // Calling the helper method to update the marks and annotations queue\r\n            var queueOperation = enums.MarksAndAnnotationsQueueOperation.Remove;\r\n            marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, queueOperation);\r\n        };\r\n        /**\r\n         * Method to show the busy indicator on triggering saving of marks and annotations\r\n         */\r\n        _this.onSaveMarksAndAnnotationsTriggered = function (saveMarksAndAnnotationTriggeringPoint) {\r\n            if (saveMarksAndAnnotationTriggeringPoint !==\r\n                enums.SaveMarksAndAnnotationsProcessingTriggerPoint.None &&\r\n                saveMarksAndAnnotationTriggeringPoint !==\r\n                    enums.SaveMarksAndAnnotationsProcessingTriggerPoint.BackgroundWorker) {\r\n                _this.setState({\r\n                    doShowSavingMarksAndAnnotationsIndicator: true\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Go to logout after saving mark if there is any\r\n         */\r\n        _this.navigateAwayFromResponse = function () {\r\n            if (markingStore.instance.navigateTo === enums.SaveAndNavigate.toLogout) {\r\n                var logoutData = new logoutArgument();\r\n                logoutData.MarkingSessionTrackingId = parseInt(loginSession.MARKING_SESSION_TRACKING_ID);\r\n                logoutActionCreator.updateUserSession(logoutData);\r\n            }\r\n            else {\r\n                // reset mark entry deactivators on navigating away from response.\r\n                keyDownHelper.instance.resetMarkEntryDeactivators();\r\n                // we are deactivating the keydown helper while message panel or exception panel is open. We are disabling that\r\n                // during the corresponding panel is close. If user is navigate away from response screen without closing the message panel\r\n                // then we've to activate the keydown helper\r\n                if (messageStore.instance.isMessagePanelVisible) {\r\n                    keyDownHelper.instance.DeActivate(enums.MarkEntryDeactivator.Messaging);\r\n                }\r\n                else if (exceptionStore.instance.isExceptionPanelVisible) {\r\n                    keyDownHelper.instance.DeActivate(enums.MarkEntryDeactivator.Exception);\r\n                }\r\n                else if (markingStore.instance.navigateTo === enums.SaveAndNavigate.toMenu) {\r\n                    markingActionCreator.removeMarkEntrySelection();\r\n                    keyDownHelper.instance.DeActivate(enums.MarkEntryDeactivator.Menu);\r\n                }\r\n                _this.copyMarksAsDefinitiveSelected = true;\r\n            }\r\n        };\r\n        /**\r\n         * Method to show the busy indicator on triggering saving of marks and annotations\r\n         */\r\n        _this.refreshState = function () {\r\n            switch (navigationStore.instance.containerPage) {\r\n                case enums.PageContainers.Login:\r\n                    _this.clearSession();\r\n                    break;\r\n            }\r\n        };\r\n        /*\r\n         * On Accept Quality Feedback Action completedF\r\n         */\r\n        _this.onAcceptQualityFeedbackActionCompleted = function () {\r\n            var responseModeBasedOnQualityFeedback = qualityFeedbackHelper.getResponseModeBasedOnQualityFeedback();\r\n            if (responseModeBasedOnQualityFeedback !== enums.ResponseMode.closed) {\r\n                var responseMode = responseModeBasedOnQualityFeedback !== undefined\r\n                    ? responseModeBasedOnQualityFeedback\r\n                    : enums.ResponseMode.open;\r\n                if (qigStore.instance.selectedQIGForMarkerOperation) {\r\n                    worklistActionCreator.notifyWorklistTypeChange(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId, worklistStore.instance.currentWorklistType, responseMode, worklistStore.instance.getRemarkRequestType, worklistStore.instance.isDirectedRemark, qigStore.instance.selectedQIGForMarkerOperation\r\n                        .isElectronicStandardisationTeamMember);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Show response in grace not fully marked message.\r\n         */\r\n        _this.showResponseInGraceNotFullyMarkedMessage = function (failureReason) {\r\n            _this._failureReason = failureReason;\r\n            _this.setState({ isDisplayingGraceResponseLessthan100PercentageError: true });\r\n        };\r\n        /**\r\n         * Show mandatory message popup\r\n         */\r\n        _this.showMandatoryMessagePopup = function (isUnreadMandatoryMessagePresent, triggerPoint) {\r\n            if (isUnreadMandatoryMessagePresent) {\r\n                _this.mandatoryMessageTriggeringPoint = triggerPoint;\r\n                _this.onPopUpDisplayEvent(enums.PopUpType.MandatoryMessage, enums.PopUpActionType.Show, null);\r\n            }\r\n        };\r\n        /**\r\n         * Display the corresponding popups\r\n         */\r\n        _this.onPopUpDisplayEvent = function (popUpType, popUpActionType, popUpData) {\r\n            _this.popUpData = popUpData;\r\n            if (popUpActionType === enums.PopUpActionType.Show) {\r\n                _this.setState({ popUpType: popUpType });\r\n            }\r\n        };\r\n        /**\r\n         * handle different popup actions\r\n         */\r\n        _this.handlePopUpAction = function (popUpType, popUpActionType) {\r\n            switch (popUpActionType) {\r\n                case enums.PopUpActionType.Show:\r\n                    break;\r\n                case enums.PopUpActionType.Yes:\r\n                    // when navigated from message panel the navigate action is called\r\n                    if (_this.messageNavigationArguments) {\r\n                        _this.messageNavigationArguments.canNavigate = true;\r\n                        messagingActionCreator.canMessageNavigate(_this.messageNavigationArguments);\r\n                        _this.messageNavigationArguments = undefined;\r\n                        messagingActionCreator.messageAction(enums.MessageViewAction.Close);\r\n                        _this.setState({ popUpType: undefined });\r\n                    }\r\n                    else {\r\n                        popUpDisplayActionCreator.popUpDisplay(popUpType, popUpActionType, messageStore.instance.navigateFrom, {});\r\n                        _this.setState({ popUpType: undefined });\r\n                    }\r\n                    break;\r\n                case enums.PopUpActionType.No:\r\n                    _this.messageNavigationArguments = undefined;\r\n                    popUpDisplayActionCreator.popUpDisplay(popUpType, popUpActionType, messageStore.instance.navigateFrom, {});\r\n                    _this.setState({ popUpType: undefined });\r\n                    break;\r\n                case enums.PopUpActionType.Ok:\r\n                    if (popUpType === enums.PopUpType.MandatoryMessage &&\r\n                        _this.props.footerType !== enums.FooterType.Message) {\r\n                        //Response displayed in Atypical worklist even after changing the response to 'On hold' in AI Image Management\r\n                        //so do refresh worklist content when mandatory message popup appears\r\n                        //This will affect all response types except live.\r\n                        _this.storageAdapterHelper.clearStorageArea('worklist');\r\n                        // redirecting to inbox screen, if user currently not in the message screen\r\n                        navigationHelper.loadMessagePage();\r\n                    }\r\n                    else if (popUpType === enums.PopUpType.MandatoryMessage &&\r\n                        _this.props.footerType === enums.FooterType.Message &&\r\n                        _this.mandatoryMessageTriggeringPoint !== enums.TriggerPoint.MessageStore) {\r\n                        // we don't need to refresh inbox tab if we found mandatory messages are available during message loading action\r\n                        // refresh the inbox tab with selected mandatory message\r\n                        messagingActionCreator.refreshMessageFolder(enums.MessageFolderType.Inbox);\r\n                    }\r\n                    _this.mandatoryMessageTriggeringPoint = enums.TriggerPoint.None;\r\n                    _this.setState({ popUpType: undefined });\r\n                    break;\r\n            }\r\n        };\r\n        /**\r\n         * On response submission completed\r\n         */\r\n        _this.onSubmitResponseCompleted = function (fromMarkScheme, submittedMarkGroupIds, selectedDisplayId) {\r\n            if (!_this._showShareLoadingIndicatorForPE) {\r\n                _this.submitMessageErrorPopupContent = worklistComponentHelper.showMessageOnSubmitResponse(submitStore.instance.getSubmittedResponsesCount());\r\n            }\r\n            //updating provisional response collection and navigating after sharing Provisional Response\r\n            if (_this._showShareLoadingIndicator && fromMarkScheme) {\r\n                var stdWorklistView = standardisationSetupStore.instance.isTotalMarksViewSelected ? enums.STDWorklistViewType.ViewTotalMarks :\r\n                    enums.STDWorklistViewType.ViewMarksByQuestion;\r\n                var isNextResponseAvailable = standardisationSetupStore.instance.isNextResponseAvailable(selectedDisplayId);\r\n                var nextResponseId = markerOperationModeFactory.operationMode.nextResponseId(responseStore.instance.selectedDisplayId.toString());\r\n                if (isNextResponseAvailable) {\r\n                    var responseData = standardisationSetupStore.instance.getResponseDetails(responseStore.instance.selectedDisplayId.toString());\r\n                    // remove shared response from provisional response worklist collection.\r\n                    standardisationActionCreator.updateStandardisationResponseCollection(responseData.esMarkGroupId, enums.StandardisationSetup.ProvisionalResponse);\r\n                    _this.setState({\r\n                        isBusy: false\r\n                    });\r\n                    navigationHelper.responseNavigation(enums.ResponseNavigation.next, false, parseInt(nextResponseId));\r\n                }\r\n                else {\r\n                    // if next response is not available then load worklist.\r\n                    navigationHelper.loadStandardisationSetup();\r\n                }\r\n                return;\r\n            }\r\n            /* Logging event in google analytics or application insights based on the configuration */\r\n            new auditLoggingHelper().logHelper.logEventOnSubmitResponse(submitStore.instance.getSubmittedResponsesCount(), submittedMarkGroupIds);\r\n            var messageKey = '';\r\n            var messageHeaderKey = undefined;\r\n            // If No validation Error, Check the whether to display the Quality Feedback Message\r\n            if (worklistComponentHelper.shouldShowQualityFeedbackMessage()) {\r\n                messageKey = localeStore.instance.TranslateText('marking.worklist.quality-feedback-dialog.body');\r\n                messageHeaderKey = localeStore.instance.TranslateText('marking.worklist.quality-feedback-dialog.header');\r\n            }\r\n            else if (submitStore.instance.getCurrentWorklistType === enums.WorklistType.standardisation ||\r\n                submitStore.instance.getCurrentWorklistType === enums.WorklistType.secondstandardisation) {\r\n                if (submitStore.instance.getSubmitResponseReturn.examinerApprovalStatus ===\r\n                    enums.ExaminerApproval.Approved) {\r\n                    messageKey = localeStore.instance.TranslateText(worklistComponentHelper.getAutoApprovalSecondaryContent(submittedMarkGroupIds.length));\r\n                    messageHeaderKey = localeStore.instance.TranslateText('marking.worklist.auto-approved-dialog.header');\r\n                }\r\n            }\r\n            if (messageKey !== '') {\r\n                _this.messageDetails = {\r\n                    messageHeader: messageHeaderKey,\r\n                    messageString: messageKey,\r\n                    submittedMarkGroupIds: submittedMarkGroupIds,\r\n                    displayId: selectedDisplayId,\r\n                    isFromMarkScheme: fromMarkScheme\r\n                };\r\n                _this.setState({\r\n                    doShowSavingMarksAndAnnotationsIndicator: false,\r\n                    isBusy: false,\r\n                    doShowPopup: true\r\n                });\r\n            }\r\n            else if (_this.submitMessageErrorPopupContent !== undefined) {\r\n                _this.setState({\r\n                    isSubmitErrorPopDisplaying: true,\r\n                    isBusy: false,\r\n                    doShowSavingMarksAndAnnotationsIndicator: false\r\n                });\r\n            }\r\n            else {\r\n                _this.navigateAfterSubmit(submittedMarkGroupIds, selectedDisplayId, fromMarkScheme);\r\n            }\r\n        };\r\n        /**\r\n         * Navigate after the submit\r\n         */\r\n        _this.navigateAfterSubmit = function (submittedMarkGroupIds, displayId, fromMarkScheme) {\r\n            // Inform response navigation module.\r\n            responseActionCreator.navigateAfterSubmit(submittedMarkGroupIds, displayId, fromMarkScheme);\r\n            // Navigate to corresponding worklist even if not in QualityFeedbackOutstanding,\r\n            // to ensure that the navigation happens correctly at the time of submition.\r\n            qualityFeedbackHelper.forceNavigationToWorklist(submitStore.instance.getSubmitResponseReturn.hasQualityFeedbackOutstanding);\r\n            // Refresh the worklist\r\n            _this.initiateContentRefresh();\r\n            // Clear the marks and annotations if needed for Reloading the DefinitiveMarks\r\n            submitHelper.clearMarksAndAnnotations(submittedMarkGroupIds);\r\n        };\r\n        /**\r\n         * This will display the unread mandatory message popup while user in message screen using background pulse\r\n         */\r\n        _this.onUpdateNotification = function (unreadMessageCount, isMessageReadCountChanged, unreadMandatoryMessageCount) {\r\n            // display unread mandatory messages are available popup while user in message screen and not composing a message\r\n            if (unreadMandatoryMessageCount > 0 &&\r\n                _this.props.footerType === enums.FooterType.Message &&\r\n                !messageStore.instance.isMessagePanelVisible) {\r\n                _this.mandatoryMessageTriggeringPoint = enums.TriggerPoint.BackgroundPulse;\r\n                _this.onPopUpDisplayEvent(enums.PopUpType.MandatoryMessage, enums.PopUpActionType.Show, null);\r\n            }\r\n        };\r\n        /**\r\n         * Show pop up if the message panel is edited on navigation\r\n         */\r\n        _this.onMessagePanelEdited = function (messageNavigationArgument) {\r\n            if (messageNavigationArgument.hasMessageContainsDirtyValue &&\r\n                !messageNavigationArgument.navigationConfirmed) {\r\n                _this.messageNavigationArguments = messageNavigationArgument;\r\n                _this.messageNavigationArguments.navigationConfirmed = true;\r\n                if (messageNavigationArgument.navigateTo === enums.MessageNavigation.newException ||\r\n                    messageNavigationArgument.navigateTo ===\r\n                        enums.MessageNavigation.exceptionWithInResponse) {\r\n                    _this.popUpData.popupContent = localeStore.instance.TranslateText('marking.response.discard-exception-dialog.body-open-another');\r\n                }\r\n                else if (messageNavigationArgument.navigateTo === enums.MessageNavigation.ChangeStatus) {\r\n                    _this.popUpData.popupContent = localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.body-start-new-message-while-composing');\r\n                }\r\n                else {\r\n                    _this.popUpData.popupContent = localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.body-navigated-away');\r\n                }\r\n                _this.setState({ popUpType: enums.PopUpType.DiscardMessageNavigateAway });\r\n            }\r\n        };\r\n        /**\r\n         * Show mandatory message validation popup\r\n         */\r\n        _this.mandatoryMessageValidationPopupVisibility = function () {\r\n            _this.setState({ doShowMandatoryMessageValidationPopup: true });\r\n        };\r\n        /**\r\n         * Check the QIG got withdrwan\r\n         */\r\n        _this.onResponseDataReceived = function (searchedResponseData) {\r\n            if (searchedResponseData.approvalStatusId === enums.ExaminerApproval.Withdrawn) {\r\n                teamManagementActionCreator.removeHistoryItem(searchedResponseData.markSchemeGroupId);\r\n                _this.setState({ isWithdrawnResponseError: true, isBusy: false });\r\n            }\r\n        };\r\n        /**\r\n         * show error popup on response search failed\r\n         */\r\n        _this.onResponseDataReceivedFailed = function (serviceFailed) {\r\n            // If this service failed then we dont know whether the response is available or not\r\n            if (!serviceFailed) {\r\n                return;\r\n            }\r\n            _this.setState({ isResponseSearchFailed: true, isBusy: false });\r\n        };\r\n        _this.handleErrorNavigationTeamManagement = function (failureCode, markSchemeGroupId) {\r\n            if (markSchemeGroupId === void 0) { markSchemeGroupId = 0; }\r\n            switch (failureCode) {\r\n                case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                case enums.FailureCode.HierarchyChanged:\r\n                    navigationHelper.loadTeamManagement();\r\n                    userInfoActionCreator.changeMenuVisibility(false);\r\n                    break;\r\n                case enums.FailureCode.Withdrawn:\r\n                    _this.storageAdapterHelper.clearCacheByKey('qigselector', 'overviewdata');\r\n                    navigationHelper.loadQigSelector();\r\n                    userInfoActionCreator.changeMenuVisibility(false);\r\n                    teamManagementActionCreator.removeHistoryItem(markSchemeGroupId);\r\n                    break;\r\n            }\r\n        };\r\n        /**\r\n         * Adding current items to history based upon the user's action\r\n         */\r\n        _this.addToRecentHistory = function () {\r\n            if (!worklistStore.instance.isMarkingCheckMode) {\r\n                _this.addSelectedQigDetailsToUserOption();\r\n            }\r\n            // If the container page is response we dont want to add that to the history\r\n            if (!qigStore.instance.selectedQIGForMarkerOperation ||\r\n                worklistStore.instance.isMarkingCheckMode ||\r\n                navigationStore.instance.containerPage === enums.PageContainers.Response) {\r\n                return;\r\n            }\r\n            var _historyItem = new historyItem();\r\n            // QIG Name based on string format CC\r\n            _historyItem.qigName = stringFormatHelper.formatAwardingBodyQIG(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupName, qigStore.instance.selectedQIGForMarkerOperation.assessmentCode, qigStore.instance.selectedQIGForMarkerOperation.sessionName, qigStore.instance.selectedQIGForMarkerOperation.componentId, qigStore.instance.selectedQIGForMarkerOperation.questionPaperName, qigStore.instance.selectedQIGForMarkerOperation.assessmentName, qigStore.instance.selectedQIGForMarkerOperation.componentName, stringFormatHelper.getOverviewQIGNameFormat());\r\n            _historyItem.qigId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n            _historyItem.timeStamp = Date.now();\r\n            // adding to history item based on Marker Operation Mode\r\n            if (markerOperationModeFactory.operationMode.isTeamManagementMode) {\r\n                var _teamManagementHistoryInfo = new teamManagementHistoryInfo();\r\n                _teamManagementHistoryInfo.worklistType = worklistStore.instance.currentWorklistType;\r\n                _teamManagementHistoryInfo.responseMode = worklistStore.instance.getResponseMode;\r\n                _teamManagementHistoryInfo.remarkRequestType =\r\n                    worklistStore.instance.getRemarkRequestType;\r\n                _teamManagementHistoryInfo.subordinateExaminerRoleID =\r\n                    navigationStore.instance.containerPage !== enums.PageContainers.TeamManagement\r\n                        ? teamManagementStore.instance.examinerDrillDownData\r\n                            ? teamManagementStore.instance.examinerDrillDownData.examinerRoleId\r\n                            : 0\r\n                        : 0;\r\n                _teamManagementHistoryInfo.subordinateExaminerID =\r\n                    navigationStore.instance.containerPage !== enums.PageContainers.TeamManagement\r\n                        ? teamManagementStore.instance.examinerDrillDownData\r\n                            ? teamManagementStore.instance.examinerDrillDownData.examinerId\r\n                            : 0\r\n                        : 0;\r\n                _teamManagementHistoryInfo.supervisorExaminerRoleID = teamManagementStore.instance\r\n                    .selectedExaminerRoleId\r\n                    ? teamManagementStore.instance.selectedExaminerRoleId\r\n                    : operationModeHelper.examinerRoleId;\r\n                _teamManagementHistoryInfo.selectedTab = teamManagementStore.instance\r\n                    .selectedTeamManagementTab\r\n                    ? teamManagementStore.instance.selectedTeamManagementTab\r\n                    : enums.TeamManagement.MyTeam;\r\n                _teamManagementHistoryInfo.currentContainer = navigationStore.instance.containerPage;\r\n                _historyItem.team = _teamManagementHistoryInfo;\r\n            }\r\n            else if (markerOperationModeFactory.operationMode.isStandardisationSetupMode) {\r\n                var _standardisationSetupHistoryInfo = new standardisationSetupHistoryInfo();\r\n                _standardisationSetupHistoryInfo.standardisationSetupWorklistType =\r\n                    standardisationSetupStore.instance.selectedStandardisationSetupWorkList;\r\n                _standardisationSetupHistoryInfo.timeStamp = Date.now();\r\n                _historyItem.standardisationSetup = _standardisationSetupHistoryInfo;\r\n            }\r\n            else {\r\n                var _worklistHistoryInfo = new worklistHistoryInfo();\r\n                _worklistHistoryInfo.worklistType = worklistStore.instance.currentWorklistType;\r\n                _worklistHistoryInfo.responseMode = worklistStore.instance.getResponseMode;\r\n                _worklistHistoryInfo.remarkRequestType = worklistStore.instance.getRemarkRequestType;\r\n                _historyItem.myMarking = _worklistHistoryInfo;\r\n            }\r\n            var _isMarkingEnabled = qigStore.instance.selectedQIGForMarkerOperation &&\r\n                qigStore.instance.selectedQIGForMarkerOperation.isMarkingEnabled;\r\n            _historyItem.markingMethodId =\r\n                qigStore.instance.selectedQIGForMarkerOperation.markingMethod;\r\n            _historyItem.isElectronicStandardisationTeamMember =\r\n                qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember;\r\n            // used for showing/hiding marking link in menu's histroy list under menu tab\r\n            _historyItem.isMarkingEnabled =\r\n                _isMarkingEnabled &&\r\n                    qigStore.instance.selectedQIGForMarkerOperation.examinerQigStatus !==\r\n                        enums.ExaminerQIGStatus.WaitingStandardisation &&\r\n                    qigStore.instance.selectedQIGForMarkerOperation.currentMarkingTarget != null;\r\n            // used for showing/hiding teammanagement link in menu's histroy list under menu tab\r\n            _historyItem.isTeamManagementEnabled =\r\n                qigStore.instance.selectedQIGForMarkerOperation &&\r\n                    qigStore.instance.selectedQIGForMarkerOperation.isTeamManagementEnabled;\r\n            // used for showing/hiding standardisation setup link in menu's history list under menu tab.\r\n            _historyItem.isStandardisationSetupEnabled =\r\n                (qigStore.instance.isStandardisationSetupButtonVisible(qigStore.instance.selectedQIGForMarkerOperation) ||\r\n                    qigStore.instance.isStandardisationSetupLinkVisible(qigStore.instance.selectedQIGForMarkerOperation));\r\n            _historyItem.questionPaperPartId =\r\n                qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId;\r\n            _historyItem.examinerRoleId = operationModeHelper.examinerRoleId;\r\n            loadContainerActionCreator.addToRecentHistory(_historyItem);\r\n        };\r\n        /**\r\n         * Show No Marking Check Available Popup\r\n         */\r\n        _this.showNoMarkingCheckAvailableMessage = function (popUpType, popUpActionType, popUpData) {\r\n            if (popUpActionType === enums.PopUpActionType.Show &&\r\n                popUpType === enums.PopUpType.NoMarkingCheckRequestPossible) {\r\n                _this.setState({\r\n                    popUpType: popUpType,\r\n                    doShowNoMarkingCheckAvailableMessage: true\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Navigate to team management\r\n         */\r\n        _this.onTeamManagementOpen = function (isFromHistory) {\r\n            if (isFromHistory === void 0) { isFromHistory = false; }\r\n            navigationHelper.loadTeamManagement(isFromHistory);\r\n        };\r\n        /**\r\n         * Marking Check Complete Button Clicked\r\n         */\r\n        _this.markCheckCompleteButtonEvent = function () {\r\n            _this.setState({ isMarkingCheckCompleteConfirmationPopupDisplaying: true });\r\n        };\r\n        /**\r\n         *  Marking Check Completed Event\r\n         */\r\n        _this.markCheckCompletedEvent = function () {\r\n            markingCheckActionCreator.getMarkCheckExaminers(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId);\r\n        };\r\n        /**\r\n         * Scroll view when focus comes to text box in android like in ipad\r\n         * Firefox is exclueded, scrollIntoViewIfNeeded is not supporting by browser #49184.\r\n         */\r\n        _this.scrollIntoViewOnEditingTextForAndroid = function () {\r\n            var activeElement = document.activeElement;\r\n            if (htmlUtilities.isAndroidDevice &&\r\n                !htmlUtilities.isAndroidFirefox &&\r\n                (activeElement.tagName === 'TEXTAREA' || activeElement.tagName === 'INPUT')) {\r\n                var that = _this;\r\n                setTimeout(function () {\r\n                    var el = $(activeElement)[0];\r\n                    el.scrollIntoViewIfNeeded(true);\r\n                }, 0);\r\n            }\r\n        };\r\n        /**\r\n         * Show locks in qig popup\r\n         */\r\n        _this.onShowLocksInQigsPopup = function (_locksInQigDetailsList) {\r\n            if (qigStore.instance.doShowLocksInQigPopUp &&\r\n                _locksInQigDetailsList.locksInQigDetailsList &&\r\n                _locksInQigDetailsList.locksInQigDetailsList.count()) {\r\n                _this.setState({\r\n                    reRenderLocksInQigPopUp: true\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * This method will render the pop up with no of locks and qig name\r\n         */\r\n        _this.renderLocksInQigPopUp = function () {\r\n            // If Exam body CC's not loaded yet, then do not show the locks popup\r\n            var locksPopup = ccStore.instance.isExamBodyCCLoaded ? (React.createElement(LocksInQigPopup, { showLocksInQigPopUp: _this.state.reRenderLocksInQigPopUp, fromLogout: qigStore.instance.isShowLocksFromLogout, onCancelClickOfLocksInQigPopup: _this.onCancelClickOfLocksInQigPopup, onLogoutClickOfLocksInQigPopup: _this.onLogoutClickOfLocksInQigPopup, id: 'LocksInQigPopup', key: 'LocksInQigPopup_key' })) : null;\r\n            return locksPopup;\r\n        };\r\n        /**\r\n         * Locks in qig list recieved event\r\n         */\r\n        _this.onQigSelectedFromLockedList = function (qigId) {\r\n            if (loginStore.instance.isAdminRemarker) {\r\n                // Invoking the action creator to retrieve the Admin remarkers QIG details.\r\n                qigActionCreator.getAdminRemarkerQIGSelectorData(true);\r\n            }\r\n            else {\r\n                // Invoking the action creator to retrieve the QIG list for the QIG Selector\r\n                qigActionCreator.getQIGSelectorData(qigId, true, false, false, true);\r\n            }\r\n        };\r\n        /**\r\n         * Cancel click on locks in qig popup\r\n         * @private\r\n         *\r\n         * @memberof Footer\r\n         */\r\n        _this.onCancelClickOfLocksInQigPopup = function () {\r\n            _this.setState({\r\n                reRenderLocksInQigPopUp: false\r\n            });\r\n        };\r\n        _this.onLogoutClickOfLocksInQigPopup = function () {\r\n            _this.onYesClickOfLogoutConfirmation(false);\r\n            _this.setState({\r\n                reRenderLocksInQigPopUp: false\r\n            });\r\n        };\r\n        _this.navigateToQigFromLockedList = function (isDataFromSearch, isDataFromHistory, isFromLocksInPopUp) {\r\n            if (isDataFromSearch === void 0) { isDataFromSearch = false; }\r\n            if (isDataFromHistory === void 0) { isDataFromHistory = false; }\r\n            if (isFromLocksInPopUp === void 0) { isFromLocksInPopUp = false; }\r\n            if (isFromLocksInPopUp) {\r\n                var changeOperationModePromise = userInfoActionCreator.changeOperationMode(enums.MarkerOperationMode.TeamManagement);\r\n                var markSchemeGroupCCPromise = ccActionCreator.getMarkSchemeGroupCCs(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId);\r\n                var openQIGPromise = void 0;\r\n                if (qigStore.instance.getOverviewData) {\r\n                    openQIGPromise = qigActionCreator.openQIG(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, false);\r\n                }\r\n                else {\r\n                    openQIGPromise = qigActionCreator.getQIGSelectorData(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId);\r\n                }\r\n                var that = _this;\r\n                Promise.Promise\r\n                    .all([changeOperationModePromise, markSchemeGroupCCPromise, openQIGPromise])\r\n                    .then(function (result) {\r\n                    teamManagementActionCreator.openTeamManagement(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, false, true);\r\n                });\r\n            }\r\n            _this.setState({\r\n                reRenderLocksInQigPopUp: false\r\n            });\r\n        };\r\n        _this.doLogoutPopup = function (isFromLogout, _locksInQigDetailsList) {\r\n            if (isFromLogout) {\r\n                if (_locksInQigDetailsList.locksInQigDetailsList &&\r\n                    _locksInQigDetailsList.locksInQigDetailsList.count() > 0) {\r\n                    qigActionCreator.showLocksInQigPopup(true, true);\r\n                }\r\n                else {\r\n                    userInfoActionCreator.showLogoutPopup();\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * show confirmation popup on submiting simulation response\r\n         */\r\n        _this.onshowSimulationResponseSubmitConfirmationPopup = function () {\r\n            /**\r\n             * for submit all the markgroup id will always be zero\r\n             */\r\n            if (submitStore.instance.getMarkGroupId > 0) {\r\n                _this.simulationResponseSubmitConfirmationDialogueContent = localeStore.instance.TranslateText('marking.worklist.submit-response-dialog.body-simulation');\r\n                _this.simulationResponseSubmitConfirmationDialogueHeader = localeStore.instance.TranslateText('marking.worklist.submit-response-dialog.header');\r\n            }\r\n            else {\r\n                _this.simulationResponseSubmitConfirmationDialogueContent = localeStore.instance.TranslateText('marking.worklist.submit-all-responses-dialog.body-simulation');\r\n                _this.simulationResponseSubmitConfirmationDialogueHeader = localeStore.instance.TranslateText('marking.worklist.submit-all-responses-dialog.header');\r\n            }\r\n            _this.setState({ showSimulationResponseSubmitConfirmationPopup: true });\r\n        };\r\n        /**\r\n         * call when share toggle button is turned off\r\n         */\r\n        _this.shareConfirmationPopup = function (clientToken, showSharePopup) {\r\n            _this.shareConfirmationClientToken = clientToken;\r\n            markingActionCreator.showOrHideRemoveContextMenu(false);\r\n            _this.setState({\r\n                isShared: showSharePopup,\r\n                doShowShareConfirmationPopup: true\r\n            });\r\n        };\r\n        /**\r\n         * Render simulation exited qigs in popup\r\n         */\r\n        _this.renderSimulationExitedQigsPopup = function () {\r\n            var secondaryContent = null;\r\n            var footerContent = null;\r\n            if (_this.state.showAllSimulationExitedQigs) {\r\n                secondaryContent = localeStore.instance.TranslateText('marking.worklist.exited-simulation-dialog.subheader-multiple-qigs');\r\n                footerContent = localeStore.instance.TranslateText('marking.worklist.exited-simulation-dialog.body-multiple-qigs');\r\n            }\r\n            else {\r\n                secondaryContent = localeStore.instance.TranslateText('marking.worklist.exited-simulation-dialog.subheader-single-qig');\r\n                footerContent = localeStore.instance.TranslateText('marking.worklist.exited-simulation-dialog.body-single-qig');\r\n            }\r\n            // If Exam body CC's not loaded yet, then do not show the simulation exited qigs popup\r\n            var simulationExitedQigsPopup = ccStore.instance.isExamBodyCCLoaded ? (React.createElement(GenericDialog, { content: null, multiLineContent: _this.getSimulationModeExitedQigs(), header: localeStore.instance.TranslateText('marking.worklist.exited-simulation-dialog.header'), secondaryContent: secondaryContent, displayPopup: _this.state.showSimulationExitedPopup, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: _this.onOKClickOfSimulationExitedQigsPopup.bind(_this), id: 'moveSimulation', key: 'moveSimulationMessage', popupDialogType: enums.PopupDialogType.SimulationExited, footerContent: footerContent })) : null;\r\n            return simulationExitedQigsPopup;\r\n        };\r\n        /**\r\n         * On Ok button click of simulation exited qigs popup\r\n         */\r\n        _this.onOKClickOfSimulationExitedQigsPopup = function () {\r\n            var currentContainer = navigationStore.instance.containerPage;\r\n            // When the popup is displayed in the qigselector\r\n            if (_this.state.showAllSimulationExitedQigs &&\r\n                currentContainer === enums.PageContainers.QigSelector) {\r\n                simulationModeHelper.clearCacheBeforBeforeSimulationTargetCompletion();\r\n                simulationModeHelper.handleSimulationTargetCompletion(true);\r\n            }\r\n            else {\r\n                // When only the current qig is shown in the popup\r\n                if (!_this.state.showAllSimulationExitedQigs) {\r\n                    simulationModeHelper.clearCacheBeforBeforeSimulationTargetCompletion();\r\n                    simulationModeHelper.handleSimulationTargetCompletion(false);\r\n                }\r\n            }\r\n            _this.processBasedOnSaveMarksAndAnnotationTriggeringPoint(_this.triggerPointAfterClose);\r\n            _this.triggerPointAfterClose = 0;\r\n        };\r\n        /**\r\n         * When standardisation setup is completed in background\r\n         */\r\n        _this.onStandardisationSetupCompletionInBackground = function () {\r\n            if (navigationStore.instance.containerPage === enums.PageContainers.WorkList) {\r\n                _this.setState({\r\n                    showSimulationExitedPopup: true,\r\n                    showAllSimulationExitedQigs: false\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * On simulation target completion\r\n         */\r\n        _this.onSimulationTargetCompletion = function () {\r\n            var navigateTo = qigStore.instance.navigateToAfterStdSetupCheck;\r\n            _this.setState({\r\n                showSimulationExitedPopup: false\r\n            });\r\n            if (!_this.state.showAllSimulationExitedQigs) {\r\n                if (navigateTo === enums.PageContainers.Message) {\r\n                    navigationHelper.loadMessagePage();\r\n                }\r\n                else if (navigateTo === enums.PageContainers.WorkList) {\r\n                    navigationHelper.loadWorklist();\r\n                }\r\n                else if (navigateTo === enums.PageContainers.TeamManagement) {\r\n                    navigationHelper.loadTeamManagement();\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * On getting the simulation exited qigs and locks in qigs data\r\n         */\r\n        _this.onSimulationExitedQigsAndLocksInQigsRecieved = function (isFromLogout) {\r\n            if (simulationModeHelper.isSimulationExitedQigDataAvailable) {\r\n                // If there are simulation exited qigs then show the popup\r\n                _this.setState({\r\n                    showSimulationExitedPopup: true,\r\n                    showAllSimulationExitedQigs: true\r\n                });\r\n            }\r\n            else if (simulationModeHelper.isLockInQigsDataAvailable) {\r\n                // Show locks if there is no simulation\r\n                qigActionCreator.showLocksInQigPopup(true, isFromLogout);\r\n            }\r\n        };\r\n        /**\r\n         * On standardisation setup completion\r\n         */\r\n        _this.onStandardisationSetupCompletion = function () {\r\n            if (qigStore.instance.isStandardisationsetupCompletedForTheQig &&\r\n                qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete) {\r\n                _this.setState({\r\n                    showSimulationExitedPopup: true,\r\n                    showAllSimulationExitedQigs: false\r\n                });\r\n            }\r\n            else if (qigStore.instance.navigateToAfterStdSetupCheck === enums.PageContainers.Login) {\r\n                // Checking whether there are any locked examiners currently, if the standardisation setup was not completed\r\n                // and the user was trying to logout.\r\n                qigActionCreator.getLocksInQigs(true);\r\n            }\r\n        };\r\n        /**\r\n         * On getting the simulation exited qigs data\r\n         */\r\n        _this.onSimulationExitedQigsRecieved = function () {\r\n            if (simulationModeHelper.isSimulationExitedQigDataAvailable) {\r\n                _this.setState({\r\n                    showSimulationExitedPopup: true,\r\n                    showAllSimulationExitedQigs: true\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Method to be invoked when browser is online.\r\n         */\r\n        _this.updateOnlineStatus = function () {\r\n            // sends ping to validate network is offline\r\n            applicationActionCreator.validateNetWorkStatus(true);\r\n        };\r\n        /**\r\n         * On ok click of submit response error popup\r\n         */\r\n        _this.onSubmitResponseErrorPopupOkClick = function () {\r\n            _this.setState({ isSubmitErrorPopDisplaying: false });\r\n            _this.initiateContentRefresh();\r\n            if (ecourseworkHelper.isECourseworkComponent) {\r\n                ecourseworkHelper.clearEcourseworkFileData();\r\n            }\r\n            else {\r\n                navigationHelper.loadWorklist();\r\n            }\r\n        };\r\n        /**\r\n         * On OK click of Autozoned message popup\r\n         */\r\n        _this.onAutozonedWarningMessageOkClick = function () {\r\n            //change the state to false to close the popup\r\n            _this.setState({ isAutozonedMessagePopupDisplaying: false });\r\n        };\r\n        /**\r\n         * On Ecoursework File data cleared\r\n         */\r\n        _this.onEcourseworkFileDataCleared = function () {\r\n            ecourseworkHelper.fetchECourseWorkCandidateScriptMetadata(null, true);\r\n            navigationHelper.loadWorklist();\r\n        };\r\n        /**\r\n         * on click select to mark popup in Std setup centre script\r\n         */\r\n        _this.onSelectStdSetupResponseToMark = function (popupType, provisionalQigDetails) {\r\n            var provisionalMarkingType = enums.ProvisionalMarkingType.None;\r\n            if (popupType === enums.PopUpType.SelectToMarkAsProvisional && _this.isCommonProvisionalStandardisationCcOn()) {\r\n                provisionalMarkingType = enums.ProvisionalMarkingType.AllocateToAll;\r\n            }\r\n            if (provisionalQigDetails) {\r\n                _this.populateCreateMultiQIGProvisionalsPopUpData(provisionalQigDetails);\r\n            }\r\n            _this.setState({ popUpType: popupType, provisionalMarkingType: provisionalMarkingType });\r\n        };\r\n        /**\r\n         * on cancel click of the select response to mark as provisional popup\r\n         */\r\n        _this.onCancelClickOfSelectResponseToMarkasProvisional = function () {\r\n            _this.setState({ popUpType: enums.PopUpType.None });\r\n        };\r\n        /**\r\n         * cancel click on mark as definitive popup.\r\n         */\r\n        _this.onCancelClickOnMarkAsDefinitivePopUp = function () {\r\n            _this.setState({ popUpType: enums.PopUpType.None });\r\n            _this.copyMarksAsDefinitiveSelected = true;\r\n        };\r\n        /**\r\n         * submit click on mark as definitive popup.\r\n         */\r\n        _this.submitClickOnMarkAsDefinitivePopUp = function () {\r\n            _this.setState({ popUpType: enums.PopUpType.None });\r\n            var standardisationResponseDataExaminerRoleId = 0;\r\n            var currentExaminerRoleId = 0;\r\n            var standardisationResponseData = standardisationSetupStore.instance.fetchStandardisationResponseData();\r\n            if (standardisationResponseData) {\r\n                standardisationResponseDataExaminerRoleId = standardisationResponseData.examinerRoleId;\r\n                currentExaminerRoleId = qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId;\r\n            }\r\n            standardisationActionCreator.copyMarksAndAnnotationsAsDefinitive(_this.copyMarksAsDefinitiveSelected, standardisationResponseDataExaminerRoleId !== currentExaminerRoleId, responseHelper.hasAdditionalObject);\r\n        };\r\n        /**\r\n         * on mark later clicked for select responses popup to move as provisional\r\n         */\r\n        _this.selectProvisionalMarkLaterClick = function () {\r\n            var markSchemeGroupIds = Array();\r\n            if (_this.multiQigCheckboxItems && _this.multiQigCheckboxItems.length > 1) {\r\n                _this.multiQigCheckboxItems.map(function (item) {\r\n                    if (item.isChecked) {\r\n                        markSchemeGroupIds.push(item.id);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                markSchemeGroupIds.push(standardisationSetupStore.instance.markSchemeGroupId);\r\n            }\r\n            standardisationActionCreator.createStandardisationRig(standardisationSetupStore.instance.examinerRoleId, standardisationSetupStore.instance.selectedResponseId, markSchemeGroupIds, enums.MarkingMode.PreStandardisation, false, _this.state.provisionalMarkingType);\r\n        };\r\n        /**\r\n         * on mark now clicked for select responses popup to move as provisional\r\n         */\r\n        _this.selectProvisionalMarkNowClick = function () {\r\n            var markSchemeGroupIds = Array();\r\n            if (_this.multiQigCheckboxItems && _this.multiQigCheckboxItems.length > 1) {\r\n                _this.multiQigCheckboxItems.map(function (item) {\r\n                    if (item.isChecked) {\r\n                        markSchemeGroupIds.push(item.id);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                markSchemeGroupIds.push(standardisationSetupStore.instance.markSchemeGroupId);\r\n            }\r\n            standardisationActionCreator.createStandardisationRig(standardisationSetupStore.instance.examinerRoleId, standardisationSetupStore.instance.selectedResponseId, markSchemeGroupIds, enums.MarkingMode.PreStandardisation, true, _this.state.provisionalMarkingType);\r\n        };\r\n        /**\r\n         * navigate to standardisation setup screen on mark later\r\n         */\r\n        _this.onStandardisationRigCreated = function (errorInRigCreation, doMarkNow) {\r\n            _this.setState({ popUpType: enums.PopUpType.None });\r\n            if (!errorInRigCreation) {\r\n                navigationHelper.loadStandardisationSetup();\r\n                // promise to get standardisation target details\r\n                var getStandardisationTargetDetails = standardisationActionCreator.getStandardisationTargetDetails(standardisationSetupStore.instance.markSchemeGroupId, standardisationSetupStore.instance.examinerRoleId);\r\n                getStandardisationTargetDetails.then(function (item) {\r\n                    // load select Responses details on coming from response\r\n                    var standardisationworlist = standardisationActionCreator.standardisationSetupWorkListSelection(doMarkNow ? enums.StandardisationSetup.ProvisionalResponse : enums.StandardisationSetup.SelectResponse, standardisationSetupStore.instance.markSchemeGroupId, standardisationSetupStore.instance.examinerRoleId);\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Reload unclassified worklist\r\n         */\r\n        _this.reRenderUnclassifiedWorklist = function (isFromResponse) {\r\n            // Update standardisation target details\r\n            _this.copyMarksAsDefinitiveSelected = true;\r\n            var getStandardisationTargetDetails = standardisationActionCreator.getStandardisationTargetDetails(standardisationSetupStore.instance.markSchemeGroupId, standardisationSetupStore.instance.examinerRoleId);\r\n            // Update unclassified worklist details\r\n            var standardisationWorklist = standardisationActionCreator.standardisationSetupWorkListSelection(enums.StandardisationSetup.UnClassifiedResponse, standardisationSetupStore.instance.markSchemeGroupId, standardisationSetupStore.instance.examinerRoleId);\r\n            // Response id in the unclassified worklist to which, the navigation should happen after classify action\r\n            var nextResponseId = markerOperationModeFactory.operationMode.nextResponseId(responseStore.instance.selectedDisplayId.toString());\r\n            // For classify actions from response scren\r\n            if (nextResponseId && isFromResponse) {\r\n                // Remember unclassified worklist view to go back after classify action\r\n                var stdWorklistView = standardisationSetupStore.instance.isTotalMarksViewSelected ?\r\n                    enums.STDWorklistViewType.ViewTotalMarks :\r\n                    enums.STDWorklistViewType.ViewMarksByQuestion;\r\n                var unclassifiedResponsesPromise = standardisationActionCreator.getUnClassifiedResponseDetails(standardisationSetupStore.instance.examinerRoleId, loginSession.EXAMINER_ID, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, false, stdWorklistView).then(function (item) {\r\n                    // On classifying response from response screen, navigate to next available response in the unclassified worklist\r\n                    navigationHelper.responseNavigation(enums.ResponseNavigation.next, false, parseInt(nextResponseId));\r\n                });\r\n                Promise.Promise.all([standardisationWorklist, unclassifiedResponsesPromise]).\r\n                    then(function () {\r\n                    _this.setState({ doShowClassifyResponseBusyIndicator: false });\r\n                });\r\n            }\r\n            else {\r\n                Promise.Promise.all([standardisationWorklist]).\r\n                    then(function () {\r\n                    _this.setState({ doShowClassifyResponseBusyIndicator: false });\r\n                });\r\n                // On classifying last response from response screen, navigate back to unclassified worklist.\r\n                navigationHelper.loadStandardisationSetup();\r\n            }\r\n        };\r\n        /**\r\n         * Reload provional worklist\r\n         */\r\n        _this.reRenderProvionalWorklist = function (fromMarkScheme) {\r\n            if (_this._showShareLoadingIndicatorForPE && fromMarkScheme) {\r\n                var stdWorklistView = standardisationSetupStore.instance.isTotalMarksViewSelected ? enums.STDWorklistViewType.ViewTotalMarks :\r\n                    enums.STDWorklistViewType.ViewMarksByQuestion;\r\n                var nextResponseId = markerOperationModeFactory.operationMode.nextResponseId(_this._shareResponseDetails.displayId.toString());\r\n                if (nextResponseId) {\r\n                    var responseData = standardisationSetupStore.instance.getResponseDetails(responseStore.instance.selectedDisplayId.toString());\r\n                    // remove shared response from provisional response worklist collection.\r\n                    standardisationActionCreator.updateStandardisationResponseCollection(responseData.esMarkGroupId, enums.StandardisationSetup.ProvisionalResponse);\r\n                    _this.setState({\r\n                        isBusy: false\r\n                    });\r\n                    navigationHelper.responseNavigation(enums.ResponseNavigation.next, false, parseInt(nextResponseId));\r\n                }\r\n                else {\r\n                    // if next response is not available then load worklist.\r\n                    navigationHelper.loadStandardisationSetup();\r\n                }\r\n                return;\r\n            }\r\n        };\r\n        /**\r\n         * on cancel click of reclassify multi option popup\r\n         */\r\n        _this.onCancelClickOfReclassifyMultiOptionPopUp = function () {\r\n            _this.reclassifyResponseDetails = undefined;\r\n            // Disable classify response 'OK button' while clicking on classify multi option popup 'cancel button'\r\n            if (_this.isUnclassifiedWorklistSelected()) {\r\n                _this.isClassifyResponseOkButtonDisabled = true;\r\n            }\r\n            _this.populateRecassifyMultiOptionPopUpData();\r\n            _this.setState({ popUpType: enums.PopUpType.None });\r\n        };\r\n        /**\r\n         * On cancel click of Reuse Rig action popup\r\n         */\r\n        _this.onCancelClickOfReuseRigPopup = function () {\r\n            _this.reuseRIGSelectedDisplayId = undefined;\r\n            _this.populateRecassifyMultiOptionPopUpData();\r\n            _this.populateReuseUnclassifyPopupItem();\r\n            _this.setState({ popUpType: enums.PopUpType.None });\r\n        };\r\n        /**\r\n         * On Ok mclick of ReuseRIG action popup\r\n         */\r\n        _this.onOKClickOfReuseRigpopup = function () {\r\n            var openedResponseDetails = standardisationSetupStore.instance.getReusableResponseDetails(_this.reuseRIGSelectedDisplayId.toString());\r\n            if (_this.reuseUnclassifyItem.filter(function (i) { return i.isChecked === true; })[0] === undefined) {\r\n                _this.currentMarkingMode = _this.items.filter(function (i) { return i.isChecked === true; })[0].id;\r\n            }\r\n            else {\r\n                _this.currentMarkingMode = enums.MarkingMode.PreStandardisation;\r\n            }\r\n            var documentId = openedResponseDetails.documentId;\r\n            var markGroupId = openedResponseDetails.esMarkGroupId;\r\n            var markSchemeGroupId = openedResponseDetails.markSchemeGroupId;\r\n            standardisationActionCreator.reuseRigAction(markGroupId, documentId, markSchemeGroupId, _this.currentMarkingMode);\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.None,\r\n                doShowReuseRigActionBusyIndicator: true\r\n            });\r\n        };\r\n        /**\r\n         * reclassify response to selected marking mode in popup\r\n         */\r\n        _this.onReclassifyResponse = function () {\r\n            // Fetch markSchemeGroupId\r\n            var markSchemeGroupId = standardisationSetupStore.instance.markSchemeGroupId;\r\n            // rig order update is not required for classify action\r\n            var rigOrderUpdateRequired = _this.isUnclassifiedWorklistSelected() ? false : true;\r\n            // Fetch the new marking mode id selected for reclassification\r\n            _this.currentMarkingMode = _this.items.filter(function (i) { return i.isChecked === true; })[0].id;\r\n            _this.previousMarkingMode = _this.reclassifyResponseDetails.markingModeId;\r\n            _this.displayId = _this.reclassifyResponseDetails.displayId;\r\n            // Construct the model for reclassifyResponseAction\r\n            var responseDetails = {\r\n                candidateScriptId: _this.reclassifyResponseDetails.candidateScriptId,\r\n                esCandidateScriptMarkSchemeGroupId: _this.reclassifyResponseDetails.esCandidateScriptMarkSchemeGroupId,\r\n                markSchemeGroupId: markSchemeGroupId,\r\n                markingModeId: _this.currentMarkingMode,\r\n                previousMarkingModeId: _this.reclassifyResponseDetails.markingModeId,\r\n                rigOrder: null,\r\n                isRigOrderUpdateRequired: rigOrderUpdateRequired,\r\n                displayId: _this.reclassifyResponseDetails.displayId,\r\n                totalMarkValue: _this.reclassifyResponseDetails.totalMarkValue,\r\n                oldRigOrder: _this.reclassifyResponseDetails.rigOrder,\r\n                assignNextRigOrder: _this.currentMarkingMode !== enums.MarkingMode.Seeding ? true : false,\r\n                esMarkGroupRowVersion: _this.reclassifyResponseDetails.esMarkGroupRowVersion\r\n            };\r\n            if (_this.isUnclassifiedWorklistSelected()) {\r\n                _this._classifyResponseDetails = responseDetails;\r\n                _this.isClassifyResponseOkButtonDisabled = true;\r\n                _this.setState({\r\n                    popUpType: enums.PopUpType.None,\r\n                    doShowClassifyResponseBusyIndicator: true\r\n                });\r\n                submitHelper.saveAndClassifyResponse(responseStore.instance.selectedMarkGroupId, _this._classifyResponseDetails);\r\n            }\r\n            else if (responseDetails.previousMarkingModeId !== responseDetails.markingModeId) {\r\n                // No need to call classify action if there are no changes in marking mode \r\n                // This reclassify action is being called when reclassify a response from response screen \r\n                standardisationActionCreator.reclassifyResponse(responseDetails, enums.PageContainers.Response);\r\n            }\r\n            // reset state \r\n            _this.reclassifyResponseDetails = undefined;\r\n            _this.populateRecassifyMultiOptionPopUpData();\r\n            var isBusy = !_this.isUnclassifiedWorklistSelected() ?\r\n                responseDetails.previousMarkingModeId !== responseDetails.markingModeId : false;\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.None,\r\n                doShowReclassifyResponseBusyIndicator: isBusy\r\n            });\r\n        };\r\n        /**\r\n         * Set the state of multi option popup type to Classify or Reclassify\r\n         */\r\n        _this.reclassifyMultiOptionPopupOpen = function (esMarkGroupId) {\r\n            _this.reclassifyResponseDetails =\r\n                standardisationSetupStore.instance.getResponseDetailsByEsMarkGroupIdBasedOnPermission(esMarkGroupId);\r\n            _this.populateRecassifyMultiOptionPopUpData(_this.reclassifyResponseDetails.markingModeId);\r\n            _this.setState({ popUpType: enums.PopUpType.ReclassifyMultiOption });\r\n        };\r\n        /**\r\n         * On clicking items in radio button popup\r\n         * @param item\r\n         */\r\n        _this.onCheckedChange = function (itemToBeUpdated) {\r\n            // set the isChecked property of the checked item to true\r\n            _this.items.map(function (i) {\r\n                i.isChecked = i.id === itemToBeUpdated.id ? true : false;\r\n            });\r\n            // Enable classify response OK button on selecting any of the classify response radio button options\r\n            if (_this.isUnclassifiedWorklistSelected) {\r\n                _this.isClassifyResponseOkButtonDisabled = false;\r\n            }\r\n            // If reuse popup then unchecked unclassify option when select classification\r\n            if (_this.reuseUnclassifyItem !== undefined) {\r\n                _this.reuseUnclassifyItem.map(function (i) {\r\n                    i.isChecked = false;\r\n                });\r\n            }\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * On clicking items in radio buton popup\r\n         */\r\n        _this.onReuseItemCheckedChange = function (itemToBeUpdated) {\r\n            _this.reuseUnclassifyItem.map(function (i) {\r\n                i.isChecked = i.id === itemToBeUpdated.id ? true : false;\r\n            });\r\n            // set the isChecked property of the not checked item to false\r\n            _this.items.map(function (i) {\r\n                i.isChecked = false;\r\n            });\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * Method called when reclassify popup open.\r\n         * @param reclassifiedResponseDetails\r\n         */\r\n        _this.reclassifyPopupOpen = function (reclassifiedResponseDetails) {\r\n            // Set the previous, current marking mode plus display id when we try to reclassify from worklist\r\n            // or within response.\r\n            _this.previousMarkingMode = reclassifiedResponseDetails.previousMarkingModeId;\r\n            _this.currentMarkingMode = reclassifiedResponseDetails.markingModeId;\r\n            _this.displayId = reclassifiedResponseDetails.displayId;\r\n        };\r\n        /**\r\n         * ReuseRIG action popup open\r\n         */\r\n        _this.reuseRigActionPopupOpen = function (displayId) {\r\n            _this.reuseRIGSelectedDisplayId = displayId;\r\n            _this.populateRecassifyMultiOptionPopUpData();\r\n            _this.populateReuseUnclassifyPopupItem();\r\n            var openedResponseDetails = standardisationSetupStore.instance.\r\n                getReusableResponseDetails(_this.reuseRIGSelectedDisplayId.toString());\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.ReuseRigAction\r\n            });\r\n        };\r\n        /**\r\n         * ReuseRIG action completed event\r\n         */\r\n        _this.reuseRigActionCompletedEvent = function () {\r\n            _this.reuseRIGSelectedDisplayId = undefined;\r\n            _this.populateRecassifyMultiOptionPopUpData();\r\n            _this.populateReuseUnclassifyPopupItem();\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.None,\r\n                doShowReuseRigActionBusyIndicator: false\r\n            });\r\n        };\r\n        /**\r\n         * Method to open Reclassify error popup\r\n         * whenever a fail in reclassify action.\r\n         */\r\n        _this.reclassifyErrorPopupOpen = function () {\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.ReclassifyError, doShowReclassifyResponseBusyIndicator: false\r\n            });\r\n        };\r\n        /**\r\n         * Method to hide Reclassify error popup on ok click.\r\n         */\r\n        _this.onReclassifyErrorMessageOkClick = function () {\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.None\r\n            });\r\n        };\r\n        /**\r\n         * Method to show the concurrent save fail popup\r\n         * while updating the same response marking mode by different user.\r\n         */\r\n        _this.concurrentSaveFailPopup = function (area) {\r\n            _this.concurrentSaveFailArea = area;\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.ConcurrentSaveFail,\r\n                doShowReclassifyResponseBusyIndicator: false,\r\n                doShowClassifyResponseBusyIndicator: false\r\n            });\r\n        };\r\n        /**\r\n         * Method to show the discard response fail popup while discarding the same response by different user.\r\n         */\r\n        _this.discardResponseFailPopup = function () {\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.DiscardResponseFail\r\n            });\r\n        };\r\n        /**\r\n         * Method to hide Concurrent Save Fail Popup on ok click.\r\n         */\r\n        _this.onConcurrentSaveFailPopupOkClick = function () {\r\n            // get the worklist view type.\r\n            var stdWorklistViewType = userOptionsHelper.getUserOptionByName(userOptionKeys.SELECTED_GRID_VIEW_OPTION)\r\n                === 'false' ? enums.STDWorklistViewType.ViewMarksByQuestion : enums.STDWorklistViewType.ViewTotalMarks;\r\n            if (_this.concurrentSaveFailArea === enums.PageContainers.Response) {\r\n                // when concurreny error occurs from response, navigate to ssu\r\n                navigationHelper.loadStandardisationSetup();\r\n            }\r\n            else {\r\n                if (standardisationSetupStore.instance.selectedStandardisationSetupWorkList\r\n                    === enums.StandardisationSetup.ClassifiedResponse) {\r\n                    // Refresh the Classified worklist grid with latest changes.\r\n                    standardisationActionCreator.getClassifiedResponseDetails(standardisationSetupStore.instance.examinerRoleId, loginSession.EXAMINER_ID, standardisationSetupStore.instance.markSchemeGroupId, false, stdWorklistViewType);\r\n                }\r\n                else {\r\n                    // Refresh the UnClassified worklist grid with latest changes.\r\n                    standardisationActionCreator.getUnClassifiedResponseDetails(standardisationSetupStore.instance.examinerRoleId, loginSession.EXAMINER_ID, standardisationSetupStore.instance.markSchemeGroupId, false, stdWorklistViewType);\r\n                }\r\n            }\r\n            // Reset concurrent Save Fail Area\r\n            _this.concurrentSaveFailArea = enums.PageContainers.None;\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.None\r\n            });\r\n        };\r\n        /**\r\n         * Method to hide discard response fail popup and navigate back to unclassified worklist with refreshed data.\r\n         */\r\n        _this.onDiscardResponseFailPopupOkClick = function () {\r\n            // get the worklist view type.\r\n            var stdWorklistViewType = userOptionsHelper.getUserOptionByName(userOptionKeys.SELECTED_GRID_VIEW_OPTION)\r\n                === 'false' ? enums.STDWorklistViewType.ViewMarksByQuestion : enums.STDWorklistViewType.ViewTotalMarks;\r\n            // Refresh the UnClassified worklist grid with latest data.\r\n            standardisationActionCreator.getUnClassifiedResponseDetails(standardisationSetupStore.instance.examinerRoleId, loginSession.EXAMINER_ID, standardisationSetupStore.instance.markSchemeGroupId, false, stdWorklistViewType);\r\n            navigationHelper.loadStandardisationSetup();\r\n            _this.setState({\r\n                popUpType: enums.PopUpType.None\r\n            });\r\n        };\r\n        /**\r\n         * On clicking items in check box popup\r\n         * @param item\r\n         */\r\n        _this.onChecked = function (itemToBeUpdated) {\r\n            //// set the isChecked property of the checked item to true\r\n            _this.multiQigCheckboxItems.map(function (item) {\r\n                item.isChecked = item.id === itemToBeUpdated.id ? (item.isChecked ? false : true) : item.isChecked;\r\n            });\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * Popup element for note timestamp changed popup.\r\n         */\r\n        _this.onNoteTimeStampChangedPopupClose = function () {\r\n            _this.setState({ isNoteTimeStampChangedPopupVisible: false });\r\n        };\r\n        /**\r\n         * Popup element for response modified popup.\r\n         */\r\n        _this.onResponseModifiedPopupClose = function () {\r\n            _this.setState({ isResponseModifiedPopupVisibile: false });\r\n            navigationHelper.loadStandardisationSetup();\r\n        };\r\n        /**\r\n         * Sets the visibility of UnClassified response unavailable popup.\r\n         */\r\n        _this.unClassifiedScriptinStmUnavailable = function () {\r\n            _this.setState({\r\n                unClassifiedScriptinStmUnavailableVisible: true\r\n            });\r\n        };\r\n        /**\r\n         * Ok click action, on UnClassified unavailable popup.\r\n         */\r\n        _this.okClickOnUnavailablePopUp = function () {\r\n            _this.setState({\r\n                unClassifiedScriptinStmUnavailableVisible: false\r\n            });\r\n            navigationHelper.loadStandardisationSetup();\r\n        };\r\n        /**\r\n         *  Rerender rig not found pop up.\r\n         */\r\n        _this.showOrHideRigNotFoundPopup = function (showOrHideRigNotFound) {\r\n            _this.setState({ showRigNotFoundPopUp: showOrHideRigNotFound });\r\n        };\r\n        /**\r\n         *  Rerender Rig not found popup\r\n         */\r\n        _this.onRigNotFoundOkClick = function () {\r\n            _this.setState({ showRigNotFoundPopUp: false });\r\n        };\r\n        /**\r\n         *  Display confirmation dialog to share the response.\r\n         */\r\n        _this.shareResponsePopupOpen = function (shareResponseDetails, isSharedFromMarkScheme) {\r\n            // Set flag to display shareResponse Popup Or not.\r\n            _this._shareResponseDetails = shareResponseDetails;\r\n            _this._isSharedFromMarkScheme = isSharedFromMarkScheme;\r\n            _this._showShareLoadingIndicator = true;\r\n            _this.populateRecassifyMultiOptionPopUpData();\r\n            _this.populateShareForPEclassifyPopupItem();\r\n            if (standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.classify) {\r\n                _this._showShareLoadingIndicatorForPE = true;\r\n                _this.setState({\r\n                    isShareResponsePopupDisplayingForPE: true,\r\n                    isBusy: false\r\n                });\r\n            }\r\n            else {\r\n                _this.setState({\r\n                    isShareResponsePopupDisplaying: true,\r\n                    isBusy: false\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         *  Close Share Response dialog after clicking Cancel.\r\n         */\r\n        _this.shareResponsePopupClose = function () {\r\n            // Set flag to display shareResponse Popup Or not.\r\n            _this._showShareLoadingIndicator = false;\r\n            _this.setState({\r\n                isShareResponsePopupDisplaying: false,\r\n                isShareResponsePopupDisplayingForPE: false\r\n            });\r\n        };\r\n        /**\r\n         * share Provisional Response\r\n         */\r\n        _this.shareResponse = function () {\r\n            _this.setState({\r\n                isShareResponsePopupDisplaying: false,\r\n                isShareResponsePopupDisplayingForPE: false,\r\n                isBusy: true\r\n            });\r\n            var markingMode;\r\n            // Fetch markSchemeGroupId\r\n            var markSchemeGroupId = standardisationSetupStore.instance.markSchemeGroupId;\r\n            if (_this.IsShareAndClassifyOptionNeeded) {\r\n                markingMode = _this.items.filter(function (i) { return i.isChecked === true; })[0].id;\r\n            }\r\n            else {\r\n                markingMode = _this._shareResponseDetails.markingModeId;\r\n            }\r\n            /**\r\n             * mapping values on submit argument\r\n             */\r\n            _this._shareResponseArgument = {\r\n                markGroupIds: [_this._shareResponseDetails.esMarkGroupId],\r\n                markingMode: markingMode,\r\n                examinerRoleId: standardisationSetupStore.instance.examinerRoleId,\r\n                markSchemeGroupId: standardisationSetupStore.instance.markSchemeGroupId,\r\n                examinerApproval: examinerStore.instance.getMarkerInformation.approvalStatus,\r\n                isAdminRemarker: false\r\n            };\r\n            if (_this.IsShareAndClassifyOptionNeeded) {\r\n                if (_this._isSharedFromMarkScheme) {\r\n                    //invoke save and navigate Provisional Response\r\n                    markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.shareAndClassify);\r\n                }\r\n                else {\r\n                    submitActionCreator.shareAndClassifyResponse(_this._shareResponseArgument, _this._isSharedFromMarkScheme, _this._shareResponseDetails.displayId);\r\n                }\r\n            }\r\n            else {\r\n                if (_this._isSharedFromMarkScheme) {\r\n                    markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.submit);\r\n                }\r\n                else {\r\n                    submitActionCreator.submitResponse(_this._shareResponseArgument, standardisationSetupStore.instance.markSchemeGroupId, enums.WorklistType.none, enums.RemarkRequestType.Unknown, _this._isSharedFromMarkScheme, _this._shareResponseDetails.displayId);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * submitResponseFromMarkscheme will be called when the response is ready to navigate\r\n         */\r\n        _this.submitResponseFromMarkscheme = function () {\r\n            if (markingStore.instance.navigateTo === enums.SaveAndNavigate.shareAndClassify) {\r\n                submitHelper.saveAndShareAndClassifyResponse(_this._shareResponseArgument, _this._isSharedFromMarkScheme, _this._shareResponseDetails.displayId);\r\n            }\r\n        };\r\n        _this.state = {\r\n            doShowSavingMarksAndAnnotationsIndicator: false,\r\n            isNonRecoverableErrorPopupVisible: false,\r\n            isDisplayingGraceResponseLessthan100PercentageError: false,\r\n            isDisplayingGraceResponseExpiredError: false,\r\n            isDisplayingResponseRemovedError: false,\r\n            isOnline: applicationStore.instance.isOnline,\r\n            isBusy: false,\r\n            isApplicationOffline: false,\r\n            nonRecoverableSaveMarksAndAnnotationsErrorMessage: false,\r\n            isMarkingCheckCompleteConfirmationPopupDisplaying: false,\r\n            doShowPopup: false,\r\n            showSimulationResponseSubmitConfirmationPopup: false,\r\n            showSimulationExitedPopup: false,\r\n            showAllSimulationExitedQigs: false,\r\n            renderedOn: 0,\r\n            isShared: false,\r\n            doShowShareConfirmationPopup: false,\r\n            isQigsessionClosedError: false,\r\n            popUpType: enums.PopUpType.None,\r\n            isNoteTimeStampChangedPopupVisible: false,\r\n            isResponseModifiedPopupVisibile: false,\r\n            unClassifiedScriptinStmUnavailableVisible: false,\r\n            showRigNotFoundPopUp: false,\r\n            provisionalMarkingType: enums.ProvisionalMarkingType.None,\r\n            isSaveEmailMessageDisplaying: false,\r\n            isShareResponsePopupDisplaying: false,\r\n            isShareResponsePopupDisplayingForPE: false\r\n        };\r\n        _this.onYesClickOfLogoutConfirmation = _this.onYesClickOfLogoutConfirmation.bind(_this);\r\n        _this.onYesClickOfLogoutConfirmationAutoLogout = _this.onYesClickOfLogoutConfirmation.bind(_this, true);\r\n        _this.onNoClickOfLogoutConfirmation = _this.onNoClickOfLogoutConfirmation.bind(_this);\r\n        _this.onOkClickOfNonRecoverableErrorMessage = _this.onOkClickOfNonRecoverableErrorMessage.bind(_this);\r\n        _this.userActionInterrupted = _this.userActionInterrupted.bind(_this);\r\n        _this.onOkClickMandatoryMessageValidationPopup = _this.onOkClickMandatoryMessageValidationPopup.bind(_this);\r\n        _this.onPopupOkClick = _this.onPopupOkClick.bind(_this);\r\n        _this.ShowSupervisorSamplingCommentValidationPopup = _this.ShowSupervisorSamplingCommentValidationPopup.bind(_this);\r\n        _this.onOkClickOfResponseInGraceExpiredMessageOrResponseRemovedMessage =\r\n            _this.onOkClickOfResponseInGraceExpiredMessageOrResponseRemovedMessage.bind(_this);\r\n        /* setting submit confirmation yes/no functions to initialize. */\r\n        _this.onYesClickOfSubmitButton = _this.onYesClickOfSubmitButton.bind(_this);\r\n        _this.onNoClickOfSubmitButton = _this.onNoClickOfSubmitButton.bind(_this);\r\n        _this.onYesClickOfShareConfirmationPopup = _this.onYesClickOfShareConfirmationPopup.bind(_this);\r\n        _this.onNoClickOfShareConfirmationPopup = _this.onNoClickOfShareConfirmationPopup.bind(_this);\r\n        _this.OnOkClickOfMarkingCheckCompleteConfirmation = _this.OnOkClickOfMarkingCheckCompleteConfirmation.bind(_this);\r\n        _this.OnCancelClickOfMarkingCheckCompleteConfirmation = _this.OnCancelClickOfMarkingCheckCompleteConfirmation.bind(_this);\r\n        _this._boundOnlineStatusEvent = _this.updateOnlineStatus.bind(_this);\r\n        _this.isAutozonedMessagePopupVisible = _this.isAutozonedMessagePopupVisible.bind(_this);\r\n        _this.onSelectStdSetupResponseToMark = _this.onSelectStdSetupResponseToMark.bind(_this);\r\n        _this.onCompleteStandardisationSetup = _this.onCompleteStandardisationSetup.bind(_this);\r\n        _this.onOkClickofStandardisationSetupValidate = _this.onOkClickofStandardisationSetupValidate.bind(_this);\r\n        _this.resetBusyIndicatorStdSetupNotComplete = _this.resetBusyIndicatorStdSetupNotComplete.bind(_this);\r\n        _this.OnCancelClickOfCompleteStandardisationConfirmation = _this.OnCancelClickOfCompleteStandardisationConfirmation.bind(_this);\r\n        _this.OnOkClickOfCompleteStandardisationConfirmation = _this.OnOkClickOfCompleteStandardisationConfirmation.bind(_this);\r\n        _this.onResponseDataRecievedAfterRefresh = _this.onResponseDataRecievedAfterRefresh.bind(_this);\r\n        _this.onNoteTimeStampChangedPopupClose = _this.onNoteTimeStampChangedPopupClose.bind(_this);\r\n        _this.displayNoteSaveFailedPopup = _this.displayNoteSaveFailedPopup.bind(_this);\r\n        _this.reRenderUnclassifiedWorklist = _this.reRenderUnclassifiedWorklist.bind(_this);\r\n        _this.reRenderOnClassifiedResponseReceived = _this.reRenderOnClassifiedResponseReceived.bind(_this);\r\n        _this.shareResponse = _this.shareResponse.bind(_this);\r\n        _this.onOKClickOfReuseRigpopup = _this.onOKClickOfReuseRigpopup.bind(_this);\r\n        _this.populateReuseUnclassifyPopupItem = _this.populateReuseUnclassifyPopupItem.bind(_this);\r\n        _this.onReuseItemCheckedChange = _this.onReuseItemCheckedChange.bind(_this);\r\n        _this.onCancelClickOfReuseRigPopup = _this.onCancelClickOfReuseRigPopup.bind(_this);\r\n        _this.onCheckedChange = _this.onCheckedChange.bind(_this);\r\n        _this.shareResponsePopupOpen = _this.shareResponsePopupOpen.bind(_this);\r\n        _this.onSubmitResponseCompleted = _this.onSubmitResponseCompleted.bind(_this);\r\n        _this.reRenderProvionalWorklist = _this.reRenderProvionalWorklist.bind(_this);\r\n        _this.submitResponseFromMarkscheme = _this.submitResponseFromMarkscheme.bind(_this);\r\n        if (config.general.IDLE_TIMEOUT) {\r\n            _this._idleTimeOut = config.general.IDLE_TIMEOUT;\r\n        }\r\n        // One Issue noticed that the footer compoent is taking time to load sometimes. \r\n        // Because of this, some of the events are already passed. Recheck for the first time for one of the event.\r\n        if (qigStore.instance.getOverviewData === undefined) {\r\n            _this.onSimulationExitedQigsAndLocksInQigsRecieved(false);\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    Footer.prototype.render = function () {\r\n        var isAskOnLogOutEnabled;\r\n        var confirmationDialog;\r\n        var busyIndicator;\r\n        var submitConfirmationDialog = (React.createElement(ConfirmationDialog, { content: this.submitConfirmationDialogueContent, header: this.submitConfirmationDialogueHeader, displayPopup: this.state.isSubmitConfirmationPopupDisplaying, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('generic.logout-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('generic.logout-dialog.yes-button'), onYesClick: this.onYesClickOfSubmitButton, onNoClick: this.onNoClickOfSubmitButton, isKeyBoardSupportEnabled: true, dialogType: enums.PopupDialogType.LogoutConfirmation }));\r\n        var shareConfirmationPopup = this.state.isShared ? (React.createElement(ConfirmationDialog, { content: localeStore.instance.TranslateText('marking.response.share-confirmation-popup.content'), header: null, displayPopup: this.state.doShowShareConfirmationPopup, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('marking.response.share-confirmation-popup.no-button'), yesButtonText: localeStore.instance.TranslateText('marking.response.share-confirmation-popup.yes-button'), onYesClick: this.onYesClickOfShareConfirmationPopup.bind(this), onNoClick: this.onNoClickOfShareConfirmationPopup.bind(this), dialogType: enums.PopupDialogType.ShareConfirmationPopup, isKeyBoardSupportEnabled: true })) : null;\r\n        var mandatoryMessageValidationPopup = (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('messaging.compose-message.mandatory-message-warning-dialog.body'), header: localeStore.instance.TranslateText('messaging.compose-message.mandatory-message-warning-dialog.header'), displayPopup: this.state.doShowMandatoryMessageValidationPopup, okButtonText: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.ok-button'), onOkClick: this.onOkClickMandatoryMessageValidationPopup.bind(this), id: 'mandatoryMessageValidationPopup', key: 'mandatoryMessageValidationPopup', popupDialogType: enums.PopupDialogType.none }));\r\n        var supervisorSamplingCommentValidationPopup = (React.createElement(GenericDialog, { content: this.messageDetails.messageString, header: this.messageDetails.messageHeader, displayPopup: this.state.doShowPopup, okButtonText: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.ok-button'), onOkClick: this.onPopupOkClick.bind(this), id: 'supervisorSamplingCommentValidationPopup', key: 'supervisorSamplingCommentValidationPopup', popupDialogType: enums.PopupDialogType.GenericMessage }));\r\n        var noteTimeStampChangedPopup = (React.createElement(GenericDialog, { content: this.messageDetails.messageString, header: this.messageDetails.messageHeader, displayPopup: this.state.isNoteTimeStampChangedPopupVisible, okButtonText: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.ok-button'), onOkClick: this.onNoteTimeStampChangedPopupClose.bind(this), id: 'noteTimeStampChangedPopup', key: 'noteTimeStampChangedPopup', popupDialogType: enums.PopupDialogType.GenericMessage }));\r\n        var responseModifiedPopup = (React.createElement(GenericDialog, { content: this.messageDetails.messageString, header: this.messageDetails.messageHeader, displayPopup: this.state.isResponseModifiedPopupVisibile, okButtonText: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.ok-button'), onOkClick: this.onResponseModifiedPopupClose.bind(this), id: 'responseMOdifiedPopup', key: 'responseMOdifiedPopup', popupDialogType: enums.PopupDialogType.GenericMessage }));\r\n        var simulationResponseSubmitConfirmationPopup = (React.createElement(ConfirmationDialog, { content: this.simulationResponseSubmitConfirmationDialogueContent, header: this.simulationResponseSubmitConfirmationDialogueHeader, displayPopup: this.state.showSimulationResponseSubmitConfirmationPopup, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('generic.logout-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('generic.logout-dialog.yes-button'), onYesClick: this.onYesClickOfSimulationResponseSubmitButton.bind(this), onNoClick: this.onNoClickOfSimulationResponseSubmitButton.bind(this), dialogType: enums.PopupDialogType.SimulationResponseSubmitConfirmation, isKeyBoardSupportEnabled: true }));\r\n        /** Getting Ask On LogOut value from user option */\r\n        isAskOnLogOutEnabled =\r\n            userOptionsHelper.getUserOptionByName(useroptionKeys.ASK_ON_LOG_OUT) === 'true'\r\n                ? true\r\n                : false;\r\n        /** this.props.isConfirmationPopupDisplaying check included here, in the initial load its value\r\n         *    will be false\r\n         */\r\n        if (!isAskOnLogOutEnabled &&\r\n            this.props.isLogoutConfirmationPopupDisplaying &&\r\n            !this.state.doShowSavingMarksAndAnnotationsIndicator &&\r\n            !this._onLogoutTriggered) {\r\n            this.onYesClickOfLogoutConfirmation();\r\n            /**this.props.isConfirmationPopupDisplaying check included here, if it is true will load the confirmation dialog\r\n             * content into confirmationDialog\r\n             */\r\n        }\r\n        else if (this.props.isLogoutConfirmationPopupDisplaying &&\r\n            !this.state.doShowSavingMarksAndAnnotationsIndicator &&\r\n            !this._onLogoutTriggered) {\r\n            confirmationDialog = (React.createElement(ConfirmationDialog, { content: localeStore.instance.TranslateText('generic.logout-dialog.body'), header: localeStore.instance.TranslateText('generic.logout-dialog.header'), displayPopup: this.props.isLogoutConfirmationPopupDisplaying, isCheckBoxVisible: true, noButtonText: localeStore.instance.TranslateText('generic.logout-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('generic.logout-dialog.yes-button'), onYesClick: this.onYesClickOfLogoutConfirmation, onNoClick: this.onNoClickOfLogoutConfirmation, dialogType: enums.PopupDialogType.LogoutConfirmation }));\r\n        }\r\n        if (this.state.isBusy) {\r\n            switch (busyIndicatorStore.instance.getBusyIndicatorInvoker) {\r\n                case enums.BusyIndicatorInvoker.submitInResponseScreen:\r\n                    busyIndicator = (React.createElement(BusyIndicator, { id: 'response_' +\r\n                            enums.BusyIndicatorInvoker.submitInResponseScreen.toString(), isBusy: this.state.isBusy, key: 'response_' +\r\n                            enums.BusyIndicatorInvoker.submitInResponseScreen.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.submitInResponseScreen, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n                    break;\r\n                case enums.BusyIndicatorInvoker.loadingHistoryDetails:\r\n                    busyIndicator = (React.createElement(BusyIndicator, { id: 'history_' +\r\n                            enums.BusyIndicatorInvoker.loadingHistoryDetails.toString(), isBusy: this.state.isBusy, key: 'history_' +\r\n                            enums.BusyIndicatorInvoker.loadingHistoryDetails.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.loadingHistoryDetails, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n                    break;\r\n                case enums.BusyIndicatorInvoker.validateStandardisationSetup:\r\n                    busyIndicator = (React.createElement(BusyIndicator, { id: 'std_' +\r\n                            enums.BusyIndicatorInvoker.validateStandardisationSetup.toString(), isBusy: this.state.isBusy, key: 'std_' +\r\n                            enums.BusyIndicatorInvoker.validateStandardisationSetup.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.validateStandardisationSetup, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n                    break;\r\n            }\r\n        }\r\n        if (this.state.isCompleteStandardisation && this.state.isBusy === true) {\r\n            busyIndicator = (React.createElement(BusyIndicator, { id: 'std_' +\r\n                    enums.BusyIndicatorInvoker.completingStandardisationSetup.toString(), isBusy: this.state.isBusy, key: 'std_' +\r\n                    enums.BusyIndicatorInvoker.completingStandardisationSetup.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.completingStandardisationSetup, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n        }\r\n        if (this.state.isBusy === true && (this._showShareLoadingIndicator || this._showShareLoadingIndicatorForPE)) {\r\n            busyIndicator = (React.createElement(BusyIndicator, { id: 'std_' +\r\n                    enums.BusyIndicatorInvoker.completingStandardisationSetup.toString(), isBusy: this.state.isBusy, key: 'std_' +\r\n                    enums.BusyIndicatorInvoker.completingStandardisationSetup.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.completingStandardisationSetup, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n        }\r\n        if (this.state.doShowSavingMarksAndAnnotationsIndicator) {\r\n            busyIndicator = (React.createElement(BusyIndicator, { id: 'response_' +\r\n                    enums.BusyIndicatorInvoker.savingMarksAndAnnotations.toString(), isBusy: this.state.doShowSavingMarksAndAnnotationsIndicator, key: 'response_' +\r\n                    enums.BusyIndicatorInvoker.savingMarksAndAnnotations.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.savingMarksAndAnnotations, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n        }\r\n        if (this.state.doShowReclassifyResponseBusyIndicator) {\r\n            busyIndicator = (React.createElement(BusyIndicator, { id: 'response_' +\r\n                    enums.BusyIndicatorInvoker.reclassifyResponse.toString(), isBusy: this.state.doShowReclassifyResponseBusyIndicator, key: 'response_' +\r\n                    enums.BusyIndicatorInvoker.reclassifyResponse.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.reclassifyResponse, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n        }\r\n        if (this.state.doShowReuseRigActionBusyIndicator) {\r\n            busyIndicator = (React.createElement(BusyIndicator, { id: 'response_' +\r\n                    enums.BusyIndicatorInvoker.reuseResponse.toString(), isBusy: this.state.doShowReuseRigActionBusyIndicator, key: 'response_' +\r\n                    enums.BusyIndicatorInvoker.reuseResponse.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.reuseResponse, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n        }\r\n        if (this.state.doShowClassifyResponseBusyIndicator) {\r\n            if (this.isUnclassifiedWorklistSelected()) {\r\n                busyIndicator = (React.createElement(BusyIndicator, { id: 'response_' +\r\n                        enums.BusyIndicatorInvoker.classifyResponse.toString(), isBusy: this.state.doShowClassifyResponseBusyIndicator, key: 'response_' +\r\n                        enums.BusyIndicatorInvoker.classifyResponse.toString(), isMarkingBusy: false, busyIndicatorInvoker: enums.BusyIndicatorInvoker.classifyResponse, showBackgroundScreen: false, isOffline: !this.state.isOnline }));\r\n            }\r\n        }\r\n        var nonRecoverableErrorMessage = (React.createElement(GenericDialog, { content: this.saveMarksAndAnnotationsErrorDialogContents.content, header: this.saveMarksAndAnnotationsErrorDialogContents.header, multiLineContent: this.saveMarksAndAnnotationsErrorDialogContents.tableContent, displayPopup: this.state.isNonRecoverableErrorPopupVisible, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfNonRecoverableErrorMessage, id: 'nonRecoverableErrorMessge', key: 'marksAndAnnotationsErrorMessge', popupDialogType: enums.PopupDialogType.NonRecoverableDetailedError }));\r\n        var nonRecoverableSaveMarksAndAnnotationsErrorMessage = (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('marking.worklist.response-submission-error-dialog.body-single-response-not-submitted'), header: localeStore.instance.TranslateText('marking.worklist.response-submission-error-dialog.header'), displayPopup: this.state.nonRecoverableSaveMarksAndAnnotationsErrorMessage, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfNonRecoverableErrorMessage, id: 'nonRecoverableSaveMarksAndAnnotationErrorMessge', key: 'saveMarksAndAnnotationsErrorMessge', popupDialogType: enums.PopupDialogType.AllPageNotAnnotated }));\r\n        var gracePeriodResponseUnmarkedDialog = this.state\r\n            .isDisplayingGraceResponseLessthan100PercentageError ? this._failureReason ===\r\n            enums.ResponseNavigateFailureReason.MarksMissingInGracePeriodResponse ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.body-cannot-leave-response-partially-marked-in-grace'), header: localeStore.instance.TranslateText('marking.response.leaving-response-warning-dialog.header'), displayPopup: this.state.isDisplayingGraceResponseLessthan100PercentageError, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfResponseInGraceMessage.bind(this), id: 'responseInGraceMessage', key: 'responseInGraceMessageMessge', popupDialogType: enums.PopupDialogType.GracePeriodWarning })) : (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.body-must-annotate-all-pages-in-grace'), header: localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.header-must-annotate-all-pages-in-grace'), displayPopup: this.state.isDisplayingGraceResponseLessthan100PercentageError, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfResponseInGraceMessage.bind(this), id: 'responseInGraceMessage', key: 'responseInGraceMessageMessge', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var gracePeriodExpiredErrorDialog = this.state.isDisplayingGraceResponseExpiredError ? (React.createElement(GenericDialog, { content: this.getGracePeriodExpiredMessageBody(), header: localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.header-grace-period-expired'), displayPopup: this.state.isDisplayingGraceResponseExpiredError, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfResponseInGraceExpiredMessageOrResponseRemovedMessage, id: 'responseInGraceMessage', key: 'responseInGraceMessageMessge', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var responseRemovedErrorDialog = this.state.isDisplayingResponseRemovedError ? (React.createElement(GenericDialog, { content: this.getResponseRemovedErrorDialogMessageBody(), header: localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.header-response-removed-from-worklist'), displayPopup: this.state.isDisplayingResponseRemovedError, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfResponseInGraceExpiredMessageOrResponseRemovedMessage, id: 'response-removed-error-message', key: 'key-response-removed-error-message', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var confirmationDialogContent;\r\n        if (this.state.popUpType === enums.PopUpType.DiscardMessage) {\r\n            confirmationDialogContent = localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.body-discard');\r\n        }\r\n        else if (this.state.popUpType === enums.PopUpType.DiscardMessageNavigateAway) {\r\n            if (this.popUpData.popupContent) {\r\n                confirmationDialogContent = this.popUpData.popupContent;\r\n            }\r\n            else {\r\n                confirmationDialogContent = localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.body-navigated-away');\r\n            }\r\n        }\r\n        else {\r\n            confirmationDialogContent = localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.body-start-new-message-while-composing');\r\n        }\r\n        var discardMessageDialog = this.state.popUpType === enums.PopUpType.DiscardMessage ||\r\n            this.state.popUpType === enums.PopUpType.DiscardMessageNavigateAway ||\r\n            this.state.popUpType === enums.PopUpType.DiscardOnNewMessageButtonClick ? (React.createElement(ConfirmationDialog, { content: this.popUpData.popupContent ? (this.popUpData.popupContent) : (confirmationDialogContent), header: localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.header'), displayPopup: true, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.yes-button'), onYesClick: this.handlePopUpAction.bind(this, this.state.popUpType, enums.PopUpActionType.Yes), onNoClick: this.handlePopUpAction.bind(this, this.state.popUpType, enums.PopUpActionType.No), dialogType: enums.PopupDialogType.Message, isKeyBoardSupportEnabled: true })) : null;\r\n        var confirmationHeaderContent;\r\n        switch (this.state.popUpType) {\r\n            case enums.PopUpType.DiscardMessageOnNewException:\r\n            case enums.PopUpType.DiscardMessageOnViewExceptionButtonClick:\r\n                confirmationHeaderContent = localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.header');\r\n                break;\r\n            case enums.PopUpType.DiscardExceptionNavigateAway:\r\n                confirmationHeaderContent = localeStore.instance.TranslateText('marking.response.discard-exception-dialog.header');\r\n                confirmationDialogContent = localeStore.instance.TranslateText('marking.response.discard-exception-dialog.body-navigate-away');\r\n                break;\r\n            case enums.PopUpType.CloseException:\r\n                confirmationHeaderContent = localeStore.instance.TranslateText('marking.response.close-exception-dialog.header');\r\n                break;\r\n            default:\r\n                confirmationHeaderContent = localeStore.instance.TranslateText('marking.response.discard-exception-dialog.header');\r\n                confirmationDialogContent = localeStore.instance.TranslateText('marking.response.discard-exception-dialog.body-raise-new');\r\n                break;\r\n        }\r\n        var discardExceptionDialog = this.state.popUpType === enums.PopUpType.DiscardException ||\r\n            this.state.popUpType === enums.PopUpType.DiscardExceptionNavigateAway ||\r\n            this.state.popUpType === enums.PopUpType.DiscardOnNewExceptionButtonClick ||\r\n            this.state.popUpType === enums.PopUpType.DiscardMessageOnViewExceptionButtonClick ||\r\n            this.state.popUpType === enums.PopUpType.DiscardExceptionOnViewExceptionButtonClick ||\r\n            this.state.popUpType === enums.PopUpType.DiscardExceptionOnViewMessage ||\r\n            this.state.popUpType === enums.PopUpType.DiscardMessageOnNewException ||\r\n            this.state.popUpType === enums.PopUpType.DiscardExceptionOnNewMessage ||\r\n            this.state.popUpType === enums.PopUpType.CloseException ? (React.createElement(ConfirmationDialog, { content: this.popUpData.popupContent ? (this.popUpData.popupContent) : (confirmationDialogContent), header: confirmationHeaderContent, displayPopup: true, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('marking.response.discard-exception-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('marking.response.discard-exception-dialog.yes-button'), onYesClick: this.handlePopUpAction.bind(this, this.state.popUpType, enums.PopUpActionType.Yes), onNoClick: this.handlePopUpAction.bind(this, this.state.popUpType, enums.PopUpActionType.No), dialogType: enums.PopupDialogType.Exception, isKeyBoardSupportEnabled: true })) : null;\r\n        var mandatoryMessageDialog = this.state.popUpType === enums.PopUpType.MandatoryMessage ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('messaging.mandatory-message-dialog.body'), header: localeStore.instance.TranslateText('messaging.mandatory-message-dialog.header'), displayPopup: true, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.handlePopUpAction.bind(this, this.state.popUpType, enums.PopUpActionType.Ok), id: 'id_mandatory_message_dialog', key: 'key_mandatory_message_dialog', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var withdrawErrorDialog = this.state.isWithdrawnResponseError ? (React.createElement(GenericDialog, { content: this.getWithdrawnResponseErrorMessage(), header: localeStore.instance.TranslateText('marking.worklist.response-allocation-error-dialog.response-allocation-error-header-withdrawnMarker'), displayPopup: this.state.isWithdrawnResponseError, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfWithDrawErrorMessage.bind(this), id: 'withdrawResponseMessage', key: 'withdrawResponseMessageMessage', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var sessionClosedErrorDilaog = this.state.isQigsessionClosedError ? (React.createElement(GenericDialog, { content: this.getSessionClosedErrorMessage(), header: localeStore.instance.TranslateText('marking.worklist.request-marking-check-error-dialog.header-session-closed'), displayPopup: this.state.isQigsessionClosedError, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfWithDrawErrorMessage.bind(this), id: 'sessionClosedResponseMessage', key: 'sessionClosedResponseMessageMessage', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var responseSearchFailedErrorDialog = this.state.isResponseSearchFailed ? (React.createElement(GenericDialog, { content: this.getResponseSearchFailedErrorMessage(), header: localeStore.instance.TranslateText('generic.error-dialog.header'), displayPopup: this.state.isResponseSearchFailed, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onOkClickOfResponseSearchFailedErrorMessage.bind(this), id: 'removedResponseMessage', key: 'removedResponseMessageMessage', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var applicationOffLineErrorMessage = this.state.isApplicationOffline ? (React.createElement(GenericDialog, { content: this.offlineErrorMessage, header: localeStore.instance.TranslateText('generic.offline-dialog.header'), displayPopup: this.state.isApplicationOffline, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onApplicationErrorMessagePopUpClicked.bind(this), id: 'offlineErrorMessge', key: 'offlineErrorMessge', popupDialogType: enums.PopupDialogType.OffLineWarning })) : null;\r\n        var idleTimer = this.state.isOnline ? (React.createElement(IdleTimer, { idleAction: this.onYesClickOfLogoutConfirmationAutoLogout, timeout: this._idleTimeOut })) : null;\r\n        var noMarkingCheckAvailableMessage = this.state.popUpType === enums.PopUpType.NoMarkingCheckRequestPossible ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('marking.worklist.request-marking-check-error-dialog.body-no-examiners-available'), header: localeStore.instance.TranslateText('marking.worklist.request-marking-check-error-dialog.header-no-examiners-available'), displayPopup: this.state.doShowNoMarkingCheckAvailableMessage, okButtonText: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.ok-button'), onOkClick: this.handlePopUpAction.bind(this, this.state.popUpType, enums.PopUpActionType.Ok), id: 'id_no_marking_check_message', key: 'key_no_marking_check_message', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var markingCheckCompleteConfirmationPopup = this.state\r\n            .isMarkingCheckCompleteConfirmationPopupDisplaying ? (React.createElement(ConfirmationDialog, { content: localeStore.instance\r\n                .TranslateText('marking.worklist.perform-marking-check-confirmation-dialog.body')\r\n                .replace('{0}', worklistStore.instance.selectedMarkingCheckExaminer.toExaminer.fullName), header: localeStore.instance.TranslateText('marking.worklist.perform-marking-check-confirmation-dialog.header'), displayPopup: true, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('generic.user-menu.profile-section.cancel-email-button'), yesButtonText: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.ok-button'), onYesClick: this.OnOkClickOfMarkingCheckCompleteConfirmation, onNoClick: this.OnCancelClickOfMarkingCheckCompleteConfirmation, dialogType: enums.PopupDialogType.CompleteMarkingCheck, isKeyBoardSupportEnabled: true })) : null;\r\n        var warningMessagePopup = (React.createElement(WarningMessagePopup, { id: 'id_warning_message_popup', key: 'key_warning_message_popup', buttonText: localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.ok-button') }));\r\n        var submitErrorPopup = this.state.isSubmitErrorPopDisplaying ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText(this.submitMessageErrorPopupContent.messageContent), header: localeStore.instance.TranslateText(this.submitMessageErrorPopupContent.messageHeader), displayPopup: this.state.isSubmitErrorPopDisplaying, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onSubmitResponseErrorPopupOkClick, id: 'submitErrorMessge', key: 'submitErrorMessge', popupDialogType: enums.PopupDialogType.SubmitResponseError })) : null;\r\n        //Pop up for displaying warning message on opening a QIG in an autozoned question paper\r\n        var autozonedWarningMessage = this.state.isAutozonedMessagePopupDisplaying ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('marking.worklist.autozoned-warning-dialog.body'), header: localeStore.instance.TranslateText('marking.worklist.autozoned-warning-dialog.header'), displayPopup: this.state.isAutozonedMessagePopupDisplaying, okButtonText: localeStore.instance.TranslateText('marking.worklist.autozoned-warning-dialog.ok-button'), onOkClick: this.onAutozonedWarningMessageOkClick, id: 'id_autozonedWarningMessage', key: 'key_autozonedWarningMessage', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        // popup when clicked on the select responses in Std setup - select to mark button\r\n        var selecttoMarkProvisionalDialog = this.state.popUpType === enums.PopUpType.SelectToMarkAsProvisional ? (React.createElement(MultiOptionConfirmationDialog, { content: this.getSelectToMarkProvisionalPopupContent, header: localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-header'), displayPopup: true, onCancelClick: this.onCancelClickOfSelectResponseToMarkasProvisional, onYesClick: this.selectProvisionalMarkNowClick, onNoClick: this.selectProvisionalMarkLaterClick, isKeyBoardSupportEnabled: true, selectedLanguage: this.props.selectedLanguage, popupSize: enums.PopupSize.Medium, popupType: enums.PopUpType.SelectToMarkAsProvisional, buttonCancelText: localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-button1'), buttonNoText: localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-button2'), buttonYesText: localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-button3'), displayNoButton: true })) : null;\r\n        var completeStandardisationPopup = this.props.isCompleteStandardisation && !this.state.isCompleteStandardisation ? (React.createElement(ConfirmationDialog, { content: localeStore.instance.TranslateText('standardisation-setup.left-panel.complete-standardisation-popup-body'), header: localeStore.instance.TranslateText('standardisation-setup.left-panel.complete-standardisation-popup-header'), displayPopup: true, isCheckBoxVisible: false, noButtonText: localeStore.instance.TranslateText('generic.logout-dialog.no-button'), yesButtonText: localeStore.instance.TranslateText('generic.logout-dialog.yes-button'), onYesClick: this.OnOkClickOfCompleteStandardisationConfirmation, onNoClick: this.OnCancelClickOfCompleteStandardisationConfirmation, dialogType: enums.PopupDialogType.none, isKeyBoardSupportEnabled: true })) : null;\r\n        var completeStandardisationSetupPopup = this.state.popUpType === enums.PopUpType.CompleteStandardisationValidate ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('standardisation-setup.left-panel.complete-standardisation-validate-body'), header: localeStore.instance.TranslateText('standardisation-setup.left-panel.complete-standardisation-validate-header'), displayPopup: this.state.popUpType === enums.PopUpType.CompleteStandardisationValidate ? true : false, okButtonText: localeStore.instance.TranslateText('marking.worklist.autozoned-warning-dialog.ok-button'), onOkClick: this.onOkClickofStandardisationSetupValidate, id: 'id_standardisationsetupvalidate', key: 'key_autozonedWarningMessage', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var markAsDefinitiveDialog = this.state.popUpType === enums.PopUpType.MarkAsDefinitive ? (React.createElement(MultiOptionConfirmationDialog, { content: this.getMarkAsDefinitivePopupContent, header: localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-header'), displayPopup: true, onCancelClick: this.onCancelClickOnMarkAsDefinitivePopUp, onYesClick: this.submitClickOnMarkAsDefinitivePopUp, isKeyBoardSupportEnabled: true, selectedLanguage: this.props.selectedLanguage, popupSize: enums.PopupSize.Medium, popupType: enums.PopUpType.MarkAsDefinitive, buttonCancelText: localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-button1'), buttonYesText: localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-submit-button'), displayNoButton: false })) : null;\r\n        var header = this.isUnclassifiedWorklistSelected() ?\r\n            'standardisation-setup.standardisation-setup-worklist.classify-multioption-popup.header' :\r\n            'standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.header';\r\n        var reusepopupHeader = 'standardisation-setup.previous-session.reuse-action-popup.header';\r\n        var reuseRigActionMultiOptionDialog = this.state.popUpType === enums.PopUpType.ReuseRigAction ? (React.createElement(MultiOptionConfirmationDialog, { content: this.getReUseActionMultiOptionPopupContent, header: localeStore.instance.TranslateText(reusepopupHeader), displayPopup: true, isClassifyResponseOkButtonDisabled: false, onCancelClick: this.onCancelClickOfReuseRigPopup, onYesClick: this.onOKClickOfReuseRigpopup, isKeyBoardSupportEnabled: true, selectedLanguage: this.props.selectedLanguage, popupSize: enums.PopupSize.Medium, popupType: enums.PopUpType.ReuseRigAction, buttonCancelText: localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.cancel-button'), buttonYesText: localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.ok-button'), displayNoButton: false, key: 'key_reuseRigActionMultiOptionDialog' })) : null;\r\n        // Popup when clicked on unclassified worklsit 'classify' or classified worklsit 'reclassify' of a response\r\n        var reclassifyResponseMultiOptionDialog = this.state.popUpType === enums.PopUpType.ReclassifyMultiOption ? (React.createElement(MultiOptionConfirmationDialog, { content: this.getReclassificationMultiOptionPopupContent, header: localeStore.instance.TranslateText(header), displayPopup: true, isClassifyResponseOkButtonDisabled: this.isUnclassifiedWorklistSelected() ?\r\n                this.isClassifyResponseOkButtonDisabled : false, onCancelClick: this.onCancelClickOfReclassifyMultiOptionPopUp, onYesClick: this.onReclassifyResponse, isKeyBoardSupportEnabled: true, selectedLanguage: this.props.selectedLanguage, popupSize: enums.PopupSize.Medium, popupType: enums.PopUpType.ReclassifyMultiOption, buttonCancelText: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.cancel-button'), buttonYesText: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.ok-button'), displayNoButton: false, key: 'key_reclassifyResponseMultiOptionDialog' })) : null;\r\n        // Popup Dialog to notify user above reclassify failure.\r\n        var reclassifyErrorPopupDialog = (this.state.popUpType === enums.PopUpType.ReclassifyError ?\r\n            React.createElement(GenericDialog, { content: this.getReclassifyErrorPopupContent(), multiLineContent: null, header: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassifyerror-popup.header'), secondaryContent: null, displayPopup: true, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onReclassifyErrorMessageOkClick, id: 'reclassifyError', key: 'reclassifyErrorMessage', popupDialogType: enums.PopupDialogType.ReclassifyError, footerContent: null }) : null);\r\n        // Popup Dialog to notify user above concurrent save fail.\r\n        var concurrentSaveFailPopup = (this.state.popUpType === enums.PopUpType.ConcurrentSaveFail ?\r\n            React.createElement(GenericDialog, { content: this.classifyOrReclassifySaveFailPopUpContent, header: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.concurrent-esmarkingmode-save-fail-popup.header'), secondaryContent: null, displayPopup: true, okButtonText: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.concurrent-esmarkingmode-save-fail-popup.ok-button'), onOkClick: this.onConcurrentSaveFailPopupOkClick, id: 'concurrentSaveFailError', key: 'concurrentSaveFailErrorMessage', popupDialogType: enums.PopupDialogType.ConcurrentSaveFail, footerContent: null }) : null);\r\n        // Popup dialog to notify user that the current response has already been discarded.\r\n        var discardResponseFailPopup = (this.state.popUpType === enums.PopUpType.DiscardResponseFail ?\r\n            React.createElement(GenericDialog, { content: this.discardResponseFailPopUpContent, header: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.response-already-discarded-popup.header'), secondaryContent: null, displayPopup: true, okButtonText: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.response-already-discarded-popup.ok-button'), onOkClick: this.onDiscardResponseFailPopupOkClick, id: 'discardResponseFailError', key: 'concurrentSaveFailErrorMessage', popupDialogType: enums.PopupDialogType.DiscardResponse, footerContent: null }) : null);\r\n        // Popup Dialog to notify user above concurrent save fail.\r\n        var unClassifiedScriptinStmUnavailablePopup = (this.state.unClassifiedScriptinStmUnavailableVisible === true ?\r\n            React.createElement(GenericDialog, { content: stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.unclassified-script-unavailable-popup.content'), [responseStore.instance.selectedDisplayId.toString()]), header: localeStore.instance.TranslateText('standardisation-setup.unclassified-script-unavailable-popup.header'), secondaryContent: null, okButtonText: localeStore.instance.TranslateText('standardisation-setup.unclassified-script-unavailable-popup.ok-button'), onOkClick: this.okClickOnUnavailablePopUp, displayPopup: this.state.unClassifiedScriptinStmUnavailableVisible, id: 'unclassifiedscriptunavailable', key: 'unclassifiedscriptunavailableKey', popupDialogType: enums.PopupDialogType.none, footerContent: null }) : null);\r\n        var rigNotFoundDialog = this.state.showRigNotFoundPopUp ? (React.createElement(GenericDialog, { content: localeStore.instance.TranslateText('search-response.search-rig-not-found-content'), header: localeStore.instance.TranslateText('search-response.search-rig-not-found-title'), displayPopup: this.state.showRigNotFoundPopUp, okButtonText: localeStore.instance.TranslateText('generic.error-dialog.ok-button'), onOkClick: this.onRigNotFoundOkClick, id: 'rigNotFoundPopup', key: 'rigNotFoundPopup', popupDialogType: enums.PopupDialogType.none })) : null;\r\n        var saveEmailMessage = stringHelper.format(localeStore.instance.TranslateText('generic.user-menu.email-address-saved-dialog.body'), [String(String.fromCharCode(179))]);\r\n        var emailSaveMessage = (React.createElement(GenericDialog, { content: saveEmailMessage, header: localeStore.instance.TranslateText('generic.user-menu.email-address-saved-dialog.header'), displayPopup: this.state.isSaveEmailMessageDisplaying, okButtonText: localeStore.instance.TranslateText('marking.worklist.response-allocation-error-dialog.ok-button'), onOkClick: this.onOkClickOfEmailSucessMessage, id: 'emailSaveMessage', key: 'emailSaveMessage', popupDialogType: enums.PopupDialogType.ResponseAllocationError }));\r\n        var shareResponsePopup = this.state.isShareResponsePopupDisplayingForPE || this.state.isShareResponsePopupDisplaying ? (React.createElement(MultiOptionConfirmationDialog, { content: this.state.isShareResponsePopupDisplayingForPE ?\r\n                this.getShareResponsePopupContentForPE : this.getShareResponsePopupContent(), header: localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.header'), displayPopup: true, onCancelClick: this.shareResponsePopupClose, onYesClick: this.shareResponse, onNoClick: null, isKeyBoardSupportEnabled: true, selectedLanguage: this.props.selectedLanguage, popupSize: enums.PopupSize.Medium, popupType: enums.PopUpType.ShareResponse, buttonCancelText: localeStore.instance\r\n                .TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.cancel-button'), buttonYesText: localeStore.instance\r\n                .TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.share-button'), buttonNoText: null, displayNoButton: false })) : null;\r\n        return (React.createElement(\"div\", null,\r\n            selecttoMarkProvisionalDialog,\r\n            markAsDefinitiveDialog,\r\n            completeStandardisationPopup,\r\n            completeStandardisationSetupPopup,\r\n            autozonedWarningMessage,\r\n            submitConfirmationDialog,\r\n            mandatoryMessageValidationPopup,\r\n            confirmationDialog,\r\n            busyIndicator,\r\n            nonRecoverableErrorMessage,\r\n            gracePeriodResponseUnmarkedDialog,\r\n            responseRemovedErrorDialog,\r\n            gracePeriodExpiredErrorDialog,\r\n            discardMessageDialog,\r\n            discardExceptionDialog,\r\n            withdrawErrorDialog,\r\n            mandatoryMessageDialog,\r\n            idleTimer,\r\n            nonRecoverableSaveMarksAndAnnotationsErrorMessage,\r\n            noMarkingCheckAvailableMessage,\r\n            markingCheckCompleteConfirmationPopup,\r\n            supervisorSamplingCommentValidationPopup,\r\n            warningMessagePopup,\r\n            this.renderSimulationExitedQigsPopup(),\r\n            this.renderLocksInQigPopUp(),\r\n            applicationOffLineErrorMessage,\r\n            responseSearchFailedErrorDialog,\r\n            simulationResponseSubmitConfirmationPopup,\r\n            submitErrorPopup,\r\n            shareConfirmationPopup,\r\n            sessionClosedErrorDilaog,\r\n            reclassifyResponseMultiOptionDialog,\r\n            reclassifyErrorPopupDialog,\r\n            concurrentSaveFailPopup,\r\n            noteTimeStampChangedPopup,\r\n            responseModifiedPopup,\r\n            unClassifiedScriptinStmUnavailablePopup,\r\n            rigNotFoundDialog,\r\n            emailSaveMessage,\r\n            shareResponsePopup,\r\n            reuseRigActionMultiOptionDialog,\r\n            discardResponseFailPopup));\r\n    };\r\n    /**\r\n     * componentDidMount\r\n     */\r\n    Footer.prototype.componentDidMount = function () {\r\n        userOptionStore.instance.addListener(userOptionStore.UseroptionStore.USER_OPTION_SAVE_ON_LOGOUT_EVENT, this.updateUserSession);\r\n        loginStore.instance.addListener(loginStore.LoginStore.UPDATE_SESSION_ON_LOGOUT_EVENT, this.clearSession);\r\n        loginStore.instance.addListener(loginStore.LoginStore.CONCURRENT_SESSION_ACTIVE, this.onConcurrentSessionActive);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.SAVE_MARKS_AND_ANNOTATIONS_EVENT, this.onSaveMarksAndAnnotations);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.READY_TO_NAVIGATE, this.navigateAwayFromResponse);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.TRIGGER_SAVING_MARKS_AND_ANNOTATIONS_EVENT, this.onSaveMarksAndAnnotationsTriggered);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.SET_NON_RECOVERABLE_ERROR_EVENT, this.onSetHasNonRecoverableError);\r\n        window.addEventListener('online', this._boundOnlineStatusEvent);\r\n        window.addEventListener('offline', this._boundOnlineStatusEvent);\r\n        window.addEventListener('beforeunload', navigationHelper.onBeforeWindowUnload);\r\n        window.addEventListener('resize', this.scrollIntoViewOnEditingTextForAndroid);\r\n        submitStore.instance.addListener(submitStore.SubmitStore.SUBMIT_RESPONSE_COMPLETED, this.onSubmitResponseCompleted);\r\n        submitStore.instance.addListener(submitStore.SubmitStore.SHARE_AND_CLASSIFY_RESPONSE_COMPLETED, this.reRenderProvionalWorklist);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_NAVIGATION_EVENT, this.onMessagePanelEdited);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.MARKINGMODE_CHANGED_IN_PROVISIONAL_RESPONSE_EVENT, this.unClassifiedScriptinStmUnavailable);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.SHOW_GRACE_PERIOD_NOT_FULLY_MARKED_MESSAGE, this.showResponseInGraceNotFullyMarkedMessage);\r\n        messageStore.instance.addListener(messageStore.MessageStore.POPUP_DISPLAY_EVENT, this.onPopUpDisplayEvent);\r\n        exceptionStore.instance.addListener(exceptionStore.ExceptionStore.EXCEPTION_DISCARD_POPUP_DISPLAY_EVENT, this.onPopUpDisplayEvent);\r\n        qigStore.instance.addListener(qigStore.QigStore.ACCEPT_QUALITY_ACTION_COMPLETED, this.onAcceptQualityFeedbackActionCompleted);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.RETRIEVE_MARKS_EVENT, this.marksRetrieved);\r\n        busyIndicatorStore.instance.addListener(busyIndicatorStore.BusyIndicatorStore.BUSY_INDICATOR, this.setBusyIndicator);\r\n        messageStore.instance.addListener(messageStore.MessageStore.UNREAD_MANDATORY_MESSAGE_STATUS_UPDATED, this.showMandatoryMessagePopup);\r\n        messageStore.instance.addListener(messageStore.MessageStore.UPDATE_NOTIFICATION_TRIGGERED_EVENT, this.onUpdateNotification);\r\n        applicationStore.instance.addListener(applicationStore.ApplicationStore.ACTION_INTERRUPTED_EVENT, this.userActionInterrupted);\r\n        submitStore.instance.addListener(submitStore.SubmitStore.SUBMIT_RESPONSE_STARTED, this.onSubmitResponseStarted);\r\n        examinerStore.instance.addListener(examinerStore.ExaminerStore.MARKER_INFO_UPDATED_EVENT, this.updateMarkerInformationPanel);\r\n        examinerStore.instance.addListener(examinerStore.ExaminerStore.QIG_SESSION_CLOSED_EVENT, this.updateQigForSessionClose);\r\n        messageStore.instance.addListener(messageStore.MessageStore.RESPONSE_DATA_RECEIVED_EVENT, this.onResponseDataReceived);\r\n        navigationStore.instance.addListener(navigationStore.NavigationStore.CONTAINER_CHANGE__EVENT, this.refreshState);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MANDATORY_MESSAGE_VALIDATION_POPUP_EVENT, this.mandatoryMessageValidationPopupVisibility);\r\n        messageStore.instance.addListener(messageStore.MessageStore.UPDATE_MESSAGE_PRIORITY_EVENT, this.messagePriorityUpdate);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.WORKLIST_MARKING_MODE_CHANGE, this.addToRecentHistory);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.WORKLIST_MARKING_MODE_CHANGE, this.resetBusyIndicator);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.NO_MARKING_CHECK_AVAILABLE_MESSAGE, this.showNoMarkingCheckAvailableMessage);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.OPEN_TEAM_MANAGEMENT_EVENT, this.onTeamManagementOpen);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.MY_TEAM_DATA_LOADED_EVENT, this.isAutozonedMessagePopupVisible);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.TEAM_EXCEPTIONS_DATA_LOADED_EVENT, this.isAutozonedMessagePopupVisible);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.HELP_EXAMINERS_DATA_RECEIVED, this.isAutozonedMessagePopupVisible);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.ADD_TO_HISTORY_EVENT, this.addToRecentHistory);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.MARKING_CHECK_COMPLETE_BUTTON_EVENT, this.markCheckCompleteButtonEvent);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.MARKING_CHECK_COMPLETED_EVENT, this.markCheckCompletedEvent);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.SAMPLING_STATUS_CHANGED_EVENT, this.ShowSupervisorSamplingCommentValidationPopup);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.EXAMINER_DRILL_DOWN_DATA_UPDATED, this.addToRecentHistory);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.FAILURE_WHILE_FETCHING_TEAM_DATA_EVENT, this.handleErrorNavigationTeamManagement);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.MY_TEAM_DATA_LOADED_EVENT, this.resetBusyIndicator);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.TEAM_EXCEPTIONS_DATA_LOADED_EVENT, this.resetBusyIndicator);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.HELP_EXAMINERS_DATA_RECEIVED, this.resetBusyIndicator);\r\n        qigStore.instance.addListener(qigStore.QigStore.SHOW_LOCKS_IN_QIG_POPUP, this.onShowLocksInQigsPopup);\r\n        qigStore.instance.addListener(qigStore.QigStore.QIG_SELECTED_FROM_LOCKED_LIST, this.onQigSelectedFromLockedList);\r\n        qigStore.instance.addListener(qigStore.QigStore.QIG_SELECTED_EVENT, this.navigateToQigFromLockedList);\r\n        qigStore.instance.addListener(qigStore.QigStore.LOCKS_IN_QIG_DATA_RETRIEVED, this.doLogoutPopup);\r\n        messageStore.instance.addListener(messageStore.MessageStore.RESPONSE_DATA_RECEIVED_FAILED_EVENT, this.onResponseDataReceivedFailed);\r\n        submitStore.instance.addListener(submitStore.SubmitStore.SHOW_SIMULATION_RESPONSE_SUBMIT_CONFIRMATION_EVENT, this.onshowSimulationResponseSubmitConfirmationPopup);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.STANDARDISATION_SETUP_COMPLETED_IN_BACKGROUND, this.onStandardisationSetupCompletionInBackground);\r\n        qigStore.instance.addListener(qigStore.QigStore.SIMULATION_EXITED_QIGS_AND_LOCKS_IN_QIGS_RETRIEVED, this.onSimulationExitedQigsAndLocksInQigsRecieved);\r\n        qigStore.instance.addListener(qigStore.QigStore.SIMULATION_TARGET_COMPLETED, this.onSimulationTargetCompletion);\r\n        qigStore.instance.addListener(qigStore.QigStore.STANDARDISATION_SETUP_COMPLETED_EVENT, this.onStandardisationSetupCompletion);\r\n        qigStore.instance.addListener(qigStore.QigStore.SIMULATION_EXITED_QIGS_RETRIEVED, this.onSimulationExitedQigsRecieved);\r\n        ccStore.instance.addListener(ccStore.ConfigurableCharacteristicsStore.EXAM_BODY_CC_GET, this.onExamBodyCCLoaded);\r\n        ecourseworkFileStore.instance.addListener(ecourseworkFileStore.ECourseWorkFileStore.ECOURSEWORK_FILE_DATA_CLEARED_EVENT, this.onEcourseworkFileDataCleared);\r\n        qigStore.instance.addListener(qigStore.QigStore.SAVE_ACETATES_DATA_ACTION_COMPLETED, this.resetAcetateSaveInProgressStatus);\r\n        qigStore.instance.addListener(qigStore.QigStore.SHARE_CONFIRMATION_EVENT, this.shareConfirmationPopup);\r\n        qigStore.instance.addListener(qigStore.QigStore.RESET_SHARED_ACETATES_COMPLETED, this.resetAcetateSaveInProgressStatus);\r\n        qigStore.instance.addListener(qigStore.QigStore.RESET_ACETATE_SAVE_IN_PROGRESS_STATUS_COMPLETED, this.onResetAcetatesSaveInProgressReceived);\r\n        targetSummaryStore.instance.addListener(targetSummaryStore.TargetSummaryStore.WORKLIST_INITIALISATION_COMPLETED, this.isAutozonedMessagePopupVisible);\r\n        imageZoneStore.instance.addListener(imageZoneStore.ImageZoneStore.EBOOK_IMAGEZONE_LOADED_EVENT, this.isAutozonedMessagePopupVisible);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .POPUP_OPEN_SELECT_TO_MARK_BUTTON_EVENT, this.onSelectStdSetupResponseToMark);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .STANDARDISATION_RIG_CREATED_EVENT, this.onStandardisationRigCreated);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .COMPLETE_STANDARDISATION_SETUP_EVENT, this.onCompleteStandardisationSetup);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .GET_STANDARDISATION_TARGET_DETAILS_EVENT, this.resetBusyIndicatorStdSetupNotComplete);\r\n        userinfostore.instance.addListener(userinfostore.UserInfoStore.SWITCH_USER_BUTTON_CLICK, this.switchUserButtonClick);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .STANDARDISATION_RESPONSE_DATA_UPDATED_EVENT, this.onResponseDataRecievedAfterRefresh);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .GET_STANDARDISATION_CENTRE_DETAILS_EVENT, this.onResponseDataRecievedAfterRefresh);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .MULTI_OPTION_POPUP_OPEN_RECLASSIFY_POPUP_EVENT, this.reclassifyMultiOptionPopupOpen);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.STANDARDISATION_SETUP_LEFT_PANEL_SELECT_EVENT, this.addToRecentHistory);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.POPUP_OPEN_RECLASSIFY_POPUP_EVENT, this.reclassifyPopupOpen);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .POPUP_OPEN_RECLASSIFY_ERROR_POPUP_EVENT, this.reclassifyErrorPopupOpen);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore\r\n            .CONCURRENT_SAVE_FAIL_EVENT, this.concurrentSaveFailPopup);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.CLASSIFY_RESPONSE_EVENT, this.reRenderUnclassifiedWorklist);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.SAVE_NOTE_COMPLETED_ACTION_EVENT, this.displayNoteSaveFailedPopup);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.RECLASSIFIED_RESPONSE_EVENT, this.reRenderOnClassifiedResponseReceived);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.DECLASSIFY_RESPONSE_EVENT, this.reRenderOnClassifiedResponseReceived);\r\n        responseStore.instance.addListener(responseStore.ResponseStore.RIG_NOT_FOUND_EVENT, this.showOrHideRigNotFoundPopup);\r\n        userinfostore.instance.addListener(userinfostore.UserInfoStore.USERINFO_SAVE, this.userInfoSaved);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.STANDARDISATION_SHARE_RESPONSE_POPUP_DISPLAY, this.shareResponsePopupOpen);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.REUSE_RIG_POPUP_DISPLAY_ACTION_EVENT, this.reuseRigActionPopupOpen);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.REUSE_RIG_ACTION_COMPLETED_EVENT, this.reuseRigActionCompletedEvent);\r\n        standardisationSetupStore.instance.addListener(standardisationSetupStore.StandardisationSetupStore.RESPONSE_ALREADY_DISCARDED_EVENT, this.discardResponseFailPopup);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.READY_TO_NAVIGATE, this.submitResponseFromMarkscheme);\r\n    };\r\n    /**\r\n     * componentWillUnmount\r\n     */\r\n    Footer.prototype.componentWillUnmount = function () {\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.READY_TO_NAVIGATE, this.submitResponseFromMarkscheme);\r\n        userOptionStore.instance.removeListener(userOptionStore.UseroptionStore.USER_OPTION_SAVE_ON_LOGOUT_EVENT, this.updateUserSession);\r\n        loginStore.instance.removeListener(loginStore.LoginStore.UPDATE_SESSION_ON_LOGOUT_EVENT, this.clearSession);\r\n        loginStore.instance.removeListener(loginStore.LoginStore.CONCURRENT_SESSION_ACTIVE, this.onConcurrentSessionActive);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.SAVE_MARKS_AND_ANNOTATIONS_EVENT, this.onSaveMarksAndAnnotations);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.READY_TO_NAVIGATE, this.navigateAwayFromResponse);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.TRIGGER_SAVING_MARKS_AND_ANNOTATIONS_EVENT, this.onSaveMarksAndAnnotationsTriggered);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.SET_NON_RECOVERABLE_ERROR_EVENT, this.onSetHasNonRecoverableError);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.MARKINGMODE_CHANGED_IN_PROVISIONAL_RESPONSE_EVENT, this.unClassifiedScriptinStmUnavailable);\r\n        window.removeEventListener('online', this._boundOnlineStatusEvent);\r\n        window.removeEventListener('offline', this._boundOnlineStatusEvent);\r\n        window.removeEventListener('beforeunload', navigationHelper.onBeforeWindowUnload);\r\n        window.removeEventListener('resize', this.scrollIntoViewOnEditingTextForAndroid);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.SHOW_GRACE_PERIOD_NOT_FULLY_MARKED_MESSAGE, this.showResponseInGraceNotFullyMarkedMessage);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.POPUP_DISPLAY_EVENT, this.onPopUpDisplayEvent);\r\n        exceptionStore.instance.removeListener(exceptionStore.ExceptionStore.EXCEPTION_DISCARD_POPUP_DISPLAY_EVENT, this.onPopUpDisplayEvent);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.RETRIEVE_MARKS_EVENT, this.marksRetrieved);\r\n        qigStore.instance.removeListener(qigStore.QigStore.ACCEPT_QUALITY_ACTION_COMPLETED, this.onAcceptQualityFeedbackActionCompleted);\r\n        submitStore.instance.removeListener(submitStore.SubmitStore.SUBMIT_RESPONSE_COMPLETED, this.onSubmitResponseCompleted);\r\n        submitStore.instance.removeListener(submitStore.SubmitStore.SHARE_AND_CLASSIFY_RESPONSE_COMPLETED, this.reRenderProvionalWorklist);\r\n        busyIndicatorStore.instance.removeListener(busyIndicatorStore.BusyIndicatorStore.BUSY_INDICATOR, this.setBusyIndicator);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.UNREAD_MANDATORY_MESSAGE_STATUS_UPDATED, this.showMandatoryMessagePopup);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.UPDATE_NOTIFICATION_TRIGGERED_EVENT, this.onUpdateNotification);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_NAVIGATION_EVENT, this.onMessagePanelEdited);\r\n        applicationStore.instance.removeListener(applicationStore.ApplicationStore.ACTION_INTERRUPTED_EVENT, this.userActionInterrupted);\r\n        submitStore.instance.removeListener(submitStore.SubmitStore.SUBMIT_RESPONSE_STARTED, this.onSubmitResponseStarted);\r\n        examinerStore.instance.removeListener(examinerStore.ExaminerStore.MARKER_INFO_UPDATED_EVENT, this.updateMarkerInformationPanel);\r\n        examinerStore.instance.removeListener(examinerStore.ExaminerStore.QIG_SESSION_CLOSED_EVENT, this.updateQigForSessionClose);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.RESPONSE_DATA_RECEIVED_EVENT, this.onResponseDataReceived);\r\n        navigationStore.instance.removeListener(navigationStore.NavigationStore.CONTAINER_CHANGE__EVENT, this.refreshState);\r\n        //timerHelper.clearInterval();\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MANDATORY_MESSAGE_VALIDATION_POPUP_EVENT, this.mandatoryMessageValidationPopupVisibility);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.UPDATE_MESSAGE_PRIORITY_EVENT, this.messagePriorityUpdate);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.WORKLIST_MARKING_MODE_CHANGE, this.addToRecentHistory);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.WORKLIST_MARKING_MODE_CHANGE, this.resetBusyIndicator);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.NO_MARKING_CHECK_AVAILABLE_MESSAGE, this.showNoMarkingCheckAvailableMessage);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.OPEN_TEAM_MANAGEMENT_EVENT, this.onTeamManagementOpen);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.MY_TEAM_DATA_LOADED_EVENT, this.isAutozonedMessagePopupVisible);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.TEAM_EXCEPTIONS_DATA_LOADED_EVENT, this.isAutozonedMessagePopupVisible);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.HELP_EXAMINERS_DATA_RECEIVED, this.isAutozonedMessagePopupVisible);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.ADD_TO_HISTORY_EVENT, this.addToRecentHistory);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.MARKING_CHECK_COMPLETE_BUTTON_EVENT, this.markCheckCompleteButtonEvent);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.MARKING_CHECK_COMPLETED_EVENT, this.markCheckCompletedEvent);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.SAMPLING_STATUS_CHANGED_EVENT, this.ShowSupervisorSamplingCommentValidationPopup);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.EXAMINER_DRILL_DOWN_DATA_UPDATED, this.addToRecentHistory);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.FAILURE_WHILE_FETCHING_TEAM_DATA_EVENT, this.handleErrorNavigationTeamManagement);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.MY_TEAM_DATA_LOADED_EVENT, this.resetBusyIndicator);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.TEAM_EXCEPTIONS_DATA_LOADED_EVENT, this.resetBusyIndicator);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.HELP_EXAMINERS_DATA_RECEIVED, this.resetBusyIndicator);\r\n        qigStore.instance.removeListener(qigStore.QigStore.SHOW_LOCKS_IN_QIG_POPUP, this.onShowLocksInQigsPopup);\r\n        qigStore.instance.removeListener(qigStore.QigStore.QIG_SELECTED_FROM_LOCKED_LIST, this.onQigSelectedFromLockedList);\r\n        qigStore.instance.removeListener(qigStore.QigStore.QIG_SELECTED_EVENT, this.navigateToQigFromLockedList);\r\n        qigStore.instance.removeListener(qigStore.QigStore.LOCKS_IN_QIG_DATA_RETRIEVED, this.doLogoutPopup);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.RESPONSE_DATA_RECEIVED_FAILED_EVENT, this.onResponseDataReceivedFailed);\r\n        submitStore.instance.removeListener(submitStore.SubmitStore.SHOW_SIMULATION_RESPONSE_SUBMIT_CONFIRMATION_EVENT, this.onshowSimulationResponseSubmitConfirmationPopup);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.STANDARDISATION_SETUP_COMPLETED_IN_BACKGROUND, this.onStandardisationSetupCompletionInBackground);\r\n        qigStore.instance.removeListener(qigStore.QigStore.SIMULATION_EXITED_QIGS_AND_LOCKS_IN_QIGS_RETRIEVED, this.onSimulationExitedQigsAndLocksInQigsRecieved);\r\n        qigStore.instance.removeListener(qigStore.QigStore.SIMULATION_TARGET_COMPLETED, this.onSimulationTargetCompletion);\r\n        qigStore.instance.removeListener(qigStore.QigStore.STANDARDISATION_SETUP_COMPLETED_EVENT, this.onStandardisationSetupCompletion);\r\n        qigStore.instance.removeListener(qigStore.QigStore.SIMULATION_EXITED_QIGS_RETRIEVED, this.onSimulationExitedQigsRecieved);\r\n        ccStore.instance.removeListener(ccStore.ConfigurableCharacteristicsStore.EXAM_BODY_CC_GET, this.onExamBodyCCLoaded);\r\n        ecourseworkFileStore.instance.removeListener(ecourseworkFileStore.ECourseWorkFileStore.ECOURSEWORK_FILE_DATA_CLEARED_EVENT, this.onEcourseworkFileDataCleared);\r\n        qigStore.instance.removeListener(qigStore.QigStore.SAVE_ACETATES_DATA_ACTION_COMPLETED, this.resetAcetateSaveInProgressStatus);\r\n        qigStore.instance.removeListener(qigStore.QigStore.SHARE_CONFIRMATION_EVENT, this.shareConfirmationPopup);\r\n        qigStore.instance.removeListener(qigStore.QigStore.RESET_SHARED_ACETATES_COMPLETED, this.resetAcetateSaveInProgressStatus);\r\n        qigStore.instance.removeListener(qigStore.QigStore.RESET_ACETATE_SAVE_IN_PROGRESS_STATUS_COMPLETED, this.onResetAcetatesSaveInProgressReceived);\r\n        targetSummaryStore.instance.removeListener(targetSummaryStore.TargetSummaryStore.WORKLIST_INITIALISATION_COMPLETED, this.isAutozonedMessagePopupVisible);\r\n        imageZoneStore.instance.removeListener(imageZoneStore.ImageZoneStore.EBOOK_IMAGEZONE_LOADED_EVENT, this.isAutozonedMessagePopupVisible);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .POPUP_OPEN_SELECT_TO_MARK_BUTTON_EVENT, this.onSelectStdSetupResponseToMark);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .STANDARDISATION_RIG_CREATED_EVENT, this.onStandardisationRigCreated);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .COMPLETE_STANDARDISATION_SETUP_EVENT, this.onCompleteStandardisationSetup);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .GET_STANDARDISATION_TARGET_DETAILS_EVENT, this.resetBusyIndicatorStdSetupNotComplete);\r\n        userinfostore.instance.removeListener(userinfostore.UserInfoStore.SWITCH_USER_BUTTON_CLICK, this.switchUserButtonClick);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .STANDARDISATION_RESPONSE_DATA_UPDATED_EVENT, this.onResponseDataRecievedAfterRefresh);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .GET_STANDARDISATION_CENTRE_DETAILS_EVENT, this.onResponseDataRecievedAfterRefresh);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .MULTI_OPTION_POPUP_OPEN_RECLASSIFY_POPUP_EVENT, this.reclassifyMultiOptionPopupOpen);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.STANDARDISATION_SETUP_LEFT_PANEL_SELECT_EVENT, this.addToRecentHistory);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.POPUP_OPEN_RECLASSIFY_POPUP_EVENT, this.reclassifyPopupOpen);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .POPUP_OPEN_RECLASSIFY_ERROR_POPUP_EVENT, this.reclassifyErrorPopupOpen);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore\r\n            .CONCURRENT_SAVE_FAIL_EVENT, this.concurrentSaveFailPopup);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.CLASSIFY_RESPONSE_EVENT, this.reRenderUnclassifiedWorklist);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.SAVE_NOTE_COMPLETED_ACTION_EVENT, this.displayNoteSaveFailedPopup);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.RECLASSIFIED_RESPONSE_EVENT, this.reRenderOnClassifiedResponseReceived);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.DECLASSIFY_RESPONSE_EVENT, this.reRenderOnClassifiedResponseReceived);\r\n        responseStore.instance.removeListener(responseStore.ResponseStore.RIG_NOT_FOUND_EVENT, this.showOrHideRigNotFoundPopup);\r\n        userinfostore.instance.removeListener(userinfostore.UserInfoStore.USERINFO_SAVE, this.userInfoSaved);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.STANDARDISATION_SHARE_RESPONSE_POPUP_DISPLAY, this.shareResponsePopupOpen);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.REUSE_RIG_POPUP_DISPLAY_ACTION_EVENT, this.reuseRigActionPopupOpen);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.REUSE_RIG_ACTION_COMPLETED_EVENT, this.reuseRigActionCompletedEvent);\r\n        standardisationSetupStore.instance.removeListener(standardisationSetupStore.StandardisationSetupStore.RESPONSE_ALREADY_DISCARDED_EVENT, this.discardResponseFailPopup);\r\n    };\r\n    /**\r\n     * Set the confirmation dialogue state\r\n     * @param stateValue The state value\r\n     */\r\n    Footer.prototype.setConfirmationDialogueState = function (stateValue) {\r\n        this.setState({\r\n            isSubmitConfirmationPopupDisplaying: stateValue\r\n        });\r\n    };\r\n    /**\r\n     * On yes click of submit response confirmation pop up\r\n     */\r\n    Footer.prototype.onYesClickOfSubmitButton = function () {\r\n        this.setConfirmationDialogueState(false);\r\n        this.submitResponse();\r\n    };\r\n    /**\r\n     * submit response/s\r\n     */\r\n    Footer.prototype.submitResponse = function () {\r\n        var busyIndicatorInvoker;\r\n        var submitResponseArgument;\r\n        /**\r\n         * if markgroupid is greater than zero, then its single response submit\r\n         */\r\n        busyIndicatorInvoker =\r\n            submitStore.instance.getMarkGroupId > 0\r\n                ? enums.BusyIndicatorInvoker.submit\r\n                : enums.BusyIndicatorInvoker.submitAll;\r\n        /**\r\n         * Show busy indicator on submitting response\r\n         */\r\n        busyIndicatorActionCreator.setBusyIndicatorInvoker(busyIndicatorInvoker);\r\n        /**\r\n         * Submitting  responses initiated\r\n         * Select the mark group list based on the current response mode\r\n         */\r\n        var markGroupIdList = worklistComponentHelper.getMarkgroupIdCollectionForSubmit(targetHelper.getSelectedQigMarkingMode());\r\n        var qiglist = qigStore.instance.relatedQigList;\r\n        var examinerRoleIdList = new Array();\r\n        qiglist\r\n            ? qiglist.map(function (x) {\r\n                examinerRoleIdList.push(x.examinerRoleId);\r\n            })\r\n            : (examinerRoleIdList = null);\r\n        var markSchemeGroupIds = new Array();\r\n        qiglist\r\n            ? qiglist.map(function (x) {\r\n                markSchemeGroupIds.push(x.markSchemeGroupId);\r\n            })\r\n            : (markSchemeGroupIds = null);\r\n        /**\r\n         * mapping  values on submit argument\r\n         */\r\n        submitResponseArgument = {\r\n            markGroupIds: markGroupIdList,\r\n            markingMode: targetHelper.getSelectedQigMarkingMode(),\r\n            examinerRoleId: qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId,\r\n            markSchemeGroupId: qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId,\r\n            examinerApproval: examinerStore.instance.getMarkerInformation.approvalStatus,\r\n            isAdminRemarker: loginStore.instance.isAdminRemarker\r\n        };\r\n        var worklistType = worklistStore.instance.currentWorklistType;\r\n        var remarkRequestType = worklistComponentHelper.getRemarkRequestType(worklistType);\r\n        /**\r\n         * calling to send data to server\r\n         */\r\n        var displayId = submitStore.instance.isSubmitFromMarkScheme\r\n            ? responseStore.instance.selectedDisplayId.toString()\r\n            : undefined;\r\n        submitActionCreator.submitResponse(submitResponseArgument, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, worklistType, remarkRequestType, submitStore.instance.isSubmitFromMarkScheme, displayId, examinerRoleIdList, markSchemeGroupIds);\r\n    };\r\n    /**\r\n     * On no click of submit response confirmation pop up\r\n     */\r\n    Footer.prototype.onNoClickOfSubmitButton = function () {\r\n        this.setConfirmationDialogueState(false);\r\n    };\r\n    /**\r\n     * this function is called on \"yes\" click of logout confirmation popup. This will trigger logout.\r\n     */\r\n    Footer.prototype.onYesClickOfLogoutConfirmation = function (isAutoLogOut) {\r\n        if (isAutoLogOut === void 0) { isAutoLogOut = false; }\r\n        /**\r\n         * Setting to true as the logout has been triggered\r\n         */\r\n        this._onLogoutTriggered = true;\r\n        /**\r\n         * Setting the value to identify whether it is from idle timeout\r\n         */\r\n        this._isAutoLogOut = isAutoLogOut;\r\n        switch (navigationStore.instance.containerPage) {\r\n            case enums.PageContainers.QigSelector:\r\n            case enums.PageContainers.Message:\r\n            case enums.PageContainers.Reports:\r\n                var _rememberQig = new rememberQig();\r\n                _rememberQig.qigId = 0;\r\n                _rememberQig.area = enums.QigArea.QigSelector;\r\n                userOptionsHelper.save(userOptionKeys.REMEMBER_PREVIOUS_QIG, JSON.stringify(_rememberQig));\r\n                break;\r\n        }\r\n        /**\r\n         * Saving changed user options if any of them changed\r\n         */\r\n        if (userOptionsHelper.hasUserOptionsChanged) {\r\n            userOptionsHelper.InitiateSaveUserOption(true);\r\n        }\r\n        else {\r\n            this.updateUserSession();\r\n        }\r\n    };\r\n    /**\r\n     * to update message priority\r\n     */\r\n    Footer.prototype.onOkClickMandatoryMessageValidationPopup = function () {\r\n        messagingActionCreator.updateMessagePriority();\r\n    };\r\n    /**\r\n     * Return true if the selected standardisation tab is unclassified\r\n     */\r\n    Footer.prototype.isUnclassifiedWorklistSelected = function () {\r\n        return standardisationSetupStore.instance.selectedStandardisationSetupWorkList === enums.StandardisationSetup.UnClassifiedResponse;\r\n    };\r\n    /**\r\n     * hides the popup\r\n     */\r\n    Footer.prototype.onPopupOkClick = function () {\r\n        this.setState({ doShowPopup: false });\r\n        // If the object has the mark group Id, Call navigate method for completing actions.\r\n        if (this.messageDetails.submittedMarkGroupIds &&\r\n            this.messageDetails.submittedMarkGroupIds.length > 0) {\r\n            this.navigateAfterSubmit(this.messageDetails.submittedMarkGroupIds, this.messageDetails.displayId, this.messageDetails.isFromMarkScheme);\r\n            this.messageDetails.submittedMarkGroupIds = [];\r\n        }\r\n    };\r\n    /**\r\n     * shows the popup\r\n     */\r\n    Footer.prototype.ShowSupervisorSamplingCommentValidationPopup = function (supervisorSamplingCommentReturn) {\r\n        if (supervisorSamplingCommentReturn.isSampled) {\r\n            this.messageDetails = {\r\n                messageHeader: localeStore.instance.TranslateText('team-management.response.sampling-error-dialog-already-sampled.body'),\r\n                messageString: localeStore.instance.TranslateText('team-management.response.sampling-error-dialog-already-sampled.header')\r\n            };\r\n            this.setState({ doShowPopup: true });\r\n        }\r\n    };\r\n    /**\r\n     * this function is called on 'No' click of logout confirmation popup.This will call a method in the container.\r\n     */\r\n    Footer.prototype.onNoClickOfLogoutConfirmation = function () {\r\n        this.props.resetLogoutConfirmationSatus();\r\n    };\r\n    /**\r\n     * Non-Recoverable marks and annotation save error message ok click\r\n     */\r\n    Footer.prototype.onOkClickOfNonRecoverableErrorMessage = function () {\r\n        // close the non-recoverable error popup on submit if it is already open.\r\n        if (this.state.nonRecoverableSaveMarksAndAnnotationsErrorMessage) {\r\n            this.setState({\r\n                nonRecoverableSaveMarksAndAnnotationsErrorMessage: false\r\n            });\r\n        }\r\n        // close the non-recoverable error popup.\r\n        if (this.state.isNonRecoverableErrorPopupVisible) {\r\n            this.setState({\r\n                isNonRecoverableErrorPopupVisible: false\r\n            });\r\n        }\r\n        // This will clear the marks and annotations with non-recoverable error from store collection.\r\n        // This will reload by background call or while opening the response.\r\n        marksAndAnnotationsSaveHelper.clearMarksAndAnnotationsForNonRecoverableErrors();\r\n        // Calling the processBasedOnSaveMarksAndAnnotationTriggeringPoint on Submit will make the DB call.\r\n        // refresh and navigate to worklist if there is an error.\r\n        if (this.currentSaveMarksAndAnnotationTriggeringPoint ===\r\n            enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Submit) {\r\n            navigationHelper.loadContainerIfNeeded(enums.PageContainers.WorkList, enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse);\r\n            this.initiateContentRefresh();\r\n        }\r\n        else {\r\n            this.processBasedOnSaveMarksAndAnnotationTriggeringPoint(this.currentSaveMarksAndAnnotationTriggeringPoint);\r\n        }\r\n    };\r\n    /**\r\n     * This method will handle the navigation based on the triggering point.\r\n     * @param saveMarksAndAnnotationTriggeringPoint\r\n     * @param markGroupId\r\n     */\r\n    Footer.prototype.processBasedOnSaveMarksAndAnnotationTriggeringPoint = function (saveMarksAndAnnotationTriggeringPoint, markGroupId) {\r\n        switch (saveMarksAndAnnotationTriggeringPoint) {\r\n            case enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse:\r\n                navigationHelper.loadContainerIfNeeded(navigationStore.instance.containerPage, enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse, this.context);\r\n                break;\r\n            case enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Inbox:\r\n                navigationHelper.loadContainerIfNeeded(navigationStore.instance.containerPage, enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Inbox, this.context);\r\n                break;\r\n            case enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Logout:\r\n                /* Trigger save mark for the currently selected item when logging out */\r\n                markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.toLogout);\r\n                break;\r\n            case enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Submit:\r\n                submitHelper.saveAndSubmitResponse(markGroupId ? markGroupId : submitStore.instance.getMarkGroupId);\r\n                break;\r\n            case enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Classify:\r\n                // Update MarkGroupRowVersion after save\r\n                this._classifyResponseDetails.esMarkGroupRowVersion = markingStore.instance.getUpdatedRowVersionOnSaveAndClassify;\r\n                // Trigger classify response action with updated MarkGroupRowVersion\r\n                standardisationActionCreator.classifyResponse(this._classifyResponseDetails, navigationStore.instance.containerPage);\r\n                break;\r\n            case enums.SaveMarksAndAnnotationsProcessingTriggerPoint.ShareAndClassify:\r\n                submitActionCreator.shareAndClassifyResponse(this._shareResponseArgument, this._isSharedFromMarkScheme, this._shareResponseDetails.displayId);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Method to get Grace Period Expired Message Body\r\n     * @returns\r\n     */\r\n    Footer.prototype.getGracePeriodExpiredMessageBody = function () {\r\n        var errorBody = localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.body-grace-period-expired-changes-not-saved');\r\n        return errorBody.replace('{0}', worklistStore.instance.displayIdOfMarkGroup(this.expiredMarkGroupId));\r\n    };\r\n    /**\r\n     * Method to get Response removed error dialog Message Body\r\n     * @returns\r\n     */\r\n    Footer.prototype.getResponseRemovedErrorDialogMessageBody = function () {\r\n        var errorBody = localeStore.instance.TranslateText('marking.response.saving-marks-error-dialog.body-response-removed-from-worklist');\r\n        return errorBody.replace('{0}', worklistStore.instance.displayIdOfMarkGroup(this.expiredMarkGroupId));\r\n    };\r\n    /**\r\n     * Just hide the response in grace message on ok click.\r\n     */\r\n    Footer.prototype.onOkClickOfResponseInGraceMessage = function () {\r\n        this.setState({\r\n            isDisplayingGraceResponseLessthan100PercentageError: false\r\n        });\r\n        if (this._failureReason === enums.ResponseNavigateFailureReason.AllPagesNotAnnotatedInGrace) {\r\n            // Closing the user information panel, if the popup is triggered due to logout button action.\r\n            // moving to full response view.\r\n            markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.toFullResponseview);\r\n            this._failureReason = enums.ResponseNavigateFailureReason.None;\r\n        }\r\n    };\r\n    /**\r\n     * Just hide the response in grace message on ok click.\r\n     */\r\n    Footer.prototype.onOkClickOfResponseInGraceExpiredMessageOrResponseRemovedMessage = function () {\r\n        if (this.currentSaveMarksAndAnnotationTriggeringPoint ===\r\n            enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Logout) {\r\n            this.updateUserSession();\r\n        }\r\n        else {\r\n            // This will clear the marks and annotations with mark save errors\r\n            // This will reload by background call or while opening the response.\r\n            marksAndAnnotationsSaveHelper.clearMarksAndAnnotationsForMarkSaveErrors();\r\n            navigationHelper.loadWorklist();\r\n        }\r\n    };\r\n    /**\r\n     * Get the error message that has to be shown while a marker is withdrawn in the background\r\n     */\r\n    Footer.prototype.getWithdrawnResponseErrorMessage = function () {\r\n        var errorBody = localeStore.instance.TranslateText('marking.worklist.response-allocation-error-dialog.response-allocation-error-withdrawnMarker');\r\n        return errorBody;\r\n    };\r\n    /**\r\n     * Get the error message that has to be shown while a marker is withdrawn in the background\r\n     */\r\n    Footer.prototype.getSessionClosedErrorMessage = function () {\r\n        var errorBody = localeStore.instance.TranslateText('marking.worklist.request-marking-check-error-dialog.body-session-closed');\r\n        return errorBody;\r\n    };\r\n    /**\r\n     * On cliking Ok button of the response trigger close response\r\n     */\r\n    Footer.prototype.onOkClickOfWithDrawErrorMessage = function () {\r\n        if (this.props.footerType === enums.FooterType.Response) {\r\n            if (this.navigateReponse === enums.SaveAndNavigate.toInboxMessagePage) {\r\n                this.processBasedOnSaveMarksAndAnnotationTriggeringPoint(enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Inbox);\r\n                navigationHelper.loadMessagePage();\r\n            }\r\n            else {\r\n                var updateNavigationPromise = markingActionCreator.updateNavigation(enums.SaveAndNavigate.toQigSelector, false);\r\n                var that_1 = this;\r\n                Promise.Promise.all([updateNavigationPromise]).then(function (result) {\r\n                    that_1.processBasedOnSaveMarksAndAnnotationTriggeringPoint(enums.SaveMarksAndAnnotationsProcessingTriggerPoint.CloseResponse);\r\n                    if (that_1.navigateReponse === enums.SaveAndNavigate.toLogout) {\r\n                        that_1.navigateAwayFromResponse();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.setState({ isWithdrawnResponseError: false, isBusy: false });\r\n            this.storageAdapterHelper.clearCacheByKey('qigselector', 'overviewdata');\r\n            if (qigStore.instance.getOverviewData) {\r\n                var currentQig = qigStore.instance.getOverviewData.qigSummary\r\n                    .filter(function (qig) {\r\n                    return qig.examinerRoleId ===\r\n                        examinerStore.instance.getMarkerInformation.examinerRoleId;\r\n                })\r\n                    .first();\r\n                teamManagementActionCreator.removeHistoryItem(currentQig ? currentQig.markSchemeGroupId : 0);\r\n            }\r\n            qigActionCreator.getQIGSelectorData(0);\r\n            loadContainerActionCreator.loadContainer(enums.PageContainers.QigSelector);\r\n        }\r\n    };\r\n    /**\r\n     * Start the content refresh\r\n     */\r\n    Footer.prototype.initiateContentRefresh = function () {\r\n        // Clear worklist cache and do content refresh\r\n        var markingMode = worklistStore.instance.getMarkingModeByWorkListType(worklistStore.instance.currentWorklistType);\r\n        if (qigStore.instance.selectedQIGForMarkerOperation) {\r\n            this.storageAdapterHelper.clearCache(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, markingMode, worklistStore.instance.getRemarkRequestType, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, worklistStore.instance.currentWorklistType);\r\n            // Load the marking progress\r\n            worklistActionCreator.getWorklistMarkerProgressData(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation\r\n                .isElectronicStandardisationTeamMember);\r\n        }\r\n    };\r\n    /**\r\n     * setting the timeout of application online check\r\n     * @param {type} interval\r\n     */\r\n    Footer.prototype.triggerApplicationOnlinePoll = function (forceStartPoll) {\r\n        if (forceStartPoll === void 0) { forceStartPoll = false; }\r\n        // If the application status has been changed update the call\r\n        if (forceStartPoll || this.state.isOnline !== applicationStore.instance.isOnline) {\r\n            if (userOptionsHelper.hasUserOptionsChanged) {\r\n                userOptionsHelper.InitiateSaveUserOption(false);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Closing application error poup message\r\n     */\r\n    Footer.prototype.onApplicationErrorMessagePopUpClicked = function () {\r\n        this.setState({\r\n            isApplicationOffline: false\r\n        });\r\n    };\r\n    /**\r\n     * User action has been interrupted\r\n     */\r\n    Footer.prototype.userActionInterrupted = function (_isFromLogout) {\r\n        if (_isFromLogout) {\r\n            this.offlineErrorMessage = localeStore.instance.TranslateText('generic.offline-dialog.body-user-options-changed');\r\n            this.props.resetLogoutConfirmationSatus();\r\n            this._onLogoutTriggered = false;\r\n        }\r\n        else {\r\n            this.offlineErrorMessage = stringHelper.format(localeStore.instance.TranslateText('generic.offline-dialog.body'), [String(String.fromCharCode(179))]);\r\n        }\r\n        /*Hiding the busy indicator if the application is offline and the busy indicator was showing at the time of being offline*/\r\n        if (this.state.isBusy && !applicationStore.instance.isOnline) {\r\n            this.setState({\r\n                isApplicationOffline: !applicationStore.instance.isOnline,\r\n                isBusy: false\r\n            });\r\n        }\r\n        else {\r\n            this.setState({ isApplicationOffline: !applicationStore.instance.isOnline });\r\n        }\r\n    };\r\n    /**\r\n     * Adding current qig details to user option.\r\n     */\r\n    Footer.prototype.addSelectedQigDetailsToUserOption = function () {\r\n        var _rememberQig = new rememberQig();\r\n        if (qigStore.instance.selectedQIGForMarkerOperation) {\r\n            _rememberQig.qigId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n            _rememberQig.worklistType = worklistStore.instance.currentWorklistType;\r\n            _rememberQig.remarkRequestType = worklistStore.instance.getRemarkRequestType;\r\n            _rememberQig.questionPaperPartId =\r\n                qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId;\r\n            if (markerOperationModeFactory.operationMode.isTeamManagementMode) {\r\n                _rememberQig.area = enums.QigArea.TeamManagement;\r\n                if (teamManagementStore.instance.selectedTeamManagementTab ===\r\n                    enums.TeamManagement.MyTeam) {\r\n                    if (navigationStore.instance.containerPage === enums.PageContainers.WorkList) {\r\n                        _rememberQig.subordinateExaminerRoleID = teamManagementStore.instance\r\n                            .examinerDrillDownData\r\n                            ? teamManagementStore.instance.examinerDrillDownData.examinerRoleId\r\n                            : 0;\r\n                        _rememberQig.subordinateExaminerID = teamManagementStore.instance\r\n                            .examinerDrillDownData\r\n                            ? teamManagementStore.instance.examinerDrillDownData.examinerId\r\n                            : 0;\r\n                    }\r\n                    else {\r\n                        _rememberQig.subordinateExaminerRoleID = 0;\r\n                        _rememberQig.subordinateExaminerID = 0;\r\n                    }\r\n                }\r\n                _rememberQig.examinerRoleId = teamManagementStore.instance.selectedExaminerRoleId\r\n                    ? teamManagementStore.instance.selectedExaminerRoleId\r\n                    : operationModeHelper.examinerRoleId;\r\n                _rememberQig.tab = enums.TeamManagement.MyTeam;\r\n            }\r\n            else if (markerOperationModeFactory.operationMode.isStandardisationSetupMode) {\r\n                _rememberQig.area = enums.QigArea.StandardisationSetup;\r\n                _rememberQig.standardisationSetupWorklistType = standardisationSetupStore.instance.selectedStandardisationSetupWorkList;\r\n            }\r\n            else {\r\n                _rememberQig.area = enums.QigArea.Marking;\r\n            }\r\n            userOptionsHelper.save(userOptionKeys.REMEMBER_PREVIOUS_QIG, JSON.stringify(_rememberQig));\r\n        }\r\n    };\r\n    /**\r\n     * Action when the cancel button for Marking Check is clicked\r\n     * Cancel the popup\r\n     */\r\n    Footer.prototype.OnCancelClickOfMarkingCheckCompleteConfirmation = function () {\r\n        this.setState({ isMarkingCheckCompleteConfirmationPopupDisplaying: false });\r\n    };\r\n    /**\r\n     * Action when the ok button for Marking Check confirmation is clicked\r\n     */\r\n    Footer.prototype.OnOkClickOfMarkingCheckCompleteConfirmation = function () {\r\n        /* on marking check confirmation is clicked Send two messages\r\n           First Message to the marker so that it will appear in the inbox\r\n           the  second message with sysytem message priority so that the\r\n           marking check will be considered as complete*/\r\n        this.setState({ isMarkingCheckCompleteConfirmationPopupDisplaying: false });\r\n        var systemMessagePriority = 255;\r\n        var markingCheckToList = [\r\n            worklistStore.instance.selectedMarkingCheckExaminer.fromExaminerID\r\n        ];\r\n        var questionPaperId = qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId;\r\n        var markSchemeGroupId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n        messagingActionCreator.sendExaminerMessage(markingCheckToList, '', '', questionPaperId, null, enums.MessagePriority.Important, markSchemeGroupId, null, -1, -1, false, null, enums.SystemMessage.MarksChecked);\r\n        messagingActionCreator.sendExaminerMessage(markingCheckToList, '', '', questionPaperId, null, systemMessagePriority, markSchemeGroupId, null, -1, -1, false, null, enums.SystemMessage.MarksChecked);\r\n    };\r\n    /**\r\n     * On cliking Ok button of the response search failed popup\r\n     */\r\n    Footer.prototype.onOkClickOfResponseSearchFailedErrorMessage = function () {\r\n        this.setState({ isResponseSearchFailed: false });\r\n        this.storageAdapterHelper.clearStorageArea('messaging');\r\n        messagingActionCreator.refreshMessageFolder(enums.MessageFolderType.Inbox);\r\n    };\r\n    /**\r\n     * Get the error message that has to be shown on response search failed while a response is deallocated in the background\r\n     */\r\n    Footer.prototype.getResponseSearchFailedErrorMessage = function () {\r\n        var searchResponseData = messageStore.instance.searchResponseData;\r\n        var questionGroup = messageHelper.getDisplayText(messageStore.instance.getMessageData(searchResponseData.messageId));\r\n        var errorBodyParameter = [searchResponseData.displayId, questionGroup];\r\n        var errorBody = stringHelper.format(localeStore.instance.TranslateText('generic.error-dialog.body-response-removed'), errorBodyParameter);\r\n        return errorBody;\r\n    };\r\n    /**\r\n     * on clicking yes button of simulation response submit confirmation popup\r\n     */\r\n    Footer.prototype.onYesClickOfSimulationResponseSubmitButton = function () {\r\n        this.setState({ showSimulationResponseSubmitConfirmationPopup: false });\r\n        if (submitStore.instance.isSubmitFromMarkScheme) {\r\n            simulationModeHelper.checkStandardisationSetupCompletion(enums.PageContainers.None, enums.PageContainers.None);\r\n            busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.submitInResponseScreen);\r\n            markingActionCreator.saveAndNavigate(enums.SaveAndNavigate.submit);\r\n        }\r\n        else {\r\n            // If simulation response submission happens from worklist, then submission\r\n            // needs to be blocked if standardisation setup is completed\r\n            var that_2 = this;\r\n            if (!qigStore.instance.getSelectedQIGForTheLoggedInUser.standardisationSetupComplete) {\r\n                var promise = qigActionCreator.checkStandardisationSetupCompleted(qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId, enums.PageContainers.WorkList, enums.PageContainers.WorkList);\r\n                Promise.Promise.all([promise]).then(function (data) {\r\n                    if (data[0] === true) {\r\n                        this.setState({\r\n                            showSimulationExitedPopup: true,\r\n                            showAllSimulationExitedQigs: false\r\n                        });\r\n                    }\r\n                    else {\r\n                        that_2.submitResponse();\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                that_2.submitResponse();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * on clicking no button of simulation response submit confirmation popup\r\n     */\r\n    Footer.prototype.onNoClickOfSimulationResponseSubmitButton = function () {\r\n        this.setState({ showSimulationResponseSubmitConfirmationPopup: false });\r\n    };\r\n    /**\r\n     * on clicking yes button of share confirmation popup\r\n     */\r\n    Footer.prototype.onYesClickOfShareConfirmationPopup = function () {\r\n        this.setState({ doShowShareConfirmationPopup: false });\r\n        acetatesActionCreator.shareAcetate(this.shareConfirmationClientToken);\r\n        this.shareConfirmationClientToken = undefined;\r\n    };\r\n    /**\r\n     * on clicking no button of share confirmation popup\r\n     */\r\n    Footer.prototype.onNoClickOfShareConfirmationPopup = function () {\r\n        this.setState({ doShowShareConfirmationPopup: false });\r\n        this.shareConfirmationClientToken = undefined;\r\n    };\r\n    /**\r\n     * Gets the name of simulation mode exited qigs\r\n     */\r\n    Footer.prototype.getSimulationModeExitedQigs = function () {\r\n        var qigNames = new Array();\r\n        if (this.state.showSimulationExitedPopup) {\r\n            // If all qigs need to be shown then. When navigating to qigselector.\r\n            if (this.state.showAllSimulationExitedQigs) {\r\n                var simulationModeExitedQigList_1 = Immutable.List();\r\n                simulationModeExitedQigList_1 =\r\n                    qigStore.instance.getSimulationModeExitedQigList === undefined\r\n                        ? undefined\r\n                        : qigStore.instance.getSimulationModeExitedQigList.qigList;\r\n                if (simulationModeExitedQigList_1) {\r\n                    simulationModeExitedQigList_1.map(function (_simulationModeExitedQig) {\r\n                        var qigNameToDisplay = stringFormatHelper.formatAwardingBodyQIG(_simulationModeExitedQig.markSchemeGroupName, _simulationModeExitedQig.assessmentCode, _simulationModeExitedQig.sessionName, _simulationModeExitedQig.componentId, _simulationModeExitedQig.questionPaperName, '', // TO DO: have to retrive ComponentName and AssessmentName on simulationQIg details.\r\n                        '', stringFormatHelper.getOverviewQIGNameFormat());\r\n                        qigNames.push(qigNameToDisplay);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                // Otherwise show only the currrent qig. When navigating from worklist/response to area other than\r\n                // qigselector\r\n                var qigData = qigStore.instance.getSelectedQIGForTheLoggedInUser;\r\n                var qigNameToDisplay = stringFormatHelper.formatAwardingBodyQIG(qigData.markSchemeGroupName, qigData.assessmentCode, qigData.sessionName, qigData.componentId, qigData.questionPaperName, '', // TO DO: have to retrive ComponentName and AssessmentName on simulationQIg details.\r\n                '', stringFormatHelper.getOverviewQIGNameFormat());\r\n                qigNames.push(qigNameToDisplay);\r\n            }\r\n        }\r\n        return qigNames;\r\n    };\r\n    /**\r\n     * Method to reset the acetate save inprogress status.\r\n     */\r\n    Footer.prototype.resetAcetateSaveInProgressStatus = function () {\r\n        // checking whether any addded/modified acetates are found in the acetatelist from store.\r\n        var modifiedAcetatesList = qigStore.instance.getModifiedAcetatesList();\r\n        if (modifiedAcetatesList && modifiedAcetatesList.size > 0) {\r\n            // Invoke action creator to set saveInProgress status to true before calling acetate save process.\r\n            acetatesActionCreator.resetAcetateSaveInProgressStatus(modifiedAcetatesList);\r\n        }\r\n    };\r\n    /**\r\n     * Reset acetates saveInProgress status received callback event.\r\n     */\r\n    Footer.prototype.onResetAcetatesSaveInProgressReceived = function (modifiedAcetatesList) {\r\n        var saveacetatesarguments = {\r\n            Tools: modifiedAcetatesList\r\n        };\r\n        // db call for saving the acetate list in database.\r\n        acetatesActionCreator.saveAcetates(saveacetatesarguments);\r\n    };\r\n    /**\r\n     * Complete Standardisation received callback event.\r\n     */\r\n    Footer.prototype.onCompleteStandardisationSetup = function () {\r\n        if (!standardisationSetupStore.instance.iscompleteStandardisationSuccess) {\r\n            this.setState({ popUpType: enums.PopUpType.CompleteStandardisationValidate, isBusy: false });\r\n        }\r\n    };\r\n    /**\r\n     * Checks whether the autozoned message should be displayed.\r\n     */\r\n    Footer.prototype.isAutozonedMessagePopupVisible = function () {\r\n        if (this.props.footerType !== enums.FooterType.Message) {\r\n            var selectedAwardingCandidateData = void 0;\r\n            var examSessionID = void 0;\r\n            if (markerOperationModeFactory.operationMode.isAwardingMode) {\r\n                selectedAwardingCandidateData = awardingHelper.awardingSelectedCandidateData();\r\n                examSessionID = selectedAwardingCandidateData.responseItemGroups[0].examSessionID;\r\n            }\r\n            //Checking the CC values\r\n            var isAutozoned = configurableCharacteristicHelper\r\n                .getExamSessionCCValue(configurableCharacteristicNames.AutoZoning, markerOperationModeFactory.operationMode.isAwardingMode\r\n                ? examSessionID\r\n                : qigStore.instance.selectedQIGForMarkerOperation.examSessionId)\r\n                .toLowerCase() === 'true' &&\r\n                configurableCharacteristicHelper\r\n                    .getExamSessionCCValue(configurableCharacteristicNames.DisplayAutozonedResponsesWarning, markerOperationModeFactory.operationMode.isAwardingMode\r\n                    ? examSessionID\r\n                    : qigStore.instance.selectedQIGForMarkerOperation.examSessionId)\r\n                    .toLowerCase() === 'true';\r\n            //getting the saved userOption value\r\n            var userOptionAutozonedValue = userOptionsHelper.getUserOptionByName(userOptionKeys.AUTOZONED_WARNING_MESSAGE, markerOperationModeFactory.operationMode.isAwardingMode\r\n                ? awardingStore.instance.selectedCandidateData.responseItemGroups[0].examinerRoleId\r\n                : qigStore.instance.getSelectedQIGForTheLoggedInUser.examinerRoleId) === 'true';\r\n            //set state to display Autozoned message popup\r\n            if (isAutozoned && userOptionAutozonedValue !== true) {\r\n                this.setState({\r\n                    isAutozonedMessagePopupDisplaying: true\r\n                });\r\n                //saving useroption for autozoned message popup\r\n                userOptionsHelper.save(userOptionKeys.AUTOZONED_WARNING_MESSAGE, JSON.stringify(true), true, true, false, true, markerOperationModeFactory.operationMode.isAwardingMode\r\n                    ? awardingStore.instance.selectedCandidateData.responseItemGroups[0].examinerRoleId\r\n                    : qigStore.instance.getSelectedQIGForTheLoggedInUser.examinerRoleId);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Action when the ok button for Marking Check confirmation is clicked\r\n     */\r\n    Footer.prototype.OnOkClickOfCompleteStandardisationConfirmation = function () {\r\n        this.setState({ isBusy: true, isCompleteStandardisation: true });\r\n        standardisationActionCreator.completeStandardisationSetup(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId);\r\n    };\r\n    /**\r\n     * Action when the ok button for Marking Check confirmation is clicked\r\n     */\r\n    Footer.prototype.OnCancelClickOfCompleteStandardisationConfirmation = function () {\r\n        this.props.OnClickingCancelofStdSetupPopup(true);\r\n    };\r\n    /**\r\n     * Action when the ok button for Marking Check confirmation is clicked\r\n     */\r\n    Footer.prototype.onOkClickofStandardisationSetupValidate = function () {\r\n        this.setState({\r\n            popUpType: enums.PopUpType.None,\r\n            isCompleteStandardisation: false\r\n        });\r\n        busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.validateStandardisationSetup);\r\n        standardisationActionCreator.getStandardisationTargetDetails(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId);\r\n        // get the worklist view type.\r\n        var stdWorklistViewType = userOptionsHelper.getUserOptionByName(userOptionKeys.SELECTED_GRID_VIEW_OPTION)\r\n            === 'false' ? enums.STDWorklistViewType.ViewMarksByQuestion : enums.STDWorklistViewType.ViewTotalMarks;\r\n        // Refresh the grid with latest changes.\r\n        standardisationActionCreator.getClassifiedResponseDetails(standardisationSetupStore.instance.examinerRoleId, loginSession.EXAMINER_ID, standardisationSetupStore.instance.markSchemeGroupId, false, stdWorklistViewType);\r\n    };\r\n    Object.defineProperty(Footer.prototype, \"getSelectToMarkProvisionalPopupContent\", {\r\n        /**\r\n         * pop up content on clicking select response to mark button\r\n         */\r\n        get: function () {\r\n            var content = [];\r\n            var scriptData = standardisationSetupStore.instance.fetchSelectedScriptDetails(standardisationSetupStore.instance.selectedResponseId);\r\n            var showMultiQigPopup = this.isMultiQigMarkingAvailable();\r\n            var centreCandidateDetails = stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-content-line2'), [\r\n                String(scriptData.candidateScriptId),\r\n                scriptData.centreNumber,\r\n                scriptData.centreCandidateNumber.toUpperCase()\r\n            ]);\r\n            var isCommonProvisionalStandardisationCcOn = configurableCharacteristicHelper.getCharacteristicValue(configurableCharacteristicNames.CommonProvisionalStandardisation, standardisationSetupStore.instance.markSchemeGroupId).toLowerCase() === 'true';\r\n            if (showMultiQigPopup) {\r\n                content.push(React.createElement(\"p\", { key: 'select-to-mark-popup-content-line2', className: 'dim-text padding-bottom-10' }, centreCandidateDetails));\r\n                content.push(React.createElement(\"p\", { key: 'select-to-mark-popup-content-line2' }, localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-multiqig-popup-content-line')));\r\n                content.push(React.createElement(GenericPopupWithCheckBoxes, { className: 'qig-item', id: 'popup-createprovisional-multiqig', items: this.multiQigCheckboxItems, selectedLanguage: this.props.selectedLanguage, onChecked: this.onChecked, key: 'popup-createprovisional-multiqig' }));\r\n            }\r\n            else {\r\n                content.push(React.createElement(\"p\", { key: 'select-to-mark-popup-content-line1' }, isCommonProvisionalStandardisationCcOn ? localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-content-line1-provisional')\r\n                    : localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-content-line1')));\r\n                content.push(React.createElement(\"p\", { key: 'select-to-mark-popup-content-line2', className: 'dim-text padding-top-10' }, centreCandidateDetails));\r\n            }\r\n            if (this.isCommonProvisionalStandardisationCcOn()) {\r\n                content.push(React.createElement(\"div\", { className: 'option-holder padding-top-10' },\r\n                    React.createElement(\"ul\", { className: 'options' },\r\n                        React.createElement(\"li\", { className: 'padding-top-10' },\r\n                            React.createElement(\"input\", { type: 'radio', value: 'selected', id: 'STMAllocate1', name: 'selectProvisionalSTM', checked: this.state.provisionalMarkingType === enums.ProvisionalMarkingType.AllocateToAll ?\r\n                                    true : false }),\r\n                            React.createElement(\"label\", { htmlFor: 'STMAllocate1', onClick: this.onOptionButtonClick.bind(this, enums.ProvisionalMarkingType.AllocateToAll) },\r\n                                React.createElement(\"span\", { className: 'radio-ui' }),\r\n                                React.createElement(\"span\", { className: 'label-text' }, localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-option-allocate-all')))),\r\n                        React.createElement(\"li\", { className: 'padding-top-10' },\r\n                            React.createElement(\"input\", { type: 'radio', value: 'selected', id: 'STMAllocate2', name: 'selectProvisionalSTM', checked: this.state.provisionalMarkingType === enums.ProvisionalMarkingType.AllocatedToMe ?\r\n                                    true : false }),\r\n                            React.createElement(\"label\", { htmlFor: 'STMAllocate2', onClick: this.onOptionButtonClick.bind(this, enums.ProvisionalMarkingType.AllocatedToMe) },\r\n                                React.createElement(\"span\", { className: 'radio-ui' }),\r\n                                React.createElement(\"span\", { className: 'label-text' }, localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-option-allocate-me'))))),\r\n                    React.createElement(\"p\", { className: 'padding-top-20', key: 'select-to-mark-popup-content-line3' }, localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-content-line3'))));\r\n            }\r\n            else {\r\n                content.push(React.createElement(\"p\", { className: 'padding-top-10', key: 'select-to-mark-popup-content-line3' }, localeStore.instance.TranslateText('standardisation-setup.select-response.select-to-mark-popup-content-line3')));\r\n            }\r\n            return content;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Method to handle option button click\r\n     * @param isAllocateToMe\r\n     */\r\n    Footer.prototype.onOptionButtonClick = function (_provisionalMarkingType) {\r\n        this.setState({\r\n            renderedOn: Date.now(),\r\n            provisionalMarkingType: _provisionalMarkingType\r\n        });\r\n    };\r\n    Object.defineProperty(Footer.prototype, \"getMarkAsDefinitivePopupContent\", {\r\n        /**\r\n         * get mark as definitive popup content\r\n         */\r\n        get: function () {\r\n            var content = [];\r\n            var responseData = standardisationSetupStore.instance.fetchStandardisationResponseData(standardisationSetupStore.instance.selectedResponseId);\r\n            var markAsDefinitiveResponse = stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-content-line2'), [\r\n                String(responseData.displayId),\r\n                String(responseData.totalMarkValue)\r\n            ]);\r\n            content.push(React.createElement(\"p\", { key: 'mark-as-definitive-popup-content-line1' }, localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-content-line1')));\r\n            content.push(React.createElement(\"p\", { key: 'select-to-mark-popup-content-line2', className: 'dim-text padding-top-20' }, markAsDefinitiveResponse));\r\n            content.push(React.createElement(\"p\", { className: 'padding-top-20', key: 'select-to-mark-popup-content-line3' }, localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-content-line3')));\r\n            var radioButtonText = (React.createElement(\"div\", { className: 'option-holder padding-top-10' },\r\n                React.createElement(\"ul\", { className: 'options' },\r\n                    React.createElement(\"li\", { className: 'padding-top-10', onClick: this.onMarkAsDefinitiveContentClick.bind(this, true) },\r\n                        React.createElement(\"input\", { type: 'radio', value: 'selected', id: 'copyasDefinitive', defaultChecked: true, name: 'markasdefinitive' /* checked={this.copyMarksAsDefinitiveSelected === false ? false : true}*/ }),\r\n                        React.createElement(\"label\", { htmlFor: 'copyasDefinitive' },\r\n                            React.createElement(\"span\", { className: 'radio-ui' }),\r\n                            React.createElement(\"span\", { className: 'label-text', id: 'markAsDefinitivePopupRadioButton1' }, localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-radio-1')))),\r\n                    React.createElement(\"p\", { className: 'padding-top-10 option-content' }, localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-radio-1-desc')),\r\n                    React.createElement(\"li\", { className: 'padding-top-20', onClick: this.onMarkAsDefinitiveContentClick.bind(this, false) },\r\n                        React.createElement(\"input\", { type: 'radio', value: '', id: 'clearAllMark', name: 'markasdefinitive' /* checked={this.copyMarksAsDefinitiveSelected === false ? true : false} */ }),\r\n                        React.createElement(\"label\", { htmlFor: 'clearAllMark' },\r\n                            React.createElement(\"span\", { className: 'radio-ui' }),\r\n                            React.createElement(\"span\", { className: 'label-text', id: 'markAsDefinitivePopupRadioButton2' }, localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-radio-2')))),\r\n                    React.createElement(\"p\", { className: 'padding-top-10 padding-bottom-5 option-content' }, localeStore.instance.TranslateText('standardisation-setup.mark-as-definitive.mark-as-definitive-popup-radio-2-desc')))));\r\n            content.push(radioButtonText);\r\n            return content;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the copyMarksAsDefinitiveSelected flag, on Mark as definitve popup option click.\r\n     * @param isCopyMarksAndAnnotation\r\n     */\r\n    Footer.prototype.onMarkAsDefinitiveContentClick = function (isCopyMarksAndAnnotation) {\r\n        this.copyMarksAsDefinitiveSelected = isCopyMarksAndAnnotation;\r\n    };\r\n    /**\r\n     * conditions where the multiqig popup to be shown while select to mark button is clicked\r\n     */\r\n    Footer.prototype.isMultiQigMarkingAvailable = function () {\r\n        // The multiqig response pop will only show when the following conditions are true\r\n        // 1. WholeResponseProvisionalMarking should be ON.\r\n        // 2. Available QIGs for Provisional marking is more than one\r\n        var wholeResponseProvisionalMarking = configurableCharacteristicHelper.getExamSessionCCValue(configurableCharacteristicNames.WholeResponseProvisionalMarking, markerOperationModeFactory.operationMode.isAwardingMode\r\n            ? awardingStore.instance.selectedSession.examSessionId\r\n            : qigStore.instance.selectedQIGForMarkerOperation.examSessionId).toLowerCase() === 'true' ? true : false;\r\n        if (wholeResponseProvisionalMarking && this.multiQigCheckboxItems !== undefined && this.multiQigCheckboxItems.length > 1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * switch user button click\r\n     */\r\n    Footer.prototype.switchUserButtonClick = function () {\r\n        window.removeEventListener('beforeunload', navigationHelper.onBeforeWindowUnload);\r\n        /* tslint:disable:no-string-literal */\r\n        window.sessionStorage['adminsupport'] = 'true';\r\n        /* tslint:enable:no-string-literal */\r\n        window.open('?', '_self');\r\n    };\r\n    /**\r\n     * Complete Standardisation received callback event.\r\n     */\r\n    Footer.prototype.onResponseDataRecievedAfterRefresh = function () {\r\n        /*\r\n          Setting busy indicator to false on Standardisation Setup refresh on\r\n          completing standardisation setup\r\n        */\r\n        this.setState({ isBusy: false });\r\n    };\r\n    /**\r\n     * Populate recassify multioption popUp data\r\n     */\r\n    Footer.prototype.populateRecassifyMultiOptionPopUpData = function (selectedMarkingModeId) {\r\n        if (selectedMarkingModeId === void 0) { selectedMarkingModeId = 0; }\r\n        this.items = new Array();\r\n        var markSchemeGroupId = standardisationSetupStore.instance.markSchemeGroupId;\r\n        var ssuStmClassificationRestriction = stdSetupPermissionHelper.getSsuClassificationRestrictionByMarkSchemeGroupId(markSchemeGroupId);\r\n        var restictedText = localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.restricted');\r\n        this.standardisationSetupHelper = standardisationSetupFactory.\r\n            getStandardisationSetUpWorklistHelper(standardisationSetupStore.instance.selectedStandardisationSetupWorkList);\r\n        var restrictedTargets = this.standardisationSetupHelper.getRestrictedSSUTarget(markSchemeGroupId);\r\n        // Once std setup is completed, then show only 'seed' radio button in classify options\r\n        if (!qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete) {\r\n            if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.Practice)) {\r\n                this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.Practice, 1, selectedMarkingModeId, ssuStmClassificationRestriction.isPracticeRestrictedForAnyStm, restictedText));\r\n            }\r\n            if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.ES_TeamApproval)) {\r\n                this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.ES_TeamApproval, 2, selectedMarkingModeId, ssuStmClassificationRestriction.isStmStandardisationeRestrictedForAnyStm, restictedText));\r\n            }\r\n            if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.Approval)) {\r\n                this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.Approval, 3, selectedMarkingModeId, ssuStmClassificationRestriction.isStandardisationRestrictedForAnyStm, restictedText));\r\n            }\r\n            if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.Seeding)) {\r\n                this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.Seeding, 4, selectedMarkingModeId, ssuStmClassificationRestriction.isSeedingRestrictedForAnyStm, restictedText));\r\n            }\r\n        }\r\n        else {\r\n            /* #75081 : On classifying a response from Provisional/Unclassified worklist after SSU complete,\r\n             the Classification pop- up shall list only those targets which are not met OR\r\n            (where the target is met AND the type is not included in “RestrictStandardisationSetupTargets”). */\r\n            if (this.canListTargetInClassificationPopUp(enums.MarkingMode.Practice, restrictedTargets)) {\r\n                if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.Practice)) {\r\n                    this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.Practice, 1, selectedMarkingModeId, ssuStmClassificationRestriction.isPracticeRestrictedForAnyStm, restictedText));\r\n                }\r\n            }\r\n            if (this.canListTargetInClassificationPopUp(enums.MarkingMode.ES_TeamApproval, restrictedTargets)) {\r\n                if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.ES_TeamApproval)) {\r\n                    this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.ES_TeamApproval, 2, selectedMarkingModeId, ssuStmClassificationRestriction.isStmStandardisationeRestrictedForAnyStm, restictedText));\r\n                }\r\n            }\r\n            if (this.canListTargetInClassificationPopUp(enums.MarkingMode.Approval, restrictedTargets)) {\r\n                if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.Approval)) {\r\n                    this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.Approval, 3, selectedMarkingModeId, ssuStmClassificationRestriction.isStandardisationRestrictedForAnyStm, restictedText));\r\n                }\r\n            }\r\n            if (this.canListTargetInClassificationPopUp(enums.MarkingMode.Seeding, restrictedTargets)) {\r\n                if (standardisationSetupStore.instance.checkMarkingModeTargetExistForThisQIG(enums.MarkingMode.Seeding)) {\r\n                    this.items.push(this.createGenericRadioButtonItem(enums.MarkingMode.Seeding, 4, selectedMarkingModeId, ssuStmClassificationRestriction.isSeedingRestrictedForAnyStm, restictedText));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * To check whether the target can be displayed in Classification popup On\r\n     * classifying a response from Provisional/Unclassified worklist after SSU complete\r\n     */\r\n    Footer.prototype.canListTargetInClassificationPopUp = function (target, restrictedTargets) {\r\n        var standardisationTargetDetailList = standardisationSetupStore.instance.classificationSummaryTargetDetails;\r\n        if (standardisationTargetDetailList) {\r\n            var selectedTarget = standardisationTargetDetailList.\r\n                filter(function (x) { return x.markingModeId === target; }).first();\r\n            if (selectedTarget.count < selectedTarget.target ||\r\n                (!restrictedTargets.contains(target) && selectedTarget.target <= selectedTarget.count)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Create Generic Radio Button Item\r\n     * @param markingModeId\r\n     * @param sequenceNo\r\n     * @param selectedMarkingModeId\r\n     * @param isMarkingModeRestrictedForAnyStm\r\n     */\r\n    Footer.prototype.createGenericRadioButtonItem = function (markingModeId, sequenceNo, selectedMarkingModeId, isMarkingModeRestrictedForAnyStm, restictedText) {\r\n        var obj = new genericRadioButtonItems();\r\n        obj.sequenceNo = sequenceNo;\r\n        obj.id = markingModeId;\r\n        obj.isChecked = obj.id === selectedMarkingModeId ? true : false;\r\n        obj.name = localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.classification-type.' + enums.MarkingMode[markingModeId]);\r\n        obj.errorText = (isMarkingModeRestrictedForAnyStm ? ' - ' + restictedText : '');\r\n        return obj;\r\n    };\r\n    /**\r\n     * Create radio button for Reuse action popup\r\n     */\r\n    Footer.prototype.createReuseGenericRadioButtonItem = function (inputid, sequenceNo) {\r\n        var radioButonForPE = new genericRadioButtonItems();\r\n        radioButonForPE.sequenceNo = sequenceNo;\r\n        radioButonForPE.id = inputid;\r\n        radioButonForPE.isChecked = true;\r\n        radioButonForPE.name = 'Create copy and move to unclassified list';\r\n        radioButonForPE.errorText = '';\r\n        return radioButonForPE;\r\n    };\r\n    /**\r\n     * Populate radio button item for ReuseRIG pop up\r\n     */\r\n    Footer.prototype.populateReuseUnclassifyPopupItem = function () {\r\n        this.reuseUnclassifyItem = new Array();\r\n        this.reuseUnclassifyItem.push(this.createReuseGenericRadioButtonItem(enums.MarkingMode.PreStandardisation, 1));\r\n    };\r\n    Object.defineProperty(Footer.prototype, \"getReUseActionMultiOptionPopupContent\", {\r\n        /**\r\n         * get Reuse RIG popup action\r\n         */\r\n        get: function () {\r\n            var content = [];\r\n            var openedResponseDetails = standardisationSetupStore.instance.\r\n                getReusableResponseDetails(this.reuseRIGSelectedDisplayId.toString());\r\n            var reuseRIGSelectedCentreId = openedResponseDetails.centreNumber.toString();\r\n            var reuseRIGSelectedCandidateNo = openedResponseDetails.centreCandidateNumber.toString();\r\n            var reuseRIGSelectedScriptID = openedResponseDetails.candidateScriptId.toString();\r\n            content.push(React.createElement(\"span\", null,\r\n                React.createElement(\"p\", null, localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.reuse-content')),\r\n                React.createElement(\"p\", { className: 'dim-text padding-top-10' },\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.script-id'),\r\n                        React.createElement(\"span\", { id: 'reusescriptid' }, ': 1' + reuseRIGSelectedScriptID + ', ')),\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.Centre'),\r\n                        React.createElement(\"span\", { id: 'reusecentreid' }, ': ' + reuseRIGSelectedCentreId + ', ')),\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.Candidate'),\r\n                        React.createElement(\"span\", { id: 'reusecandidateid' }, ': ' + reuseRIGSelectedCandidateNo))),\r\n                React.createElement(\"div\", { className: 'option-holder padding-top-10' },\r\n                    React.createElement(GenericPopupWithRadioButton, { className: 'options', id: 'popup-reuserig-option-holder', items: this.reuseUnclassifyItem, selectedLanguage: this.props.selectedLanguage, onCheckedChange: this.onReuseItemCheckedChange, renderedOn: this.state.renderedOn, liClassName: 'padding-top-10', key: 'popup-reuse-unclassify-option' })),\r\n                React.createElement(\"p\", { className: 'padding-top-10' }, localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-action-popup.reuse-classify-option')),\r\n                React.createElement(\"div\", { className: 'classify-options-holder padding-top-10 clearfix' },\r\n                    React.createElement(GenericPopupWithRadioButton, { className: 'option-items', id: 'popup-reclassify-multioption', items: this.items, selectedLanguage: this.props.selectedLanguage, onCheckedChange: this.onCheckedChange, renderedOn: this.state.renderedOn, liClassName: 'padding-top-10', key: 'popup-reuse-classify-option' }))));\r\n            return content;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Footer.prototype, \"getReclassificationMultiOptionPopupContent\", {\r\n        /**\r\n         * get reclassification Multi Option Popup Content\r\n         */\r\n        get: function () {\r\n            var content = [];\r\n            content.push(React.createElement(\"span\", null,\r\n                React.createElement(\"p\", { className: 'dim-text' },\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.response-id'),\r\n                        React.createElement(\"span\", { className: 'responseID' }, ' ' + this.reclassifyResponseDetails.displayId)),\r\n                    \",\",\r\n                    React.createElement(\"span\", null,\r\n                        ' ' + localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.total-mark'),\r\n                        React.createElement(\"span\", { className: 'total-mark' }, ' ' + this.reclassifyResponseDetails.totalMarkValue))),\r\n                React.createElement(\"p\", { className: 'padding-top-10' }, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.body')),\r\n                React.createElement(\"p\", { className: 'padding-top-10' }, localeStore.instance.TranslateText(qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete ?\r\n                    'standardisation-setup.standardisation-setup-worklist.classify-multioption-popup.body-complete-setup-message' :\r\n                    'standardisation-setup.standardisation-setup-worklist.reclassify-multioption-popup.body-complete-setup-message')),\r\n                React.createElement(\"div\", { className: 'classify-options-holder padding-top-10 clearfix' },\r\n                    React.createElement(GenericPopupWithRadioButton, { className: 'option-items', id: 'popup-reclassify-multioption', items: this.items, selectedLanguage: this.props.selectedLanguage, onCheckedChange: this.onCheckedChange, renderedOn: this.state.renderedOn, liClassName: 'padding-top-10', key: 'popup-reclassify-multioption' }))));\r\n            return content;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Method to get the reclassified response error popup content.\r\n     */\r\n    Footer.prototype.getReclassifyErrorPopupContent = function () {\r\n        var previousMarkingMode = (localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.classification-type.'\r\n            + enums.MarkingMode[this.previousMarkingMode]));\r\n        var currentMarkingMode = (localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.classification-type.'\r\n            + enums.MarkingMode[this.currentMarkingMode]));\r\n        return stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.reclassifyerror-popup.body'), [this.displayId,\r\n            previousMarkingMode,\r\n            currentMarkingMode\r\n        ]);\r\n    };\r\n    /**\r\n     * Method to get the share response popup content.\r\n     */\r\n    Footer.prototype.getShareResponsePopupContent = function () {\r\n        var popUpContent = [];\r\n        popUpContent.push(React.createElement(\"p\", null, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.body')));\r\n        popUpContent.push(React.createElement(\"p\", { className: 'dim-text padding-top-10' },\r\n            React.createElement(\"span\", null,\r\n                localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.response-id'),\r\n                React.createElement(\"span\", { className: 'responseID' }, this._shareResponseDetails.displayId)),\r\n            \",\",\r\n            React.createElement(\"span\", null,\r\n                localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.total-mark'),\r\n                React.createElement(\"span\", { className: 'total-mark' }, this._shareResponseDetails.totalMarkValue))));\r\n        popUpContent.push(React.createElement(\"p\", { className: 'padding-top-10' }, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.confirmation-text')));\r\n        return popUpContent;\r\n    };\r\n    Object.defineProperty(Footer.prototype, \"getShareResponsePopupContentForPE\", {\r\n        /**\r\n         * get Share Response Popup Content For PE\r\n         */\r\n        get: function () {\r\n            var content = [];\r\n            content.push(React.createElement(\"span\", null,\r\n                React.createElement(\"p\", { id: 'chose-message' }, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.chose-message')),\r\n                React.createElement(\"p\", { className: 'dim-text padding-top-10' },\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.response-id'),\r\n                        React.createElement(\"span\", { className: 'responseID' }, this._shareResponseDetails.displayId)),\r\n                    \",\",\r\n                    React.createElement(\"span\", null,\r\n                        localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.total-mark'),\r\n                        React.createElement(\"span\", { className: 'total-mark' }, this._shareResponseDetails.totalMarkValue))),\r\n                React.createElement(\"div\", { className: 'option-holder padding-top-10' },\r\n                    React.createElement(GenericPopupWithRadioButton, { className: 'options', id: 'popup-share-response-option-holder', items: this.reuseUnclassifyItem, selectedLanguage: this.props.selectedLanguage, onCheckedChange: this.onReuseItemCheckedChange, renderedOn: this.state.renderedOn, liClassName: 'padding-top-10', key: 'popup-reuse-unclassify-option' })),\r\n                React.createElement(\"p\", { id: 'share-note', className: 'padding-top-10 option-content' }, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.share-note')),\r\n                React.createElement(\"p\", { id: 'classify-now', className: 'padding-top-10' },\r\n                    React.createElement(\"label\", null,\r\n                        React.createElement(\"span\", { className: 'label-text' }, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.classify-now')))),\r\n                React.createElement(\"p\", { id: 'annotation-note', className: 'padding-top-10' }, localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.annotation-note')),\r\n                React.createElement(\"div\", { className: 'classify-options-holder padding-top-10 clearfix' },\r\n                    React.createElement(GenericPopupWithRadioButton, { className: 'option-items', id: 'popup-reclassify-multioption', items: this.items, selectedLanguage: this.props.selectedLanguage, onCheckedChange: this.onCheckedChange, renderedOn: this.state.renderedOn, liClassName: 'padding-top-10', key: 'popup-reuse-classify-option' }))));\r\n            return content;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Populate radio button item for Share and Classify pop up for PE\r\n     */\r\n    Footer.prototype.populateShareForPEclassifyPopupItem = function () {\r\n        this.reuseUnclassifyItem = new Array();\r\n        this.reuseUnclassifyItem.push(this.creatShareForPEGenericRadioButtonItem(enums.MarkingMode.PreStandardisation, 1));\r\n    };\r\n    /**\r\n     * Create radio button for Share and Classify\r\n     */\r\n    Footer.prototype.creatShareForPEGenericRadioButtonItem = function (inputid, sequenceNo) {\r\n        var radioButtonForSharePE = new genericRadioButtonItems();\r\n        radioButtonForSharePE.sequenceNo = sequenceNo;\r\n        radioButtonForSharePE.id = inputid;\r\n        radioButtonForSharePE.isChecked = radioButtonForSharePE.id === inputid ? true : false;\r\n        radioButtonForSharePE.name = localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.share-response-popup.share-mark');\r\n        radioButtonForSharePE.errorText = '';\r\n        return radioButtonForSharePE;\r\n    };\r\n    /**\r\n     * Populate recassify multioption popUp data\r\n     */\r\n    Footer.prototype.populateCreateMultiQIGProvisionalsPopUpData = function (provisionalQigdetails) {\r\n        var _this = this;\r\n        this.multiQigCheckboxItems = new Array();\r\n        provisionalQigdetails.map(function (item) {\r\n            // Only show the QIGs which have MultiQIGProvisionalPermisson in the StandardisationSetupPermissions CC is ON\r\n            var standardisationSetupCCData = stdSetupPermissionHelper.generateSTDSetupPermissionData(item.stdSetupPermissionCCData, item.role);\r\n            if (standardisationSetupCCData && standardisationSetupCCData.role.permissions.multiQIGProvisionals) {\r\n                _this.multiQigCheckboxItems.push(_this.createGenericCheckBoxItem(item, item.markSchemeGroupId === standardisationSetupStore.instance.markSchemeGroupId));\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Create Generic Check Box Item\r\n     * @param provisionalQigDetail\r\n     */\r\n    Footer.prototype.createGenericCheckBoxItem = function (provisionalQigDetail, ischecked) {\r\n        var obj = new genericCheckBoxItems();\r\n        obj.id = provisionalQigDetail.markSchemeGroupId;\r\n        obj.isChecked = ischecked;\r\n        obj.disabled = ischecked;\r\n        obj.labelContent = provisionalQigDetail.markSchemeGroupName;\r\n        obj.containerClassName = 'padding-top-10';\r\n        obj.className = 'text-middle checkbox';\r\n        obj.labelClassName = 'text-middle';\r\n        return obj;\r\n    };\r\n    /**\r\n     * display note modified in background popup\r\n     */\r\n    Footer.prototype.displayNoteSaveFailedPopup = function (saveNoteErrorCode) {\r\n        if (saveNoteErrorCode === enums.SaveNoteError.TimeStampChanged) {\r\n            this.messageDetails = {\r\n                messageHeader: localeStore.instance.TranslateText('standardisation-setup.left-panel.note-save-error-popup-header'),\r\n                messageString: localeStore.instance.TranslateText('standardisation-setup.left-panel.note-timestamp-changed-popup-body')\r\n            };\r\n            this.setState({ isNoteTimeStampChangedPopupVisible: true });\r\n        }\r\n        else if (saveNoteErrorCode === enums.SaveNoteError.MarkingModeChanged) {\r\n            this.messageDetails = {\r\n                messageHeader: localeStore.instance.TranslateText('standardisation-setup.left-panel.note-save-error-popup-header'),\r\n                messageString: localeStore.instance.TranslateText('standardisation-setup.left-panel.note-response-modified-popup-body')\r\n            };\r\n            this.setState({ isResponseModifiedPopupVisibile: true });\r\n        }\r\n    };\r\n    /**\r\n     *  Rerender classified worklist on declassify/reclassify scenario\r\n     */\r\n    Footer.prototype.reRenderOnClassifiedResponseReceived = function () {\r\n        var _this = this;\r\n        // Fetch the STDWorklistViewType from user options\r\n        var isStdTotalMarkView = userOptionsHelper.getUserOptionByName(userOptionKeys.SELECTED_GRID_VIEW_OPTION)\r\n            === 'false' ? false : true;\r\n        var gridType = isStdTotalMarkView ?\r\n            enums.STDWorklistViewType.ViewTotalMarks : enums.STDWorklistViewType.ViewMarksByQuestion;\r\n        // refresh the summary targets.\r\n        var getStandardisationTargetDetails = standardisationActionCreator.getStandardisationTargetDetails(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId);\r\n        getStandardisationTargetDetails.\r\n            then(function () {\r\n            // refresh the classification grid once we reclassify/declassify a response.\r\n            var getClassifiedResponseDetails = standardisationActionCreator.getClassifiedResponseDetails(standardisationSetupStore.instance.examinerRoleId, loginSession.EXAMINER_ID, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, false, gridType);\r\n            getClassifiedResponseDetails.\r\n                then(function () {\r\n                _this.setState({ doShowReclassifyResponseBusyIndicator: false });\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * save Marks And Annotations With Non Recoverable Error\r\n     * @param saveMarksAndAnnotationTriggeringPoint\r\n     * @param markGroupId\r\n     * @param queueOperation\r\n     */\r\n    Footer.prototype.saveMarksAndAnnotationsWithNonRecoverableError = function (saveMarksAndAnnotationTriggeringPoint, markGroupId, queueOperation) {\r\n        // Calling the helper method to update the marks and annotations queue\r\n        marksAndAnnotationsSaveHelper.onSaveMarksAndAnnotations(markGroupId, queueOperation);\r\n        // If the queue is processed completely, have to hide the save marks and annotations busy indicator\r\n        if (marksAndAnnotationsSaveHelper.isQueueProcessedCompletely) {\r\n            if (marksAndAnnotationsSaveHelper.markGroupItemsWithNonRecoverableErrors\r\n                .length > 0) {\r\n                //When there are errors in saving marks and annotations we have to hide the busy indicator\r\n                busyIndicatorActionCreator.setBusyIndicatorInvoker(enums.BusyIndicatorInvoker.none);\r\n                // set appropriate error dialog contents\r\n                this.saveMarksAndAnnotationsErrorDialogContents = new saveMarksAndAnnotationsNonRecoverableErrorDialogContents(true);\r\n                if (this.state.doShowSavingMarksAndAnnotationsIndicator) {\r\n                    //logic for displaying error popup.\r\n                    this.setState({\r\n                        doShowSavingMarksAndAnnotationsIndicator: false,\r\n                        isNonRecoverableErrorPopupVisible: true\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                this.processBasedOnSaveMarksAndAnnotationTriggeringPoint(saveMarksAndAnnotationTriggeringPoint, markGroupId);\r\n            }\r\n            // Last Invoked Trigger point is stored in marking Store. Reset the variable after 'ALL Completed Save'\r\n            if (marksAndAnnotationsSaveHelper.count === 0) {\r\n                responseActionCreator.triggerSavingMarksAndAnnotations(enums.SaveMarksAndAnnotationsProcessingTriggerPoint.None);\r\n            }\r\n            // hide the saving marks and annotations busy indicator\r\n            if (this.state.doShowSavingMarksAndAnnotationsIndicator) {\r\n                this.setState({\r\n                    doShowSavingMarksAndAnnotationsIndicator: false\r\n                });\r\n            }\r\n        }\r\n    };\r\n    Object.defineProperty(Footer.prototype, \"IsShareAndClassifyOptionNeeded\", {\r\n        /**\r\n         * Return IsShareAndClassifyOptionNeeded value\r\n         */\r\n        get: function () {\r\n            return standardisationSetupStore.instance.stdSetupPermissionCCData.role.permissions.classify &&\r\n                this.reuseUnclassifyItem.filter(function (i) { return i.isChecked === true; })[0] === undefined;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Footer.prototype, \"classifyOrReclassifySaveFailPopUpContent\", {\r\n        /**\r\n         * Returns the currentSaveFailPopUp content.\r\n         */\r\n        get: function () {\r\n            return this.isUnclassifiedWorklistSelected ?\r\n                stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.concurrent-esmarkingmode-save-fail-popup.body-with-response-id'), [this.displayId]) :\r\n                localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.concurrent-esmarkingmode-save-fail-popup.body');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns isCommonProvisionalStandardisationCcOn.\r\n     */\r\n    Footer.prototype.isCommonProvisionalStandardisationCcOn = function () {\r\n        return configurableCharacteristicHelper.getCharacteristicValue(configurableCharacteristicNames.CommonProvisionalStandardisation, standardisationSetupStore.instance.markSchemeGroupId).toLowerCase() === 'true';\r\n    };\r\n    Object.defineProperty(Footer.prototype, \"discardResponseFailPopUpContent\", {\r\n        /**\r\n         * Returns the discard response fail popup content with displayId.\r\n         */\r\n        get: function () {\r\n            return stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.response-already-discarded-popup.body-with-response-id'), [responseStore.instance.selectedDisplayId.toString()]);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Footer;\r\n}(pureRenderComponent));\r\nmodule.exports = Footer;\r\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ 42)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 383:
/* no static exports found */
/* all exports used */
/*!*************************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/classifyresponse.tsx ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n  React component for Classify response header\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar classifyResponse = function (props) {\r\n    var className = 'primary rounded popup-nav wl-classfy-btn button';\r\n    if (props.isDisabled) {\r\n        className = className + ' disabled';\r\n    }\r\n    var onClickHandler = function (event) {\r\n        if (props.onClickAction) {\r\n            props.onClickAction(props.esMarkGroupId);\r\n        }\r\n    };\r\n    var result = React.createElement(\"button\", { id: 'classifyResponse_' + props.id, key: 'classifyResponse_key_' + props.id, disabled: props.isDisabled ? true : false, title: '', className: className, onClick: onClickHandler }, localeStore.instance.TranslateText(props.buttonTextResourceKey));\r\n    return result;\r\n};\r\nmodule.exports = classifyResponse;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL2NsYXNzaWZ5cmVzcG9uc2UudHN4Pzc1ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgUmVhY3QgY29tcG9uZW50IGZvciBDbGFzc2lmeSByZXNwb25zZSBoZWFkZXJcbiovXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG4vKiB0c2xpbnQ6ZW5hYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xuaW1wb3J0IFB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcblxubGV0IGNsYXNzTmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5cbi8qKlxuICogUHJvcGVydGllcyBvZiBDbGFzc2lmeSBidXR0b25cbiAqL1xuaW50ZXJmYWNlIENsYXNzaWZ5UmVzcG9uc2VQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XG5cdGlzRGlzYWJsZWQ6IGJvb2xlYW47XG5cdHJlbmRlcmVkT24/OiBudW1iZXI7XG5cdGVzTWFya0dyb3VwSWQ/OiBudW1iZXI7XG5cdGJ1dHRvblRleHRSZXNvdXJjZUtleTogc3RyaW5nO1xuXHRvbkNsaWNrQWN0aW9uPzogRnVuY3Rpb247XG59XG5cbmNvbnN0IGNsYXNzaWZ5UmVzcG9uc2U6XG5cdFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDxDbGFzc2lmeVJlc3BvbnNlUHJvcHM+ID1cblx0KHByb3BzOiBDbGFzc2lmeVJlc3BvbnNlUHJvcHMpID0+IHtcblx0XHRsZXQgY2xhc3NOYW1lOiBzdHJpbmcgPSAncHJpbWFyeSByb3VuZGVkIHBvcHVwLW5hdiB3bC1jbGFzc2Z5LWJ0biBidXR0b24nO1xuXG5cdFx0aWYgKHByb3BzLmlzRGlzYWJsZWQpIHtcblx0XHRcdGNsYXNzTmFtZSA9IGNsYXNzTmFtZSArICcgZGlzYWJsZWQnO1xuXHRcdH1cblxuXHRcdGNvbnN0IG9uQ2xpY2tIYW5kbGVyID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRpZiAocHJvcHMub25DbGlja0FjdGlvbikge1xuXHRcdFx0XHRwcm9wcy5vbkNsaWNrQWN0aW9uKHByb3BzLmVzTWFya0dyb3VwSWQpO1xuXHRcdFx0fVxuICAgIFx0fTtcblxuXHRcdGxldCByZXN1bHQgPSA8YnV0dG9uXG5cdFx0XHRpZD17J2NsYXNzaWZ5UmVzcG9uc2VfJyArIHByb3BzLmlkfVxuXHRcdFx0a2V5PXsnY2xhc3NpZnlSZXNwb25zZV9rZXlfJyArIHByb3BzLmlkfVxuXHRcdFx0ZGlzYWJsZWQ9e3Byb3BzLmlzRGlzYWJsZWQgPyB0cnVlIDogZmFsc2V9XG5cdFx0XHR0aXRsZT17Jyd9XG5cdFx0XHRjbGFzc05hbWU9e2NsYXNzTmFtZX1cblx0XHRcdG9uQ2xpY2s9e29uQ2xpY2tIYW5kbGVyfT5cblx0XHRcdHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KHByb3BzLmJ1dHRvblRleHRSZXNvdXJjZUtleSl9XG5cdFx0PC9idXR0b24+O1xuXG5cdFx0cmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnQgPSBjbGFzc2lmeVJlc3BvbnNlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9zdGFuZGFyZGlzYXRpb25zZXR1cC9zaGFyZWQvY2xhc3NpZnlyZXNwb25zZS50c3giXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUdBO0FBYUE7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQVVBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 384:
/* no static exports found */
/* all exports used */
/*!********************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/reusebutton.tsx ***!
  \********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for Reuse button header\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\nvar ReuseButton = /** @class */ (function (_super) {\r\n    __extends(ReuseButton, _super);\r\n    /**\r\n     * Constructor for ReuseButton\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function ReuseButton(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.state = {\r\n            reRender: Date.now()\r\n        };\r\n        _this.onReuseClick = _this.onReuseClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    ReuseButton.prototype.render = function () {\r\n        return (React.createElement(\"button\", { id: 'reuse_button_id_' + this.props.id, key: 'reuse_button_key_' + this.props.id, disabled: this.props.isDisabled ? true : false, title: (this.props.isDisabled ?\r\n                localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-button.disable-tooltip')\r\n                : localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-button.enable-tooltip')), className: 'primary button rounded popup-nav reusebtn', onClick: this.onReuseClick }, (this.props.isDisabled ? localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-button.disable')\r\n            : localeStore.instance.TranslateText('standardisation-setup.previous-session.reuse-button.enable'))));\r\n    };\r\n    /**\r\n     * On Reuse click\r\n     */\r\n    ReuseButton.prototype.onReuseClick = function () {\r\n        standardisationActionCreator.reuseRigActionPopupOpen(this.props.displayId);\r\n    };\r\n    return ReuseButton;\r\n}(PureRenderComponent));\r\nmodule.exports = ReuseButton;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3JldXNlYnV0dG9uLnRzeD9hMTYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gIFJlYWN0IGNvbXBvbmVudCBmb3IgUmV1c2UgYnV0dG9uIGhlYWRlclxuKi9cbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmltcG9ydCBQdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XG5pbXBvcnQgc3RhbmRhcmRpc2F0aW9uQWN0aW9uQ3JlYXRvciA9IHJlcXVpcmUoJy4uLy4uLy4uL2FjdGlvbnMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc3RhbmRhcmRpc2F0aW9uYWN0aW9uY3JlYXRvcicpO1xuXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xuICAgIGRpc3BsYXlJZD86IHN0cmluZztcbiAgICBpc0Rpc2FibGVkOiBib29sZWFuO1xuICAgIHJlbmRlcmVkT24/OiBudW1iZXI7XG59XG5cbi8qKlxuICogU3RhdGUgb2YgYSBSZXVzZUJ1dHRvblxuICovXG5pbnRlcmZhY2UgU3RhdGUge1xuICAgIHJlUmVuZGVyPzogbnVtYmVyO1xufVxuXG5jbGFzcyBSZXVzZUJ1dHRvbiBleHRlbmRzIFB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgUmV1c2VCdXR0b25cbiAgICAgKiBAcGFyYW0gcHJvcHNcbiAgICAgKiBAcGFyYW0gc3RhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBTdGF0ZSkge1xuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgcmVSZW5kZXI6IERhdGUubm93KClcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vblJldXNlQ2xpY2sgPSB0aGlzLm9uUmV1c2VDbGljay5iaW5kKHRoaXMpO1xuICAgIH1cblxuICAgLyoqXG4gICAgKiBSZW5kZXIgY29tcG9uZW50XG4gICAgKi9cbiAgICBwdWJsaWMgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgaWQ9eydyZXVzZV9idXR0b25faWRfJyArIHRoaXMucHJvcHMuaWR9XG4gICAgICAgICAgICBrZXk9eydyZXVzZV9idXR0b25fa2V5XycgKyB0aGlzLnByb3BzLmlkfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuaXNEaXNhYmxlZCA/IHRydWUgOiBmYWxzZX1cbiAgICAgICAgICAgIHRpdGxlPXsodGhpcy5wcm9wcy5pc0Rpc2FibGVkID9cbiAgICAgICAgICAgICAgICBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdzdGFuZGFyZGlzYXRpb24tc2V0dXAucHJldmlvdXMtc2Vzc2lvbi5yZXVzZS1idXR0b24uZGlzYWJsZS10b29sdGlwJylcbiAgICAgICAgICAgICAgICA6IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ3N0YW5kYXJkaXNhdGlvbi1zZXR1cC5wcmV2aW91cy1zZXNzaW9uLnJldXNlLWJ1dHRvbi5lbmFibGUtdG9vbHRpcCcpKX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17J3ByaW1hcnkgYnV0dG9uIHJvdW5kZWQgcG9wdXAtbmF2IHJldXNlYnRuJ31cbiAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25SZXVzZUNsaWNrfT5cbiAgICAgICAgICAgICAgICB7KHRoaXMucHJvcHMuaXNEaXNhYmxlZCA/IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ3N0YW5kYXJkaXNhdGlvbi1zZXR1cC5wcmV2aW91cy1zZXNzaW9uLnJldXNlLWJ1dHRvbi5kaXNhYmxlJylcbiAgICAgICAgICAgICAgICA6IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ3N0YW5kYXJkaXNhdGlvbi1zZXR1cC5wcmV2aW91cy1zZXNzaW9uLnJldXNlLWJ1dHRvbi5lbmFibGUnKSl9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uIFJldXNlIGNsaWNrXG4gICAgICovXG4gICAgcHJpdmF0ZSBvblJldXNlQ2xpY2soKSB7XG4gICAgICAgIHN0YW5kYXJkaXNhdGlvbkFjdGlvbkNyZWF0b3IucmV1c2VSaWdBY3Rpb25Qb3B1cE9wZW4odGhpcy5wcm9wcy5kaXNwbGF5SWQpO1xuICAgIH1cbn1cbmV4cG9ydCA9IFJldXNlQnV0dG9uO1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3JldXNlYnV0dG9uLnRzeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFlQTtBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFJQTtBQUdBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 386:
/* no static exports found */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/components/worklist/shared/allfilesnotviewedindicator.tsx ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n  React component for All pages not viewed indicator\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * Stateless All files not viewed indicator component\r\n * @param props\r\n */\r\n/* tslint:disable:variable-name */\r\nvar AllFilesNotViewedIndicator = function (props) {\r\n    /* tslint:enable:variable-name */\r\n    if (props.isECourseworkComponent && !props.allFilesViewed &&\r\n        props.isMarkingCompleted) {\r\n        return ((!props.isTileView) ?\r\n            (React.createElement(\"div\", { className: 'col-inner' },\r\n                React.createElement(\"span\", { title: localeStore.instance.\r\n                        TranslateText('marking.worklist.response-data.not-all-files-viewed-icon-tooltip') },\r\n                    React.createElement(\"span\", { className: 'sprite-icon un-view-icon', id: 'allFilesNotViewed_' + props.id, key: 'allFilesNotViewed_' + props.id }, localeStore.instance.\r\n                        TranslateText('marking.worklist.response-data.not-all-files-viewed-icon-tooltip'))))) :\r\n            (React.createElement(\"div\", { className: 'icon-holder' },\r\n                React.createElement(\"div\", { className: 'col wl-view-indicator', title: localeStore.instance.\r\n                        TranslateText('marking.worklist.response-data.not-all-files-viewed-icon-tooltip') },\r\n                    React.createElement(\"div\", { className: 'col-inner' },\r\n                        React.createElement(\"span\", { id: 'allFilesNotViewed_' + props.id, key: 'allFilesNotViewed_' + props.id, className: 'sprite-icon un-view-icon' }, localeStore.instance.\r\n                            TranslateText('marking.worklist.response-data.not-all-files-viewed-icon-tooltip')))))));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\nmodule.exports = AllFilesNotViewedIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2FsbGZpbGVzbm90dmlld2VkaW5kaWNhdG9yLnRzeD85MGY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgUmVhY3QgY29tcG9uZW50IGZvciBBbGwgcGFnZXMgbm90IHZpZXdlZCBpbmRpY2F0b3JcclxuKi9cclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBlQ291cnNld29ya0hlbHBlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZWNvdXJzZXdvcmsvZWNvdXJzZXdvcmtoZWxwZXInKTtcclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIEFsbCBmaWxlcyBub3Qgdmlld2VkIGluZGljYXRvclxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIGFsbEZpbGVzVmlld2VkPzogYm9vbGVhbjtcclxuICAgIGlzTWFya2luZ0NvbXBsZXRlZDogYm9vbGVhbjtcclxuICAgIGlzVGlsZVZpZXc/OiBib29sZWFuO1xyXG4gICAgaXNFQ291cnNld29ya0NvbXBvbmVudD86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdGF0ZWxlc3MgQWxsIGZpbGVzIG5vdCB2aWV3ZWQgaW5kaWNhdG9yIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0gcHJvcHNcclxuICovXHJcbi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuY29uc3QgQWxsRmlsZXNOb3RWaWV3ZWRJbmRpY2F0b3IgPSAocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQgPT4ge1xyXG4gICAgLyogdHNsaW50OmVuYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcbiAgICBpZiAocHJvcHMuaXNFQ291cnNld29ya0NvbXBvbmVudCAmJiAhcHJvcHMuYWxsRmlsZXNWaWV3ZWQgJiZcclxuICAgICAgICBwcm9wcy5pc01hcmtpbmdDb21wbGV0ZWQpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAoIXByb3BzLmlzVGlsZVZpZXcpID9cclxuICAgICAgICAgICAgICAgICg8ZGl2IGNsYXNzTmFtZT0nY29sLWlubmVyJz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT17bG9jYWxlU3RvcmUuaW5zdGFuY2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5ub3QtYWxsLWZpbGVzLXZpZXdlZC1pY29uLXRvb2x0aXAnKSB9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3Nwcml0ZS1pY29uIHVuLXZpZXctaWNvbidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXsnYWxsRmlsZXNOb3RWaWV3ZWRfJyArIHByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXsnYWxsRmlsZXNOb3RWaWV3ZWRfJyArIHByb3BzLmlkfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LnJlc3BvbnNlLWRhdGEubm90LWFsbC1maWxlcy12aWV3ZWQtaWNvbi10b29sdGlwJykgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICApIDpcclxuICAgICAgICAgICAgICAgIChcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naWNvbi1ob2xkZXInPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sIHdsLXZpZXctaW5kaWNhdG9yJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2xvY2FsZVN0b3JlLmluc3RhbmNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5ub3QtYWxsLWZpbGVzLXZpZXdlZC1pY29uLXRvb2x0aXAnKSB9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1pbm5lcic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9eydhbGxGaWxlc05vdFZpZXdlZF8nICsgcHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17J2FsbEZpbGVzTm90Vmlld2VkXycgKyBwcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdzcHJpdGUtaWNvbiB1bi12aWV3LWljb24nPntsb2NhbGVTdG9yZS5pbnN0YW5jZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5ub3QtYWxsLWZpbGVzLXZpZXdlZC1pY29uLXRvb2x0aXAnKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0ID0gQWxsRmlsZXNOb3RWaWV3ZWRJbmRpY2F0b3I7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9hbGxmaWxlc25vdHZpZXdlZGluZGljYXRvci50c3giXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQWFBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFLQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBSUE7QUFPQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 387:
/* no static exports found */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/components/worklist/shared/generictextcolumn.tsx ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n    React component for generic text column in list view\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:variable-name */\r\nvar GenericTextColumn = function (props) {\r\n    return (React.createElement(\"span\", { id: 'gen_' + props.id, className: 'dim-text txt-val small-text', title: (props.title) ? props.title : '' }, props.textValue));\r\n};\r\nmodule.exports = GenericTextColumn;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2dlbmVyaWN0ZXh0Y29sdW1uLnRzeD8yYTQ3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgICBSZWFjdCBjb21wb25lbnQgZm9yIGdlbmVyaWMgdGV4dCBjb2x1bW4gaW4gbGlzdCB2aWV3XHJcbiovXHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIGxhc3QgdXBkYXRlZCBkYXRlLlxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIHRleHRWYWx1ZT86IERhdGU7XHJcbiAgICB0aXRsZT86IHN0cmluZztcclxufVxyXG5cclxuLyogdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZSAqL1xyXG5jb25zdCBHZW5lcmljVGV4dENvbHVtbiA9IChwcm9wczogUHJvcHMpID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPHNwYW4gaWQ9eydnZW5fJyArIHByb3BzLmlkfSBjbGFzc05hbWU9J2RpbS10ZXh0IHR4dC12YWwgc21hbGwtdGV4dCdcclxuICAgICAgICAgICAgdGl0bGU9eyhwcm9wcy50aXRsZSkgPyBwcm9wcy50aXRsZSA6ICcnfT5cclxuICAgICAgICAgICAge3Byb3BzLnRleHRWYWx1ZX1cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0ID0gR2VuZXJpY1RleHRDb2x1bW47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9nZW5lcmljdGV4dGNvbHVtbi50c3giXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFNQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 388:
/* no static exports found */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/components/worklist/shared/lastupdatedcolumn.tsx ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n    React component for last updated date and time of a response.S\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar constants = __webpack_require__(/*! ../../utility/constants */ 241);\r\nvar GenericDate = __webpack_require__(/*! ./genericdate */ 315);\r\n/**\r\n * React component class for time to end the grace period\r\n */\r\nvar lastUpdatedColumn = function (props) {\r\n    if (props.dateType === enums.WorkListDateType.lastUpdatedDate || enums.WorkListDateType.submittedDate) {\r\n        /**\r\n         * Last updated date\r\n         */\r\n        var displayValue = void 0;\r\n        var formattedDate = void 0;\r\n        if (props.dateValue) {\r\n            formattedDate = (React.createElement(GenericDate, { dateValue: props.dateValue, id: 'dtup_' + props.id, key: 'dtup_' + props.id, className: constants.LASTUPDATED_COLUMN_STYLE }));\r\n        }\r\n        else {\r\n            /**\r\n             * If marking is not started the dateValue prop should be undefined , and shows marking not started text\r\n             */\r\n            formattedDate = (React.createElement(GenericDate, { id: 'dtup_' + props.id, key: 'dtup_' + props.id, className: constants.LASTUPDATED_COLUMN_STYLE, displayText: localeStore.instance.TranslateText('marking.worklist.response-data.marking-not-started') }));\r\n        }\r\n        return (React.createElement(\"div\", null, formattedDate));\r\n    }\r\n};\r\nmodule.exports = lastUpdatedColumn;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2xhc3R1cGRhdGVkY29sdW1uLnRzeD83Njk2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgICBSZWFjdCBjb21wb25lbnQgZm9yIGxhc3QgdXBkYXRlZCBkYXRlIGFuZCB0aW1lIG9mIGEgcmVzcG9uc2UuU1xyXG4qL1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IGxvY2FsZUhlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvbG9jYWxlL2xvY2FsZWhlbHBlcicpO1xyXG5pbXBvcnQgc3RyaW5nSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9nZW5lcmljL3N0cmluZ2hlbHBlcicpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBjb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2NvbnN0YW50cycpO1xyXG5pbXBvcnQgR2VuZXJpY0RhdGUgPSByZXF1aXJlKCcuL2dlbmVyaWNkYXRlJyk7XHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIGxhc3QgdXBkYXRlZCBkYXRlLlxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIGRhdGVWYWx1ZT86IERhdGU7XHJcbiAgICBkYXRlVHlwZTogZW51bXMuV29ya0xpc3REYXRlVHlwZTtcclxuICAgIGlzVGlsZVZpZXc/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKipcclxuICogUmVhY3QgY29tcG9uZW50IGNsYXNzIGZvciB0aW1lIHRvIGVuZCB0aGUgZ3JhY2UgcGVyaW9kXHJcbiAqL1xyXG5jb25zdCBsYXN0VXBkYXRlZENvbHVtbiA9IChwcm9wczogUHJvcHMpID0+IHtcclxuXHJcbiAgICBpZiAocHJvcHMuZGF0ZVR5cGUgPT09IGVudW1zLldvcmtMaXN0RGF0ZVR5cGUubGFzdFVwZGF0ZWREYXRlIHx8IGVudW1zLldvcmtMaXN0RGF0ZVR5cGUuc3VibWl0dGVkRGF0ZSkge1xyXG4gICAgICAgIC8qKiBcclxuICAgICAgICAgKiBMYXN0IHVwZGF0ZWQgZGF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxldCBkaXNwbGF5VmFsdWU7XHJcbiAgICAgICAgbGV0IGZvcm1hdHRlZERhdGU6IEpTWC5FbGVtZW50O1xyXG4gICAgICAgIGlmIChwcm9wcy5kYXRlVmFsdWUpIHtcclxuICAgICAgICAgICAgZm9ybWF0dGVkRGF0ZSA9ICg8R2VuZXJpY0RhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlVmFsdWU9e3Byb3BzLmRhdGVWYWx1ZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD17J2R0dXBfJyArIHByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17J2R0dXBfJyArIHByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y29uc3RhbnRzLkxBU1RVUERBVEVEX0NPTFVNTl9TVFlMRX0gLz4pO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKiogXHJcbiAgICAgICAgICAgICAqIElmIG1hcmtpbmcgaXMgbm90IHN0YXJ0ZWQgdGhlIGRhdGVWYWx1ZSBwcm9wIHNob3VsZCBiZSB1bmRlZmluZWQgLCBhbmQgc2hvd3MgbWFya2luZyBub3Qgc3RhcnRlZCB0ZXh0XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBmb3JtYXR0ZWREYXRlID0gKDxHZW5lcmljRGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXsnZHR1cF8nICsgcHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXsnZHR1cF8nICsgcHJvcHMuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjb25zdGFudHMuTEFTVFVQREFURURfQ09MVU1OX1NUWUxFfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlUZXh0PXtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LnJlc3BvbnNlLWRhdGEubWFya2luZy1ub3Qtc3RhcnRlZCcpfSAvPik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2Pntmb3JtYXR0ZWREYXRlfTwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydCA9IGxhc3RVcGRhdGVkQ29sdW1uO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9zaGFyZWQvbGFzdHVwZGF0ZWRjb2x1bW4udHN4Il0sIm1hcHBpbmdzIjoiO0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFHQTtBQUNBO0FBQ0E7QUFVQTs7QUFFQTtBQUNBO0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFLQTtBQUVBO0FBR0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 389:
/* no static exports found */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/components/worklist/shared/linkedmessageindicator.tsx ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar localeHelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar markSchemeHelper = __webpack_require__(/*! ../../../utility/markscheme/markschemehelper */ 276);\r\nvar messageStore = __webpack_require__(/*! ../../../stores/message/messagestore */ 240);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../../actions/messaging/messagingactioncreator */ 268);\r\nvar responseHelper = __webpack_require__(/*! ../../utility/responsehelper/responsehelper */ 249);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../utility/ecoursework/ecourseworkhelper */ 238);\r\nvar applicationStore = __webpack_require__(/*! ../../../stores/applicationoffline/applicationstore */ 247);\r\nvar applicationActionCreator = __webpack_require__(/*! ../../../actions/applicationoffline/applicationactioncreator */ 256);\r\nvar makerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\n/**\r\n * LinkedMessageIndicator component.\r\n * @param {Props} props\r\n */\r\nvar LinkedMessageIndicator = /** @class */ (function (_super) {\r\n    __extends(LinkedMessageIndicator, _super);\r\n    /**\r\n     * Constructor fot LinkedMessageIndicator\r\n     * @param props\r\n     */\r\n    function LinkedMessageIndicator(props) {\r\n        var _this = _super.call(this, props, null) || this;\r\n        /**\r\n         * Open response message while clicking on linked message icon\r\n         */\r\n        _this.onClick = function (event) {\r\n            event.stopPropagation();\r\n            if (!applicationStore.instance.isOnline) {\r\n                applicationActionCreator.checkActionInterrupted();\r\n            }\r\n            else {\r\n                // open response\r\n                var actualDisplayId = void 0;\r\n                // Ideally marking mode should be read from the opened response,\r\n                // since multiple marking modes won't come in the same worklist now this will work.\r\n                var selectedMarkingMode = worklistStore.instance.getMarkingModeByWorkListType(worklistStore.instance.currentWorklistType);\r\n                if (selectedMarkingMode === enums.MarkingMode.LiveMarking) {\r\n                    actualDisplayId = _this.props.displayId.toString();\r\n                }\r\n                else {\r\n                    var contents = _this.props.displayId.split(' ');\r\n                    actualDisplayId = contents[contents.length - 1];\r\n                }\r\n                eCourseworkHelper.fetchECourseWorkCandidateScriptMetadata(parseInt(actualDisplayId));\r\n                if (!messageStore.instance.isMessagePanelActive) {\r\n                    var openedResponseDetails = makerOperationModeFactory.operationMode.openedResponseDetails(actualDisplayId);\r\n                    responseHelper.openResponse(parseFloat(actualDisplayId), enums.ResponseNavigation.specific, makerOperationModeFactory.operationMode.isStandardisationSetupMode ?\r\n                        enums.ResponseMode.open : worklistStore.instance.getResponseMode, makerOperationModeFactory.operationMode.isStandardisationSetupMode ?\r\n                        openedResponseDetails.esMarkGroupId : openedResponseDetails.markGroupId, enums.ResponseViewMode.zoneView, enums.TriggerPoint.WorkListResponseMessageIcon);\r\n                    markSchemeHelper.getMarks(parseInt(actualDisplayId), selectedMarkingMode);\r\n                }\r\n                else {\r\n                    var messageNavigationArguments = {\r\n                        responseId: parseInt(actualDisplayId),\r\n                        canNavigate: false,\r\n                        navigateTo: enums.MessageNavigation.toResponse,\r\n                        navigationConfirmed: false,\r\n                        hasMessageContainsDirtyValue: undefined,\r\n                        triggerPoint: enums.TriggerPoint.WorkListResponseMessageIcon\r\n                    };\r\n                    messagingActionCreator.canMessageNavigate(messageNavigationArguments);\r\n                }\r\n            }\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    LinkedMessageIndicator.prototype.render = function () {\r\n        var messageContent = this.getMessageContent();\r\n        if (messageContent === undefined && !this.props.isTileView) {\r\n            return null;\r\n        }\r\n        else {\r\n            return (React.createElement(\"div\", { className: 'col wl-message text-center', id: this.props.id + '_messgeIndicator' }, messageContent));\r\n        }\r\n    };\r\n    /**\r\n     * Get message content\r\n     */\r\n    LinkedMessageIndicator.prototype.getMessageContent = function () {\r\n        var messageText = '';\r\n        if (this.props.messageCount > 0) {\r\n            messageText = this.props.isTeamManagementMode ?\r\n                localeStore.instance.TranslateText('team-management.examiner-worklist.response-data.unread-messages-icon-tooltip') :\r\n                localeStore.instance.TranslateText('marking.worklist.response-data.unread-messages-icon-tooltip');\r\n        }\r\n        else if (this.props.hasMessages) {\r\n            messageText = this.props.isTeamManagementMode ?\r\n                localeStore.instance.TranslateText('team-management.examiner-worklist.response-data.messages-icon-tooltip') :\r\n                messageText = localeStore.instance.TranslateText('marking.worklist.response-data.messages-icon-tooltip');\r\n        }\r\n        var messageClass = 'message-icon sprite-icon';\r\n        var messageAltText = localeStore.instance.TranslateText('generic.navigation-bar.inbox');\r\n        var result = undefined;\r\n        if (!this.props.hasMessages) {\r\n            return result;\r\n        }\r\n        if (this.props.messageCount > 0) {\r\n            result = (this.props.isTileView) ? React.createElement(\"div\", { className: 'col-inner' },\r\n                React.createElement(\"a\", { title: messageText, className: 'resp-messages' },\r\n                    React.createElement(\"span\", { className: messageClass },\r\n                        \" \",\r\n                        messageAltText,\r\n                        \" \"),\r\n                    React.createElement(\"span\", { className: 'notification circle', id: this.props.id + '_messageNotification' }, localeHelper.toLocaleString(this.props.messageCount > 0 ? this.props.messageCount : '')))) :\r\n                React.createElement(\"div\", { className: 'wl-message' },\r\n                    React.createElement(\"a\", { title: messageText, className: 'resp-messages', onClick: this.onClick },\r\n                        React.createElement(\"span\", { className: messageClass },\r\n                            \" \",\r\n                            messageAltText,\r\n                            \" \"),\r\n                        React.createElement(\"span\", { className: 'notification circle', id: this.props.id + '_messageNotification' }, localeHelper.toLocaleString(this.props.messageCount > 0 ? this.props.messageCount : ''))));\r\n        }\r\n        else {\r\n            result = (this.props.isTileView) ? React.createElement(\"div\", { className: 'col-inner' },\r\n                React.createElement(\"a\", { title: messageText, className: 'resp-messages' },\r\n                    React.createElement(\"span\", { className: messageClass },\r\n                        \" \",\r\n                        messageAltText,\r\n                        \" \"))) :\r\n                React.createElement(\"div\", { className: 'wl-message' },\r\n                    React.createElement(\"a\", { title: messageText, className: 'resp-messages', onClick: this.onClick },\r\n                        React.createElement(\"span\", { className: messageClass },\r\n                            \" \",\r\n                            messageAltText,\r\n                            \" \")));\r\n        }\r\n        return result;\r\n    };\r\n    return LinkedMessageIndicator;\r\n}(PureRenderComponent));\r\nmodule.exports = LinkedMessageIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 390:
/* no static exports found */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/components/worklist/shared/totalmark.tsx ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar markingstore = __webpack_require__(/*! ../../../stores/marking/markingstore */ 236);\r\n/**\r\n * React component\r\n * @param {Props} props\r\n */\r\nvar TotalMark = /** @class */ (function (_super) {\r\n    __extends(TotalMark, _super);\r\n    /**\r\n     * Constructor for total mark\r\n     * @param props\r\n     */\r\n    function TotalMark(props) {\r\n        return _super.call(this, props, null) || this;\r\n    }\r\n    /**\r\n     * getTotalMarkOutput\r\n     */\r\n    TotalMark.prototype.getTotalMarkOutput = function () {\r\n        var result = React.createElement(\"span\", null);\r\n        var totalmark;\r\n        var hasComplexOptionality = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ComplexOptionality, markingstore.instance.selectedQIGMarkSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        if (this.props.markingProgress === 0) {\r\n            result = (React.createElement(\"span\", { className: 'large-text dark-link', id: 'totalMark_' + this.props.id }, \"--\"));\r\n        }\r\n        else if (this.props.isNonNumericMark) {\r\n            result = (React.createElement(\"span\", { className: 'large-text dark-link', id: 'totalMark_' + this.props.id }, \"N/A\"));\r\n        }\r\n        else if (hasComplexOptionality && this.props.markingProgress < 100) {\r\n            //Hide totalmark based on cc value and totalprogress.\r\n            totalmark = '...';\r\n            result = (React.createElement(\"span\", { title: this.getTranslated('marking.worklist.complex-optionality.total-marks'), className: 'large-text dark-link', id: 'totalMark_' + this.props.id }, totalmark));\r\n        }\r\n        else {\r\n            totalmark = this.props.totalMark.toLocaleString(localeStore.instance.Locale);\r\n            result = (React.createElement(\"span\", { className: 'large-text dark-link', id: 'totalMark_' + this.props.id }, totalmark));\r\n        }\r\n        return result;\r\n    };\r\n    Object.defineProperty(TotalMark.prototype, \"currentLocale\", {\r\n        /*\r\n         * Get the locale\r\n        */\r\n        get: function () {\r\n            return localeStore.instance.Locale;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Translate the text\r\n     * @param value\r\n     * @returns Localised string\r\n     */\r\n    TotalMark.prototype.getTranslated = function (value) {\r\n        return localeStore.instance.TranslateText(value);\r\n    };\r\n    return TotalMark;\r\n}(pureRenderComponent));\r\nmodule.exports = TotalMark;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3RvdGFsbWFyay50c3g/YzViYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpYy9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpY3NoZWxwZXInKTtcclxuaW1wb3J0IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpYy9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpY3NuYW1lcycpO1xyXG5pbXBvcnQgbWFya2luZ3N0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL21hcmtpbmcvbWFya2luZ3N0b3JlJyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBhIGNvbXBvbmVudFxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIGlzTm9uTnVtZXJpY01hcms6IGJvb2xlYW47XHJcbiAgICBtYXhpbXVtTWFyazogbnVtYmVyO1xyXG4gICAgdG90YWxNYXJrOiBudW1iZXI7XHJcbiAgICBtYXJraW5nUHJvZ3Jlc3M6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlYWN0IGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge1Byb3BzfSBwcm9wc1xyXG4gKi9cclxuY2xhc3MgVG90YWxNYXJrIGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3IgdG90YWwgbWFya1xyXG4gICAgICogQHBhcmFtIHByb3BzXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGdldFRvdGFsTWFya091dHB1dFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0VG90YWxNYXJrT3V0cHV0KCk6IGFueSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IDxzcGFuPjwvc3Bhbj47XHJcbiAgICAgICAgbGV0IHRvdGFsbWFyaztcclxuICAgICAgICBsZXQgaGFzQ29tcGxleE9wdGlvbmFsaXR5ID0gY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzSGVscGVyLmdldENoYXJhY3RlcmlzdGljVmFsdWUoXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzLkNvbXBsZXhPcHRpb25hbGl0eSxcclxuICAgICAgICAgICAgbWFya2luZ3N0b3JlLmluc3RhbmNlLnNlbGVjdGVkUUlHTWFya1NjaGVtZUdyb3VwSWQpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJyA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5tYXJraW5nUHJvZ3Jlc3MgPT09IDApIHtcclxuXHJcbiAgICAgICAgICAgIHJlc3VsdCA9IChcclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nbGFyZ2UtdGV4dCBkYXJrLWxpbmsnIGlkPXsndG90YWxNYXJrXycgKyB0aGlzLnByb3BzLmlkfT4tLTwvc3Bhbj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuaXNOb25OdW1lcmljTWFyaykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSAoXHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2xhcmdlLXRleHQgZGFyay1saW5rJyBpZD17J3RvdGFsTWFya18nICsgdGhpcy5wcm9wcy5pZH0+Ti9BPC9zcGFuPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaGFzQ29tcGxleE9wdGlvbmFsaXR5ICYmIHRoaXMucHJvcHMubWFya2luZ1Byb2dyZXNzIDwgMTAwKSB7XHJcbiAgICAgICAgICAgIC8vSGlkZSB0b3RhbG1hcmsgYmFzZWQgb24gY2MgdmFsdWUgYW5kIHRvdGFscHJvZ3Jlc3MuXHJcbiAgICAgICAgICAgIHRvdGFsbWFyayA9ICcuLi4nO1xyXG4gICAgICAgICAgICByZXN1bHQgPSAoPHNwYW4gdGl0bGU9e3RoaXMuZ2V0VHJhbnNsYXRlZCgnbWFya2luZy53b3JrbGlzdC5jb21wbGV4LW9wdGlvbmFsaXR5LnRvdGFsLW1hcmtzJyl9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2xhcmdlLXRleHQgZGFyay1saW5rJyBpZD17J3RvdGFsTWFya18nICsgdGhpcy5wcm9wcy5pZH0+e3RvdGFsbWFya308L3NwYW4+KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0b3RhbG1hcmsgPSB0aGlzLnByb3BzLnRvdGFsTWFyay50b0xvY2FsZVN0cmluZyhsb2NhbGVTdG9yZS5pbnN0YW5jZS5Mb2NhbGUpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSAoPHNwYW4gY2xhc3NOYW1lPSdsYXJnZS10ZXh0IGRhcmstbGluaycgaWQ9eyd0b3RhbE1hcmtfJyArIHRoaXMucHJvcHMuaWR9Pnt0b3RhbG1hcmt9PC9zcGFuPik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG5cdC8qXHJcblx0ICogR2V0IHRoZSBsb2NhbGVcclxuXHQqL1xyXG5cdHByb3RlY3RlZCBnZXQgY3VycmVudExvY2FsZSgpOiBzdHJpbmcge1xyXG5cdFx0cmV0dXJuIGxvY2FsZVN0b3JlLmluc3RhbmNlLkxvY2FsZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRyYW5zbGF0ZSB0aGUgdGV4dFxyXG5cdCAqIEBwYXJhbSB2YWx1ZVxyXG5cdCAqIEByZXR1cm5zIExvY2FsaXNlZCBzdHJpbmdcclxuXHQgKi9cclxuXHRwcm90ZWN0ZWQgZ2V0VHJhbnNsYXRlZCh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KHZhbHVlKTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFRvdGFsTWFyaztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC90b3RhbG1hcmsudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWUE7OztBQUdBO0FBQ0E7QUFBQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBR0E7QUFBQTtBQUNBO0FBR0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 391:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/worklist/shared/totalmarkdetail.tsx ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar totalMark = __webpack_require__(/*! ./totalmark */ 390);\r\n/**\r\n * React component\r\n * @param {Props} props\r\n */\r\nvar TotalMarkDetail = /** @class */ (function (_super) {\r\n    __extends(TotalMarkDetail, _super);\r\n    /**\r\n     * Constructor for TotalMarkTile\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function TotalMarkDetail(props, state) {\r\n        return _super.call(this, props) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    TotalMarkDetail.prototype.render = function () {\r\n        return (this.getTotalMarkOutput());\r\n    };\r\n    return TotalMarkDetail;\r\n}(totalMark));\r\nmodule.exports = TotalMarkDetail;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3RvdGFsbWFya2RldGFpbC50c3g/MWQ1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IHRvdGFsTWFyayA9IHJlcXVpcmUoJy4vdG90YWxtYXJrJyk7XHJcblxyXG4vKipcclxuICogUmVhY3QgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7UHJvcHN9IHByb3BzXHJcbiAqL1xyXG5jbGFzcyBUb3RhbE1hcmtEZXRhaWwgZXh0ZW5kcyB0b3RhbE1hcmsge1xyXG5cclxuXHQvKipcclxuXHQgKiBDb25zdHJ1Y3RvciBmb3IgVG90YWxNYXJrVGlsZVxyXG5cdCAqIEBwYXJhbSBwcm9wc1xyXG5cdCAqIEBwYXJhbSBzdGF0ZVxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHByb3BzOiBhbnksIHN0YXRlOiBhbnkpIHtcclxuXHRcdHN1cGVyKHByb3BzKTtcclxuXHR9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgY29tcG9uZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5nZXRUb3RhbE1hcmtPdXRwdXQoKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFRvdGFsTWFya0RldGFpbDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC90b3RhbG1hcmtkZXRhaWwudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUVBO0FBRUE7OztBQUdBO0FBQ0E7QUFBQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 395:
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./src/actions/logout/logoutaction.ts ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar action = __webpack_require__(/*! ../base/action */ 229);\r\nvar dataRetrievalAction = __webpack_require__(/*! ../base/dataretrievalaction */ 239);\r\nvar actionType = __webpack_require__(/*! ../base/actiontypes */ 228);\r\nvar LogoutAction = /** @class */ (function (_super) {\r\n    __extends(LogoutAction, _super);\r\n    /**\r\n     * Logout action\r\n     * @param success\r\n     * @param errorJsonObject\r\n     */\r\n    function LogoutAction(success, errorJsonObject) {\r\n        var _this = _super.call(this, action.Source.View, actionType.USER_SESSION_UPDATE_ON_LOGOUT, success, errorJsonObject) || this;\r\n        _this.auditLog.logContent = _this.auditLog.logContent.replace(/{success}/g, success.toString());\r\n        return _this;\r\n    }\r\n    return LogoutAction;\r\n}(dataRetrievalAction));\r\nmodule.exports = LogoutAction;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvbG9nb3V0L2xvZ291dGFjdGlvbi50cz9jYWM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhY3Rpb24gPSByZXF1aXJlKCcuLi9iYXNlL2FjdGlvbicpO1xyXG5pbXBvcnQgZGF0YVJldHJpZXZhbEFjdGlvbiA9IHJlcXVpcmUoJy4uL2Jhc2UvZGF0YXJldHJpZXZhbGFjdGlvbicpO1xyXG5pbXBvcnQgYWN0aW9uQXVkaXRMb2dJbmZvID0gcmVxdWlyZSgnLi4vYmFzZS9hdWRpdGxvZ2luZm8vYWN0aW9uYXVkaXRsb2dpbmZvJyk7XHJcbmltcG9ydCBhY3Rpb25UeXBlID0gcmVxdWlyZSgnLi4vYmFzZS9hY3Rpb250eXBlcycpO1xyXG5cclxuY2xhc3MgTG9nb3V0QWN0aW9uIGV4dGVuZHMgZGF0YVJldHJpZXZhbEFjdGlvbiB7XHJcblxyXG4gICAvKipcclxuICAgICogTG9nb3V0IGFjdGlvblxyXG4gICAgKiBAcGFyYW0gc3VjY2Vzc1xyXG4gICAgKiBAcGFyYW0gZXJyb3JKc29uT2JqZWN0XHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc3VjY2VzczogYm9vbGVhbiwgZXJyb3JKc29uT2JqZWN0PzogYW55KSB7XHJcbiAgICAgICAgc3VwZXIoYWN0aW9uLlNvdXJjZS5WaWV3LCBhY3Rpb25UeXBlLlVTRVJfU0VTU0lPTl9VUERBVEVfT05fTE9HT1VULCBzdWNjZXNzLCBlcnJvckpzb25PYmplY3QpO1xyXG4gICAgICAgIHRoaXMuYXVkaXRMb2cubG9nQ29udGVudCA9IHRoaXMuYXVkaXRMb2cubG9nQ29udGVudC5yZXBsYWNlKC97c3VjY2Vzc30vZywgc3VjY2Vzcy50b1N0cmluZygpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gTG9nb3V0QWN0aW9uO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2FjdGlvbnMvbG9nb3V0L2xvZ291dGFjdGlvbi50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBRUE7QUFFQTtBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFFQTs7QUFDQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 396:
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/actions/logout/logoutactioncreator.ts ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar dispatcher = __webpack_require__(/*! ../../app/dispatcher */ 242);\r\nvar logoutAction = __webpack_require__(/*! ./logoutaction */ 395);\r\nvar authenticationDataService = __webpack_require__(/*! ../../dataservices/authentication/authenticationdataservice */ 453);\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar marksAndAnnotationsSaveHelper = __webpack_require__(/*! ../../utility/marking/marksandannotationssavehelper */ 295);\r\nvar base = __webpack_require__(/*! ../base/actioncreatorbase */ 280);\r\nvar userInfoStore = __webpack_require__(/*! ../../stores/userinfo/userinfostore */ 244);\r\n/**\r\n * Logout action creator helper class\r\n */\r\nvar LogoutActionCreator = /** @class */ (function (_super) {\r\n    __extends(LogoutActionCreator, _super);\r\n    function LogoutActionCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Update user session data\r\n     * @param logoutData\r\n     */\r\n    LogoutActionCreator.prototype.updateUserSession = function (logoutData) {\r\n        var that = this;\r\n        logoutData.isReportsPageAccessed = userInfoStore.instance.isReportsPageSelected;\r\n        marksAndAnnotationsSaveHelper.triggerMarksAndAnnotationsQueueProcessing(enums.SaveMarksAndAnnotationsProcessingTriggerPoint.Logout, function () {\r\n            //needs to be save the pending items in the save marks and annotations queue.\r\n            authenticationDataService.updateUserSession(logoutData, function (success, json) {\r\n                // This will validate the call to find any network failure\r\n                // and is mandatory to add this.\r\n                if (that.validateCall(json, false, true, enums.WarningMessageAction.None, true)) {\r\n                    dispatcher.dispatch(new logoutAction(success, json));\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return LogoutActionCreator;\r\n}(base));\r\nvar logoutActionCreator = new LogoutActionCreator();\r\nmodule.exports = logoutActionCreator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvbG9nb3V0L2xvZ291dGFjdGlvbmNyZWF0b3IudHM/MWYzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4uLy4uL2FwcC9kaXNwYXRjaGVyJyk7XHJcbmltcG9ydCBsb2dvdXRBcmd1bWVudCA9IHJlcXVpcmUoJy4uLy4uL2RhdGFzZXJ2aWNlcy9hdXRoZW50aWNhdGlvbi9sb2dvdXRhcmd1bWVudCcpO1xyXG5pbXBvcnQgbG9nb3V0QWN0aW9uID0gcmVxdWlyZSgnLi9sb2dvdXRhY3Rpb24nKTtcclxuaW1wb3J0IGF1dGhlbnRpY2F0aW9uRGF0YVNlcnZpY2UgPSByZXF1aXJlKCcuLi8uLi9kYXRhc2VydmljZXMvYXV0aGVudGljYXRpb24vYXV0aGVudGljYXRpb25kYXRhc2VydmljZScpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IHJlc3BvbnNlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvcmVzcG9uc2UvcmVzcG9uc2VzdG9yZScpO1xyXG5pbXBvcnQgbWFya3NBbmRBbm5vdGF0aW9uc1NhdmVIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L21hcmtpbmcvbWFya3NhbmRhbm5vdGF0aW9uc3NhdmVoZWxwZXInKTtcclxuaW1wb3J0IGJhc2UgPSByZXF1aXJlKCcuLi9iYXNlL2FjdGlvbmNyZWF0b3JiYXNlJyk7XHJcbmltcG9ydCB1c2VySW5mb1N0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL3VzZXJpbmZvL3VzZXJpbmZvc3RvcmUnKTtcclxuXHJcbi8qKlxyXG4gKiBMb2dvdXQgYWN0aW9uIGNyZWF0b3IgaGVscGVyIGNsYXNzXHJcbiAqL1xyXG5jbGFzcyBMb2dvdXRBY3Rpb25DcmVhdG9yIGV4dGVuZHMgYmFzZSB7XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB1c2VyIHNlc3Npb24gZGF0YVxyXG4gICAgICogQHBhcmFtIGxvZ291dERhdGFcclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZVVzZXJTZXNzaW9uKGxvZ291dERhdGE6IGxvZ291dEFyZ3VtZW50KTogdm9pZCB7XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICBsb2dvdXREYXRhLmlzUmVwb3J0c1BhZ2VBY2Nlc3NlZCA9IHVzZXJJbmZvU3RvcmUuaW5zdGFuY2UuaXNSZXBvcnRzUGFnZVNlbGVjdGVkO1xyXG4gICAgICAgIG1hcmtzQW5kQW5ub3RhdGlvbnNTYXZlSGVscGVyLnRyaWdnZXJNYXJrc0FuZEFubm90YXRpb25zUXVldWVQcm9jZXNzaW5nKFxyXG4gICAgICAgICAgICBlbnVtcy5TYXZlTWFya3NBbmRBbm5vdGF0aW9uc1Byb2Nlc3NpbmdUcmlnZ2VyUG9pbnQuTG9nb3V0LFxyXG4gICAgICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vbmVlZHMgdG8gYmUgc2F2ZSB0aGUgcGVuZGluZyBpdGVtcyBpbiB0aGUgc2F2ZSBtYXJrcyBhbmQgYW5ub3RhdGlvbnMgcXVldWUuXHJcbiAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGlvbkRhdGFTZXJ2aWNlLnVwZGF0ZVVzZXJTZXNzaW9uKGxvZ291dERhdGEsIGZ1bmN0aW9uIChzdWNjZXNzOiBib29sZWFuLCBqc29uPzogYW55KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCB2YWxpZGF0ZSB0aGUgY2FsbCB0byBmaW5kIGFueSBuZXR3b3JrIGZhaWx1cmVcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaXMgbWFuZGF0b3J5IHRvIGFkZCB0aGlzLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0LnZhbGlkYXRlQ2FsbChqc29uLCBmYWxzZSwgdHJ1ZSwgZW51bXMuV2FybmluZ01lc3NhZ2VBY3Rpb24uTm9uZSwgdHJ1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hlci5kaXNwYXRjaChuZXcgbG9nb3V0QWN0aW9uKHN1Y2Nlc3MsIGpzb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5sZXQgbG9nb3V0QWN0aW9uQ3JlYXRvciA9IG5ldyBMb2dvdXRBY3Rpb25DcmVhdG9yKCk7XHJcbmV4cG9ydCA9IGxvZ291dEFjdGlvbkNyZWF0b3I7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9hY3Rpb25zL2xvZ291dC9sb2dvdXRhY3Rpb25jcmVhdG9yLnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQUE7O0FBdUJBO0FBdEJBOzs7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 398:
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./src/components/base/customerror.ts ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/**\r\n * Class for custom error\r\n */\r\nvar CustomError = /** @class */ (function (_super) {\r\n    __extends(CustomError, _super);\r\n    /**\r\n     * Constructor CustomError\r\n     * @param module\r\n     * @param message\r\n     * @param header\r\n     * @param showErrorIcon\r\n     */\r\n    function CustomError(moduleName, message, header, showErrorIcon) {\r\n        var _this = _super.call(this, message) || this;\r\n        _this.moduleName = moduleName;\r\n        _this.message = message;\r\n        _this.headerText = header;\r\n        _this.showErrorIcon = showErrorIcon;\r\n        return _this;\r\n    }\r\n    return CustomError;\r\n}(Error));\r\nmodule.exports = CustomError;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmFzZS9jdXN0b21lcnJvci50cz9mMjRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDbGFzcyBmb3IgY3VzdG9tIGVycm9yXHJcbiAqL1xyXG5jbGFzcyBDdXN0b21FcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIC8qKiBUaGUgY29tcG9uZW50IG5hbWUgKi9cclxuICAgIHB1YmxpYyBtb2R1bGVOYW1lOiBzdHJpbmc7XHJcbiAgICAvKiogVGhlIGVycm9yIG1lc3NhZ2UgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgICAvKiBIZWFkZXIgc3RyaW5nIGZvciB0aGUgTWVzc2FnZSovXHJcbiAgICBwdWJsaWMgaGVhZGVyVGV4dDogc3RyaW5nO1xyXG4gICAgLyogYm9vbGVhbiB2YWx1ZSB0byBpbmRpY2F0ZSB3aGV0aGVyIHdlIGhhdmUgdG8gc2hvdyBlcnJvciBpY29uIG9yIG5vdCovXHJcbiAgICBwdWJsaWMgc2hvd0Vycm9ySWNvbjogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIEN1c3RvbUVycm9yXHJcbiAgICAgKiBAcGFyYW0gbW9kdWxlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVxyXG4gICAgICogQHBhcmFtIGhlYWRlclxyXG4gICAgICogQHBhcmFtIHNob3dFcnJvckljb25cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobW9kdWxlTmFtZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIGhlYWRlcjogc3RyaW5nLCBzaG93RXJyb3JJY29uOiBib29sZWFuKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5tb2R1bGVOYW1lID0gbW9kdWxlTmFtZTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIHRoaXMuaGVhZGVyVGV4dCA9IGhlYWRlcjtcclxuICAgICAgICB0aGlzLnNob3dFcnJvckljb24gPSBzaG93RXJyb3JJY29uO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBDdXN0b21FcnJvcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvYmFzZS9jdXN0b21lcnJvci50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQUE7QUFVQTs7Ozs7O0FBTUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 399:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/components/qigselector/locksinqigpopup.tsx ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar qigSelectorActionCreator = __webpack_require__(/*! ../../actions/qigselector/qigselectoractioncreator */ 253);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar stringFormatHelper = __webpack_require__(/*! ../../utility/stringformat/stringformathelper */ 250);\r\nvar locksInQigPopup = function (props) {\r\n    /**\r\n     * Handles the Click Event of locked qig\r\n     */\r\n    var openQigFromLockedList = function (qigId) {\r\n        qigSelectorActionCreator.qigSelectedFromLockedList(qigId);\r\n    };\r\n    if (props.showLocksInQigPopUp) {\r\n        return (React.createElement(\"div\", { className: 'popup medium popup-overlay fixed-hf examiner-locked open', id: 'examinerLocked', role: 'dialog' },\r\n            React.createElement(\"div\", { className: 'popup-wrap' },\r\n                React.createElement(\"div\", { className: 'popup-header' },\r\n                    React.createElement(\"h4\", { id: 'popup17Title' }, localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.header'))),\r\n                React.createElement(\"div\", { className: 'popup-content', id: 'popup16Desc' },\r\n                    React.createElement(\"p\", { className: 'login-nav-msg padding-bottom-10' }, localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.body')),\r\n                    React.createElement(\"p\", { className: 'login-nav-action padding-bottom-10' }, (props.fromLogout) ? localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.body-logout') : localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.select-a-qig')),\r\n                    getLocksInQigList()),\r\n                renderLogoutSection())));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the list of qigs with no of locks\r\n     */\r\n    function getLocksInQigList() {\r\n        var _this = this;\r\n        var locksInQigDetailsList = Immutable.List();\r\n        locksInQigDetailsList = qigStore.instance.getLocksInQigList.locksInQigDetailsList;\r\n        var toRender = locksInQigDetailsList.map(function (_locksInQigDetails, key) {\r\n            var formattedQigName = stringFormatHelper.formatAwardingBodyQIG(_locksInQigDetails.qigName, _locksInQigDetails.assessmentCode, _locksInQigDetails.sessionName, _locksInQigDetails.componentId, _locksInQigDetails.questionPaperName, _locksInQigDetails.assessmentName, _locksInQigDetails.componentName, stringFormatHelper.getOverviewQIGNameFormat());\r\n            return (React.createElement(\"a\", { key: 'lock-' + key, className: 'locked-link table-row', onClick: openQigFromLockedList.bind(_this, _locksInQigDetails.qigId) },\r\n                React.createElement(\"span\", { className: 'lock-msg table-cell bolder' },\r\n                    React.createElement(\"span\", { className: 'lock-count' }, _locksInQigDetails.noOfLocks),\r\n                    React.createElement(\"span\", { className: 'lock-text' }, (_locksInQigDetails.noOfLocks > 1) ? localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.locks-plural') : localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.lock-single'))),\r\n                React.createElement(\"span\", { className: 'lock-hyphen table-cell' }, \"-\"),\r\n                React.createElement(\"span\", { className: 'lock-qig-name table-cell' }, formattedQigName)));\r\n        });\r\n        return (React.createElement(\"div\", { className: 'lock-list-wrapper' },\r\n            React.createElement(\"div\", { id: 'lock-list-table', className: 'lock-list table' }, toRender)));\r\n    }\r\n    /**\r\n     * renders the logout button portion if needed\r\n     */\r\n    function renderLogoutSection() {\r\n        if (props.fromLogout) {\r\n            return (React.createElement(\"div\", { className: 'popup-footer text-right' },\r\n                React.createElement(\"button\", { id: 'lockslogoutbutton', className: 'button rounded', title: localeStore.instance.TranslateText('generic.user-menu.profile-section.logout-button'), onClick: function () { props.onLogoutClickOfLocksInQigPopup(); } }, localeStore.instance.TranslateText('generic.user-menu.profile-section.logout-button')),\r\n                React.createElement(\"button\", { id: 'lockscancelbutton', className: 'button primary rounded', title: localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.cancel-button'), onClick: function () { props.onCancelClickOfLocksInQigPopup(); } }, localeStore.instance.TranslateText('team-management.help-examiners.locks-in-qig-dialog.cancel-button'))));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n};\r\nmodule.exports = locksInQigPopup;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 400:
/* no static exports found */
/* all exports used */
/*!******************************************************************!*\
  !*** ./src/components/standardisationsetup/declassifybutton.tsx ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for Generic button.\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\n/**\r\n * React component class for Generic button implementation.\r\n */\r\nvar DeclassifyButton = /** @class */ (function (_super) {\r\n    __extends(DeclassifyButton, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function DeclassifyButton(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.onClick = _this.onClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render method\r\n     */\r\n    DeclassifyButton.prototype.render = function () {\r\n        var buttonElement;\r\n        buttonElement = (React.createElement(\"a\", { title: this.props.title, className: this.props.anchorclassName, id: this.props.id, key: this.props.id, onClick: this.onClick },\r\n            React.createElement(\"span\", { className: this.props.spanclassName })));\r\n        return buttonElement;\r\n    };\r\n    /**\r\n     * Click event\r\n     * @param evnt\r\n     */\r\n    DeclassifyButton.prototype.onClick = function (evnt) {\r\n        standardisationActionCreator.declassifyPopupOpen(this.props.displayId, this.props.totalMarkValue, this.props.candidateScriptId, this.props.esCandidateScriptMarkSchemeGroupId, this.props.markingModeId, this.props.rigOrder, this.props.esMarkGroupRowVersion, this.props.markSchemeGroupId);\r\n    };\r\n    return DeclassifyButton;\r\n}(pureRenderComponent));\r\nmodule.exports = DeclassifyButton;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvZGVjbGFzc2lmeWJ1dHRvbi50c3g/MDFmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gIFJlYWN0IGNvbXBvbmVudCBmb3IgR2VuZXJpYyBidXR0b24uXHJcbiovXHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGFwcGxpY2F0aW9uU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvYXBwbGljYXRpb25vZmZsaW5lL2FwcGxpY2F0aW9uc3RvcmUnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9lbnVtcycpO1xyXG5pbXBvcnQgc3RhbmRhcmRpc2F0aW9uQWN0aW9uQ3JlYXRvciA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbnMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc3RhbmRhcmRpc2F0aW9uYWN0aW9uY3JlYXRvcicpO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICBhbmNob3JjbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgICBzcGFuY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGRpc3BsYXlJZDogc3RyaW5nO1xyXG5cdHRvdGFsTWFya1ZhbHVlOiBudW1iZXI7XHJcblx0Y2FuZGlkYXRlU2NyaXB0SWQ6IG51bWJlcjtcclxuICAgIGVzQ2FuZGlkYXRlU2NyaXB0TWFya1NjaGVtZUdyb3VwSWQ6IG51bWJlcjtcclxuICAgIG1hcmtTY2hlbWVHcm91cElkOiBudW1iZXI7XHJcblx0bWFya2luZ01vZGVJZDogbnVtYmVyO1xyXG4gICAgcmlnT3JkZXI6IG51bWJlcjtcclxuICAgIGVzTWFya0dyb3VwUm93VmVyc2lvbjogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogUmVhY3QgY29tcG9uZW50IGNsYXNzIGZvciBHZW5lcmljIGJ1dHRvbiBpbXBsZW1lbnRhdGlvbi5cclxuICovXHJcbmNsYXNzIERlY2xhc3NpZnlCdXR0b24gZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGNvbnN0cnVjdG9yXHJcbiAgICAgKiBAcGFyYW0gcHJvcHNcclxuICAgICAqIEBwYXJhbSBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xyXG4gICAgICAgIHRoaXMub25DbGljayA9IHRoaXMub25DbGljay5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIG1ldGhvZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBidXR0b25FbGVtZW50OiBKU1guRWxlbWVudDtcclxuICAgICAgICBidXR0b25FbGVtZW50ID0gKFxyXG4gICAgICAgICAgICA8YSB0aXRsZT17dGhpcy5wcm9wcy50aXRsZX1cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5hbmNob3JjbGFzc05hbWV9XHJcbiAgICAgICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgIGtleT17dGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DbGlja31cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXt0aGlzLnByb3BzLnNwYW5jbGFzc05hbWV9IC8+XHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiBidXR0b25FbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xpY2sgZXZlbnRcclxuICAgICAqIEBwYXJhbSBldm50XHJcbiAgICAgKi9cclxuXHRwcml2YXRlIG9uQ2xpY2soZXZudDogYW55KSB7XHJcblx0XHRzdGFuZGFyZGlzYXRpb25BY3Rpb25DcmVhdG9yLmRlY2xhc3NpZnlQb3B1cE9wZW4odGhpcy5wcm9wcy5kaXNwbGF5SWQsIHRoaXMucHJvcHMudG90YWxNYXJrVmFsdWUsXHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMuY2FuZGlkYXRlU2NyaXB0SWQsIHRoaXMucHJvcHMuZXNDYW5kaWRhdGVTY3JpcHRNYXJrU2NoZW1lR3JvdXBJZCxcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5tYXJraW5nTW9kZUlkLCB0aGlzLnByb3BzLnJpZ09yZGVyLFxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmVzTWFya0dyb3VwUm93VmVyc2lvbiwgdGhpcy5wcm9wcy5tYXJrU2NoZW1lR3JvdXBJZCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IERlY2xhc3NpZnlCdXR0b247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3N0YW5kYXJkaXNhdGlvbnNldHVwL2RlY2xhc3NpZnlidXR0b24udHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQWlCQTs7QUFFQTtBQUNBO0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFBQTtBQUVBOztBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUdBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 401:
/* no static exports found */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/bluebanner.tsx ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * StatelessComponent component for BlueBanner\r\n * @param props\r\n */\r\nvar blueBanner = function (props) {\r\n    return (React.createElement(\"div\", { className: 'message-bar' },\r\n        React.createElement(\"span\", { className: 'message-content' },\r\n            React.createElement(\"div\", { className: 'text-left', id: 'blue-banner-message' },\r\n                React.createElement(\"p\", null, props.blueBannerMessageKey !== '' || props.blueBannerMessageKey !== undefined\r\n                    ? localeStore.instance.TranslateText(props.blueBannerMessageKey) : null)))));\r\n};\r\nmodule.exports = blueBanner;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL2JsdWViYW5uZXIudHN4P2YyNWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uLy4uL2NvbXBvbmVudHMvdXRpbGl0eS9lbnVtcycpO1xyXG5cclxuLyoqXHJcbiAqIFByb3BzXHJcbiAqIEBwYXJhbSB7UHJvcHN9IHByb3BzXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgYmx1ZUJhbm5lck1lc3NhZ2VLZXk6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFN0YXRlbGVzc0NvbXBvbmVudCBjb21wb25lbnQgZm9yIEJsdWVCYW5uZXJcclxuICogQHBhcmFtIHByb3BzXHJcbiAqL1xyXG5jb25zdCBibHVlQmFubmVyOiBSZWFjdC5TdGF0ZWxlc3NDb21wb25lbnQ8UHJvcHM+ID0gKHByb3BzOiBQcm9wcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWVzc2FnZS1iYXInPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J21lc3NhZ2UtY29udGVudCc+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndGV4dC1sZWZ0JyBpZD0nYmx1ZS1iYW5uZXItbWVzc2FnZSc+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5ibHVlQmFubmVyTWVzc2FnZUtleSAhPT0gJycgfHwgcHJvcHMuYmx1ZUJhbm5lck1lc3NhZ2VLZXkgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KHByb3BzLmJsdWVCYW5uZXJNZXNzYWdlS2V5KSA6IG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcbmV4cG9ydCA9IGJsdWVCYW5uZXI7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9zdGFuZGFyZGlzYXRpb25zZXR1cC9zaGFyZWQvYmx1ZWJhbm5lci50c3giXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBWUE7OztBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBT0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 402:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/rigorder.tsx ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * Stateless component for Script ID column in Standardisation Setup Grid\r\n * @param props\r\n */\r\nvar rigorder = function (props) {\r\n    /**\r\n     * This mehod will return the classification type header\r\n     * @param classificationType\r\n     */\r\n    function getHeaderBody(classificationType) {\r\n        var element;\r\n        if (classificationType) {\r\n            element = (React.createElement(\"div\", { id: props.id, className: props.className }, (localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.classification-type.'\r\n                + enums.MarkingMode[classificationType]))));\r\n        }\r\n        else {\r\n            element = (React.createElement(\"span\", { id: props.id, className: props.className }, props.rigOrder));\r\n        }\r\n        return element;\r\n    }\r\n    return (React.createElement(\"div\", { className: 'header-data cursor-move' },\r\n        props.classificationType === undefined ?\r\n            React.createElement(\"span\", { className: 'sprite-icon drag-icon', title: !qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete ? 'Drag to change the order.' : '' })\r\n            : null,\r\n        getHeaderBody(props.classificationType)));\r\n};\r\nmodule.exports = rigorder;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3JpZ29yZGVyLnRzeD81Y2Y5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgcWlnU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvcWlnc2VsZWN0b3IvcWlnc3RvcmUnKTtcclxuXHJcbmludGVyZmFjZSBSSUdPcmRlclByb3BzIGV4dGVuZHMgUHJvcHNCYXNlIHtcclxuICAgIGNsYXNzaWZpY2F0aW9uVHlwZT86IGVudW1zLk1hcmtpbmdNb2RlO1xyXG4gICAgcmlnT3JkZXI/OiBzdHJpbmc7XHJcbiAgICBjbGFzc05hbWU6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIFN0YXRlbGVzcyBjb21wb25lbnQgZm9yIFNjcmlwdCBJRCBjb2x1bW4gaW4gU3RhbmRhcmRpc2F0aW9uIFNldHVwIEdyaWRcclxuICogQHBhcmFtIHByb3BzXHJcbiAqL1xyXG5jb25zdCByaWdvcmRlcjogUmVhY3QuU3RhdGVsZXNzQ29tcG9uZW50PFJJR09yZGVyUHJvcHM+ID0gKHByb3BzOiBSSUdPcmRlclByb3BzKSA9PiB7XHJcblxyXG4vKipcclxuICogVGhpcyBtZWhvZCB3aWxsIHJldHVybiB0aGUgY2xhc3NpZmljYXRpb24gdHlwZSBoZWFkZXJcclxuICogQHBhcmFtIGNsYXNzaWZpY2F0aW9uVHlwZVxyXG4gKi9cclxuICAgIGZ1bmN0aW9uIGdldEhlYWRlckJvZHkoY2xhc3NpZmljYXRpb25UeXBlOiBlbnVtcy5NYXJraW5nTW9kZSk6IEpTWC5FbGVtZW50IHtcclxuICAgICAgICBsZXQgZWxlbWVudDogSlNYLkVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKGNsYXNzaWZpY2F0aW9uVHlwZSkge1xyXG4gICAgICAgICAgICBlbGVtZW50ID0gKDxkaXYgaWQ9e3Byb3BzLmlkfSBjbGFzc05hbWU9e3Byb3BzLmNsYXNzTmFtZX0+eyhsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0XHJcbiAgICAgICAgICAgICAgICAoJ3N0YW5kYXJkaXNhdGlvbi1zZXR1cC5zdGFuZGFyZGlzYXRpb24tc2V0dXAtd29ya2xpc3QuY2xhc3NpZmljYXRpb24tdHlwZS4nXHJcbiAgICAgICAgICAgICAgICArIGVudW1zLk1hcmtpbmdNb2RlW2NsYXNzaWZpY2F0aW9uVHlwZV0pKX08L2Rpdj4pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSAoPHNwYW4gaWQ9e3Byb3BzLmlkfSBjbGFzc05hbWU9e3Byb3BzLmNsYXNzTmFtZX0+e3Byb3BzLnJpZ09yZGVyfTwvc3Bhbj4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdoZWFkZXItZGF0YSBjdXJzb3ItbW92ZSc+XHJcbiAgICAgICAgICAgIHtwcm9wcy5jbGFzc2lmaWNhdGlvblR5cGUgPT09IHVuZGVmaW5lZCA/XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3Nwcml0ZS1pY29uIGRyYWctaWNvbidcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17IXFpZ1N0b3JlLmluc3RhbmNlLnNlbGVjdGVkUUlHRm9yTWFya2VyT3BlcmF0aW9uLnN0YW5kYXJkaXNhdGlvblNldHVwQ29tcGxldGUgPyAnRHJhZyB0byBjaGFuZ2UgdGhlIG9yZGVyLicgOiAnJ31cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDogbnVsbH1cclxuICAgICAgICAgICAge2dldEhlYWRlckJvZHkocHJvcHMuY2xhc3NpZmljYXRpb25UeXBlKX1cclxuICAgICAgICA8L2Rpdj4pO1xyXG5cclxufTtcclxuZXhwb3J0ID0gcmlnb3JkZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3N0YW5kYXJkaXNhdGlvbnNldHVwL3NoYXJlZC9yaWdvcmRlci50c3giXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQVFBOzs7QUFHQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFHQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 403:
/* no static exports found */
/* all exports used */
/*!****************************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/scriptidgridelement.tsx ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar stringHelper = __webpack_require__(/*! ../../../utility/generic/stringhelper */ 254);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar imageZoneActionCreator = __webpack_require__(/*! ../../../actions/imagezones/imagezoneactioncreator */ 439);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../utility/ecoursework/ecourseworkhelper */ 238);\r\nvar responseHelper = __webpack_require__(/*! ../../utility/responsehelper/responsehelper */ 249);\r\n/**\r\n * React component class for Script id\r\n */\r\nvar ScriptIdGridElement = /** @class */ (function (_super) {\r\n    __extends(ScriptIdGridElement, _super);\r\n    /**\r\n     * Constructor for ScriptIdGridElement\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function ScriptIdGridElement(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * This will initiate open response action\r\n         */\r\n        _this.handleScriptClick = function (candidateScriptId) {\r\n            var selectedScriptDetails = standardisationSetupStore.instance.fetchSelectedScriptDetails(parseInt(candidateScriptId));\r\n            // Indicates whether script available to mark as provisional\r\n            var isAvailable = selectedScriptDetails ? (!selectedScriptDetails.isAllocatedALive &&\r\n                !selectedScriptDetails.isUsedForProvisionalMarking) : false;\r\n            standardisationActionCreator.openStandardisationCentreScript(parseInt(candidateScriptId), isAvailable);\r\n            if (eCourseworkHelper.isECourseworkComponent) {\r\n                eCourseworkHelper.fetchECourseWorkCandidateScriptMetadata(parseInt(candidateScriptId), false, true);\r\n            }\r\n            imageZoneActionCreator.getImagezoneList(qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId, // QuestionPaperId\r\n            qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, // MarkSchemeGroupId\r\n            qigStore.instance.selectedQIGForMarkerOperation.markingMethod, true);\r\n            responseHelper.openResponse(parseInt(candidateScriptId), // CandidateScriptId\r\n            enums.ResponseNavigation.specific, enums.ResponseMode.closed, 0, // Passing MarkGroupId as 0, since we dont have markGroupId for the non-provisional response.\r\n            enums.ResponseViewMode.zoneView); // Default view mode is Zone View, even if the response has unmanaged SLAO's.\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    ScriptIdGridElement.prototype.render = function () {\r\n        var title = stringHelper.format(localeStore.instance.TranslateText('standardisation-setup.standardisation-setup-worklist.response-data.script-id-tooltip'), [\r\n            this.props.displayText\r\n                ? String(this.props.displayText)\r\n                : String(this.props.displayId)\r\n        ]);\r\n        var displayContent;\r\n        if (this.props.displayText) {\r\n            displayContent = '1' + String(this.props.displayText);\r\n        }\r\n        else {\r\n            displayContent = '1' + String(this.props.displayId);\r\n        }\r\n        return (React.createElement(\"a\", { href: 'javascript:void(0)', id: 'script_' + this.props.id, key: 'res_key_' + this.props.id, title: title, onClick: this.handleScriptClick.bind(this, this.props.displayId) }, displayContent));\r\n    };\r\n    return ScriptIdGridElement;\r\n}(pureRenderComponent));\r\nmodule.exports = ScriptIdGridElement;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 404:
/* no static exports found */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/scriptstatusgridelement.tsx ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * React component class for Script Status\r\n */\r\nvar ScriptStatusGridElement = /** @class */ (function (_super) {\r\n    __extends(ScriptStatusGridElement, _super);\r\n    /**\r\n     * Constructor for Script Status\r\n     * @param props Props\r\n     * @param state State\r\n     */\r\n    function ScriptStatusGridElement(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.classNameText = '';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    ScriptStatusGridElement.prototype.render = function () {\r\n        var parentClass = '';\r\n        var isAvailable = (!this.props.isAllocatedALive\r\n            && !this.props.isUsedForProvisionalMarking);\r\n        var available = (isAvailable) ? localeStore.instance.\r\n            TranslateText('standardisation-setup.right-container.available-status') : localeStore.instance.\r\n            TranslateText('standardisation-setup.right-container.not-available-status');\r\n        if (isAvailable) {\r\n            this.classNameText = 'sprite-icon success-small-icon text-middle';\r\n            parentClass = 'success';\r\n        }\r\n        else {\r\n            this.classNameText = 'sprite-icon not-small-black-icon text-middle';\r\n        }\r\n        return (React.createElement(\"span\", { className: parentClass, id: 'status_' + this.props.id },\r\n            React.createElement(\"span\", { className: this.classNameText }),\r\n            React.createElement(\"span\", { className: 'small-text padding-left-5' }, available)));\r\n    };\r\n    return ScriptStatusGridElement;\r\n}(pureRenderComponent));\r\nmodule.exports = ScriptStatusGridElement;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3NjcmlwdHN0YXR1c2dyaWRlbGVtZW50LnRzeD9hNmJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgc3RyaW5nSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9nZW5lcmljL3N0cmluZ2hlbHBlcicpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBhcHBsaWNhdGlvblN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2FwcGxpY2F0aW9ub2ZmbGluZS9hcHBsaWNhdGlvbnN0b3JlJyk7XHJcbmltcG9ydCBhcHBsaWNhdGlvbkFjdGlvbkNyZWF0b3IgPSByZXF1aXJlKCcuLi8uLi8uLi9hY3Rpb25zL2FwcGxpY2F0aW9ub2ZmbGluZS9hcHBsaWNhdGlvbmFjdGlvbmNyZWF0b3InKTtcclxuaW1wb3J0IEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xyXG5cclxuLyoqXHJcbiAqIFByb3BlcnRpZXMgb2YgU2NyaXB0IFN0YXR1cyBjb2x1bW5cclxuICovXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcblx0aXNBbGxvY2F0ZWRBTGl2ZTogYm9vbGVhbjtcclxuXHRpc1VzZWRGb3JQcm92aXNpb25hbE1hcmtpbmc6IGJvb2xlYW47XHJcbn1cclxuLyoqXHJcbiAqIFJlYWN0IGNvbXBvbmVudCBjbGFzcyBmb3IgU2NyaXB0IFN0YXR1c1xyXG4gKi9cclxuY2xhc3MgU2NyaXB0U3RhdHVzR3JpZEVsZW1lbnQgZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+e1xyXG5cdHByaXZhdGUgY2xhc3NOYW1lVGV4dDogc3RyaW5nID0gJyc7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnN0cnVjdG9yIGZvciBTY3JpcHQgU3RhdHVzXHJcblx0ICogQHBhcmFtIHByb3BzIFByb3BzXHJcblx0ICogQHBhcmFtIHN0YXRlIFN0YXRlXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IocHJvcHM6IFByb3BzLCBzdGF0ZTogYW55KSB7XHJcblx0XHRzdXBlcihwcm9wcywgc3RhdGUpO1xyXG5cdH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBjb21wb25lbnRcclxuICAgICAqL1xyXG5cdHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xyXG5cdFx0bGV0IHBhcmVudENsYXNzOiBzdHJpbmcgPSAnJztcclxuXHJcblx0XHRsZXQgaXNBdmFpbGFibGU6IGJvb2xlYW4gPSAoIXRoaXMucHJvcHMuaXNBbGxvY2F0ZWRBTGl2ZVxyXG5cdFx0XHQmJiAhdGhpcy5wcm9wcy5pc1VzZWRGb3JQcm92aXNpb25hbE1hcmtpbmcpO1xyXG5cclxuXHRcdGxldCBhdmFpbGFibGU6IHN0cmluZyA9IChpc0F2YWlsYWJsZSkgPyBsb2NhbGVTdG9yZS5pbnN0YW5jZS5cclxuXHRcdFx0VHJhbnNsYXRlVGV4dCgnc3RhbmRhcmRpc2F0aW9uLXNldHVwLnJpZ2h0LWNvbnRhaW5lci5hdmFpbGFibGUtc3RhdHVzJykgOiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5cclxuXHRcdFx0XHRUcmFuc2xhdGVUZXh0KCdzdGFuZGFyZGlzYXRpb24tc2V0dXAucmlnaHQtY29udGFpbmVyLm5vdC1hdmFpbGFibGUtc3RhdHVzJyk7XHJcblxyXG5cdFx0aWYgKGlzQXZhaWxhYmxlKSB7XHJcblx0XHRcdHRoaXMuY2xhc3NOYW1lVGV4dCA9ICdzcHJpdGUtaWNvbiBzdWNjZXNzLXNtYWxsLWljb24gdGV4dC1taWRkbGUnO1xyXG5cdFx0XHRwYXJlbnRDbGFzcyA9ICdzdWNjZXNzJztcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuY2xhc3NOYW1lVGV4dCA9ICdzcHJpdGUtaWNvbiBub3Qtc21hbGwtYmxhY2staWNvbiB0ZXh0LW1pZGRsZSc7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0PHNwYW4gY2xhc3NOYW1lPXtwYXJlbnRDbGFzc30gaWQ9eydzdGF0dXNfJyArIHRoaXMucHJvcHMuaWR9PlxyXG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17dGhpcy5jbGFzc05hbWVUZXh0fT48L3NwYW4+XHJcblx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPSdzbWFsbC10ZXh0IHBhZGRpbmctbGVmdC01Jz57YXZhaWxhYmxlfTwvc3Bhbj5cclxuXHRcdFx0PC9zcGFuPlxyXG5cdFx0KTtcclxuXHR9XHJcbn1cclxuZXhwb3J0ID0gU2NyaXB0U3RhdHVzR3JpZEVsZW1lbnQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3N0YW5kYXJkaXNhdGlvbnNldHVwL3NoYXJlZC9zY3JpcHRzdGF0dXNncmlkZWxlbWVudC50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWNBOztBQUVBO0FBQ0E7QUFBQTtBQUdBOzs7O0FBSUE7QUFDQTtBQUFBO0FBUEE7O0FBU0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 405:
/* no static exports found */
/* all exports used */
/*!********************************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/sharedresponseindicator.tsx ***!
  \********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar SharedResponseIndicator = /** @class */ (function (_super) {\r\n    __extends(SharedResponseIndicator, _super);\r\n    /**\r\n     * Constructor for Accuracy indicator\r\n     * @param props\r\n     */\r\n    function SharedResponseIndicator(props) {\r\n        return _super.call(this, props, null) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    SharedResponseIndicator.prototype.render = function () {\r\n        if (this.props.isSharedProvisional) {\r\n            var toolTip = localeStore.instance.TranslateText('standardisation-setup.shared-response-indicator-tooltip.content');\r\n            var accuracy = (React.createElement(\"div\", { className: 'wl-share' },\r\n                React.createElement(\"span\", { title: toolTip, className: 'sprite-icon share-icon' }, \"Share\")));\r\n            return (accuracy);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    return SharedResponseIndicator;\r\n}(PureRenderComponent));\r\nmodule.exports = SharedResponseIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3NoYXJlZHJlc3BvbnNlaW5kaWNhdG9yLnRzeD9jNDMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5pbXBvcnQgUHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgb2YgY29tcG9uZW50LlxuICogQHBhcmFtIHtQcm9wc30gcHJvcHNcbiAqL1xuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcbiAgICBpc1NoYXJlZFByb3Zpc2lvbmFsOiBib29sZWFuO1xufVxuXG5jbGFzcyBTaGFyZWRSZXNwb25zZUluZGljYXRvciBleHRlbmRzIFB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3IgZm9yIEFjY3VyYWN5IGluZGljYXRvclxuICAgICAqIEBwYXJhbSBwcm9wc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcywgbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIGNvbXBvbmVudFxuICAgICAqL1xuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzU2hhcmVkUHJvdmlzaW9uYWwpIHtcbiAgICAgICAgICAgIGxldCB0b29sVGlwOiBzdHJpbmcgPSBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdzdGFuZGFyZGlzYXRpb24tc2V0dXAuc2hhcmVkLXJlc3BvbnNlLWluZGljYXRvci10b29sdGlwLmNvbnRlbnQnKTtcbiAgICAgICAgICAgIGxldCBhY2N1cmFjeTogSlNYLkVsZW1lbnQgPVxuICAgICAgICAgICAgICAgICg8ZGl2IGNsYXNzTmFtZT0nd2wtc2hhcmUnPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT17dG9vbFRpcH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nc3ByaXRlLWljb24gc2hhcmUtaWNvbic+U2hhcmVcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2Pik7XG4gICAgICAgICAgICByZXR1cm4gKGFjY3VyYWN5KTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnQgPSBTaGFyZWRSZXNwb25zZUluZGljYXRvcjtcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3N0YW5kYXJkaXNhdGlvbnNldHVwL3NoYXJlZC9zaGFyZWRyZXNwb25zZWluZGljYXRvci50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBVUE7QUFBQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 406:
/* no static exports found */
/* all exports used */
/*!**********************************************************************************!*\
  !*** ./src/components/standardisationsetup/shared/standardisationresponseid.tsx ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar ResponseIdGridElement = __webpack_require__(/*! ../../worklist/shared/responseidgridelement */ 370);\r\n/**\r\n * Stateless component for Note column in Classification Grid\r\n * @param props\r\n */\r\nvar stdResponseId = function (props) {\r\n    return (React.createElement(\"div\", { className: 'col wl-id' },\r\n        React.createElement(\"div\", { className: 'col-inner' },\r\n            React.createElement(ResponseIdGridElement, { selectedLanguage: props.selectedLanguage, displayId: props.displayId, isClickable: props.isResponseIdClickable, id: props.id, key: 'key_response_id_grid_element_' + props.id, isTileView: false, isReusableResponseView: props.isReusableResponseView ? props.isReusableResponseView : false, candidateScriptId: props.candidateScriptId ? props.candidateScriptId : '' }))));\r\n};\r\nmodule.exports = stdResponseId;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3N0YW5kYXJkaXNhdGlvbnJlc3BvbnNlaWQudHN4P2RhMmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IFJlc3BvbnNlSWRHcmlkRWxlbWVudCA9IHJlcXVpcmUoJy4uLy4uL3dvcmtsaXN0L3NoYXJlZC9yZXNwb25zZWlkZ3JpZGVsZW1lbnQnKTtcclxuXHJcbmludGVyZmFjZSBTdGRSZXNwb25zZUlkUHJvcHMgZXh0ZW5kcyBQcm9wc0Jhc2Uge1xyXG4gICAgZGlzcGxheUlkOiBzdHJpbmc7XHJcbiAgICBpc1Jlc3BvbnNlSWRDbGlja2FibGU6IGJvb2xlYW47XHJcbiAgICBzZWxlY3RlZExhbmd1YWdlOiBzdHJpbmc7XHJcbiAgICBpc1JldXNhYmxlUmVzcG9uc2VWaWV3PzogYm9vbGVhbjtcclxuICAgIGNhbmRpZGF0ZVNjcmlwdElkPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogU3RhdGVsZXNzIGNvbXBvbmVudCBmb3IgTm90ZSBjb2x1bW4gaW4gQ2xhc3NpZmljYXRpb24gR3JpZFxyXG4gKiBAcGFyYW0gcHJvcHNcclxuICovXHJcbmNvbnN0IHN0ZFJlc3BvbnNlSWQ6IFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDxTdGRSZXNwb25zZUlkUHJvcHM+ID0gKHByb3BzOiBTdGRSZXNwb25zZUlkUHJvcHMpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wgd2wtaWQnPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sLWlubmVyJz5cclxuICAgICAgICAgICAgICAgIDxSZXNwb25zZUlkR3JpZEVsZW1lbnQgc2VsZWN0ZWRMYW5ndWFnZT17cHJvcHMuc2VsZWN0ZWRMYW5ndWFnZX1cclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5SWQ9e3Byb3BzLmRpc3BsYXlJZH0gaXNDbGlja2FibGU9e3Byb3BzLmlzUmVzcG9uc2VJZENsaWNrYWJsZX1cclxuICAgICAgICAgICAgICAgICAgICBpZD17cHJvcHMuaWR9IGtleT17J2tleV9yZXNwb25zZV9pZF9ncmlkX2VsZW1lbnRfJyArIHByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzVGlsZVZpZXc9e2ZhbHNlfVxyXG4gICAgICAgICAgICAgICAgICAgIGlzUmV1c2FibGVSZXNwb25zZVZpZXc9e3Byb3BzLmlzUmV1c2FibGVSZXNwb25zZVZpZXcgPyBwcm9wcy5pc1JldXNhYmxlUmVzcG9uc2VWaWV3IDogZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlU2NyaXB0SWQ9e3Byb3BzLmNhbmRpZGF0ZVNjcmlwdElkID8gcHJvcHMuY2FuZGlkYXRlU2NyaXB0SWQgOiAnJ30vPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHQpO1xyXG59O1xyXG5leHBvcnQgPSBzdGRSZXNwb25zZUlkO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9zdGFuZGFyZGlzYXRpb25zZXR1cC9zaGFyZWQvc3RhbmRhcmRpc2F0aW9ucmVzcG9uc2VpZC50c3giXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBVUE7OztBQUdBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFTQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 407:
/* no static exports found */
/* all exports used */
/*!***************************************************************!*\
  !*** ./src/components/teammanagement/warningmessagepopup.tsx ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar GenericDialog = __webpack_require__(/*! ../utility/genericdialog */ 317);\r\nvar warningMessagePopupHelper = __webpack_require__(/*! ../../utility/teammanagement/helpers/warningmessagepopuphelper */ 419);\r\nvar warningMessageStore = __webpack_require__(/*! ../../stores/teammanagement/warningmessagestore */ 327);\r\nvar teamManagementActionCreator = __webpack_require__(/*! ../../actions/teammanagement/teammanagementactioncreator */ 263);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * WarningMessagePopup contain message content and ok button.\r\n * @param props\r\n * @param state\r\n */\r\nvar WarningMessagePopup = /** @class */ (function (_super) {\r\n    __extends(WarningMessagePopup, _super);\r\n    /**\r\n     * Constructor WarningMessagePopup\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function WarningMessagePopup(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * Method to handle the warning message actions.\r\n         */\r\n        _this.handleWarningMessageActions = function (failureCode, warningMessageAction, args) {\r\n            _this.failureCode = failureCode;\r\n            _this.warningMessageAction = warningMessageAction;\r\n            _this._warningMessagePopupHelper.bindWarningMessagePopupContent(failureCode);\r\n            _this.setState({ doShowWarningPopup: true });\r\n        };\r\n        // Set the default states\r\n        _this.state = {\r\n            doShowWarningPopup: false\r\n        };\r\n        _this._warningMessagePopupHelper = new warningMessagePopupHelper();\r\n        _this.onOkButtonClick = _this.onOkButtonClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    WarningMessagePopup.prototype.render = function () {\r\n        var genericWarningPopup = this.state.doShowWarningPopup ? (React.createElement(GenericDialog, { content: this._warningMessagePopupHelper.warningPopupContent, header: this._warningMessagePopupHelper.warningPopupTitle, displayPopup: this.state.doShowWarningPopup, okButtonText: this.props.buttonText, onOkClick: this.onOkButtonClick, id: this.props.id, key: this.props.id, popupDialogType: enums.PopupDialogType.none })) : null;\r\n        return (React.createElement(\"div\", null, genericWarningPopup));\r\n    };\r\n    /**\r\n     * Component did mount\r\n     */\r\n    WarningMessagePopup.prototype.componentDidMount = function () {\r\n        this.addEventListeners();\r\n    };\r\n    /**\r\n     * Component will unmount\r\n     */\r\n    WarningMessagePopup.prototype.componentWillUnmount = function () {\r\n        this.removeEventListeners();\r\n    };\r\n    /**\r\n     * Add all event listeners for warning message.\r\n     */\r\n    WarningMessagePopup.prototype.addEventListeners = function () {\r\n        warningMessageStore.instance.addListener(warningMessageStore.WarningMessageStore.WARNING_MESSAGE_EVENT, this.handleWarningMessageActions);\r\n    };\r\n    /**\r\n     * Remove all event listeners for warning message.\r\n     */\r\n    WarningMessagePopup.prototype.removeEventListeners = function () {\r\n        warningMessageStore.instance.removeListener(warningMessageStore.WarningMessageStore.WARNING_MESSAGE_EVENT, this.handleWarningMessageActions);\r\n    };\r\n    /**\r\n     * Ok button click event to handle the failure action navigation.\r\n     */\r\n    WarningMessagePopup.prototype.onOkButtonClick = function () {\r\n        if (this.failureCode === enums.FailureCode.Withdrawn) {\r\n            if (qigStore.instance.selectedQIGForMarkerOperation) {\r\n                teamManagementActionCreator.removeHistoryItem(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId);\r\n            }\r\n        }\r\n        teamManagementActionCreator.warningMessageNavigation(this.failureCode, this.warningMessageAction);\r\n        this.setState({ doShowWarningPopup: false });\r\n    };\r\n    return WarningMessagePopup;\r\n}(pureRenderComponent));\r\nmodule.exports = WarningMessagePopup;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdGVhbW1hbmFnZW1lbnQvd2FybmluZ21lc3NhZ2Vwb3B1cC50c3g/Zjk2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBHZW5lcmljRGlhbG9nID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9nZW5lcmljZGlhbG9nJyk7XHJcbmltcG9ydCB3YXJuaW5nTWVzc2FnZVBvcHVwSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS90ZWFtbWFuYWdlbWVudC9oZWxwZXJzL3dhcm5pbmdtZXNzYWdlcG9wdXBoZWxwZXInKTtcclxuaW1wb3J0IHdhcm5pbmdNZXNzYWdlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvdGVhbW1hbmFnZW1lbnQvd2FybmluZ21lc3NhZ2VzdG9yZScpO1xyXG5pbXBvcnQgdGVhbU1hbmFnZW1lbnRBY3Rpb25DcmVhdG9yID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy90ZWFtbWFuYWdlbWVudC90ZWFtbWFuYWdlbWVudGFjdGlvbmNyZWF0b3InKTtcclxuaW1wb3J0IHFpZ1N0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL3FpZ3NlbGVjdG9yL3FpZ3N0b3JlJyk7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgYnV0dG9uVGV4dDogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gICAgZG9TaG93V2FybmluZ1BvcHVwPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdhcm5pbmdNZXNzYWdlUG9wdXAgY29udGFpbiBtZXNzYWdlIGNvbnRlbnQgYW5kIG9rIGJ1dHRvbi5cclxuICogQHBhcmFtIHByb3BzXHJcbiAqIEBwYXJhbSBzdGF0ZVxyXG4gKi9cclxuY2xhc3MgV2FybmluZ01lc3NhZ2VQb3B1cCBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcblxyXG4gICAgLy9XYXJuaW5nIG1lc3NhZ2UgcG9wdXAgaGVscGVyXHJcbiAgICBwcml2YXRlIF93YXJuaW5nTWVzc2FnZVBvcHVwSGVscGVyOiB3YXJuaW5nTWVzc2FnZVBvcHVwSGVscGVyO1xyXG5cclxuICAgIC8vRmFpbHVyZSBjb2RlXHJcbiAgICBwcml2YXRlIGZhaWx1cmVDb2RlOiBlbnVtcy5GYWlsdXJlQ29kZTtcclxuXHJcbiAgICAvL1dhcm5pZyBtZXNzYWdlIGFjdGlvblxyXG4gICAgcHJpdmF0ZSB3YXJuaW5nTWVzc2FnZUFjdGlvbjogZW51bXMuV2FybmluZ01lc3NhZ2VBY3Rpb247XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBXYXJuaW5nTWVzc2FnZVBvcHVwXHJcbiAgICAgKiBAcGFyYW0gcHJvcHNcclxuICAgICAqIEBwYXJhbSBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBTdGF0ZSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBzdGF0ZSk7XHJcblxyXG4gICAgICAgIC8vIFNldCB0aGUgZGVmYXVsdCBzdGF0ZXNcclxuICAgICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgICAgICBkb1Nob3dXYXJuaW5nUG9wdXA6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5fd2FybmluZ01lc3NhZ2VQb3B1cEhlbHBlciA9IG5ldyB3YXJuaW5nTWVzc2FnZVBvcHVwSGVscGVyKCk7XHJcbiAgICAgICAgdGhpcy5vbk9rQnV0dG9uQ2xpY2sgPSB0aGlzLm9uT2tCdXR0b25DbGljay5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIGNvbXBvbmVudFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XHJcbiAgICAgICAgbGV0IGdlbmVyaWNXYXJuaW5nUG9wdXAgPSB0aGlzLnN0YXRlLmRvU2hvd1dhcm5pbmdQb3B1cCA/IChcclxuICAgICAgICAgICAgPEdlbmVyaWNEaWFsb2dcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ9e3RoaXMuX3dhcm5pbmdNZXNzYWdlUG9wdXBIZWxwZXIud2FybmluZ1BvcHVwQ29udGVudH1cclxuICAgICAgICAgICAgICAgIGhlYWRlcj17dGhpcy5fd2FybmluZ01lc3NhZ2VQb3B1cEhlbHBlci53YXJuaW5nUG9wdXBUaXRsZX1cclxuICAgICAgICAgICAgICAgIGRpc3BsYXlQb3B1cD17dGhpcy5zdGF0ZS5kb1Nob3dXYXJuaW5nUG9wdXB9XHJcbiAgICAgICAgICAgICAgICBva0J1dHRvblRleHQ9e3RoaXMucHJvcHMuYnV0dG9uVGV4dCB9XHJcbiAgICAgICAgICAgICAgICBvbk9rQ2xpY2s9e3RoaXMub25Pa0J1dHRvbkNsaWNrfVxyXG4gICAgICAgICAgICAgICAgaWQ9IHt0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAga2V5PXt0aGlzLnByb3BzLmlkfVxyXG4gICAgICAgICAgICAgICAgcG9wdXBEaWFsb2dUeXBlPXtlbnVtcy5Qb3B1cERpYWxvZ1R5cGUubm9uZX0gLz5cclxuICAgICAgICApIDogbnVsbDtcclxuXHJcbiAgICAgICAgcmV0dXJuICg8ZGl2PlxyXG4gICAgICAgICAgICB7Z2VuZXJpY1dhcm5pbmdQb3B1cH1cclxuICAgICAgICA8L2Rpdj4pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tcG9uZW50IGRpZCBtb3VudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29tcG9uZW50IHdpbGwgdW5tb3VudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGFsbCBldmVudCBsaXN0ZW5lcnMgZm9yIHdhcm5pbmcgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB3YXJuaW5nTWVzc2FnZVN0b3JlLmluc3RhbmNlLmFkZExpc3RlbmVyKFxyXG4gICAgICAgICAgICB3YXJuaW5nTWVzc2FnZVN0b3JlLldhcm5pbmdNZXNzYWdlU3RvcmUuV0FSTklOR19NRVNTQUdFX0VWRU5ULCB0aGlzLmhhbmRsZVdhcm5pbmdNZXNzYWdlQWN0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYWxsIGV2ZW50IGxpc3RlbmVycyBmb3Igd2FybmluZyBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHdhcm5pbmdNZXNzYWdlU3RvcmUuaW5zdGFuY2UucmVtb3ZlTGlzdGVuZXIoXHJcbiAgICAgICAgICAgIHdhcm5pbmdNZXNzYWdlU3RvcmUuV2FybmluZ01lc3NhZ2VTdG9yZS5XQVJOSU5HX01FU1NBR0VfRVZFTlQsIHRoaXMuaGFuZGxlV2FybmluZ01lc3NhZ2VBY3Rpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCB0byBoYW5kbGUgdGhlIHdhcm5pbmcgbWVzc2FnZSBhY3Rpb25zLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGhhbmRsZVdhcm5pbmdNZXNzYWdlQWN0aW9ucyA9IChmYWlsdXJlQ29kZTogZW51bXMuRmFpbHVyZUNvZGUsXHJcbiAgICAgICAgd2FybmluZ01lc3NhZ2VBY3Rpb246IGVudW1zLldhcm5pbmdNZXNzYWdlQWN0aW9uLCBhcmdzPzogYW55KTogdm9pZCA9PiB7XHJcblxyXG4gICAgICAgIHRoaXMuZmFpbHVyZUNvZGUgPSBmYWlsdXJlQ29kZTtcclxuICAgICAgICB0aGlzLndhcm5pbmdNZXNzYWdlQWN0aW9uID0gd2FybmluZ01lc3NhZ2VBY3Rpb247XHJcbiAgICAgICAgdGhpcy5fd2FybmluZ01lc3NhZ2VQb3B1cEhlbHBlci5iaW5kV2FybmluZ01lc3NhZ2VQb3B1cENvbnRlbnQoZmFpbHVyZUNvZGUpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZG9TaG93V2FybmluZ1BvcHVwOiB0cnVlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT2sgYnV0dG9uIGNsaWNrIGV2ZW50IHRvIGhhbmRsZSB0aGUgZmFpbHVyZSBhY3Rpb24gbmF2aWdhdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbk9rQnV0dG9uQ2xpY2soKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmFpbHVyZUNvZGUgPT09IGVudW1zLkZhaWx1cmVDb2RlLldpdGhkcmF3bil7XHJcbiAgICAgICAgICAgIGlmIChxaWdTdG9yZS5pbnN0YW5jZS5zZWxlY3RlZFFJR0Zvck1hcmtlck9wZXJhdGlvbikge1xyXG5cdFx0XHRcdHRlYW1NYW5hZ2VtZW50QWN0aW9uQ3JlYXRvci5yZW1vdmVIaXN0b3J5SXRlbShcclxuXHRcdFx0XHRcdHFpZ1N0b3JlLmluc3RhbmNlLnNlbGVjdGVkUUlHRm9yTWFya2VyT3BlcmF0aW9uLm1hcmtTY2hlbWVHcm91cElkXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG4gICAgICAgIH1cclxuICAgICAgICB0ZWFtTWFuYWdlbWVudEFjdGlvbkNyZWF0b3Iud2FybmluZ01lc3NhZ2VOYXZpZ2F0aW9uKFxyXG4gICAgICAgICAgICB0aGlzLmZhaWx1cmVDb2RlLCB0aGlzLndhcm5pbmdNZXNzYWdlQWN0aW9uKTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZG9TaG93V2FybmluZ1BvcHVwOiBmYWxzZSB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gV2FybmluZ01lc3NhZ2VQb3B1cDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdGVhbW1hbmFnZW1lbnQvd2FybmluZ21lc3NhZ2Vwb3B1cC50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVBOzs7O0FBSUE7QUFDQTtBQUFBO0FBV0E7Ozs7QUFJQTtBQUNBO0FBQUE7QUFnRUE7O0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUF4RUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOztBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQVlBO0FBR0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQWVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 409:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/components/utility/genericcheckboxitems.ts ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Check Box Items\r\n */\r\nvar GenericCheckBoxItems = /** @class */ (function () {\r\n    function GenericCheckBoxItems() {\r\n    }\r\n    return GenericCheckBoxItems;\r\n}());\r\nmodule.exports = GenericCheckBoxItems;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9nZW5lcmljY2hlY2tib3hpdGVtcy50cz9hMTdhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDaGVjayBCb3ggSXRlbXNcclxuICovXHJcbmNsYXNzIEdlbmVyaWNDaGVja0JveEl0ZW1zIHtcclxuXHRwdWJsaWMgbGFiZWxDb250ZW50OiBzdHJpbmc7XHJcblx0cHVibGljIGlkOiBudW1iZXI7XHJcblx0cHVibGljIGlzQ2hlY2tlZDogYm9vbGVhbjtcclxuXHRwdWJsaWMgZGlzYWJsZWQ6IGJvb2xlYW47XHJcblx0cHVibGljIGNsYXNzTmFtZT86IHN0cmluZztcclxuXHRwdWJsaWMgbGFiZWxDbGFzc05hbWU/OiBzdHJpbmc7XHJcblx0cHVibGljIGNvbnRhaW5lckNsYXNzTmFtZT86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0ID0gR2VuZXJpY0NoZWNrQm94SXRlbXM7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ2VuZXJpY2NoZWNrYm94aXRlbXMudHMiXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBQUE7QUFRQTtBQUFBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 410:
/* no static exports found */
/* all exports used */
/*!***************************************************************!*\
  !*** ./src/components/utility/genericpopupwithcheckboxes.tsx ***!
  \***************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar _this = this;\r\n/*\r\n  React component for Generic button.\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar GenericCheckbox = __webpack_require__(/*! ../utility/genericcheckbox */ 361);\r\n/**\r\n * React component class for Generic popup with check boxes implementation.\r\n */\r\nvar genericPopupWithCheckBoxes = function (props) {\r\n    var that = _this;\r\n    var toRender = (React.createElement(\"div\", { id: props.id, key: 'key_checkbox_genericpopup', className: props.className }, props.items && props.items.map(function (item) {\r\n        return React.createElement(GenericCheckbox, { id: 'checkbox_genericpopup_' + item.id, key: 'checkbox_genericpopup_key' + item.id, containerClassName: item.containerClassName, className: item.className, disabled: item.disabled, isChecked: item.isChecked, labelClassName: item.labelClassName, labelContent: item.labelContent, onSelectionChange: props.onChecked.bind(that, item) });\r\n    })));\r\n    return toRender;\r\n};\r\nmodule.exports = genericPopupWithCheckBoxes;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9nZW5lcmljcG9wdXB3aXRoY2hlY2tib3hlcy50c3g/ZTc4MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gIFJlYWN0IGNvbXBvbmVudCBmb3IgR2VuZXJpYyBidXR0b24uXHJcbiovXHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IGdlbmVyaWNDaGVja0JveEl0ZW1zID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9nZW5lcmljY2hlY2tib3hpdGVtcycpO1xyXG5pbXBvcnQgR2VuZXJpY0NoZWNrYm94ID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9nZW5lcmljY2hlY2tib3gnKTtcclxuXHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG5cdGNsYXNzTmFtZT86IHN0cmluZztcclxuXHRvbkNoZWNrZWQ/OiBGdW5jdGlvbjtcclxuXHRpdGVtcz86IEFycmF5PGdlbmVyaWNDaGVja0JveEl0ZW1zPjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlYWN0IGNvbXBvbmVudCBjbGFzcyBmb3IgR2VuZXJpYyBwb3B1cCB3aXRoIGNoZWNrIGJveGVzIGltcGxlbWVudGF0aW9uLlxyXG4gKi9cclxuY29uc3QgZ2VuZXJpY1BvcHVwV2l0aENoZWNrQm94ZXM6IFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDxQcm9wcz4gPSAocHJvcHM6IFByb3BzKSA9PiB7XHJcblx0bGV0IHRoYXQgPSB0aGlzO1xyXG5cdGxldCB0b1JlbmRlciA9ICg8ZGl2IGlkPXtwcm9wcy5pZH0ga2V5PSdrZXlfY2hlY2tib3hfZ2VuZXJpY3BvcHVwJyBjbGFzc05hbWU9e3Byb3BzLmNsYXNzTmFtZX0gPlxyXG5cdFx0e1xyXG5cdFx0XHRwcm9wcy5pdGVtcyAmJiBwcm9wcy5pdGVtcy5tYXAoKGl0ZW06IGdlbmVyaWNDaGVja0JveEl0ZW1zKSA9PlxyXG5cdFx0XHRcdDxHZW5lcmljQ2hlY2tib3hcclxuXHRcdFx0XHRcdGlkPXsnY2hlY2tib3hfZ2VuZXJpY3BvcHVwXycgKyBpdGVtLmlkfVxyXG5cdFx0XHRcdFx0a2V5PXsnY2hlY2tib3hfZ2VuZXJpY3BvcHVwX2tleScgKyBpdGVtLmlkfVxyXG5cdFx0XHRcdFx0Y29udGFpbmVyQ2xhc3NOYW1lPXtpdGVtLmNvbnRhaW5lckNsYXNzTmFtZX1cclxuXHRcdFx0XHRcdGNsYXNzTmFtZT17aXRlbS5jbGFzc05hbWV9XHJcblx0XHRcdFx0XHRkaXNhYmxlZD17aXRlbS5kaXNhYmxlZH1cclxuXHRcdFx0XHRcdGlzQ2hlY2tlZD17aXRlbS5pc0NoZWNrZWR9XHJcblx0XHRcdFx0XHRsYWJlbENsYXNzTmFtZT17aXRlbS5sYWJlbENsYXNzTmFtZX1cclxuXHRcdFx0XHRcdGxhYmVsQ29udGVudD17aXRlbS5sYWJlbENvbnRlbnR9XHJcblx0XHRcdFx0XHRvblNlbGVjdGlvbkNoYW5nZT17cHJvcHMub25DaGVja2VkLmJpbmQodGhhdCwgaXRlbSl9IC8+XHJcblx0XHRcdClcclxuXHRcdH1cclxuXHQ8L2Rpdj4pO1xyXG5cclxuXHRyZXR1cm4gdG9SZW5kZXI7XHJcbn07XHJcblxyXG5leHBvcnQgPSBnZW5lcmljUG9wdXBXaXRoQ2hlY2tCb3hlcztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ2VuZXJpY3BvcHVwd2l0aGNoZWNrYm94ZXMudHN4Il0sIm1hcHBpbmdzIjoiO0FBSUE7QUFKQTs7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQVNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQWNBO0FBQ0E7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 411:
/* no static exports found */
/* all exports used */
/*!*************************************************************************************!*\
  !*** ./src/components/utility/grid/standardisationsetuphelpers/classifiedhelper.ts ***!
  \*************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar jsonRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar standardisationSetupHelperBase = __webpack_require__(/*! ./standardisationsetuphelperbase */ 292);\r\nvar standardisationSetupGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/standardisationsetupgridcolumns.json */ 273);\r\n/**\r\n * Helper class for Classified grid view\r\n */\r\nvar ClassifiedHelper = /** @class */ (function (_super) {\r\n    __extends(ClassifiedHelper, _super);\r\n    function ClassifiedHelper() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        // Get the worklists that should be hide when the Standardisation Permission CC Configured.\r\n        _this._hiddenStdWorklists = standardisationSetupStore.instance.getHiddenWorklists();\r\n        return _this;\r\n    }\r\n    /**\r\n     * Generate row definition for myTeam and Help other examiners tab\r\n     * @param classifedResponseData\r\n     * @param tabSelection\r\n     * @param gridType\r\n     */\r\n    ClassifiedHelper.prototype.generateStandardisationRowDefinion = function (comparerName, sortDirection, tabSelection, gridType) {\r\n        this._stdSetUpWorkListCollection = Immutable.List();\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        this._stdSetUpWorkListCollection = this.getRowDefinition(tabSelection, gridType);\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Returns the row definition for classifed worklist\r\n     * @param tabSelection\r\n     * @param gridType\r\n     */\r\n    ClassifiedHelper.prototype.getRowDefinition = function (tabSelection, gridType) {\r\n        var index = 0;\r\n        var _classifiedRowCollection = Array();\r\n        var _classifiedRowHeaderCellcollection = Array();\r\n        var _classifiedResponseListData;\r\n        var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, tabSelection, false, gridType);\r\n        var _stdSetupResponseDetails = standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses;\r\n        var marksCount = Immutable.List(_stdSetupResponseDetails).count() > 0 && _stdSetupResponseDetails.first().standardisationMarks ?\r\n            Immutable.List(_stdSetupResponseDetails.first().standardisationMarks).count() : 0;\r\n        // 1. PRACTICE\r\n        // Add response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists &&\r\n                !this._hiddenStdWorklists.contains(enums.MarkingMode.Practice))) {\r\n            // Creating the grid row collection.\r\n            _classifiedRowCollection.push(this.getGridRow('2', this.getEmptyRows(gridColumns, marksCount, gridType), null, 'classify-items-row'));\r\n            // Sort Response based on  rig order.\r\n            _classifiedResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.Practice);\r\n            // Check whether data exist, if not add empty row.\r\n            if (_classifiedResponseListData.count() > 0) {\r\n                _classifiedRowCollection =\r\n                    _classifiedRowCollection.concat(this.getRowData(_classifiedResponseListData, gridColumns, gridType, index, enums.StandardisationSetup.ClassifiedResponse));\r\n                index = index + _classifiedResponseListData.count();\r\n            }\r\n            else {\r\n                _classifiedRowCollection.push(this.getGridRow('2', this.getEmptyRows(gridColumns, marksCount, gridType), undefined, 'placeholder-row'));\r\n            }\r\n        }\r\n        // 2. APPROVAL\r\n        // Add response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists &&\r\n                !this._hiddenStdWorklists.contains(enums.MarkingMode.Approval))) {\r\n            // Creating the grid row collection.\r\n            _classifiedRowCollection.push(this.getGridRow('3', this.getEmptyRows(gridColumns, marksCount, gridType), null, 'classify-items-row'));\r\n            // Sort Response based on  rig order.\r\n            _classifiedResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.Approval);\r\n            // Check whether data exist, if not add empty row.\r\n            if (_classifiedResponseListData.count() > 0) {\r\n                _classifiedRowCollection =\r\n                    _classifiedRowCollection.concat(this.getRowData(_classifiedResponseListData, gridColumns, gridType, index, enums.StandardisationSetup.ClassifiedResponse));\r\n                index = index + _classifiedResponseListData.count();\r\n            }\r\n            else {\r\n                _classifiedRowCollection.push(this.getGridRow('3', this.getEmptyRows(gridColumns, marksCount, gridType), undefined, 'placeholder-row'));\r\n            }\r\n        }\r\n        // 3. ES TEAM APPROVAL\r\n        // Add response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists &&\r\n                !this._hiddenStdWorklists.contains(enums.MarkingMode.ES_TeamApproval))) {\r\n            // Creating the grid row collection.\r\n            _classifiedRowCollection.push(this.getGridRow('4', this.getEmptyRows(gridColumns, marksCount, gridType), null, 'classify-items-row'));\r\n            // Sort Response based on  rig order.\r\n            _classifiedResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.ES_TeamApproval);\r\n            // Check whether data exist, if not add empty row.\r\n            if (_classifiedResponseListData.count() > 0) {\r\n                _classifiedRowCollection =\r\n                    _classifiedRowCollection.concat(this.getRowData(_classifiedResponseListData, gridColumns, gridType, index, enums.StandardisationSetup.ClassifiedResponse));\r\n                index = index + _classifiedResponseListData.count();\r\n            }\r\n            else {\r\n                _classifiedRowCollection.push(this.getGridRow('4', this.getEmptyRows(gridColumns, marksCount, gridType), undefined, 'placeholder-row'));\r\n            }\r\n        }\r\n        // 4. SEED\r\n        // Add response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists &&\r\n                !this._hiddenStdWorklists.contains(enums.MarkingMode.Seeding))) {\r\n            // Creating the grid row collection.\r\n            _classifiedRowCollection.push(this.getGridRow('70', this.getEmptyRows(gridColumns, marksCount, gridType), null, 'classify-items-row'));\r\n            // Sort Response based on  rig order.\r\n            _classifiedResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.Seeding);\r\n            // Check whether data exist, if not add empty row.\r\n            if (_classifiedResponseListData.count() > 0) {\r\n                _classifiedRowCollection =\r\n                    _classifiedRowCollection.concat(this.getRowData(_classifiedResponseListData, gridColumns, gridType, index, enums.StandardisationSetup.ClassifiedResponse));\r\n                index = index + _classifiedResponseListData.count();\r\n            }\r\n            else {\r\n                _classifiedRowCollection.push(this.getGridRow('70', this.getEmptyRows(gridColumns, marksCount, gridType), undefined, 'placeholder-row'));\r\n            }\r\n        }\r\n        // Return the complete row collection.\r\n        this._classifiedListCollection = Immutable.fromJS(_classifiedRowCollection);\r\n        return this._classifiedListCollection;\r\n    };\r\n    /**\r\n     * generateStandardisationFrozenRowBody is used for generating row collection for STD WorkList Grid\r\n     * @param standardisationSetupType\r\n     * @param gridType\r\n     */\r\n    ClassifiedHelper.prototype.generateStandardisationFrozenRowBody = function (comparerName, sortDirection, standardisationSetupType, gridType) {\r\n        // Get frozen column collection.\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        // Get the Frozen row body for STD Worklist\r\n        var _stdWorkListFrozenRowBodyCollection = this.getFrozenRowBody(standardisationSetupType, gridType);\r\n        return _stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Method for getting the frozen row body for STD worklist\r\n     * @param standardisationSetupType\r\n     * @param gridType\r\n     */\r\n    ClassifiedHelper.prototype.getFrozenRowBody = function (standardisationSetupType, gridType) {\r\n        var index = 0;\r\n        var _stdWorkListRowHeaderCellcollection = Array();\r\n        var _stdWorkListRowCollection = Array();\r\n        var _stdWorkListCell;\r\n        var _stdResponseListData;\r\n        var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, enums.StandardisationSetup.ClassifiedResponse, true, gridType);\r\n        // Flag to check whether target exceeded.\r\n        var overClassified = false;\r\n        // 1. PRACTICE\r\n        // Add practice response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists && !this._hiddenStdWorklists.contains(enums.MarkingMode.Practice))) {\r\n            // Sort Response based on Rig order.\r\n            _stdResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.Practice).toArray();\r\n            _stdWorkListRowHeaderCellcollection = new Array();\r\n            // Add Empty banner for Practice\r\n            _stdWorkListRowCollection.push(this.getFrozenEmptyBannerForClassificationType(enums.MarkingMode.Practice));\r\n            if (_stdResponseListData.length > 0) {\r\n                // Loop through response details.\r\n                for (var pracResponseCount = 0; pracResponseCount < _stdResponseListData.length; pracResponseCount++) {\r\n                    // Getting the std worklist data row     \r\n                    var stdResponseData = _stdResponseListData[pracResponseCount];\r\n                    // Check whetehr the classifcation type exceeded the current target,\r\n                    // and Practice available in restricted target.\r\n                    // if so highlight the exceeded last rows with amber color.\r\n                    overClassified =\r\n                        this.isSSUTargetsOverClassified(standardisationSetupType, enums.MarkingMode.Practice, stdResponseData.rigOrder);\r\n                    // Creating the table row collection.\r\n                    _stdWorkListRowCollection.push(this.getFrozenRowData(stdResponseData, gridType, gridColumns, index, overClassified));\r\n                    index++;\r\n                }\r\n            }\r\n            else {\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumns.length; gridColumnCount++) {\r\n                    _stdWorkListCell = new gridCell();\r\n                    var cellStyle = gridColumns[gridColumnCount].GridColumn === 'ResponseIdColumn' ?\r\n                        'col-response header-col' : 'col-std-classify-items header-col';\r\n                    _stdWorkListCell.setCellStyle(cellStyle);\r\n                    _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                }\r\n                // Creating the table row collection.\r\n                _stdWorkListRowCollection.push(this.getGridRow('2', _stdWorkListRowHeaderCellcollection, undefined, 'placeholder-row'));\r\n            }\r\n            // Reset to false.\r\n            overClassified = false;\r\n        }\r\n        // 2. APPROVAL\r\n        // Add standardisation response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists && !this._hiddenStdWorklists.contains(enums.MarkingMode.Approval))) {\r\n            // Sort Response based on Rig order.\r\n            _stdResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.Approval).toArray();\r\n            _stdWorkListRowHeaderCellcollection = new Array();\r\n            // Add Empty banner for Approval\r\n            _stdWorkListRowCollection.push(this.getFrozenEmptyBannerForClassificationType(enums.MarkingMode.Approval));\r\n            if (_stdResponseListData.length > 0) {\r\n                // Loop through response details.\r\n                for (var approvalResponseCount = 0; approvalResponseCount < _stdResponseListData.length; approvalResponseCount++) {\r\n                    // Getting the std worklist data row     \r\n                    var stdResponseData = _stdResponseListData[approvalResponseCount];\r\n                    // Check whetehr the classifcation type exceeded the current target,\r\n                    // and Standardisation available in restricted target.\r\n                    // if so highlight the exceeded last rows with amber color.\r\n                    overClassified =\r\n                        this.isSSUTargetsOverClassified(standardisationSetupType, enums.MarkingMode.Approval, stdResponseData.rigOrder);\r\n                    // Creating the table row collection.\r\n                    _stdWorkListRowCollection.push(this.getFrozenRowData(stdResponseData, gridType, gridColumns, index, overClassified));\r\n                    index++;\r\n                }\r\n            }\r\n            else {\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumns.length; gridColumnCount++) {\r\n                    _stdWorkListCell = new gridCell();\r\n                    var cellStyle = gridColumns[gridColumnCount].GridColumn === 'ResponseIdColumn' ?\r\n                        'col-response header-col' : 'col-std-classify-items header-col';\r\n                    _stdWorkListCell.setCellStyle(cellStyle);\r\n                    _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                }\r\n                // Creating the table row collection.\r\n                _stdWorkListRowCollection.push(this.getGridRow('3', _stdWorkListRowHeaderCellcollection, undefined, 'placeholder-row'));\r\n            }\r\n            // Reset to false.\r\n            overClassified = false;\r\n        }\r\n        // 3. ES TEAM APPROVAL\r\n        // Add STM standardisation response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists && !this._hiddenStdWorklists.contains(enums.MarkingMode.ES_TeamApproval))) {\r\n            // Sort Response based on Rig order.\r\n            _stdResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.ES_TeamApproval)\r\n                    .toArray();\r\n            _stdWorkListRowHeaderCellcollection = new Array();\r\n            // Add Empty banner for ES_TeamApproval\r\n            _stdWorkListRowCollection.push(this.getFrozenEmptyBannerForClassificationType(enums.MarkingMode.ES_TeamApproval));\r\n            if (_stdResponseListData.length > 0) {\r\n                // Loop through response details.\r\n                for (var esTeamResponseCount = 0; esTeamResponseCount < _stdResponseListData.length; esTeamResponseCount++) {\r\n                    // Getting the std worklist data row     \r\n                    var stdResponseData = _stdResponseListData[esTeamResponseCount];\r\n                    // Check whetehr the classifcation type exceeded the current target,\r\n                    // and STM Standardisation available in restricted target.\r\n                    // if so highlight the exceeded last rows with amber color.\r\n                    overClassified =\r\n                        this.isSSUTargetsOverClassified(standardisationSetupType, enums.MarkingMode.ES_TeamApproval, stdResponseData.rigOrder);\r\n                    // Creating the table row collection.\r\n                    _stdWorkListRowCollection.push(this.getFrozenRowData(stdResponseData, gridType, gridColumns, index, overClassified));\r\n                    index++;\r\n                }\r\n            }\r\n            else {\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumns.length; gridColumnCount++) {\r\n                    _stdWorkListCell = new gridCell();\r\n                    var cellStyle = gridColumns[gridColumnCount].GridColumn === 'ResponseIdColumn' ?\r\n                        'col-response header-col' : 'col-std-classify-items header-col';\r\n                    _stdWorkListCell.setCellStyle(cellStyle);\r\n                    _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                }\r\n                // Creating the table row collection.\r\n                _stdWorkListRowCollection.push(this.getGridRow('4', _stdWorkListRowHeaderCellcollection, undefined, 'placeholder-row'));\r\n            }\r\n            // Reset to false.\r\n            overClassified = false;\r\n        }\r\n        // 4. SEED\r\n        // Add Seed response details to grid based on permissions.\r\n        if (!this._hiddenStdWorklists ||\r\n            (this._hiddenStdWorklists && !this._hiddenStdWorklists.contains(enums.MarkingMode.Seeding))) {\r\n            _stdResponseListData =\r\n                standardisationSetupStore.instance.getClassifiedResponsesInSortOrderByMarkingMode(enums.MarkingMode.Seeding).toArray();\r\n            _stdWorkListRowHeaderCellcollection = new Array();\r\n            // Add Empty banner for Seeding\r\n            _stdWorkListRowCollection.push(this.getFrozenEmptyBannerForClassificationType(enums.MarkingMode.Seeding));\r\n            if (_stdResponseListData.length > 0) {\r\n                // Loop through response details.\r\n                for (var seedResponseCount = 0; seedResponseCount < _stdResponseListData.length; seedResponseCount++) {\r\n                    // Getting the std worklist data row     \r\n                    var stdResponseData = _stdResponseListData[seedResponseCount];\r\n                    // Creating the table row collection.\r\n                    _stdWorkListRowCollection.push(this.getFrozenRowData(stdResponseData, gridType, gridColumns, index, false));\r\n                    index++;\r\n                }\r\n            }\r\n            else {\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumns.length; gridColumnCount++) {\r\n                    _stdWorkListCell = new gridCell();\r\n                    var cellStyle = gridColumns[gridColumnCount].GridColumn === 'ResponseIdColumn' ?\r\n                        'col-response header-col' : 'col-std-classify-items header-col';\r\n                    _stdWorkListCell.setCellStyle(cellStyle);\r\n                    _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                }\r\n                // Creating the table row collection.\r\n                _stdWorkListRowCollection.push(this.getGridRow('70', _stdWorkListRowHeaderCellcollection, undefined, 'placeholder-row'));\r\n            }\r\n            // Reset to false.\r\n            overClassified = false;\r\n        }\r\n        // Return the complete row collection.\r\n        var _stdWorkListFrozenRowBodyCollection = Immutable.fromJS(_stdWorkListRowCollection);\r\n        return _stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Method to create empty banner for Different classification Type.\r\n     * @param classificationType\r\n     */\r\n    ClassifiedHelper.prototype.getFrozenEmptyBannerForClassificationType = function (classificationType) {\r\n        var className;\r\n        var _stdWorkListCell;\r\n        var key;\r\n        var _stdWorkListRowHeaderCellcollection = new Array();\r\n        // Go through classification Type and create corresponding Banner.\r\n        switch (classificationType) {\r\n            case enums.MarkingMode.Practice:\r\n                _stdWorkListCell = new gridCell();\r\n                key = 'Empty_Banner_Practice';\r\n                className = 'header-data classify-item-text dark-link';\r\n                _stdWorkListCell.columnElement = this.getRIGOrderColumnElement(key, className, classificationType, undefined);\r\n                break;\r\n            case enums.MarkingMode.Approval:\r\n                _stdWorkListCell = new gridCell();\r\n                key = 'Empty_Banner_Standardisation';\r\n                className = 'header-data classify-item-text dark-link';\r\n                _stdWorkListCell.columnElement = this.getRIGOrderColumnElement(key, className, classificationType, undefined);\r\n                break;\r\n            case enums.MarkingMode.ES_TeamApproval:\r\n                _stdWorkListCell = new gridCell();\r\n                key = 'Empty_Banner_STM_Standardisation';\r\n                className = 'header-data classify-item-text dark-link';\r\n                _stdWorkListCell.columnElement = this.getRIGOrderColumnElement(key, className, classificationType, undefined);\r\n                break;\r\n            case enums.MarkingMode.Seeding:\r\n                _stdWorkListCell = new gridCell();\r\n                key = 'Empty_Banner_Seed';\r\n                className = 'header-data classify-item-text dark-link';\r\n                _stdWorkListCell.columnElement = this.getRIGOrderColumnElement(key, className, classificationType, undefined);\r\n                break;\r\n        }\r\n        _stdWorkListCell.setCellStyle('col-std-classify-items header-col');\r\n        _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n        // Logic to create empty frozen column for Practice/Seed/STM/Qualifcation Labels.\r\n        var emptygridCell;\r\n        emptygridCell = new gridCell();\r\n        emptygridCell.setCellStyle('col-response header-col');\r\n        _stdWorkListRowHeaderCellcollection.push(emptygridCell);\r\n        var cssClass = 'classify-items-row';\r\n        // Creating the table row collection.\r\n        return this.getGridRow(classificationType.toString(), _stdWorkListRowHeaderCellcollection, undefined, cssClass);\r\n    };\r\n    /**\r\n     * Get Unfrozen Empty Rows for Practice/Approval/STD.. Banners.\r\n     * @param gridColumns\r\n     * @param noOfQuestions\r\n     */\r\n    ClassifiedHelper.prototype.getEmptyRows = function (gridColumns, noOfQuestions, gridType) {\r\n        var _classifiedCell;\r\n        var _classifiedRowHeaderCellcollection = new Array();\r\n        // Create cells for Columns returned from JSON File.\r\n        for (var gridColumnCount = 0; gridColumnCount < gridColumns.length; gridColumnCount++) {\r\n            _classifiedCell = new gridCell();\r\n            var cellStyle = gridColumns[gridColumnCount].CssClass ? gridColumns[gridColumnCount].CssClass : '';\r\n            _classifiedCell.setCellStyle(cellStyle);\r\n            _classifiedRowHeaderCellcollection.push(_classifiedCell);\r\n        }\r\n        // Create cells for individual questions.\r\n        for (var gridColumnCount = 0; gridColumnCount < noOfQuestions; gridColumnCount++) {\r\n            _classifiedCell = new gridCell();\r\n            var cellStyle = 'col-question-item';\r\n            _classifiedCell.setCellStyle(cellStyle);\r\n            _classifiedRowHeaderCellcollection.push(_classifiedCell);\r\n        }\r\n        if (gridType === enums.GridType.markByQuestion) {\r\n            //Adding the 'last-cell' column as this column is not added to classified worklst by default\r\n            _classifiedCell = new gridCell();\r\n            var cellStyle = 'last-cell';\r\n            _classifiedCell.setCellStyle(cellStyle);\r\n            _classifiedRowHeaderCellcollection.push(_classifiedCell);\r\n        }\r\n        // return the cell Collection.\r\n        return _classifiedRowHeaderCellcollection;\r\n    };\r\n    return ClassifiedHelper;\r\n}(standardisationSetupHelperBase));\r\nmodule.exports = ClassifiedHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 412:
/* no static exports found */
/* all exports used */
/*!**************************************************************************************!*\
  !*** ./src/components/utility/grid/standardisationsetuphelpers/provisionalhelper.ts ***!
  \**************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar standardisationsetuphelperbase = __webpack_require__(/*! ./standardisationsetuphelperbase */ 292);\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar jsonRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar standardisationSetupGridColumnsJson = __webpack_require__(/*! ../standardisationsetupgridcolumns.json */ 273);\r\nvar comparerList = __webpack_require__(/*! ../../../../utility/sorting/sortbase/comparerlist */ 262);\r\nvar sortHelper = __webpack_require__(/*! ../../../../utility/sorting/sorthelper */ 272);\r\n/**\r\n * Helper class for Classified grid view\r\n */\r\nvar ProvisionalHelper = /** @class */ (function (_super) {\r\n    __extends(ProvisionalHelper, _super);\r\n    function ProvisionalHelper() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * generateStandardisationFrozenRowBody is used for generating row collection for STD WorkList Grid\r\n     * @param standardisationSetupType\r\n     * @param gridType\r\n     */\r\n    ProvisionalHelper.prototype.generateStandardisationFrozenRowBody = function (comparerName, sortDirection, standardisationSetupType, gridType) {\r\n        // Get frozen column collection.\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        return this.generateFrozenRowBody(standardisationSetupStore.instance.standardisationSetupDetails, standardisationSetupType, gridType, comparerName, sortDirection);\r\n    };\r\n    /**\r\n     * Gets Grid rows\r\n     * @param tabSelection\r\n     * @param gridType\r\n     */\r\n    ProvisionalHelper.prototype.generateStandardisationRowDefinion = function (comparerName, sortDirection, tabSelection, gridType) {\r\n        this._stdSetUpWorkListCollection = Immutable.List();\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        this._stdSetUpWorkListCollection = this.getRowDefinion(tabSelection, gridType, comparerName, sortDirection);\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Returns the row definition for provisional worklist\r\n     * @param tabSelection\r\n     * @param gridType\r\n     */\r\n    ProvisionalHelper.prototype.getRowDefinion = function (tabSelection, gridType, comparerName, sortDirection) {\r\n        var sortedData;\r\n        var _provisionalRowCollection = Array();\r\n        var _provisionalRowHeaderCellcollection = Array();\r\n        var _provisionalResponseListData;\r\n        var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, tabSelection, false, gridType);\r\n        var _stdSetupResponseDetails = standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses;\r\n        var marksCount = _stdSetupResponseDetails.first().standardisationMarks ?\r\n            Immutable.List(_stdSetupResponseDetails.first().standardisationMarks).count() : 0;\r\n        _provisionalResponseListData = Immutable.List(standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses);\r\n        sortedData = Immutable.List(sortHelper.sort(_provisionalResponseListData.toArray(), comparerList[comparerName]));\r\n        _provisionalResponseListData = sortedData;\r\n        if (_provisionalResponseListData.count() > 0) {\r\n            _provisionalRowCollection =\r\n                _provisionalRowCollection.concat(this.getRowData(_provisionalResponseListData, gridColumns, gridType, 0, enums.StandardisationSetup.ProvisionalResponse));\r\n        }\r\n        // Return the complete row collection.\r\n        this._provisionalListCollection = Immutable.fromJS(_provisionalRowCollection);\r\n        return this._provisionalListCollection;\r\n    };\r\n    return ProvisionalHelper;\r\n}(standardisationsetuphelperbase));\r\nmodule.exports = ProvisionalHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL3N0YW5kYXJkaXNhdGlvbnNldHVwaGVscGVycy9wcm92aXNpb25hbGhlbHBlci50cz85Mzk1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBzdGFuZGFyZGlzYXRpb25zZXR1cGhlbHBlcmJhc2UgPSByZXF1aXJlKCcuL3N0YW5kYXJkaXNhdGlvbnNldHVwaGVscGVyYmFzZScpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi9lbnVtcycpO1xyXG5pbXBvcnQgZ3JpZFJvdyA9IHJlcXVpcmUoJy4uL2dyaWRyb3cnKTtcclxuaW1wb3J0IGpzb25SZWZSZXNvbHZlciA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3V0aWxpdHkvanNvbnJlZnJlc29sdmVyL2pvc25yZWZyZXNvbHZlcicpO1xyXG5pbXBvcnQgZ3JpZENlbGwgPSByZXF1aXJlKCcuLi9ncmlkY2VsbCcpO1xyXG5pbXBvcnQgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XHJcbmltcG9ydCBzdGFuZGFyZGlzYXRpb25TZXR1cFN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vc3RvcmVzL3N0YW5kYXJkaXNhdGlvbnNldHVwL3N0YW5kYXJkaXNhdGlvbnNldHVwc3RvcmUnKTtcclxubGV0IHN0YW5kYXJkaXNhdGlvblNldHVwR3JpZENvbHVtbnNKc29uID0gcmVxdWlyZSgnLi4vc3RhbmRhcmRpc2F0aW9uc2V0dXBncmlkY29sdW1ucy5qc29uJyk7XHJcbmltcG9ydCBjb21wYXJlckxpc3QgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlsaXR5L3NvcnRpbmcvc29ydGJhc2UvY29tcGFyZXJsaXN0Jyk7XHJcbmltcG9ydCBzb3J0SGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vdXRpbGl0eS9zb3J0aW5nL3NvcnRoZWxwZXInKTtcclxuXHJcblxyXG4vKipcclxuICogSGVscGVyIGNsYXNzIGZvciBDbGFzc2lmaWVkIGdyaWQgdmlld1xyXG4gKi9cclxuY2xhc3MgUHJvdmlzaW9uYWxIZWxwZXIgZXh0ZW5kcyBzdGFuZGFyZGlzYXRpb25zZXR1cGhlbHBlcmJhc2Uge1xyXG5cclxuICAgIC8qIEdyaWQgcm93cyBjb2xsZWN0aW9uICovXHJcbiAgICBwdWJsaWMgX3Byb3Zpc2lvbmFsTGlzdENvbGxlY3Rpb246IEltbXV0YWJsZS5MaXN0PGdyaWRSb3c+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2VuZXJhdGVTdGFuZGFyZGlzYXRpb25Gcm96ZW5Sb3dCb2R5IGlzIHVzZWQgZm9yIGdlbmVyYXRpbmcgcm93IGNvbGxlY3Rpb24gZm9yIFNURCBXb3JrTGlzdCBHcmlkXHJcbiAgICAgKiBAcGFyYW0gc3RhbmRhcmRpc2F0aW9uU2V0dXBUeXBlIFxyXG4gICAgICogQHBhcmFtIGdyaWRUeXBlIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2VuZXJhdGVTdGFuZGFyZGlzYXRpb25Gcm96ZW5Sb3dCb2R5KGNvbXBhcmVyTmFtZTogc3RyaW5nLCBzb3J0RGlyZWN0aW9uOiBlbnVtcy5Tb3J0RGlyZWN0aW9uLFxyXG4gICAgICAgIHN0YW5kYXJkaXNhdGlvblNldHVwVHlwZTogZW51bXMuU3RhbmRhcmRpc2F0aW9uU2V0dXAsXHJcbiAgICAgICAgZ3JpZFR5cGU6IGVudW1zLkdyaWRUeXBlKTogSW1tdXRhYmxlLkxpc3Q8Z3JpZFJvdz4ge1xyXG4gICAgICAgIC8vIEdldCBmcm96ZW4gY29sdW1uIGNvbGxlY3Rpb24uXHJcbiAgICAgICAgdGhpcy5yZXNvbHZlZEdyaWRDb2x1bW5zSnNvbiA9IGpzb25SZWZSZXNvbHZlci5yZXNvbHZlUmVmcyhzdGFuZGFyZGlzYXRpb25TZXR1cEdyaWRDb2x1bW5zSnNvbik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlRnJvemVuUm93Qm9keShcclxuICAgICAgICAgICAgc3RhbmRhcmRpc2F0aW9uU2V0dXBTdG9yZS5pbnN0YW5jZS5zdGFuZGFyZGlzYXRpb25TZXR1cERldGFpbHMsXHJcbiAgICAgICAgICAgIHN0YW5kYXJkaXNhdGlvblNldHVwVHlwZSxcclxuICAgICAgICAgICAgZ3JpZFR5cGUsXHJcbiAgICAgICAgICAgIGNvbXBhcmVyTmFtZSxcclxuICAgICAgICAgICAgc29ydERpcmVjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIEdyaWQgcm93c1xyXG4gICAgICogQHBhcmFtIHRhYlNlbGVjdGlvbiBcclxuICAgICAqIEBwYXJhbSBncmlkVHlwZSBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdlbmVyYXRlU3RhbmRhcmRpc2F0aW9uUm93RGVmaW5pb24oY29tcGFyZXJOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgc29ydERpcmVjdGlvbjogZW51bXMuU29ydERpcmVjdGlvbixcclxuICAgICAgICB0YWJTZWxlY3Rpb246IGVudW1zLlN0YW5kYXJkaXNhdGlvblNldHVwLFxyXG4gICAgICAgIGdyaWRUeXBlOiBlbnVtcy5HcmlkVHlwZSk6IEltbXV0YWJsZS5MaXN0PGdyaWRSb3c+IHtcclxuICAgICAgICB0aGlzLl9zdGRTZXRVcFdvcmtMaXN0Q29sbGVjdGlvbiA9IEltbXV0YWJsZS5MaXN0PGdyaWRSb3c+KCk7XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlZEdyaWRDb2x1bW5zSnNvbiA9IGpzb25SZWZSZXNvbHZlci5yZXNvbHZlUmVmcyhzdGFuZGFyZGlzYXRpb25TZXR1cEdyaWRDb2x1bW5zSnNvbik7XHJcbiAgICAgICAgdGhpcy5fc3RkU2V0VXBXb3JrTGlzdENvbGxlY3Rpb24gPSB0aGlzLmdldFJvd0RlZmluaW9uKHRhYlNlbGVjdGlvbiwgZ3JpZFR5cGUsIGNvbXBhcmVyTmFtZSwgc29ydERpcmVjdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0ZFNldFVwV29ya0xpc3RDb2xsZWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgcm93IGRlZmluaXRpb24gZm9yIHByb3Zpc2lvbmFsIHdvcmtsaXN0XHJcbiAgICAgKiBAcGFyYW0gdGFiU2VsZWN0aW9uIFxyXG4gICAgICogQHBhcmFtIGdyaWRUeXBlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0Um93RGVmaW5pb24odGFiU2VsZWN0aW9uOiBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cCxcclxuICAgICAgICBncmlkVHlwZTogZW51bXMuR3JpZFR5cGUsXHJcbiAgICAgICAgY29tcGFyZXJOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgc29ydERpcmVjdGlvbjogZW51bXMuU29ydERpcmVjdGlvbik6IEltbXV0YWJsZS5MaXN0PGdyaWRSb3c+IHtcclxuICAgICAgICBsZXQgc29ydGVkRGF0YTogSW1tdXRhYmxlLkxpc3Q8U3RhbmRhcmRpc2F0aW9uUmVzcG9uc2VEZXRhaWxzPjtcclxuICAgICAgICBsZXQgX3Byb3Zpc2lvbmFsUm93Q29sbGVjdGlvbiA9IEFycmF5PGdyaWRSb3c+KCk7XHJcbiAgICAgICAgbGV0IF9wcm92aXNpb25hbFJvd0hlYWRlckNlbGxjb2xsZWN0aW9uID0gQXJyYXk8Z3JpZENlbGw+KCk7XHJcbiAgICAgICAgbGV0IF9wcm92aXNpb25hbFJlc3BvbnNlTGlzdERhdGE6IEltbXV0YWJsZS5MaXN0PFN0YW5kYXJkaXNhdGlvblJlc3BvbnNlRGV0YWlscz47XHJcbiAgICAgICAgbGV0IGdyaWRDb2x1bW5zID0gdGhpcy5nZXRHcmlkQ29sdW1ucyh0aGlzLnJlc29sdmVkR3JpZENvbHVtbnNKc29uLCB0YWJTZWxlY3Rpb24sIGZhbHNlLCBncmlkVHlwZSk7XHJcbiAgICAgICAgbGV0IF9zdGRTZXR1cFJlc3BvbnNlRGV0YWlsczogSW1tdXRhYmxlLkxpc3Q8U3RhbmRhcmRpc2F0aW9uUmVzcG9uc2VEZXRhaWxzPiA9XHJcbiAgICAgICAgICAgIHN0YW5kYXJkaXNhdGlvblNldHVwU3RvcmUuaW5zdGFuY2Uuc3RhbmRhcmRpc2F0aW9uU2V0VXBSZXNwb25zZWRldGFpbHMuc3RhbmRhcmRpc2F0aW9uUmVzcG9uc2VzO1xyXG4gICAgICAgIGxldCBtYXJrc0NvdW50ID0gX3N0ZFNldHVwUmVzcG9uc2VEZXRhaWxzLmZpcnN0KCkuc3RhbmRhcmRpc2F0aW9uTWFya3MgP1xyXG4gICAgICAgICAgICBJbW11dGFibGUuTGlzdDxSZXNwb25zZU1hcmtEZXRhaWxzPihfc3RkU2V0dXBSZXNwb25zZURldGFpbHMuZmlyc3QoKS5zdGFuZGFyZGlzYXRpb25NYXJrcykuY291bnQoKSA6IDA7XHJcblxyXG4gICAgICAgIF9wcm92aXNpb25hbFJlc3BvbnNlTGlzdERhdGEgPSBJbW11dGFibGUuTGlzdDxTdGFuZGFyZGlzYXRpb25SZXNwb25zZURldGFpbHM+XHJcbiAgICAgICAgICAgIChzdGFuZGFyZGlzYXRpb25TZXR1cFN0b3JlLmluc3RhbmNlLnN0YW5kYXJkaXNhdGlvblNldFVwUmVzcG9uc2VkZXRhaWxzLnN0YW5kYXJkaXNhdGlvblJlc3BvbnNlcyk7XHJcbiAgICAgICAgc29ydGVkRGF0YSA9IEltbXV0YWJsZS5MaXN0PFN0YW5kYXJkaXNhdGlvblJlc3BvbnNlRGV0YWlscz4oXHJcbiAgICAgICAgICAgIHNvcnRIZWxwZXIuc29ydChfcHJvdmlzaW9uYWxSZXNwb25zZUxpc3REYXRhLnRvQXJyYXkoKSwgY29tcGFyZXJMaXN0W2NvbXBhcmVyTmFtZV0pKTtcclxuICAgICAgICBfcHJvdmlzaW9uYWxSZXNwb25zZUxpc3REYXRhID0gc29ydGVkRGF0YTtcclxuICAgICAgICBpZiAoX3Byb3Zpc2lvbmFsUmVzcG9uc2VMaXN0RGF0YS5jb3VudCgpID4gMCkge1xyXG4gICAgICAgICAgICBfcHJvdmlzaW9uYWxSb3dDb2xsZWN0aW9uID1cclxuICAgICAgICAgICAgICAgIF9wcm92aXNpb25hbFJvd0NvbGxlY3Rpb24uY29uY2F0KFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0Um93RGF0YShfcHJvdmlzaW9uYWxSZXNwb25zZUxpc3REYXRhLCBncmlkQ29sdW1ucywgZ3JpZFR5cGUsIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudW1zLlN0YW5kYXJkaXNhdGlvblNldHVwLlByb3Zpc2lvbmFsUmVzcG9uc2UpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiB0aGUgY29tcGxldGUgcm93IGNvbGxlY3Rpb24uXHJcbiAgICAgICAgdGhpcy5fcHJvdmlzaW9uYWxMaXN0Q29sbGVjdGlvbiA9IEltbXV0YWJsZS5mcm9tSlMoX3Byb3Zpc2lvbmFsUm93Q29sbGVjdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3Zpc2lvbmFsTGlzdENvbGxlY3Rpb247XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0ID0gUHJvdmlzaW9uYWxIZWxwZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZ3JpZC9zdGFuZGFyZGlzYXRpb25zZXR1cGhlbHBlcnMvcHJvdmlzaW9uYWxoZWxwZXIudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOztBQUVBO0FBQ0E7QUFBQTtBQUFBOztBQTBFQTtBQXJFQTs7OztBQUlBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFNQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7OztBQUlBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 413:
/* no static exports found */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/components/utility/grid/standardisationsetuphelpers/selectresponsehelper.ts ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar gridRow = __webpack_require__(/*! ../../../utility/grid/gridrow */ 296);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../../../stores/locale/localestore */ 226);\r\nvar standardisationsetuphelperbase = __webpack_require__(/*! ./standardisationsetuphelperbase */ 292);\r\nvar josnRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar standardisationGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/standardisationsetupgridcolumns.json */ 273);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar scriptStatusGridElement = __webpack_require__(/*! ../../../standardisationsetup/shared/scriptstatusgridelement */ 404);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar ReuseButton = __webpack_require__(/*! ../../../standardisationsetup/shared/reusebutton */ 384);\r\nvar ToggleButton = __webpack_require__(/*! ../../../utility/togglebutton */ 308);\r\nvar comparerList = __webpack_require__(/*! ../../../../utility/sorting/sortbase/comparerlist */ 262);\r\nvar sortHelper = __webpack_require__(/*! ../../../../utility/sorting/sorthelper */ 272);\r\nvar standardisationActionCreator = __webpack_require__(/*! ../../../../actions/standardisationsetup/standardisationactioncreator */ 251);\r\n/**\r\n * Helper class for select response grid view\r\n */\r\nvar SelectResponseHelper = /** @class */ (function (_super) {\r\n    __extends(SelectResponseHelper, _super);\r\n    function SelectResponseHelper() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Generate Centre Row Definition\r\n     * @param standardisationCentreList\r\n     */\r\n    SelectResponseHelper.prototype.generateCentreRowDefinition = function (standardisationCentreList) {\r\n        this.resolvedGridColumnsJson = josnRefResolver.resolveRefs(standardisationGridColumnsJson);\r\n        this._stdSetUpWorkListCollection = Immutable.List();\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        var isSeedResponse;\r\n        if (standardisationCentreList != null) {\r\n            var gridSeq = standardisationCentreList.centreList.keySeq();\r\n            var _responseListData = standardisationCentreList.centreList.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.standardisationsetup.SelectResponse.Centre.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _workListRowHeaderCellcollection = new Array();\r\n                _worklistRow = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _workListCell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.Centre:\r\n                            key = gridSeq.get(responseListCount) + '_Centre_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.centreNumber, key));\r\n                            break;\r\n                        case gridColumnNames.Scripts:\r\n                            key = gridSeq.get(responseListCount) + '_Scripts_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.totalScripts.toString(), key));\r\n                            break;\r\n                        case gridColumnNames.ScriptsAvailable:\r\n                            key = gridSeq.get(responseListCount) + '_ScriptsAvailable_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericTextElement(responseData.availableScripts.toString(), key));\r\n                            break;\r\n                        case gridColumnNames.FirstScanned:\r\n                            key = gridSeq.get(responseListCount) + '_FirstScanned_' + gridColumnCount;\r\n                            _workListCell.columnElement = (this.getGenericFormattedDateElement(responseData.firstScanned, key));\r\n                            break;\r\n                        default:\r\n                    }\r\n                    _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _workListCell.setCellStyle(cellStyle);\r\n                    _workListRowHeaderCellcollection.push(_workListCell);\r\n                }\r\n                _workListRowCollection.push(this.getGridRow(responseData.uniqueId.toString(), _workListRowHeaderCellcollection, undefined, standardisationSetupStore.instance.selectedCentreId === responseData.uniqueId ? 'row selected' : 'row'));\r\n            }\r\n        }\r\n        this._stdSetUpWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Method for getting the frozen row body for STD worklist\r\n     * @param standardisationResponseData\r\n     */\r\n    SelectResponseHelper.prototype.generateStandardisationFrozenRowBodyReusableGrid = function (reusableResponsesList, comparerName, sortDirection) {\r\n        var _stdWorkListRowHeaderCellcollection = Array();\r\n        var _stdWorkListRowCollection = Array();\r\n        var _reusableResponseListData;\r\n        var _stdResponseColumn;\r\n        var componentPropsJson;\r\n        var _stdWorkListCell;\r\n        var key;\r\n        var cssClass;\r\n        _reusableResponseListData = reusableResponsesList.toArray();\r\n        var _comparerName = (sortDirection === enums.SortDirection.Ascending) ? comparerName : comparerName + 'Desc';\r\n        var sortedData = Immutable.List(sortHelper.sort(_reusableResponseListData, comparerList[_comparerName]));\r\n        _reusableResponseListData = sortedData.toArray();\r\n        if (_reusableResponseListData != null) {\r\n            var previousMarkingMode = enums.MarkingMode.None;\r\n            var gridSeq = Immutable.List(_reusableResponseListData).keySeq();\r\n            var responseListLength = _reusableResponseListData.length;\r\n            for (var stdResponseCount = 0; stdResponseCount < responseListLength; stdResponseCount++) {\r\n                // Getting the std worklist data row\r\n                _stdWorkListRowHeaderCellcollection = new Array();\r\n                // instead of accessing _standardisationResponseListData[standardisationResponseListCount]\r\n                // collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var stdResponseData = _reusableResponseListData[stdResponseCount];\r\n                var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, enums.StandardisationSetup.SelectResponse, true, null, enums.StandardisationSessionTab.PreviousSession);\r\n                var gridColumnLength = gridColumns.length;\r\n                // Getting the STD worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _stdResponseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _stdWorkListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    //Switch statement for adding frozen columns in future.\r\n                    switch (_stdResponseColumn) {\r\n                        case gridColumnNames.ScriptId:\r\n                            key = gridSeq.get(stdResponseCount) + '_ScriptId_' + stdResponseCount;\r\n                            _stdWorkListCell.columnElement =\r\n                                this.getResponseIdColumnElement(stdResponseData, key, true, true, stdResponseData.candidateScriptId.toString());\r\n                            _stdWorkListCell.setCellStyle('col-script-id header-col');\r\n                            _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                            break;\r\n                        case gridColumnNames.Status:\r\n                            key = 'reusableresponse' + '_Is_Reused_' + stdResponseCount;\r\n                            var responseStatuses = Immutable.List();\r\n                            _stdWorkListCell.columnElement = this.reuseButton(stdResponseData.reUsedQIG, stdResponseCount, stdResponseData.displayId);\r\n                            _stdWorkListCell.setCellStyle('col-re-use');\r\n                            _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                            break;\r\n                        case gridColumnNames.OrginalSession:\r\n                            key = gridSeq.get(stdResponseCount) + '_Orginal_Session_' + stdResponseCount;\r\n                            _stdWorkListCell.columnElement = (this.getGenericTextElement(stdResponseData.originalSession.toString(), key));\r\n                            _stdWorkListCell.setCellStyle('col-org-session');\r\n                            _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                            break;\r\n                        case gridColumnNames.OrginalClassification:\r\n                            key = gridSeq.get(stdResponseCount) + '_Orginal_Classification_' + stdResponseCount;\r\n                            _stdWorkListCell.columnElement = (this.getGenericTextElement(stdResponseData.originalClassification.toString(), key));\r\n                            _stdWorkListCell.setCellStyle('col-org-classification');\r\n                            _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                            break;\r\n                    }\r\n                }\r\n                // Creating the table row collection.\r\n                _stdWorkListRowCollection.push(this.getGridRow(stdResponseData.displayId.toString(), _stdWorkListRowHeaderCellcollection));\r\n            }\r\n        }\r\n        var _stdWorkListFrozenRowBodyCollection = Immutable.fromJS(_stdWorkListRowCollection);\r\n        return _stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Reuse button return\r\n     * @param isDisabled\r\n     * @param id\r\n     * @param displayId\r\n     */\r\n    SelectResponseHelper.prototype.reuseButton = function (isDisabled, id, displayId) {\r\n        var componentProps;\r\n        componentProps = {\r\n            isDisabled: isDisabled,\r\n            id: id,\r\n            renderedOn: Date.now(),\r\n            displayId: displayId\r\n        };\r\n        return React.createElement(ReuseButton, componentProps);\r\n    };\r\n    /**\r\n     * Onclick hide response\r\n     */\r\n    SelectResponseHelper.prototype.hideResponse = function (isChecked, displayID, key) {\r\n        var componentProps;\r\n        componentProps = {\r\n            id: key + '_id',\r\n            key: key + '_key',\r\n            isChecked: isChecked,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            index: 0,\r\n            onChange: this.onHideResponseToggleChange,\r\n            style: null,\r\n            className: 'form-component',\r\n            title: 'Hide Response',\r\n            isDisabled: false,\r\n            onText: localeStore.instance.TranslateText('generic.toggle-button-states.yes'),\r\n            offText: localeStore.instance.TranslateText('generic.toggle-button-states.no'),\r\n            displayId: displayID\r\n        };\r\n        return React.createElement(ToggleButton, componentProps);\r\n    };\r\n    /**\r\n     * for handling the hide response toggle change event.\r\n     */\r\n    SelectResponseHelper.prototype.onHideResponseToggleChange = function (evt, isChecked, displayId) {\r\n        standardisationActionCreator.updateHideResponseStatus(!isChecked, displayId);\r\n    };\r\n    /**\r\n     * Generate reusable response row definition\r\n     * @param reusableResponsesList\r\n     */\r\n    SelectResponseHelper.prototype.generateReusableResponsesRowDefinition = function (reusableResponsesList, comparerName, sortDirection) {\r\n        this.resolvedGridColumnsJson = josnRefResolver.resolveRefs(standardisationGridColumnsJson);\r\n        this._stdSetUpWorkListCollection = Immutable.List();\r\n        var _workListRowCollection = Array();\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        var _reusableResponseListData = reusableResponsesList.toArray();\r\n        var _comparerName = (sortDirection === enums.SortDirection.Ascending) ? comparerName : comparerName + 'Desc';\r\n        var sortedData = Immutable.List(sortHelper.sort(_reusableResponseListData, comparerList[_comparerName]));\r\n        _reusableResponseListData = sortedData.toArray();\r\n        var responseListLength = _reusableResponseListData.length;\r\n        for (var reusableResponseCount = 0; reusableResponseCount < responseListLength; reusableResponseCount++) {\r\n            // Getting the worklist data row\r\n            var gridColumns = this.resolvedGridColumnsJson.standardisationsetup.PreviousSession.ReusableResponse.GridColumns;\r\n            var gridColumnLength = gridColumns.length;\r\n            _workListRowHeaderCellcollection = new Array();\r\n            _worklistRow = new gridRow();\r\n            // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n            // outside the loop globally\r\n            var responseData = _reusableResponseListData[reusableResponseCount];\r\n            for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                _workListCell = new gridCell();\r\n                switch (_responseColumn) {\r\n                    case gridColumnNames.Centre:\r\n                        key = 'reusableresponse' + '_Centre_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getGenericTextElement(responseData.centreNumber.toString(), key));\r\n                        break;\r\n                    case gridColumnNames.CentreCandidateNum:\r\n                        key = 'reusableresponse' + '_Candidate_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getGenericTextElement(responseData.centreCandidateNumber.toString(), key));\r\n                        break;\r\n                    case gridColumnNames.Mark:\r\n                        key = 'reusableresponse' + '_Mark_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getGenericTextElement(responseData.totalMarkValue.toString(), key));\r\n                        break;\r\n                    case gridColumnNames.OrginalMarksUpdated:\r\n                        key = 'reusableresponse' + '_Orginal_Marks_Updated_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getConvertTextElement(responseData.originalMarksUpdated.toString(), key));\r\n                        break;\r\n                    case gridColumnNames.HideResponse:\r\n                        key = 'reusableresponse' + '_HideResponse_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.hideResponse(responseData.hidden, responseData.displayId, key));\r\n                        break;\r\n                    case gridColumnNames.Totaltimereused:\r\n                        key = 'reusableresponse' + '_Totaltimereused_' + reusableResponseCount;\r\n                        var toolTip = this.getToolTipTotalTimeReused(responseData.reusedComponentTooltipData, false);\r\n                        _workListCell.columnElement = (this.getGenericTextElement(responseData.timesReUsed.toString(), key, toolTip));\r\n                        break;\r\n                    case gridColumnNames.LastUsed:\r\n                        key = 'reusableresponse' + '_LastUsed_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getGenericTextElement(responseData.lastUsed.toString(), key));\r\n                        break;\r\n                    case gridColumnNames.TimesReusedInThisSession:\r\n                        key = 'reusableresponse' + '_Times_Reused_In_This_Session_' + reusableResponseCount;\r\n                        var sessionToolTip = this.getToolTipTotalTimeReused(responseData.reusedSessionTooltipData, true);\r\n                        _workListCell.columnElement =\r\n                            (this.getGenericTextElement(responseData.timesReUsedSession.toString(), key, sessionToolTip));\r\n                        break;\r\n                    case gridColumnNames.UpdatePending:\r\n                        key = 'reusableresponse' + '_Update_Pending_' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getConvertTextElement(responseData.updatesPending.toString(), key));\r\n                        break;\r\n                    case gridColumnNames.IsReusedInThisQIG:\r\n                        key = 'reusableresponse' + '_Is_Reused_In_This_QIG' + reusableResponseCount;\r\n                        _workListCell.columnElement = (this.getConvertTextElement(responseData.reUsedQIG.toString(), key));\r\n                        break;\r\n                    default:\r\n                }\r\n                var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                _workListCell.setCellStyle(cellStyle);\r\n                _workListRowHeaderCellcollection.push(_workListCell);\r\n            }\r\n            _workListRowCollection.push(this.getGridRow(responseData.candidateScriptId.toString(), _workListRowHeaderCellcollection, undefined));\r\n        }\r\n        this._stdSetUpWorkListCollection = Immutable.fromJS(_workListRowCollection);\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Get Tooltip for total time reused coulumn\r\n     * @param totalTimesReusedTooltip\r\n     */\r\n    SelectResponseHelper.prototype.getToolTipTotalTimeReused = function (totalTimesReusedTooltip, isTooltipForthisSession) {\r\n        var toolTipData = localeStore.instance.TranslateText('standardisation-setup.previous-session.reused-tooltip.not-reused');\r\n        var toolTipList = Immutable.List(totalTimesReusedTooltip).toArray();\r\n        var toolTipListLength = toolTipList.length;\r\n        if (toolTipListLength !== null && toolTipListLength > 0) {\r\n            toolTipData = isTooltipForthisSession ?\r\n                localeStore.instance.TranslateText('standardisation-setup.previous-session.reused-tooltip.reused-in-this-session-tooltip') :\r\n                localeStore.instance.TranslateText('standardisation-setup.previous-session.reused-tooltip.reused-overall-tooltip');\r\n            for (var a = 0; a < toolTipListLength; a++) {\r\n                var rr = toolTipList[a];\r\n                if (rr.marking_Mode === 'ES Team Approval') {\r\n                    rr.marking_Mode = 'ES_TeamApproval';\r\n                }\r\n                else if (rr.marking_Mode === 'Pre_Standardisation' || rr.marking_Mode === 'Pre Standardisation') {\r\n                    rr.marking_Mode = 'PreStandardisation';\r\n                }\r\n                toolTipData = toolTipData + ' '\r\n                    + localeStore.instance.TranslateText('standardisation-setup.previous-session.reused-tooltip.' + rr.marking_Mode)\r\n                    + '(' + rr.timesUsed\r\n                    + (isTooltipForthisSession ? (')') : ('/' + rr.session + ')'))\r\n                    + (a < toolTipListLength - 1 ? ',' : '');\r\n            }\r\n        }\r\n        return toolTipData;\r\n    };\r\n    /**\r\n     * generate Script Row definition\r\n     * @param standardisationScriptList\r\n     */\r\n    SelectResponseHelper.prototype.generateScriptRowDefinition = function (standardisationScriptList) {\r\n        this.resolvedGridColumnsJson = josnRefResolver.resolveRefs(standardisationGridColumnsJson);\r\n        this._stdSetUpWorkListCollection = Immutable.List();\r\n        var _rowCollection = Array();\r\n        var _rowHeaderCellcollection = Array();\r\n        var _row;\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _cell;\r\n        var key;\r\n        var isSeedResponse;\r\n        if (standardisationScriptList != null) {\r\n            var gridSeq = standardisationScriptList.centreScriptList.keySeq();\r\n            var _responseListData = standardisationScriptList.centreScriptList.toArray();\r\n            var responseListLength = _responseListData.length;\r\n            for (var responseListCount = 0; responseListCount < responseListLength; responseListCount++) {\r\n                // Getting the worklist data row\r\n                var gridColumns = this.resolvedGridColumnsJson.standardisationsetup.SelectResponse.Script.GridColumns;\r\n                var gridColumnLength = gridColumns.length;\r\n                _rowHeaderCellcollection = new Array();\r\n                _row = new gridRow();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    _cell = new gridCell();\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.CentreCandidateNum:\r\n                            key = gridSeq.get(responseListCount) + '_CentreCandidateNo_' + gridColumnCount;\r\n                            _cell.columnElement = (this.getGenericTextElement(responseData.centreCandidateNumber, key));\r\n                            break;\r\n                        case gridColumnNames.Status:\r\n                            key = gridSeq.get(responseListCount) + '_Status_' + gridColumnCount;\r\n                            _cell.columnElement = this.getScriptStatusElement(responseData, key);\r\n                            break;\r\n                        case gridColumnNames.SLAOIndicator:\r\n                            key = gridSeq.get(responseListCount) + '_SLAOIndicator_' + gridColumnCount;\r\n                            _cell.columnElement = (this.getSLAOIndicatorElement(responseData, componentPropsJson, key, false, false));\r\n                            break;\r\n                        case gridColumnNames.QuestionItems:\r\n                            if (configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.eBookmarking).toLowerCase() === 'true' ? true : false) {\r\n                                key = gridSeq.get(responseListCount) + '_QuestionItems_' + gridColumnCount;\r\n                                _cell.columnElement = (this.getGenericTextElement(responseData.questionItems.toString(), key));\r\n                            }\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    _cell.isHidden = this.getCellVisibility(_responseColumn);\r\n                    var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n                    _cell.setCellStyle(cellStyle);\r\n                    _rowHeaderCellcollection.push(_cell);\r\n                }\r\n                _rowCollection.push(this.getGridRow(responseData.candidateScriptId.toString(), _rowHeaderCellcollection, undefined));\r\n            }\r\n        }\r\n        this._stdSetUpWorkListCollection = Immutable.fromJS(_rowCollection);\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * get Script status element for worklist\r\n     * @param standardisationScriptDetails Get the script status element\r\n     * @param seq\r\n     */\r\n    SelectResponseHelper.prototype.getScriptStatusElement = function (standardisationScriptDetails, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            isAllocatedALive: standardisationScriptDetails.isAllocatedALive,\r\n            isUsedForProvisionalMarking: standardisationScriptDetails.isUsedForProvisionalMarking,\r\n            selectedLanguage: localeStore.instance.Locale\r\n        };\r\n        return React.createElement(scriptStatusGridElement, componentProps);\r\n    };\r\n    return SelectResponseHelper;\r\n}(standardisationsetuphelperbase));\r\nmodule.exports = SelectResponseHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 414:
/* no static exports found */
/* all exports used */
/*!***************************************************************************************!*\
  !*** ./src/components/utility/grid/standardisationsetuphelpers/unclassifiedhelper.ts ***!
  \***************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar standardisationsetuphelperbase = __webpack_require__(/*! ./standardisationsetuphelperbase */ 292);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar jsonRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar standardisationsetuptGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/standardisationsetupgridcolumns.json */ 273);\r\nvar standardisationSetupGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/standardisationsetupgridcolumns.json */ 273);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar stdSetupPermissionHelper = __webpack_require__(/*! ../../../../utility/standardisationsetup/standardisationsetuppermissionhelper */ 332);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\nvar comparerList = __webpack_require__(/*! ../../../../utility/sorting/sortbase/comparerlist */ 262);\r\nvar standardisationSetupStore = __webpack_require__(/*! ../../../../stores/standardisationsetup/standardisationsetupstore */ 237);\r\nvar sortHelper = __webpack_require__(/*! ../../../../utility/sorting/sorthelper */ 272);\r\nvar submitHelper = __webpack_require__(/*! ../../submit/submithelper */ 282);\r\n/**\r\n * Helper class for UnClassified grid view\r\n */\r\nvar UnClassifiedHelper = /** @class */ (function (_super) {\r\n    __extends(UnClassifiedHelper, _super);\r\n    function UnClassifiedHelper() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this._stdSetupPermissionCCValue = stdSetupPermissionHelper\r\n            .getSTDSetupPermissionCCValueByMarkSchemeGroupId(qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId);\r\n        return _this;\r\n    }\r\n    /**\r\n     * generateUnClassifiedFrozenRowBody is used for generating row collection for STD WorkList Grid\r\n     * @param standardisationResponseListData\r\n     * @param standardisationSetupType\r\n     * @param gridType\r\n     */\r\n    UnClassifiedHelper.prototype.generateStandardisationFrozenRowBody = function (comparerName, sortDirection, standardisationSetupType, gridType) {\r\n        // Get frozen column collection.\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationSetupGridColumnsJson);\r\n        // Get the Frozen row body for STD Worklist\r\n        var _stdWorkListFrozenRowBodyCollection = this.getFrozenRowBody(standardisationSetupType, gridType, comparerName);\r\n        return _stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Method for getting the frozen row body for STD worklist\r\n     * @param comparerName\r\n     * @param standardisationSetupType\r\n     * @param gridType\r\n     */\r\n    UnClassifiedHelper.prototype.getFrozenRowBody = function (standardisationSetupType, gridType, comparerName) {\r\n        var _stdWorkListRowHeaderCellcollection = Array();\r\n        var _stdWorkListRowCollection = Array();\r\n        var _stdResponseListData;\r\n        var _stdResponseColumn;\r\n        var componentPropsJson;\r\n        var _stdWorkListCell;\r\n        var key;\r\n        var cssClass;\r\n        var submitResponseHelper = new submitHelper();\r\n        _stdResponseListData = Immutable.List(standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses);\r\n        if (_stdResponseListData != null) {\r\n            var sortedUnclassifiedData = Immutable.List(sortHelper.sort(_stdResponseListData.toArray(), comparerList[comparerName]));\r\n            var previousMarkingMode = enums.MarkingMode.None;\r\n            var gridSeq_1 = Immutable.List(_stdResponseListData).keySeq();\r\n            var that_1 = this;\r\n            _stdResponseListData = sortedUnclassifiedData;\r\n            sortedUnclassifiedData.forEach(function (stdResponseData, index) {\r\n                // Getting the std worklist data row\r\n                _stdWorkListRowHeaderCellcollection = new Array();\r\n                // collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var gridColumns = that_1.getGridColumns(that_1.resolvedGridColumnsJson, standardisationSetupType, true, gridType);\r\n                var gridColumnLength = gridColumns.length;\r\n                // Getting the STD worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _stdResponseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _stdWorkListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    //Switch statement for adding frozen columns in future.\r\n                    switch (_stdResponseColumn) {\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq_1.get(index) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _stdWorkListCell.columnElement = that_1.getResponseIdColumnElement(stdResponseData, key, true);\r\n                            _stdWorkListCell.setCellStyle('col-response header-col');\r\n                            _stdWorkListRowHeaderCellcollection.push(_stdWorkListCell);\r\n                            break;\r\n                    }\r\n                }\r\n                if (stdResponseData) {\r\n                    // Classify button enabling/disabling in unclassified worklist\r\n                    var responseStatuses = submitResponseHelper.\r\n                        submitButtonValidate(stdResponseData, stdResponseData.markingProgress, false, false);\r\n                    // Creating the table row collection.\r\n                    _stdWorkListRowCollection.push(that_1.getGridRow(stdResponseData.displayId.toString(), _stdWorkListRowHeaderCellcollection, undefined, undefined, responseStatuses));\r\n                }\r\n            });\r\n        }\r\n        var _stdWorkListFrozenRowBodyCollection = Immutable.fromJS(_stdWorkListRowCollection);\r\n        return _stdWorkListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Generate row definition for myTeam and Help other examiners tab\r\n     * @param comparerName\r\n     * @param sortDirection\r\n     * @param tabSelection\r\n     * @param gridType\r\n     */\r\n    UnClassifiedHelper.prototype.generateStandardisationRowDefinion = function (comparerName, sortDirection, tabSelection, gridType) {\r\n        this._stdSetUpWorkListCollection = Immutable.List();\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(standardisationsetuptGridColumnsJson);\r\n        this._stdSetUpWorkListCollection = this.getRowDefinition(tabSelection, gridType, comparerName);\r\n        return this._stdSetUpWorkListCollection;\r\n    };\r\n    /**\r\n     * Returns the row definition for unclassifed worklist\r\n     * @param tabSelection\r\n     * @param gridType\r\n     * @param comparerName\r\n     */\r\n    UnClassifiedHelper.prototype.getRowDefinition = function (tabSelection, gridType, comparerName) {\r\n        var _unClassifiedRowCollection = Array();\r\n        var index = 0;\r\n        var _unClassifiedData;\r\n        var sortedData;\r\n        var _unClassifiedResponseListData;\r\n        var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, tabSelection, false, gridType);\r\n        _unClassifiedData = standardisationSetupStore.instance.standardisationSetUpResponsedetails.standardisationResponses;\r\n        _unClassifiedResponseListData = Immutable.List(_unClassifiedData);\r\n        sortedData = Immutable.List(sortHelper.sort(_unClassifiedData, comparerList[comparerName]));\r\n        if (_unClassifiedResponseListData.count() > 0) {\r\n            _unClassifiedRowCollection = this.getRowData(sortedData, gridColumns, gridType, index, enums.StandardisationSetup.UnClassifiedResponse);\r\n        }\r\n        this._unClassifiedListCollection = Immutable.fromJS(_unClassifiedRowCollection);\r\n        return this._unClassifiedListCollection;\r\n    };\r\n    /**\r\n     * Change json object to immutable list\r\n     * @param data\r\n     */\r\n    UnClassifiedHelper.prototype.getImmutableUnclassifiedList = function (data) {\r\n        var immutableList = Immutable.List(data);\r\n        data = immutableList;\r\n        return data;\r\n    };\r\n    return UnClassifiedHelper;\r\n}(standardisationsetuphelperbase));\r\nmodule.exports = UnClassifiedHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL3N0YW5kYXJkaXNhdGlvbnNldHVwaGVscGVycy91bmNsYXNzaWZpZWRoZWxwZXIudHM/ZTIwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi9lbnVtcycpO1xyXG5pbXBvcnQgc3RhbmRhcmRpc2F0aW9uc2V0dXBoZWxwZXJiYXNlID0gcmVxdWlyZSgnLi9zdGFuZGFyZGlzYXRpb25zZXR1cGhlbHBlcmJhc2UnKTtcclxuaW1wb3J0IGdyaWRSb3cgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2dyaWQvZ3JpZHJvdycpO1xyXG5pbXBvcnQgZ3JpZENvbHVtbk5hbWVzID0gcmVxdWlyZSgnLi4vZ3JpZGNvbHVtbm5hbWVzJyk7XHJcbmltcG9ydCBncmlkQ2VsbCA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvZ3JpZC9ncmlkY2VsbCcpO1xyXG5pbXBvcnQganNvblJlZlJlc29sdmVyID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vdXRpbGl0eS9qc29ucmVmcmVzb2x2ZXIvam9zbnJlZnJlc29sdmVyJyk7XHJcbmxldCBzdGFuZGFyZGlzYXRpb25zZXR1cHRHcmlkQ29sdW1uc0pzb24gPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2dyaWQvc3RhbmRhcmRpc2F0aW9uc2V0dXBncmlkY29sdW1ucy5qc29uJyk7XHJcbmltcG9ydCB0YWdTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3N0b3Jlcy90YWdzL3RhZ3N0b3JlJyk7XHJcbmxldCBzdGFuZGFyZGlzYXRpb25TZXR1cEdyaWRDb2x1bW5zSnNvbiA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvZ3JpZC9zdGFuZGFyZGlzYXRpb25zZXR1cGdyaWRjb2x1bW5zLmpzb24nKTtcclxuaW1wb3J0IEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xyXG5pbXBvcnQgR2VuZXJpY1RleHRDb2x1bW4gPSByZXF1aXJlKCcuLi8uLi8uLi93b3JrbGlzdC9zaGFyZWQvZ2VuZXJpY3RleHRjb2x1bW4nKTtcclxuaW1wb3J0IFJpZ09yZGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RhbmRhcmRpc2F0aW9uc2V0dXAvc2hhcmVkL3JpZ29yZGVyJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IHN0ZFNldHVwUGVybWlzc2lvbkNDRGF0YSA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3N0b3Jlcy9zdGFuZGFyZGlzYXRpb25zZXR1cC90eXBpbmdzL3N0YW5kYXJkaXNhdGlvbnNldHVwY2NkYXRhJyk7XHJcbmltcG9ydCBzdGRTZXR1cFBlcm1pc3Npb25IZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlsaXR5L3N0YW5kYXJkaXNhdGlvbnNldHVwL3N0YW5kYXJkaXNhdGlvbnNldHVwcGVybWlzc2lvbmhlbHBlcicpO1xyXG5pbXBvcnQgcWlnU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9zdG9yZXMvcWlnc2VsZWN0b3IvcWlnc3RvcmUnKTtcclxuaW1wb3J0IGNvbXBhcmVyTGlzdCA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3V0aWxpdHkvc29ydGluZy9zb3J0YmFzZS9jb21wYXJlcmxpc3QnKTtcclxuaW1wb3J0IHN0YW5kYXJkaXNhdGlvblNldHVwU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9zdG9yZXMvc3RhbmRhcmRpc2F0aW9uc2V0dXAvc3RhbmRhcmRpc2F0aW9uc2V0dXBzdG9yZScpO1xyXG5pbXBvcnQgc29ydEhlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3V0aWxpdHkvc29ydGluZy9zb3J0aGVscGVyJyk7XHJcbmltcG9ydCBzdWJtaXRIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9zdWJtaXQvc3VibWl0aGVscGVyJyk7XHJcblxyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBjbGFzcyBmb3IgVW5DbGFzc2lmaWVkIGdyaWQgdmlld1xyXG4gKi9cclxuY2xhc3MgVW5DbGFzc2lmaWVkSGVscGVyIGV4dGVuZHMgc3RhbmRhcmRpc2F0aW9uc2V0dXBoZWxwZXJiYXNlIHtcclxuXHJcbiAgICBwcml2YXRlIF9zdGRTZXR1cFBlcm1pc3Npb25DQ1ZhbHVlOiBzdHJpbmcgPSBzdGRTZXR1cFBlcm1pc3Npb25IZWxwZXJcclxuICAgICAgICAuZ2V0U1REU2V0dXBQZXJtaXNzaW9uQ0NWYWx1ZUJ5TWFya1NjaGVtZUdyb3VwSWQocWlnU3RvcmUuaW5zdGFuY2UuZ2V0U2VsZWN0ZWRRSUdGb3JUaGVMb2dnZWRJblVzZXIubWFya1NjaGVtZUdyb3VwSWQpO1xyXG5cclxuICAgIC8qIEdyaWQgcm93cyBjb2xsZWN0aW9uICovXHJcbiAgICBwdWJsaWMgX3VuQ2xhc3NpZmllZExpc3RDb2xsZWN0aW9uOiBJbW11dGFibGUuTGlzdDxncmlkUm93PjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGdlbmVyYXRlVW5DbGFzc2lmaWVkRnJvemVuUm93Qm9keSBpcyB1c2VkIGZvciBnZW5lcmF0aW5nIHJvdyBjb2xsZWN0aW9uIGZvciBTVEQgV29ya0xpc3QgR3JpZFxyXG4gICAgICogQHBhcmFtIHN0YW5kYXJkaXNhdGlvblJlc3BvbnNlTGlzdERhdGFcclxuICAgICAqIEBwYXJhbSBzdGFuZGFyZGlzYXRpb25TZXR1cFR5cGVcclxuICAgICAqIEBwYXJhbSBncmlkVHlwZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2VuZXJhdGVTdGFuZGFyZGlzYXRpb25Gcm96ZW5Sb3dCb2R5KGNvbXBhcmVyTmFtZTogc3RyaW5nLCBzb3J0RGlyZWN0aW9uOiBlbnVtcy5Tb3J0RGlyZWN0aW9uLFxyXG4gICAgICAgIHN0YW5kYXJkaXNhdGlvblNldHVwVHlwZTogZW51bXMuU3RhbmRhcmRpc2F0aW9uU2V0dXAsIGdyaWRUeXBlOiBlbnVtcy5HcmlkVHlwZSk6IEltbXV0YWJsZS5MaXN0PGdyaWRSb3c+IHtcclxuXHJcbiAgICAgICAgLy8gR2V0IGZyb3plbiBjb2x1bW4gY29sbGVjdGlvbi5cclxuICAgICAgICB0aGlzLnJlc29sdmVkR3JpZENvbHVtbnNKc29uID0ganNvblJlZlJlc29sdmVyLnJlc29sdmVSZWZzKHN0YW5kYXJkaXNhdGlvblNldHVwR3JpZENvbHVtbnNKc29uKTtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSBGcm96ZW4gcm93IGJvZHkgZm9yIFNURCBXb3JrbGlzdFxyXG4gICAgICAgIGxldCBfc3RkV29ya0xpc3RGcm96ZW5Sb3dCb2R5Q29sbGVjdGlvbiA9IHRoaXMuZ2V0RnJvemVuUm93Qm9keShcclxuICAgICAgICAgICAgc3RhbmRhcmRpc2F0aW9uU2V0dXBUeXBlLCBncmlkVHlwZSwgY29tcGFyZXJOYW1lKTtcclxuICAgICAgICByZXR1cm4gX3N0ZFdvcmtMaXN0RnJvemVuUm93Qm9keUNvbGxlY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRob2QgZm9yIGdldHRpbmcgdGhlIGZyb3plbiByb3cgYm9keSBmb3IgU1REIHdvcmtsaXN0XHJcbiAgICAgKiBAcGFyYW0gY29tcGFyZXJOYW1lIFxyXG4gICAgICogQHBhcmFtIHN0YW5kYXJkaXNhdGlvblNldHVwVHlwZSBcclxuICAgICAqIEBwYXJhbSBncmlkVHlwZSBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEZyb3plblJvd0JvZHkoc3RhbmRhcmRpc2F0aW9uU2V0dXBUeXBlOiBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cCxcclxuICAgICAgICBncmlkVHlwZTogZW51bXMuR3JpZFR5cGUsIGNvbXBhcmVyTmFtZTogc3RyaW5nKTogSW1tdXRhYmxlLkxpc3Q8Z3JpZFJvdz4ge1xyXG5cclxuICAgICAgICBsZXQgX3N0ZFdvcmtMaXN0Um93SGVhZGVyQ2VsbGNvbGxlY3Rpb24gPSBBcnJheTxncmlkQ2VsbD4oKTtcclxuICAgICAgICBsZXQgX3N0ZFdvcmtMaXN0Um93Q29sbGVjdGlvbiA9IEFycmF5PGdyaWRSb3c+KCk7XHJcbiAgICAgICAgbGV0IF9zdGRSZXNwb25zZUxpc3REYXRhOiBJbW11dGFibGUuTGlzdDxTdGFuZGFyZGlzYXRpb25SZXNwb25zZURldGFpbHM+O1xyXG4gICAgICAgIGxldCBfc3RkUmVzcG9uc2VDb2x1bW46IGFueTtcclxuICAgICAgICBsZXQgY29tcG9uZW50UHJvcHNKc29uOiBhbnk7XHJcbiAgICAgICAgbGV0IF9zdGRXb3JrTGlzdENlbGw6IGdyaWRDZWxsO1xyXG4gICAgICAgIGxldCBrZXk6IHN0cmluZztcclxuICAgICAgICBsZXQgY3NzQ2xhc3M6IHN0cmluZztcclxuICAgICAgICBsZXQgc3VibWl0UmVzcG9uc2VIZWxwZXI6IHN1Ym1pdEhlbHBlciA9IG5ldyBzdWJtaXRIZWxwZXIoKTtcclxuXHJcbiAgICAgICAgX3N0ZFJlc3BvbnNlTGlzdERhdGEgPSBJbW11dGFibGUuTGlzdDxTdGFuZGFyZGlzYXRpb25SZXNwb25zZURldGFpbHM+KFxyXG4gICAgICAgICAgICBzdGFuZGFyZGlzYXRpb25TZXR1cFN0b3JlLmluc3RhbmNlLnN0YW5kYXJkaXNhdGlvblNldFVwUmVzcG9uc2VkZXRhaWxzLnN0YW5kYXJkaXNhdGlvblJlc3BvbnNlcyk7XHJcblxyXG4gICAgICAgIGlmIChfc3RkUmVzcG9uc2VMaXN0RGF0YSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxldCBzb3J0ZWRVbmNsYXNzaWZpZWREYXRhID0gSW1tdXRhYmxlLkxpc3Q8U3RhbmRhcmRpc2F0aW9uUmVzcG9uc2VEZXRhaWxzPihcclxuICAgICAgICAgICAgICAgIHNvcnRIZWxwZXIuc29ydChfc3RkUmVzcG9uc2VMaXN0RGF0YS50b0FycmF5KCksIGNvbXBhcmVyTGlzdFtjb21wYXJlck5hbWVdKSk7XHJcbiAgICAgICAgICAgIGxldCBwcmV2aW91c01hcmtpbmdNb2RlOiBlbnVtcy5NYXJraW5nTW9kZSA9IGVudW1zLk1hcmtpbmdNb2RlLk5vbmU7XHJcbiAgICAgICAgICAgIGxldCBncmlkU2VxID0gSW1tdXRhYmxlLkxpc3Q8U3RhbmRhcmRpc2F0aW9uUmVzcG9uc2VEZXRhaWxzPihfc3RkUmVzcG9uc2VMaXN0RGF0YSkua2V5U2VxKCk7XHJcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgX3N0ZFJlc3BvbnNlTGlzdERhdGEgPSBzb3J0ZWRVbmNsYXNzaWZpZWREYXRhO1xyXG4gICAgICAgICAgICBzb3J0ZWRVbmNsYXNzaWZpZWREYXRhLmZvckVhY2goZnVuY3Rpb24oc3RkUmVzcG9uc2VEYXRhLCBpbmRleCl7XHJcbiAgICAgICAgICAgICAgICAgLy8gR2V0dGluZyB0aGUgc3RkIHdvcmtsaXN0IGRhdGEgcm93XHJcbiAgICAgICAgICAgICAgICAgX3N0ZFdvcmtMaXN0Um93SGVhZGVyQ2VsbGNvbGxlY3Rpb24gPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgICAvLyBjb2xsZWN0aW9uIGluc2lkZSBsb29wLCBpdHMgYWNjZXNzZWRcclxuICAgICAgICAgICAgICAgICAvLyBvdXRzaWRlIHRoZSBsb29wIGdsb2JhbGx5XHJcbiAgICAgICAgICAgICAgICAgbGV0IGdyaWRDb2x1bW5zID0gdGhhdC5nZXRHcmlkQ29sdW1ucyh0aGF0LnJlc29sdmVkR3JpZENvbHVtbnNKc29uLCBzdGFuZGFyZGlzYXRpb25TZXR1cFR5cGUsIHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgIGdyaWRUeXBlKTtcclxuICAgICAgICAgICAgICAgICBsZXQgZ3JpZENvbHVtbkxlbmd0aCA9IGdyaWRDb2x1bW5zLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgLy8gR2V0dGluZyB0aGUgU1REIHdvcmtsaXN0IGNvbHVtbnNcclxuICAgICAgICAgICAgICAgICBmb3IgKGxldCBncmlkQ29sdW1uQ291bnQgPSAwOyBncmlkQ29sdW1uQ291bnQgPCBncmlkQ29sdW1uTGVuZ3RoOyBncmlkQ29sdW1uQ291bnQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICBfc3RkUmVzcG9uc2VDb2x1bW4gPSBncmlkQ29sdW1uc1tncmlkQ29sdW1uQ291bnRdLkdyaWRDb2x1bW47XHJcbiAgICAgICAgICAgICAgICAgICAgIF9zdGRXb3JrTGlzdENlbGwgPSBuZXcgZ3JpZENlbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50UHJvcHNKc29uID0gZ3JpZENvbHVtbnNbZ3JpZENvbHVtbkNvdW50XS5Db21wb25lbnRQcm9wcztcclxuICAgICAgICAgICAgICAgICAgICAgLy9Td2l0Y2ggc3RhdGVtZW50IGZvciBhZGRpbmcgZnJvemVuIGNvbHVtbnMgaW4gZnV0dXJlLlxyXG4gICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9zdGRSZXNwb25zZUNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBncmlkQ29sdW1uTmFtZXMuUmVzcG9uc2VJZENvbHVtbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBncmlkU2VxLmdldChpbmRleCkgKyAnX1Jlc3BvbnNlSWRDb2x1bW5fJyArIGdyaWRDb2x1bW5Db3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc3RkV29ya0xpc3RDZWxsLmNvbHVtbkVsZW1lbnQgPSB0aGF0LmdldFJlc3BvbnNlSWRDb2x1bW5FbGVtZW50KHN0ZFJlc3BvbnNlRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N0ZFdvcmtMaXN0Q2VsbC5zZXRDZWxsU3R5bGUoJ2NvbC1yZXNwb25zZSBoZWFkZXItY29sJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3N0ZFdvcmtMaXN0Um93SGVhZGVyQ2VsbGNvbGxlY3Rpb24ucHVzaChfc3RkV29ya0xpc3RDZWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgaWYgKHN0ZFJlc3BvbnNlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAvLyBDbGFzc2lmeSBidXR0b24gZW5hYmxpbmcvZGlzYWJsaW5nIGluIHVuY2xhc3NpZmllZCB3b3JrbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2VTdGF0dXNlcyA9IHN1Ym1pdFJlc3BvbnNlSGVscGVyLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0QnV0dG9uVmFsaWRhdGUoc3RkUmVzcG9uc2VEYXRhLCBzdGRSZXNwb25zZURhdGEubWFya2luZ1Byb2dyZXNzLCBmYWxzZSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRpbmcgdGhlIHRhYmxlIHJvdyBjb2xsZWN0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICBfc3RkV29ya0xpc3RSb3dDb2xsZWN0aW9uLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmdldEdyaWRSb3coXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RkUmVzcG9uc2VEYXRhLmRpc3BsYXlJZC50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zdGRXb3JrTGlzdFJvd0hlYWRlckNlbGxjb2xsZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VTdGF0dXNlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IF9zdGRXb3JrTGlzdEZyb3plblJvd0JvZHlDb2xsZWN0aW9uID0gSW1tdXRhYmxlLmZyb21KUyhfc3RkV29ya0xpc3RSb3dDb2xsZWN0aW9uKTtcclxuICAgICAgICByZXR1cm4gX3N0ZFdvcmtMaXN0RnJvemVuUm93Qm9keUNvbGxlY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZSByb3cgZGVmaW5pdGlvbiBmb3IgbXlUZWFtIGFuZCBIZWxwIG90aGVyIGV4YW1pbmVycyB0YWJcclxuICAgICAqIEBwYXJhbSBjb21wYXJlck5hbWUgXHJcbiAgICAgKiBAcGFyYW0gc29ydERpcmVjdGlvbiBcclxuICAgICAqIEBwYXJhbSB0YWJTZWxlY3Rpb24gXHJcbiAgICAgKiBAcGFyYW0gZ3JpZFR5cGUgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZW5lcmF0ZVN0YW5kYXJkaXNhdGlvblJvd0RlZmluaW9uKGNvbXBhcmVyTmFtZTogc3RyaW5nLCBzb3J0RGlyZWN0aW9uOiBlbnVtcy5Tb3J0RGlyZWN0aW9uLFxyXG4gICAgICAgIHRhYlNlbGVjdGlvbjogZW51bXMuU3RhbmRhcmRpc2F0aW9uU2V0dXAsXHJcbiAgICAgICAgZ3JpZFR5cGU6IGVudW1zLkdyaWRUeXBlKTogSW1tdXRhYmxlLkxpc3Q8Z3JpZFJvdz4ge1xyXG4gICAgICAgIHRoaXMuX3N0ZFNldFVwV29ya0xpc3RDb2xsZWN0aW9uID0gSW1tdXRhYmxlLkxpc3Q8Z3JpZFJvdz4oKTtcclxuICAgICAgICB0aGlzLnJlc29sdmVkR3JpZENvbHVtbnNKc29uID0ganNvblJlZlJlc29sdmVyLnJlc29sdmVSZWZzKHN0YW5kYXJkaXNhdGlvbnNldHVwdEdyaWRDb2x1bW5zSnNvbik7XHJcbiAgICAgICAgdGhpcy5fc3RkU2V0VXBXb3JrTGlzdENvbGxlY3Rpb24gPSB0aGlzLmdldFJvd0RlZmluaXRpb24odGFiU2VsZWN0aW9uLCBncmlkVHlwZSwgY29tcGFyZXJOYW1lKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RkU2V0VXBXb3JrTGlzdENvbGxlY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSByb3cgZGVmaW5pdGlvbiBmb3IgdW5jbGFzc2lmZWQgd29ya2xpc3RcclxuICAgICAqIEBwYXJhbSB0YWJTZWxlY3Rpb24gXHJcbiAgICAgKiBAcGFyYW0gZ3JpZFR5cGUgXHJcbiAgICAgKiBAcGFyYW0gY29tcGFyZXJOYW1lIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldFJvd0RlZmluaXRpb24odGFiU2VsZWN0aW9uOiBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cCwgZ3JpZFR5cGU6IGVudW1zLkdyaWRUeXBlICxcclxuICAgICAgICBjb21wYXJlck5hbWU6IHN0cmluZyk6IEltbXV0YWJsZS5MaXN0PGdyaWRSb3c+IHtcclxuICAgICAgICBsZXQgX3VuQ2xhc3NpZmllZFJvd0NvbGxlY3Rpb24gPSBBcnJheTxncmlkUm93PigpO1xyXG4gICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgbGV0IF91bkNsYXNzaWZpZWREYXRhOiBhbnk7XHJcbiAgICAgICAgbGV0IHNvcnRlZERhdGE6ICBJbW11dGFibGUuTGlzdDxTdGFuZGFyZGlzYXRpb25SZXNwb25zZURldGFpbHM+O1xyXG4gICAgICAgIGxldCBfdW5DbGFzc2lmaWVkUmVzcG9uc2VMaXN0RGF0YTogSW1tdXRhYmxlLkxpc3Q8U3RhbmRhcmRpc2F0aW9uUmVzcG9uc2VEZXRhaWxzPjtcclxuICAgICAgICBsZXQgZ3JpZENvbHVtbnMgPSB0aGlzLmdldEdyaWRDb2x1bW5zKHRoaXMucmVzb2x2ZWRHcmlkQ29sdW1uc0pzb24sIHRhYlNlbGVjdGlvbiwgZmFsc2UsIGdyaWRUeXBlKTtcclxuICAgICAgICBfdW5DbGFzc2lmaWVkRGF0YSA9IHN0YW5kYXJkaXNhdGlvblNldHVwU3RvcmUuaW5zdGFuY2Uuc3RhbmRhcmRpc2F0aW9uU2V0VXBSZXNwb25zZWRldGFpbHMuc3RhbmRhcmRpc2F0aW9uUmVzcG9uc2VzO1xyXG4gICAgICAgIF91bkNsYXNzaWZpZWRSZXNwb25zZUxpc3REYXRhID0gSW1tdXRhYmxlLkxpc3Q8U3RhbmRhcmRpc2F0aW9uUmVzcG9uc2VEZXRhaWxzPihfdW5DbGFzc2lmaWVkRGF0YSk7XHJcbiAgICAgICAgc29ydGVkRGF0YSA9IEltbXV0YWJsZS5MaXN0PFN0YW5kYXJkaXNhdGlvblJlc3BvbnNlRGV0YWlscz4oc29ydEhlbHBlci5zb3J0KFxyXG4gICAgICAgICAgICBfdW5DbGFzc2lmaWVkRGF0YSwgY29tcGFyZXJMaXN0W2NvbXBhcmVyTmFtZV0pKTtcclxuICAgICAgICBpZiAoX3VuQ2xhc3NpZmllZFJlc3BvbnNlTGlzdERhdGEuY291bnQoKSA+IDApe1xyXG4gICAgICAgICAgICBfdW5DbGFzc2lmaWVkUm93Q29sbGVjdGlvbiA9IHRoaXMuZ2V0Um93RGF0YShzb3J0ZWREYXRhLCBncmlkQ29sdW1ucywgZ3JpZFR5cGUsIGluZGV4LFxyXG4gICAgICAgICAgICAgICAgZW51bXMuU3RhbmRhcmRpc2F0aW9uU2V0dXAuVW5DbGFzc2lmaWVkUmVzcG9uc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl91bkNsYXNzaWZpZWRMaXN0Q29sbGVjdGlvbiA9IEltbXV0YWJsZS5mcm9tSlMoX3VuQ2xhc3NpZmllZFJvd0NvbGxlY3Rpb24pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91bkNsYXNzaWZpZWRMaXN0Q29sbGVjdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoYW5nZSBqc29uIG9iamVjdCB0byBpbW11dGFibGUgbGlzdFxyXG4gICAgICogQHBhcmFtIGRhdGFcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRJbW11dGFibGVVbmNsYXNzaWZpZWRMaXN0KGRhdGE6IGFueSk6IEltbXV0YWJsZS5MaXN0PFN0YW5kYXJkaXNhdGlvblJlc3BvbnNlRGV0YWlscz4ge1xyXG4gICAgICAgIGxldCBpbW11dGFibGVMaXN0OiBJbW11dGFibGUuTGlzdDxTdGFuZGFyZGlzYXRpb25SZXNwb25zZURldGFpbHM+ID0gSW1tdXRhYmxlLkxpc3QoZGF0YSk7XHJcbiAgICAgICAgZGF0YSA9IGltbXV0YWJsZUxpc3Q7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFVuQ2xhc3NpZmllZEhlbHBlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9ncmlkL3N0YW5kYXJkaXNhdGlvbnNldHVwaGVscGVycy91bmNsYXNzaWZpZWRoZWxwZXIudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBOztBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUNBOztBQXdKQTtBQW5KQTs7Ozs7QUFLQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0FBTUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 415:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/components/worklist/shared/markscolumn.tsx ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/*\r\n    React component for marks column in marks by question view.\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:variable-name */\r\nvar MarksColumn = function (props) {\r\n    var className = (props.usedInTotal || props.textValue === '-') ?\r\n        'dim-text txt-val small-text' : 'small-text strike-out dim-text';\r\n    return (React.createElement(\"span\", { id: 'gen_' + props.id, className: className }, props.textValue));\r\n};\r\nmodule.exports = MarksColumn;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL21hcmtzY29sdW1uLnRzeD85ODgyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgICBSZWFjdCBjb21wb25lbnQgZm9yIG1hcmtzIGNvbHVtbiBpbiBtYXJrcyBieSBxdWVzdGlvbiB2aWV3LlxyXG4qL1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBtYXJrcyBjb2x1bW4uXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgdGV4dFZhbHVlPzogc3RyaW5nO1xyXG4gICAgdXNlZEluVG90YWw6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuY29uc3QgTWFya3NDb2x1bW4gPSAocHJvcHM6IFByb3BzKSA9PiB7XHJcbiAgICBsZXQgY2xhc3NOYW1lOiBzdHJpbmcgPSAocHJvcHMudXNlZEluVG90YWwgfHwgcHJvcHMudGV4dFZhbHVlID09PSAnLScpID9cclxuICAgICAgICAnZGltLXRleHQgdHh0LXZhbCBzbWFsbC10ZXh0JyA6ICdzbWFsbC10ZXh0IHN0cmlrZS1vdXQgZGltLXRleHQnO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8c3BhbiBpZD17J2dlbl8nICsgcHJvcHMuaWR9IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cclxuICAgICAgICAgICAge3Byb3BzLnRleHRWYWx1ZX1cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0ID0gTWFya3NDb2x1bW47XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L3NoYXJlZC9tYXJrc2NvbHVtbi50c3giXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 416:
/* no static exports found */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/dataservices/authentication/logoutargument.ts ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Logout argument class.\r\n */\r\nvar LogoutArgument = /** @class */ (function () {\r\n    function LogoutArgument() {\r\n    }\r\n    return LogoutArgument;\r\n}());\r\nmodule.exports = LogoutArgument;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2RhdGFzZXJ2aWNlcy9hdXRoZW50aWNhdGlvbi9sb2dvdXRhcmd1bWVudC50cz9kMjhhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBMb2dvdXQgYXJndW1lbnQgY2xhc3MuXHJcbiAqL1xyXG5jbGFzcyBMb2dvdXRBcmd1bWVudCB7XHJcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcblxyXG4gICAgcHVibGljIE1hcmtpbmdTZXNzaW9uVHJhY2tpbmdJZDogbnVtYmVyO1xyXG4gICAgcHVibGljIGlzUmVwb3J0c1BhZ2VBY2Nlc3NlZDogYm9vbGVhbjtcclxuXHJcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcbn1cclxuXHJcbmV4cG9ydCA9IExvZ291dEFyZ3VtZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvZGF0YXNlcnZpY2VzL2F1dGhlbnRpY2F0aW9uL2xvZ291dGFyZ3VtZW50LnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7O0FBRUE7QUFDQTtBQUFBO0FBT0E7QUFBQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 418:
/* no static exports found */
/* all exports used */
/*!*******************************************************************!*\
  !*** ./src/utility/breadcrumb/standardisationsetuphistoryinfo.ts ***!
  \*******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar historyBase = __webpack_require__(/*! ./historybase */ 447);\r\nvar StandardisationSetupHistoryInfo = /** @class */ (function (_super) {\r\n    __extends(StandardisationSetupHistoryInfo, _super);\r\n    function StandardisationSetupHistoryInfo() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return StandardisationSetupHistoryInfo;\r\n}(historyBase));\r\nmodule.exports = StandardisationSetupHistoryInfo;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvYnJlYWRjcnVtYi9zdGFuZGFyZGlzYXRpb25zZXR1cGhpc3RvcnlpbmZvLnRzPzg3OGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2VudW1zJyk7XG5pbXBvcnQgaGlzdG9yeUJhc2UgPSByZXF1aXJlKCcuL2hpc3RvcnliYXNlJyk7XG5cbmNsYXNzIFN0YW5kYXJkaXNhdGlvblNldHVwSGlzdG9yeUluZm8gZXh0ZW5kcyBoaXN0b3J5QmFzZSB7XG4gICAgcHVibGljIHN0YW5kYXJkaXNhdGlvblNldHVwV29ya2xpc3RUeXBlOiBlbnVtcy5TdGFuZGFyZGlzYXRpb25TZXR1cDtcbiAgICBwdWJsaWMgdGltZVN0YW1wOiBudW1iZXI7XG59XG5cbmV4cG9ydCA9IFN0YW5kYXJkaXNhdGlvblNldHVwSGlzdG9yeUluZm87XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy91dGlsaXR5L2JyZWFkY3J1bWIvc3RhbmRhcmRpc2F0aW9uc2V0dXBoaXN0b3J5aW5mby50cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTtBQUVBO0FBQUE7QUFBQTs7QUFHQTtBQUFBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 419:
/* no static exports found */
/* all exports used */
/*!*************************************************************************!*\
  !*** ./src/utility/teammanagement/helpers/warningmessagepopuphelper.ts ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../../components/utility/enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * Helper class for warning message popup\r\n */\r\nvar WarningMessagePopupHelper = /** @class */ (function () {\r\n    function WarningMessagePopupHelper() {\r\n    }\r\n    /**\r\n     * Method to bind the warning message popup content.\r\n     */\r\n    WarningMessagePopupHelper.prototype.bindWarningMessagePopupContent = function (failureCode) {\r\n        switch (failureCode) {\r\n            case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.subordinate-withdrawn-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.SubordinateExaminerWithdrawn] + '-content');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.subordinate-withdrawn-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.SubordinateExaminerWithdrawn] + '-title');\r\n                break;\r\n            case enums.FailureCode.Withdrawn:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.withdrawn-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.Withdrawn] + '-content');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.withdrawn-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.Withdrawn] + '-title');\r\n                break;\r\n            case enums.FailureCode.HierarchyChanged:\r\n            case enums.FailureCode.NotASeniorExaminer:\r\n            case enums.FailureCode.NotTeamLead:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.hierarchy-changed-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.HierarchyChanged] + '-content');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.hierarchy-changed-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.HierarchyChanged] + '-title');\r\n                break;\r\n            case enums.FailureCode.ExaminerStatusAlreadyChanged:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.subordinate-status-already-changed-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.ExaminerStatusAlreadyChanged] + '-content');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.subordinate-status-already-changed-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.ExaminerStatusAlreadyChanged] + '-title');\r\n                break;\r\n            case enums.FailureCode.Suspended:\r\n            case enums.FailureCode.NotApproved:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.suspended-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.Suspended] + '-content');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.suspended-dialog.' +\r\n                        enums.FailureCode[enums.FailureCode.Suspended] + '-title');\r\n                break;\r\n            case enums.FailureCode.InvalidPriority:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.hierarchy-changed-dialog.body-priority-changed');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.hierarchy-changed-dialog.HierarchyChanged-title');\r\n                break;\r\n            case enums.FailureCode.AlreadyLocked:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-failure-dialog.body');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-failure-dialog.ExaminerAlreadyLocked-title');\r\n                break;\r\n            case enums.FailureCode.NotInLockStatus:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-failure-dialog.body');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-failure-dialog.ExaminerAlreadyunlocked-title');\r\n                break;\r\n            case enums.FailureCode.LockLimitMet:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-limit-reached-dialog.LockLimitReached-content');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-limit-reached-dialog.LockLimitReached-title');\r\n                break;\r\n            case enums.FailureCode.LockIsRequired:\r\n                this._warningPopupContent =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-failure-dialog.body');\r\n                this._warningPopupTitle =\r\n                    localeStore.instance.TranslateText('team-management.examiner-worklist.lock-failure-dialog.header-lock-removed');\r\n                break;\r\n        }\r\n    };\r\n    Object.defineProperty(WarningMessagePopupHelper.prototype, \"warningPopupContent\", {\r\n        /**\r\n         * Returns the warning message popup content\r\n         */\r\n        get: function () {\r\n            return this._warningPopupContent;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WarningMessagePopupHelper.prototype, \"warningPopupTitle\", {\r\n        /**\r\n         * Returns the warning message popup title\r\n         */\r\n        get: function () {\r\n            return this._warningPopupTitle;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return WarningMessagePopupHelper;\r\n}());\r\nmodule.exports = WarningMessagePopupHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 420:
/* no static exports found */
/* all exports used */
/*!***************************************************************************!*\
  !*** ./src/utility/worklistvalidators/directedremarkworklistvalidator.ts ***!
  \***************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../components/utility/ecoursework/ecourseworkhelper */ 238);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * Directed remark worklist concrete implementation of WorkListValidatorSchema\r\n */\r\nvar DirectedRemarkWorklistValidator = /** @class */ (function () {\r\n    function DirectedRemarkWorklistValidator() {\r\n    }\r\n    /**\r\n     * Logic to show marking progress/submit button/blocking exception warning\r\n     * @param response\r\n     */\r\n    DirectedRemarkWorklistValidator.prototype.submitButtonValidate = function (response) {\r\n        this.responseStatuses = Immutable.List();\r\n        this.responseStatuses.clear();\r\n        switch (worklistStore.instance.getResponseMode) {\r\n            case enums.ResponseMode.open:\r\n                this.responseStatuses = this.openResponseValidation(response);\r\n                break;\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    /**\r\n     * get supervisor remark decision visibility\r\n     * @param response\r\n     */\r\n    DirectedRemarkWorklistValidator.prototype.isSupervisorRemarkDecisionVisible = function (response) {\r\n        var markSchemeGroupId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n        var isSupervisorRemarkDecisionCCOn = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SupervisorRemarkDecision, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        return (isSupervisorRemarkDecisionCCOn\r\n            && worklistStore.instance.getRemarkRequestType === enums.RemarkRequestType.SupervisorRemark\r\n            && response.markingProgress === 100);\r\n    };\r\n    /**\r\n     * Open directed remark worklist validation for marking progress/submit button\r\n     * @param response\r\n     */\r\n    DirectedRemarkWorklistValidator.prototype.openResponseValidation = function (response) {\r\n        response.isSubmitEnabled = false;\r\n        /** if the marking has started */\r\n        if (response.markingProgress > 0) {\r\n            /** if the marking is completed */\r\n            if (response.markingProgress === 100) {\r\n                // Avoid ForceAnnotationOnEachPage CC while opening single response in multiQig\r\n                // Apply ForceAnnotationOnEachPage CC for all QIGs in the whole response when it turned on for at least one QIG\r\n                var markSchemeGroupId = (response.isWholeResponse &&\r\n                    response.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                /** taking the cc from cc helper */\r\n                var isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                var isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                /** if slao annotated cc is on and all pages are not annotated OR all pages annotated cc is on\r\n                 *  and all pages are not annotated if both CCs are on, all pages annotated cc has\r\n                 *  the higher priority.\r\n                 */\r\n                if ((!isAllPagesAnnotatedCC && isAllSLAOAnnotatedCC && response.hasAllPagesAnnotated === false)\r\n                    || (isAllPagesAnnotatedCC && response.hasAllPagesAnnotated === false)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllPagesAnnotated);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    if (response.hasBlockingExceptions) {\r\n                        this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    }\r\n                }\r\n                else if (response.hasBlockingExceptions ||\r\n                    (eCourseworkHelper.isECourseworkComponent && !response.allFilesViewed)) {\r\n                    /** if the marking is completed and blocking exceptions are there, show both. */\r\n                    /* For an ecoursework component, enable submit button only if all files are viewed in the response.\r\n                       If not all files are viewed then the response view in the worklist will be shown in amber color along with\r\n                       marking progress indicator.\r\n                    */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    if (eCourseworkHelper.isECourseworkComponent && !response.allFilesViewed) {\r\n                        this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllFilesViewed);\r\n                    }\r\n                }\r\n                else if (response.hasZoningExceptions) {\r\n                    /** if the marking is completed and zoning exceptions are there, show both. */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasZoningException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if (response.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown\r\n                    && response.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Accurate\r\n                    && response.markChangeReasonVisible && !response.markChangeReason) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markChangeReasonNotExist);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if ((response.supervisorRemarkFinalMarkSetID === 0 || response.supervisorRemarkMarkChangeReasonID === 0)\r\n                    && this.isSupervisorRemarkDecisionVisible(response)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.supervisorRemarkDecisionNotSelected);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else {\r\n                    /** if all pages annotated cc is off and if no blocking exceptions are there, show ready to submit button */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.readyToSubmit);\r\n                    response.isSubmitEnabled = true;\r\n                }\r\n            }\r\n            else if (response.hasBlockingExceptions) {\r\n                /** if the marking is in progress and blocking exceptions are there, show both. */\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n            else {\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n        }\r\n        else {\r\n            /** if marking not started show the same */\r\n            this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingNotStarted);\r\n            if (response.hasBlockingExceptions) {\r\n                /** if the marking is not started and blocking exceptions are there, show amber. */\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n            }\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    return DirectedRemarkWorklistValidator;\r\n}());\r\nmodule.exports = DirectedRemarkWorklistValidator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 421:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/utility/worklistvalidators/liveworklistvalidator.ts ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../components/utility/ecoursework/ecourseworkhelper */ 238);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar markeroperationmodefactory = __webpack_require__(/*! ../../components/utility/markeroperationmode/markeroperationmodefactory */ 232);\r\n/**\r\n * Live worklist concrete implementation of WorkListValidatorSchema\r\n */\r\nvar LiveWorklistValidator = /** @class */ (function () {\r\n    function LiveWorklistValidator() {\r\n    }\r\n    /**\r\n     * Logic to show marking progress/submit button/blocking exception warning\r\n     * @param response\r\n     */\r\n    LiveWorklistValidator.prototype.submitButtonValidate = function (response) {\r\n        this.responseStatuses = Immutable.List();\r\n        this.responseStatuses.clear();\r\n        switch (worklistStore.instance.getResponseMode) {\r\n            case enums.ResponseMode.open:\r\n                this.responseStatuses = this.openResponseValidation(response);\r\n                break;\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    /**\r\n     * Open live worklist validation for marking progress/submit button\r\n     * @param response\r\n     */\r\n    LiveWorklistValidator.prototype.openResponseValidation = function (response) {\r\n        response.isSubmitEnabled = false;\r\n        /** if the marking has started */\r\n        if (response.markingProgress > 0) {\r\n            /** if the marking is completed */\r\n            if (response.markingProgress === 100) {\r\n                // Avoid ForceAnnotationOnEachPage CC while opening single response in multiQig\r\n                // Apply ForceAnnotationOnEachPage CC for all QIGs in the whole response when it turned on for at least one QIG\r\n                var markSchemeGroupId = (response.isWholeResponse &&\r\n                    response.relatedRIGDetails) ? 0 :\r\n                    qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                /** taking the cc from cc helper */\r\n                var isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                var isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                /** if slao annotated cc is on and all pages are not annotated OR all pages annotated cc is on\r\n                 *  and all pages are not annotated if both CCs are on, all pages annotated cc has\r\n                 *  the higher priority.\r\n                 */\r\n                if ((!isAllPagesAnnotatedCC && isAllSLAOAnnotatedCC && response.hasAllPagesAnnotated === false\r\n                    && response.hasAdditionalObjects)\r\n                    || (isAllPagesAnnotatedCC && response.hasAllPagesAnnotated === false)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllPagesAnnotated);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    if (response.hasBlockingExceptions) {\r\n                        this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    }\r\n                }\r\n                else if (response.hasBlockingExceptions ||\r\n                    (eCourseworkHelper.isECourseworkComponent && !response.allFilesViewed)) {\r\n                    /** if the marking is completed and blocking exceptions are there, show both. */\r\n                    /* For an ecoursework component, enable submit button only if all files are viewed in the response.\r\n                       If not all files are viewed then the response view in the worklist will be shown in amber color along with\r\n                       marking progress indicator .\r\n                    */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    if (eCourseworkHelper.isECourseworkComponent && !response.allFilesViewed) {\r\n                        this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllFilesViewed);\r\n                    }\r\n                }\r\n                if (response.hasZoningExceptions) {\r\n                    /** if the marking is completed and zoning exceptions are there, show both. */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasZoningException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if (response.isWholeResponse && !markeroperationmodefactory.operationMode.isSubmitDisabled(enums.WorklistType.live)\r\n                    && ((!qigStore.instance.isWholeResponseAvailable &&\r\n                        worklistStore.instance.currentWorklistType === enums.WorklistType.live)\r\n                        || (!qigStore.instance.isAtypicalAvailable &&\r\n                            worklistStore.instance.currentWorklistType === enums.WorklistType.atypical))) {\r\n                    //// if permission is changed for whole response in any of the qigs then submit is hidden\r\n                    ////  markeroperationmodefactory.operationMode.isSubmitDisabled - current qig submit disable logic\r\n                    ////  isAtypicalAvailable - for checking if atypical submit available\r\n                    ////  isWholeResponseAvailable - for checking if whole response submit available\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.wholeResponseNotAvailable);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if (this.responseStatuses.count() === 0) {\r\n                    /** if all pages annotated cc is off and if no blocking exceptions are there, show ready to submit button */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.readyToSubmit);\r\n                    response.isSubmitEnabled = true;\r\n                }\r\n            }\r\n            else if (response.hasBlockingExceptions) {\r\n                /** if the marking is in progress and blocking exceptions are there, show both. */\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n            else {\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n        }\r\n        else {\r\n            /** if marking not started show the same */\r\n            this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingNotStarted);\r\n            if (response.hasBlockingExceptions) {\r\n                /** if the marking is not started and blocking exceptions are there, show amber. */\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n            }\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    return LiveWorklistValidator;\r\n}());\r\nmodule.exports = LiveWorklistValidator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 422:
/* no static exports found */
/* all exports used */
/*!*********************************************************************!*\
  !*** ./src/utility/worklistvalidators/practiceworklistvalidator.ts ***!
  \*********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../components/utility/ecoursework/ecourseworkhelper */ 238);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * Practice worklist concrete implementation of WorkListValidatorSchema\r\n */\r\nvar PracticeWorklistValidator = /** @class */ (function () {\r\n    function PracticeWorklistValidator() {\r\n    }\r\n    /**\r\n     * Logic to show marking progress/submit button/blocking exception warning\r\n     * @param response\r\n     */\r\n    PracticeWorklistValidator.prototype.submitButtonValidate = function (response) {\r\n        this.responseStatuses = Immutable.List();\r\n        this.responseStatuses.clear();\r\n        switch (worklistStore.instance.getResponseMode) {\r\n            case enums.ResponseMode.open:\r\n                this.responseStatuses = this.openResponseValidation(response);\r\n                break;\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    /**\r\n     * Open Practice worklist validation for marking progress/submit button\r\n     * @param response\r\n     */\r\n    PracticeWorklistValidator.prototype.openResponseValidation = function (response) {\r\n        response.isSubmitEnabled = false;\r\n        /** if the marking has started */\r\n        if (response.markingProgress > 0) {\r\n            /** if the marking is completed */\r\n            if (response.markingProgress === 100) {\r\n                // Avoid ForceAnnotationOnEachPage CC while opening single response in multiQig\r\n                // Apply ForceAnnotationOnEachPage CC for all QIGs in the whole response when it turned on for at least one QIG\r\n                var markSchemeGroupId = qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                /** taking the cc from cc helper */\r\n                var isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                var isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                /** if slao annotated cc is on and all pages are not annotated OR all pages annotated cc is on\r\n                 *  and all pages are not annotated if both CCs are on, all pages annotated cc has\r\n                 *  the higher priority.\r\n                 */\r\n                if ((!isAllPagesAnnotatedCC && isAllSLAOAnnotatedCC && response.hasAllPagesAnnotated === false)\r\n                    || (isAllPagesAnnotatedCC && response.hasAllPagesAnnotated === false)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllPagesAnnotated);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if (eCourseworkHelper.isECourseworkComponent && !response.allFilesViewed) {\r\n                    /* For an ecoursework component, enable submit button only if all files are viewed in the response.\r\n                       If not all files are viewed then the response view in the worklist will be shown in amber color along with\r\n                       marking progress indicator.\r\n                    */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllFilesViewed);\r\n                }\r\n                else {\r\n                    /** if all pages annotated cc is off show ready to submit button */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.readyToSubmit);\r\n                    response.isSubmitEnabled = true;\r\n                }\r\n            }\r\n            else {\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n        }\r\n        else {\r\n            /** if marking not started show the same */\r\n            this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingNotStarted);\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    return PracticeWorklistValidator;\r\n}());\r\nmodule.exports = PracticeWorklistValidator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvd29ya2xpc3R2YWxpZGF0b3JzL3ByYWN0aWNld29ya2xpc3R2YWxpZGF0b3IudHM/MjE3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IHdvcmtMaXN0VmFsaWRhdG9yU2NoZW1hID0gcmVxdWlyZSgnLi93b3JrbGlzdHZhbGlkYXRvcnNjaGVtYScpO1xyXG5pbXBvcnQgSW1tdXRhYmxlID0gcmVxdWlyZSgnaW1tdXRhYmxlJyk7XHJcbmltcG9ydCB3b3JrbGlzdFN0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL3dvcmtsaXN0L3dvcmtsaXN0c3RvcmUnKTtcclxuaW1wb3J0IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc0hlbHBlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWMvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWNzaGVscGVyJyk7XHJcbmltcG9ydCBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NOYW1lcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWMvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWNzbmFtZXMnKTtcclxuaW1wb3J0IGVDb3Vyc2V3b3JrSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2Vjb3Vyc2V3b3JrL2Vjb3Vyc2V3b3JraGVscGVyJyk7XHJcbmltcG9ydCBxaWdTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy9xaWdzZWxlY3Rvci9xaWdzdG9yZScpO1xyXG4vKipcclxuICogUHJhY3RpY2Ugd29ya2xpc3QgY29uY3JldGUgaW1wbGVtZW50YXRpb24gb2YgV29ya0xpc3RWYWxpZGF0b3JTY2hlbWFcclxuICovXHJcbmNsYXNzIFByYWN0aWNlV29ya2xpc3RWYWxpZGF0b3IgaW1wbGVtZW50cyB3b3JrTGlzdFZhbGlkYXRvclNjaGVtYSB7XHJcbiAgICBwcml2YXRlIHJlc3BvbnNlU3RhdHVzZXM6IEltbXV0YWJsZS5MaXN0PGVudW1zLlJlc3BvbnNlU3RhdHVzPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExvZ2ljIHRvIHNob3cgbWFya2luZyBwcm9ncmVzcy9zdWJtaXQgYnV0dG9uL2Jsb2NraW5nIGV4Y2VwdGlvbiB3YXJuaW5nXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN1Ym1pdEJ1dHRvblZhbGlkYXRlKHJlc3BvbnNlOiBSZXNwb25zZUJhc2UpIHtcclxuXHJcbiAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gSW1tdXRhYmxlLkxpc3Q8ZW51bXMuUmVzcG9uc2VTdGF0dXM+KCk7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzLmNsZWFyKCk7XHJcbiAgICAgICAgc3dpdGNoICh3b3JrbGlzdFN0b3JlLmluc3RhbmNlLmdldFJlc3BvbnNlTW9kZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLlJlc3BvbnNlTW9kZS5vcGVuOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gdGhpcy5vcGVuUmVzcG9uc2VWYWxpZGF0aW9uKHJlc3BvbnNlIGFzIFByYWN0aWNlT3BlblJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5yZXNwb25zZVN0YXR1c2VzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3BlbiBQcmFjdGljZSB3b3JrbGlzdCB2YWxpZGF0aW9uIGZvciBtYXJraW5nIHByb2dyZXNzL3N1Ym1pdCBidXR0b25cclxuICAgICAqIEBwYXJhbSByZXNwb25zZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9wZW5SZXNwb25zZVZhbGlkYXRpb24ocmVzcG9uc2U6IFByYWN0aWNlT3BlblJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmVzcG9uc2UuaXNTdWJtaXRFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgLyoqIGlmIHRoZSBtYXJraW5nIGhhcyBzdGFydGVkICovXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLm1hcmtpbmdQcm9ncmVzcyA+IDApIHtcclxuICAgICAgICAgICAgLyoqIGlmIHRoZSBtYXJraW5nIGlzIGNvbXBsZXRlZCAqL1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UubWFya2luZ1Byb2dyZXNzID09PSAxMDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBGb3JjZUFubm90YXRpb25PbkVhY2hQYWdlIENDIHdoaWxlIG9wZW5pbmcgc2luZ2xlIHJlc3BvbnNlIGluIG11bHRpUWlnXHJcbiAgICAgICAgICAgICAgICAvLyBBcHBseSBGb3JjZUFubm90YXRpb25PbkVhY2hQYWdlIENDIGZvciBhbGwgUUlHcyBpbiB0aGUgd2hvbGUgcmVzcG9uc2Ugd2hlbiBpdCB0dXJuZWQgb24gZm9yIGF0IGxlYXN0IG9uZSBRSUdcclxuICAgICAgICAgICAgICAgIGxldCBtYXJrU2NoZW1lR3JvdXBJZDogbnVtYmVyID1cclxuICAgICAgICAgICAgICAgICAgICBxaWdTdG9yZS5pbnN0YW5jZS5nZXRTZWxlY3RlZFFJR0ZvclRoZUxvZ2dlZEluVXNlci5tYXJrU2NoZW1lR3JvdXBJZDtcclxuXHJcbiAgICAgICAgICAgICAgICAvKiogdGFraW5nIHRoZSBjYyBmcm9tIGNjIGhlbHBlciAqL1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzQWxsUGFnZXNBbm5vdGF0ZWRDQyA9IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc0hlbHBlci5nZXRDaGFyYWN0ZXJpc3RpY1ZhbHVlKFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzLkZvcmNlQW5ub3RhdGlvbk9uRWFjaFBhZ2UsIG1hcmtTY2hlbWVHcm91cElkKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNBbGxTTEFPQW5ub3RhdGVkQ0MgPSBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NIZWxwZXIuZ2V0Q2hhcmFjdGVyaXN0aWNWYWx1ZShcclxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NOYW1lcy5TTEFPRm9yY2VkQW5ub3RhdGlvbnMsIG1hcmtTY2hlbWVHcm91cElkKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAvKiogaWYgc2xhbyBhbm5vdGF0ZWQgY2MgaXMgb24gYW5kIGFsbCBwYWdlcyBhcmUgbm90IGFubm90YXRlZCBPUiBhbGwgcGFnZXMgYW5ub3RhdGVkIGNjIGlzIG9uXHJcbiAgICAgICAgICAgICAgICAgKiAgYW5kIGFsbCBwYWdlcyBhcmUgbm90IGFubm90YXRlZCBpZiBib3RoIENDcyBhcmUgb24sIGFsbCBwYWdlcyBhbm5vdGF0ZWQgY2MgaGFzXHJcbiAgICAgICAgICAgICAgICAgKiAgdGhlIGhpZ2hlciBwcmlvcml0eS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKCghaXNBbGxQYWdlc0Fubm90YXRlZENDICYmIGlzQWxsU0xBT0Fubm90YXRlZENDICYmIHJlc3BvbnNlLmhhc0FsbFBhZ2VzQW5ub3RhdGVkID09PSBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICB8fCAoaXNBbGxQYWdlc0Fubm90YXRlZENDICYmIHJlc3BvbnNlLmhhc0FsbFBhZ2VzQW5ub3RhdGVkID09PSBmYWxzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLnJlc3BvbnNlU3RhdHVzZXMucHVzaChlbnVtcy5SZXNwb25zZVN0YXR1cy5ub3RBbGxQYWdlc0Fubm90YXRlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gdGhpcy5yZXNwb25zZVN0YXR1c2VzLnB1c2goZW51bXMuUmVzcG9uc2VTdGF0dXMubWFya2luZ0luUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlQ291cnNld29ya0hlbHBlci5pc0VDb3Vyc2V3b3JrQ29tcG9uZW50ICYmICFyZXNwb25zZS5hbGxGaWxlc1ZpZXdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qIEZvciBhbiBlY291cnNld29yayBjb21wb25lbnQsIGVuYWJsZSBzdWJtaXQgYnV0dG9uIG9ubHkgaWYgYWxsIGZpbGVzIGFyZSB2aWV3ZWQgaW4gdGhlIHJlc3BvbnNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgIElmIG5vdCBhbGwgZmlsZXMgYXJlIHZpZXdlZCB0aGVuIHRoZSByZXNwb25zZSB2aWV3IGluIHRoZSB3b3JrbGlzdCB3aWxsIGJlIHNob3duIGluIGFtYmVyIGNvbG9yIGFsb25nIHdpdGhcclxuICAgICAgICAgICAgICAgICAgICAgICBtYXJraW5nIHByb2dyZXNzIGluZGljYXRvci5cclxuICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLmhhc0V4Y2VwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gdGhpcy5yZXNwb25zZVN0YXR1c2VzLnB1c2goZW51bXMuUmVzcG9uc2VTdGF0dXMubWFya2luZ0luUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLm5vdEFsbEZpbGVzVmlld2VkKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyoqIGlmIGFsbCBwYWdlcyBhbm5vdGF0ZWQgY2MgaXMgb2ZmIHNob3cgcmVhZHkgdG8gc3VibWl0IGJ1dHRvbiAqL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLnJlYWR5VG9TdWJtaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmlzU3VibWl0RW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLnJlc3BvbnNlU3RhdHVzZXMucHVzaChlbnVtcy5SZXNwb25zZVN0YXR1cy5tYXJraW5nSW5Qcm9ncmVzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKiogaWYgbWFya2luZyBub3Qgc3RhcnRlZCBzaG93IHRoZSBzYW1lICovXHJcbiAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLm1hcmtpbmdOb3RTdGFydGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlU3RhdHVzZXM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0ID0gUHJhY3RpY2VXb3JrbGlzdFZhbGlkYXRvcjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy91dGlsaXR5L3dvcmtsaXN0dmFsaWRhdG9ycy9wcmFjdGljZXdvcmtsaXN0dmFsaWRhdG9yLnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQUE7QUF1RUE7QUFwRUE7OztBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFFQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 423:
/* no static exports found */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/utility/worklistvalidators/simulationworklistvalidator.ts ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\n/**\r\n * Simulation worklist concrete implementation of WorkListValidatorSchema\r\n */\r\nvar SimualtionWorklistValidator = /** @class */ (function () {\r\n    function SimualtionWorklistValidator() {\r\n    }\r\n    /**\r\n     * Logic to show marking progress/submit button/blocking exception warning\r\n     * @param response\r\n     */\r\n    SimualtionWorklistValidator.prototype.submitButtonValidate = function (response) {\r\n        this.responseStatuses = Immutable.List();\r\n        this.responseStatuses.clear();\r\n        switch (worklistStore.instance.getResponseMode) {\r\n            case enums.ResponseMode.open:\r\n                this.responseStatuses = this.openResponseValidation(response);\r\n                break;\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    /**\r\n     * Open simulation worklist validation for marking progress/submit button\r\n     * @param response\r\n     */\r\n    SimualtionWorklistValidator.prototype.openResponseValidation = function (response) {\r\n        response.isSubmitEnabled = false;\r\n        /** if the marking has started */\r\n        if (response.markingProgress > 0) {\r\n            /** if the marking is completed */\r\n            if (response.markingProgress === 100) {\r\n                // Avoid ForceAnnotationOnEachPage CC while opening single response in multiQig\r\n                // Apply ForceAnnotationOnEachPage CC for all QIGs in the whole response when it turned on for at least one QIG\r\n                var markSchemeGroupId = qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                /** taking the cc from cc helper */\r\n                var isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, markSchemeGroupId).toLowerCase() === 'true';\r\n                var isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, markSchemeGroupId).toLowerCase() === 'true';\r\n                /** if slao annotated cc is on and all pages are not annotated OR all pages annotated cc is on\r\n                 *  and all pages are not annotated if both CCs are on, all pages annotated cc has\r\n                 *  the higher priority.\r\n                 */\r\n                if ((!isAllPagesAnnotatedCC && isAllSLAOAnnotatedCC && response.hasAllPagesAnnotated === false)\r\n                    || (isAllPagesAnnotatedCC && response.hasAllPagesAnnotated === false)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllPagesAnnotated);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else {\r\n                    /** if all pages annotated cc is off and if no blocking exceptions are there, show ready to submit button */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.readyToSubmit);\r\n                    response.isSubmitEnabled = true;\r\n                }\r\n            }\r\n            else {\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n        }\r\n        else {\r\n            /** if marking not started show the same */\r\n            this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingNotStarted);\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    return SimualtionWorklistValidator;\r\n}());\r\nmodule.exports = SimualtionWorklistValidator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvd29ya2xpc3R2YWxpZGF0b3JzL3NpbXVsYXRpb253b3JrbGlzdHZhbGlkYXRvci50cz9lYWM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvdXRpbGl0eS9lbnVtcycpO1xyXG5pbXBvcnQgd29ya0xpc3RWYWxpZGF0b3JTY2hlbWEgPSByZXF1aXJlKCcuL3dvcmtsaXN0dmFsaWRhdG9yc2NoZW1hJyk7XHJcbmltcG9ydCBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcclxuaW1wb3J0IHdvcmtsaXN0U3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvd29ya2xpc3Qvd29ya2xpc3RzdG9yZScpO1xyXG5pbXBvcnQgcWlnU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvcWlnc2VsZWN0b3IvcWlnc3RvcmUnKTtcclxuaW1wb3J0IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc0hlbHBlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWMvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWNzaGVscGVyJyk7XHJcbmltcG9ydCBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NOYW1lcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWMvY29uZmlndXJhYmxlY2hhcmFjdGVyaXN0aWNzbmFtZXMnKTtcclxuLyoqXHJcbiAqIFNpbXVsYXRpb24gd29ya2xpc3QgY29uY3JldGUgaW1wbGVtZW50YXRpb24gb2YgV29ya0xpc3RWYWxpZGF0b3JTY2hlbWFcclxuICovXHJcbmNsYXNzIFNpbXVhbHRpb25Xb3JrbGlzdFZhbGlkYXRvciBpbXBsZW1lbnRzIHdvcmtMaXN0VmFsaWRhdG9yU2NoZW1hIHtcclxuICAgIHByaXZhdGUgcmVzcG9uc2VTdGF0dXNlczogSW1tdXRhYmxlLkxpc3Q8ZW51bXMuUmVzcG9uc2VTdGF0dXM+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9naWMgdG8gc2hvdyBtYXJraW5nIHByb2dyZXNzL3N1Ym1pdCBidXR0b24vYmxvY2tpbmcgZXhjZXB0aW9uIHdhcm5pbmdcclxuICAgICAqIEBwYXJhbSByZXNwb25zZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3VibWl0QnV0dG9uVmFsaWRhdGUocmVzcG9uc2U6IFJlc3BvbnNlQmFzZSkge1xyXG5cclxuICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSBJbW11dGFibGUuTGlzdDxlbnVtcy5SZXNwb25zZVN0YXR1cz4oKTtcclxuICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMuY2xlYXIoKTtcclxuICAgICAgICBzd2l0Y2ggKHdvcmtsaXN0U3RvcmUuaW5zdGFuY2UuZ2V0UmVzcG9uc2VNb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuUmVzcG9uc2VNb2RlLm9wZW46XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLm9wZW5SZXNwb25zZVZhbGlkYXRpb24ocmVzcG9uc2UgYXMgU2ltdWxhdGlvbk9wZW5SZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2VTdGF0dXNlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wZW4gc2ltdWxhdGlvbiB3b3JrbGlzdCB2YWxpZGF0aW9uIGZvciBtYXJraW5nIHByb2dyZXNzL3N1Ym1pdCBidXR0b25cclxuICAgICAqIEBwYXJhbSByZXNwb25zZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9wZW5SZXNwb25zZVZhbGlkYXRpb24ocmVzcG9uc2U6IFNpbXVsYXRpb25PcGVuUmVzcG9uc2UpIHtcclxuICAgICAgICByZXNwb25zZS5pc1N1Ym1pdEVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAvKiogaWYgdGhlIG1hcmtpbmcgaGFzIHN0YXJ0ZWQgKi9cclxuICAgICAgICBpZiAocmVzcG9uc2UubWFya2luZ1Byb2dyZXNzID4gMCkge1xyXG4gICAgICAgICAgICAvKiogaWYgdGhlIG1hcmtpbmcgaXMgY29tcGxldGVkICovXHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5tYXJraW5nUHJvZ3Jlc3MgPT09IDEwMCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEF2b2lkIEZvcmNlQW5ub3RhdGlvbk9uRWFjaFBhZ2UgQ0Mgd2hpbGUgb3BlbmluZyBzaW5nbGUgcmVzcG9uc2UgaW4gbXVsdGlRaWdcclxuICAgICAgICAgICAgICAgIC8vIEFwcGx5IEZvcmNlQW5ub3RhdGlvbk9uRWFjaFBhZ2UgQ0MgZm9yIGFsbCBRSUdzIGluIHRoZSB3aG9sZSByZXNwb25zZSB3aGVuIGl0IHR1cm5lZCBvbiBmb3IgYXQgbGVhc3Qgb25lIFFJR1xyXG4gICAgICAgICAgICAgICAgbGV0IG1hcmtTY2hlbWVHcm91cElkOiBudW1iZXIgPVxyXG4gICAgICAgICAgICAgICAgICAgIHFpZ1N0b3JlLmluc3RhbmNlLmdldFNlbGVjdGVkUUlHRm9yVGhlTG9nZ2VkSW5Vc2VyLm1hcmtTY2hlbWVHcm91cElkO1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKiB0YWtpbmcgdGhlIGNjIGZyb20gY2MgaGVscGVyICovXHJcbiAgICAgICAgICAgICAgICBsZXQgaXNBbGxQYWdlc0Fubm90YXRlZENDID0gY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzSGVscGVyLmdldENoYXJhY3RlcmlzdGljVmFsdWUoXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzTmFtZXMuRm9yY2VBbm5vdGF0aW9uT25FYWNoUGFnZSwgbWFya1NjaGVtZUdyb3VwSWQpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcclxuICAgICAgICAgICAgICAgIGxldCBpc0FsbFNMQU9Bbm5vdGF0ZWRDQyA9IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc0hlbHBlci5nZXRDaGFyYWN0ZXJpc3RpY1ZhbHVlKFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzLlNMQU9Gb3JjZWRBbm5vdGF0aW9ucywgbWFya1NjaGVtZUdyb3VwSWQpLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJztcclxuICAgICAgICAgICAgICAgIC8qKiBpZiBzbGFvIGFubm90YXRlZCBjYyBpcyBvbiBhbmQgYWxsIHBhZ2VzIGFyZSBub3QgYW5ub3RhdGVkIE9SIGFsbCBwYWdlcyBhbm5vdGF0ZWQgY2MgaXMgb25cclxuICAgICAgICAgICAgICAgICAqICBhbmQgYWxsIHBhZ2VzIGFyZSBub3QgYW5ub3RhdGVkIGlmIGJvdGggQ0NzIGFyZSBvbiwgYWxsIHBhZ2VzIGFubm90YXRlZCBjYyBoYXNcclxuICAgICAgICAgICAgICAgICAqICB0aGUgaGlnaGVyIHByaW9yaXR5LlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBpZiAoKCFpc0FsbFBhZ2VzQW5ub3RhdGVkQ0MgJiYgaXNBbGxTTEFPQW5ub3RhdGVkQ0MgJiYgcmVzcG9uc2UuaGFzQWxsUGFnZXNBbm5vdGF0ZWQgPT09IGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHx8IChpc0FsbFBhZ2VzQW5ub3RhdGVkQ0MgJiYgcmVzcG9uc2UuaGFzQWxsUGFnZXNBbm5vdGF0ZWQgPT09IGZhbHNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLm5vdEFsbFBhZ2VzQW5ub3RhdGVkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLnJlc3BvbnNlU3RhdHVzZXMucHVzaChlbnVtcy5SZXNwb25zZVN0YXR1cy5tYXJraW5nSW5Qcm9ncmVzcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qKiBpZiBhbGwgcGFnZXMgYW5ub3RhdGVkIGNjIGlzIG9mZiBhbmQgaWYgbm8gYmxvY2tpbmcgZXhjZXB0aW9ucyBhcmUgdGhlcmUsIHNob3cgcmVhZHkgdG8gc3VibWl0IGJ1dHRvbiAqL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLnJlYWR5VG9TdWJtaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmlzU3VibWl0RW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLnJlc3BvbnNlU3RhdHVzZXMucHVzaChlbnVtcy5SZXNwb25zZVN0YXR1cy5tYXJraW5nSW5Qcm9ncmVzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKiogaWYgbWFya2luZyBub3Qgc3RhcnRlZCBzaG93IHRoZSBzYW1lICovXHJcbiAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLm1hcmtpbmdOb3RTdGFydGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlU3RhdHVzZXM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0ID0gU2ltdWFsdGlvbldvcmtsaXN0VmFsaWRhdG9yO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL3V0aWxpdHkvd29ya2xpc3R2YWxpZGF0b3JzL3NpbXVsYXRpb253b3JrbGlzdHZhbGlkYXRvci50cyJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFBQTtBQStEQTtBQTVEQTs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 424:
/* no static exports found */
/* all exports used */
/*!****************************************************************************!*\
  !*** ./src/utility/worklistvalidators/standardisationworklistvalidator.ts ***!
  \****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../components/utility/enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../components/utility/ecoursework/ecourseworkhelper */ 238);\r\n/**\r\n * Standardisation worklist concrete implementation of WorkListValidatorSchema\r\n */\r\nvar StandardisationWorklistValidator = /** @class */ (function () {\r\n    function StandardisationWorklistValidator() {\r\n    }\r\n    /**\r\n     * Logic to show marking progress/submit button/blocking exception warning\r\n     * @param response\r\n     */\r\n    StandardisationWorklistValidator.prototype.submitButtonValidate = function (response) {\r\n        this.responseStatuses = Immutable.List();\r\n        this.responseStatuses.clear();\r\n        switch (worklistStore.instance.getResponseMode) {\r\n            case enums.ResponseMode.open:\r\n                this.responseStatuses = this.openResponseValidation(response);\r\n                break;\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    /**\r\n     * Open Standardisation worklist validation for marking progress/submit button\r\n     * @param response\r\n     */\r\n    StandardisationWorklistValidator.prototype.openResponseValidation = function (response) {\r\n        response.isSubmitEnabled = false;\r\n        /** if the marking has started */\r\n        if (response.markingProgress > 0) {\r\n            /** if the marking is completed */\r\n            if (response.markingProgress === 100) {\r\n                // Avoid ForceAnnotationOnEachPage CC while opening single response in multiQig\r\n                // Apply ForceAnnotationOnEachPage CC for all QIGs in the whole response when it turned on for at least one QIG\r\n                var markSchemeGroupId = qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId;\r\n                /** taking the cc from cc helper */\r\n                var isAllPagesAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                var isAllSLAOAnnotatedCC = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SLAOForcedAnnotations, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n                /** if slao annotated cc is on and all pages are not annotated OR all pages annotated cc is on\r\n                 *  and all pages are not annotated if both CCs are on, all pages annotated cc has\r\n                 *  the higher priority.\r\n                 */\r\n                if ((!isAllPagesAnnotatedCC && isAllSLAOAnnotatedCC && response.hasAllPagesAnnotated === false)\r\n                    || (isAllPagesAnnotatedCC && response.hasAllPagesAnnotated === false)) {\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllPagesAnnotated);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                }\r\n                else if (eCourseworkHelper.isECourseworkComponent && !response.allFilesViewed) {\r\n                    /* For an ecoursework component, enable submit button only if all files are viewed in the response.\r\n                       If not all files are viewed then the response view in the worklist will be shown in amber color along with\r\n                       marking progress indicator.\r\n                    */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.hasException);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.notAllFilesViewed);\r\n                }\r\n                else {\r\n                    /** if all pages annotated cc is off show ready to submit button */\r\n                    this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.readyToSubmit);\r\n                    response.isSubmitEnabled = true;\r\n                }\r\n            }\r\n            else {\r\n                this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingInProgress);\r\n            }\r\n        }\r\n        else {\r\n            /** if marking not started show the same */\r\n            this.responseStatuses = this.responseStatuses.push(enums.ResponseStatus.markingNotStarted);\r\n        }\r\n        return this.responseStatuses;\r\n    };\r\n    return StandardisationWorklistValidator;\r\n}());\r\nmodule.exports = StandardisationWorklistValidator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvd29ya2xpc3R2YWxpZGF0b3JzL3N0YW5kYXJkaXNhdGlvbndvcmtsaXN0dmFsaWRhdG9yLnRzPzNiZjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCB3b3JrTGlzdFZhbGlkYXRvclNjaGVtYSA9IHJlcXVpcmUoJy4vd29ya2xpc3R2YWxpZGF0b3JzY2hlbWEnKTtcclxuaW1wb3J0IEltbXV0YWJsZSA9IHJlcXVpcmUoJ2ltbXV0YWJsZScpO1xyXG5pbXBvcnQgd29ya2xpc3RTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy93b3JrbGlzdC93b3JrbGlzdHN0b3JlJyk7XHJcbmltcG9ydCBxaWdTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy9xaWdzZWxlY3Rvci9xaWdzdG9yZScpO1xyXG5pbXBvcnQgY29uZmlndXJhYmxlQ2hhcmFjdGVyaXN0aWNzSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpYy9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpY3NoZWxwZXInKTtcclxuaW1wb3J0IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpYy9jb25maWd1cmFibGVjaGFyYWN0ZXJpc3RpY3NuYW1lcycpO1xyXG5pbXBvcnQgZUNvdXJzZXdvcmtIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL3V0aWxpdHkvZWNvdXJzZXdvcmsvZWNvdXJzZXdvcmtoZWxwZXInKTtcclxuLyoqXHJcbiAqIFN0YW5kYXJkaXNhdGlvbiB3b3JrbGlzdCBjb25jcmV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBXb3JrTGlzdFZhbGlkYXRvclNjaGVtYVxyXG4gKi9cclxuY2xhc3MgU3RhbmRhcmRpc2F0aW9uV29ya2xpc3RWYWxpZGF0b3IgaW1wbGVtZW50cyB3b3JrTGlzdFZhbGlkYXRvclNjaGVtYSB7XHJcbiAgICBwcml2YXRlIHJlc3BvbnNlU3RhdHVzZXM6IEltbXV0YWJsZS5MaXN0PGVudW1zLlJlc3BvbnNlU3RhdHVzPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExvZ2ljIHRvIHNob3cgbWFya2luZyBwcm9ncmVzcy9zdWJtaXQgYnV0dG9uL2Jsb2NraW5nIGV4Y2VwdGlvbiB3YXJuaW5nXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN1Ym1pdEJ1dHRvblZhbGlkYXRlKHJlc3BvbnNlOiBSZXNwb25zZUJhc2UpIHtcclxuXHJcbiAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gSW1tdXRhYmxlLkxpc3Q8ZW51bXMuUmVzcG9uc2VTdGF0dXM+KCk7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzLmNsZWFyKCk7XHJcbiAgICAgICAgc3dpdGNoICh3b3JrbGlzdFN0b3JlLmluc3RhbmNlLmdldFJlc3BvbnNlTW9kZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLlJlc3BvbnNlTW9kZS5vcGVuOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gdGhpcy5vcGVuUmVzcG9uc2VWYWxpZGF0aW9uKHJlc3BvbnNlIGFzIFN0YW5kYXJkaXNhdGlvbk9wZW5SZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2VTdGF0dXNlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wZW4gU3RhbmRhcmRpc2F0aW9uIHdvcmtsaXN0IHZhbGlkYXRpb24gZm9yIG1hcmtpbmcgcHJvZ3Jlc3Mvc3VibWl0IGJ1dHRvblxyXG4gICAgICogQHBhcmFtIHJlc3BvbnNlXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb3BlblJlc3BvbnNlVmFsaWRhdGlvbihyZXNwb25zZTogU3RhbmRhcmRpc2F0aW9uT3BlblJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmVzcG9uc2UuaXNTdWJtaXRFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgLyoqIGlmIHRoZSBtYXJraW5nIGhhcyBzdGFydGVkICovXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLm1hcmtpbmdQcm9ncmVzcyA+IDApIHtcclxuICAgICAgICAgICAgLyoqIGlmIHRoZSBtYXJraW5nIGlzIGNvbXBsZXRlZCAqL1xyXG4gICAgICAgICAgICBpZiAocmVzcG9uc2UubWFya2luZ1Byb2dyZXNzID09PSAxMDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBGb3JjZUFubm90YXRpb25PbkVhY2hQYWdlIENDIHdoaWxlIG9wZW5pbmcgc2luZ2xlIHJlc3BvbnNlIGluIG11bHRpUWlnXHJcbiAgICAgICAgICAgICAgICAvLyBBcHBseSBGb3JjZUFubm90YXRpb25PbkVhY2hQYWdlIENDIGZvciBhbGwgUUlHcyBpbiB0aGUgd2hvbGUgcmVzcG9uc2Ugd2hlbiBpdCB0dXJuZWQgb24gZm9yIGF0IGxlYXN0IG9uZSBRSUdcclxuICAgICAgICAgICAgICAgIGxldCBtYXJrU2NoZW1lR3JvdXBJZDogbnVtYmVyID1cclxuICAgICAgICAgICAgICAgICAgICBxaWdTdG9yZS5pbnN0YW5jZS5nZXRTZWxlY3RlZFFJR0ZvclRoZUxvZ2dlZEluVXNlci5tYXJrU2NoZW1lR3JvdXBJZDtcclxuXHJcbiAgICAgICAgICAgICAgICAvKiogdGFraW5nIHRoZSBjYyBmcm9tIGNjIGhlbHBlciAqL1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzQWxsUGFnZXNBbm5vdGF0ZWRDQyA9IGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc0hlbHBlci5nZXRDaGFyYWN0ZXJpc3RpY1ZhbHVlKFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZUNoYXJhY3RlcmlzdGljc05hbWVzLkZvcmNlQW5ub3RhdGlvbk9uRWFjaFBhZ2UsIG1hcmtTY2hlbWVHcm91cElkKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNBbGxTTEFPQW5ub3RhdGVkQ0MgPSBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NIZWxwZXIuZ2V0Q2hhcmFjdGVyaXN0aWNWYWx1ZShcclxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGVDaGFyYWN0ZXJpc3RpY3NOYW1lcy5TTEFPRm9yY2VkQW5ub3RhdGlvbnMsIG1hcmtTY2hlbWVHcm91cElkKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAvKiogaWYgc2xhbyBhbm5vdGF0ZWQgY2MgaXMgb24gYW5kIGFsbCBwYWdlcyBhcmUgbm90IGFubm90YXRlZCBPUiBhbGwgcGFnZXMgYW5ub3RhdGVkIGNjIGlzIG9uXHJcbiAgICAgICAgICAgICAgICAgKiAgYW5kIGFsbCBwYWdlcyBhcmUgbm90IGFubm90YXRlZCBpZiBib3RoIENDcyBhcmUgb24sIGFsbCBwYWdlcyBhbm5vdGF0ZWQgY2MgaGFzXHJcbiAgICAgICAgICAgICAgICAgKiAgdGhlIGhpZ2hlciBwcmlvcml0eS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKCghaXNBbGxQYWdlc0Fubm90YXRlZENDICYmIGlzQWxsU0xBT0Fubm90YXRlZENDICYmIHJlc3BvbnNlLmhhc0FsbFBhZ2VzQW5ub3RhdGVkID09PSBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICB8fCAoaXNBbGxQYWdlc0Fubm90YXRlZENDICYmIHJlc3BvbnNlLmhhc0FsbFBhZ2VzQW5ub3RhdGVkID09PSBmYWxzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLnJlc3BvbnNlU3RhdHVzZXMucHVzaChlbnVtcy5SZXNwb25zZVN0YXR1cy5ub3RBbGxQYWdlc0Fubm90YXRlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gdGhpcy5yZXNwb25zZVN0YXR1c2VzLnB1c2goZW51bXMuUmVzcG9uc2VTdGF0dXMubWFya2luZ0luUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlQ291cnNld29ya0hlbHBlci5pc0VDb3Vyc2V3b3JrQ29tcG9uZW50ICYmICFyZXNwb25zZS5hbGxGaWxlc1ZpZXdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qIEZvciBhbiBlY291cnNld29yayBjb21wb25lbnQsIGVuYWJsZSBzdWJtaXQgYnV0dG9uIG9ubHkgaWYgYWxsIGZpbGVzIGFyZSB2aWV3ZWQgaW4gdGhlIHJlc3BvbnNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgIElmIG5vdCBhbGwgZmlsZXMgYXJlIHZpZXdlZCB0aGVuIHRoZSByZXNwb25zZSB2aWV3IGluIHRoZSB3b3JrbGlzdCB3aWxsIGJlIHNob3duIGluIGFtYmVyIGNvbG9yIGFsb25nIHdpdGhcclxuICAgICAgICAgICAgICAgICAgICAgICBtYXJraW5nIHByb2dyZXNzIGluZGljYXRvci5cclxuICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLmhhc0V4Y2VwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNwb25zZVN0YXR1c2VzID0gdGhpcy5yZXNwb25zZVN0YXR1c2VzLnB1c2goZW51bXMuUmVzcG9uc2VTdGF0dXMubWFya2luZ0luUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLm5vdEFsbEZpbGVzVmlld2VkKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLyoqIGlmIGFsbCBwYWdlcyBhbm5vdGF0ZWQgY2MgaXMgb2ZmIHNob3cgcmVhZHkgdG8gc3VibWl0IGJ1dHRvbiAqL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLnJlYWR5VG9TdWJtaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmlzU3VibWl0RW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BvbnNlU3RhdHVzZXMgPSB0aGlzLnJlc3BvbnNlU3RhdHVzZXMucHVzaChlbnVtcy5SZXNwb25zZVN0YXR1cy5tYXJraW5nSW5Qcm9ncmVzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKiogaWYgbWFya2luZyBub3Qgc3RhcnRlZCBzaG93IHRoZSBzYW1lICovXHJcbiAgICAgICAgICAgIHRoaXMucmVzcG9uc2VTdGF0dXNlcyA9IHRoaXMucmVzcG9uc2VTdGF0dXNlcy5wdXNoKGVudW1zLlJlc3BvbnNlU3RhdHVzLm1hcmtpbmdOb3RTdGFydGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3BvbnNlU3RhdHVzZXM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0ID0gU3RhbmRhcmRpc2F0aW9uV29ya2xpc3RWYWxpZGF0b3I7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS93b3JrbGlzdHZhbGlkYXRvcnMvc3RhbmRhcmRpc2F0aW9ud29ya2xpc3R2YWxpZGF0b3IudHMiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFBQTtBQXVFQTtBQXBFQTs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 436:
/* no static exports found */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/components/base/eventmanager/hammerhandler.ts ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar Hammer = __webpack_require__(/*! hammerjs */ 44);\r\nvar eventTypes = __webpack_require__(/*! ./eventtypes */ 306);\r\nvar HammerHandler = /** @class */ (function () {\r\n    function HammerHandler() {\r\n        var _this = this;\r\n        /**\r\n         * initialise event handlers\r\n         */\r\n        this.initEvents = function (element, touchAction, domEvents) {\r\n            if (touchAction && domEvents) {\r\n                _this.hm = new Hammer(element, {\r\n                    touchAction: touchAction,\r\n                    domEvents: domEvents\r\n                });\r\n            }\r\n            else {\r\n                _this.hm = new Hammer(element);\r\n            }\r\n        };\r\n        /**\r\n         * This method is used to hook various event types\r\n         * eventType: string - using eventTypes string constants\r\n         * handler : callback function for event handler\r\n         */\r\n        this.on = function (eventType, handler) {\r\n            switch (eventType) {\r\n                case eventTypes.PAN:\r\n                case eventTypes.PAN_START:\r\n                case eventTypes.PAN_END:\r\n                case eventTypes.PAN_MOVE:\r\n                case eventTypes.PAN_CANCEL:\r\n                case eventTypes.PAN_LEFT:\r\n                case eventTypes.PAN_RIGHT:\r\n                case eventTypes.PAN_UP:\r\n                case eventTypes.PAN_DOWN:\r\n                case eventTypes.TAP:\r\n                case eventTypes.PRESS:\r\n                case eventTypes.PRESS_UP:\r\n                case eventTypes.SWIPE_LEFT:\r\n                case eventTypes.SWIPE_RIGHT:\r\n                case eventTypes.SWIPE_UP:\r\n                case eventTypes.SWIPE_DOWN:\r\n                case eventTypes.SWIPE:\r\n                case eventTypes.PINCH:\r\n                case eventTypes.PINCH_START:\r\n                case eventTypes.PINCH_IN:\r\n                case eventTypes.PINCH_OUT:\r\n                case eventTypes.PINCH_END:\r\n                case eventTypes.PINCH_CANCEL:\r\n                    _this.hm.on(eventType, function (evnt) {\r\n                        handler(evnt);\r\n                    });\r\n                    break;\r\n                case eventTypes.INPUT:\r\n                    _this.hm.on('hammer.input', function (evnt) {\r\n                        handler(evnt);\r\n                    });\r\n                    break;\r\n            }\r\n        };\r\n        /**\r\n         * This method is used to remove letious event types\r\n         * eventType: string - using eventTypes string constants\r\n         * handler : callback function for event handler\r\n         */\r\n        this.off = function (eventType, handler) {\r\n            switch (eventType) {\r\n                case eventTypes.PAN:\r\n                case eventTypes.PAN_START:\r\n                case eventTypes.PAN_END:\r\n                case eventTypes.PAN_MOVE:\r\n                case eventTypes.PAN_CANCEL:\r\n                case eventTypes.PAN_LEFT:\r\n                case eventTypes.PAN_RIGHT:\r\n                case eventTypes.PAN_UP:\r\n                case eventTypes.PAN_DOWN:\r\n                case eventTypes.TAP:\r\n                case eventTypes.PRESS:\r\n                case eventTypes.PRESS_UP:\r\n                case eventTypes.SWIPE_LEFT:\r\n                case eventTypes.SWIPE_RIGHT:\r\n                case eventTypes.SWIPE_UP:\r\n                case eventTypes.SWIPE_DOWN:\r\n                case eventTypes.SWIPE:\r\n                case eventTypes.PINCH:\r\n                case eventTypes.PINCH_START:\r\n                case eventTypes.PINCH_IN:\r\n                case eventTypes.PINCH_OUT:\r\n                case eventTypes.PINCH_END:\r\n                case eventTypes.PINCH_CANCEL:\r\n                    _this.hm.off(eventType, function (evnt) {\r\n                        handler(evnt);\r\n                    });\r\n                    break;\r\n                case eventTypes.INPUT:\r\n                    _this.hm.off('hammer.input', function (evnt) {\r\n                        handler(evnt);\r\n                    });\r\n                    break;\r\n            }\r\n        };\r\n        /* tslint:disable:no-reserved-keywords */\r\n        /**\r\n         * Add hammer recognizers with options\r\n         */\r\n        this.get = function (eventType, options) {\r\n            _this.hm.get(eventType).set(options);\r\n        };\r\n        /* tslint:disable:no-reserved-keywords */\r\n        /**\r\n         * stops hammer manager\r\n         */\r\n        this.stop = function (force) {\r\n            if (_this.hm) {\r\n                _this.hm.stop(force);\r\n            }\r\n        };\r\n        /**\r\n         * unsubscribing hammer touch events and handlers\r\n         */\r\n        this.destroy = function () {\r\n            if (_this.hm) {\r\n                _this.hm.stop(true);\r\n                _this.hm.destroy();\r\n            }\r\n            _this.hm = null;\r\n        };\r\n        /**\r\n         * stop propagation\r\n         */\r\n        this.stopPropagation = function (event) {\r\n            event.srcEvent.stopPropagation();\r\n        };\r\n    }\r\n    Object.defineProperty(HammerHandler.prototype, \"isInitialized\", {\r\n        /**\r\n         * check whether the hammer is initialized or not\r\n         */\r\n        get: function () {\r\n            if (this.hm && this.hm !== null) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return HammerHandler;\r\n}());\r\nmodule.exports = HammerHandler;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 445:
/* no static exports found */
/* all exports used */
/*!*******************************************************!*\
  !*** ./src/components/utility/table/tablewrapper.tsx ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar _this = this;\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\n/* tslint:disable:no-reserved-keywords */\r\n/* tslint:disable:variable-name */\r\nvar TableControl = function (props) {\r\n    var header = (props.tableHeader) ? React.createElement(\"thead\", null, props.tableHeader) : React.createElement(\"thead\", null);\r\n    var body = (props.tableBody) ? React.createElement(\"tbody\", { id: 'table_body' }, props.tableBody) : React.createElement(\"tbody\", null);\r\n    var tableStyle = {};\r\n    tableStyle = {\r\n        width: '100%',\r\n    };\r\n    return (React.createElement(\"table\", { style: tableStyle, cellPadding: '0', cellSpacing: '0', id: props.id, key: 'key_' + props.id, className: props.class },\r\n        header,\r\n        body));\r\n};\r\n/* tslint:disable:variable-name */\r\nvar TableRow = function (props) {\r\n    var onClickHandler = function (event) {\r\n        if (props.onClick) {\r\n            props.onClick(event);\r\n        }\r\n    };\r\n    var onMouseClickHandler = function (event, rowId) {\r\n        if (props.onMouseDown) {\r\n            props.onMouseDown(rowId);\r\n        }\r\n    };\r\n    var onMouseUpClickHandler = function (event, rowId) {\r\n        if (props.onMouseUp) {\r\n            props.onMouseUp(rowId);\r\n        }\r\n    };\r\n    var onTouchStartHandler = function (event, rowId) {\r\n        if (props.onTouchStart) {\r\n            props.onTouchStart(rowId);\r\n        }\r\n    };\r\n    var additionalElement = (props.additionalElement) ? props.additionalElement : null;\r\n    return (React.createElement(\"tr\", { id: props.id, className: props.class, onClick: onClickHandler, onMouseDown: onMouseClickHandler.bind(_this, props.rowId), onMouseUp: onMouseUpClickHandler.bind(_this, props.rowId), onTouchStart: onTouchStartHandler.bind(_this, props.rowId) },\r\n        props.tableCells,\r\n        additionalElement));\r\n};\r\n/* tslint:disable:variable-name */\r\nvar TableBodyCell = function (props) {\r\n    var additionalElement = (props.additionalElement) ? props.additionalElement : null;\r\n    return (React.createElement(\"td\", { className: props.class, id: props.id },\r\n        React.createElement(\"div\", { className: 'cell-data' },\r\n            props.cellElement,\r\n            props.additionalElement)));\r\n};\r\n/* tslint:disable:variable-name */\r\nvar TableHeaderCell = function (props) {\r\n    var onClickHandler = function (event) {\r\n        if (props.onClick && props.comparerName && props.isSortable) {\r\n            props.onClick(props.comparerName, props.sortDirection);\r\n        }\r\n    };\r\n    var additionalElement = (props.additionalElement) ? props.additionalElement : null;\r\n    return (React.createElement(\"th\", { className: props.class, id: props.id },\r\n        React.createElement(\"span\", { className: 'visually-hidden' }, \" visually hidden text \"),\r\n        React.createElement(\"div\", { className: classNames('header-data', { 'hand': props.onClick && props.comparerName && props.isSortable }), onClick: onClickHandler },\r\n            props.cellElement,\r\n            additionalElement)));\r\n};\r\n/**\r\n * Helper fucntions for the table statless components\r\n */\r\nvar TableHelper = /** @class */ (function () {\r\n    function TableHelper() {\r\n    }\r\n    /**\r\n     * This method will call callback function for mouse up click of row.\r\n     */\r\n    TableHelper.mouseUpClick = function (props, rowId) {\r\n        if (props.onMouseUp) {\r\n            props.onMouseUp(rowId);\r\n        }\r\n    };\r\n    /**\r\n     * This method will call callback function for touch start of row.\r\n     */\r\n    TableHelper.touchStart = function (props, rowId) {\r\n        if (props.onTouchStart) {\r\n            props.onTouchStart(rowId);\r\n        }\r\n    };\r\n    /**\r\n     * returns the table row (tr) collection based on the given list of row data\r\n     * @param rows - collection of rows\r\n     * @param isHeader - whethere the row is a header row or not\r\n     */\r\n    TableHelper.getRows = function (rows, isHeader, props) {\r\n        var tableId = props.id;\r\n        var that = this;\r\n        var rowSeq = rows.keySeq();\r\n        var seqIndex = 0;\r\n        //Creating table rows - tr\r\n        var tableElement = rows.map(function (tableRow) {\r\n            var rowSeqKey = rowSeq.get(seqIndex++);\r\n            var additionalRowElement = tableRow.getAdditionalElement();\r\n            var cellIndex = 0;\r\n            //Creating td/th elements\r\n            var rowElement = tableRow.getCells().map(function (gridCell) {\r\n                var gridCellElement = gridCell.columnElement;\r\n                var cellAdditionalElement = gridCell.getAdditionalElement();\r\n                cellIndex++;\r\n                var style = gridCell.getCellStyle();\r\n                style = (style) ? style : '';\r\n                if (gridCell.isHidden !== true) {\r\n                    if (isHeader === true) {\r\n                        return (React.createElement(TableHeaderCell, { cellElement: gridCellElement, class: style, additionalElement: cellAdditionalElement, key: tableId + '_th_' + rowSeqKey + '_' + cellIndex, id: 'th_' + rowSeqKey + '_' + cellIndex, onClick: props.onSortClick, comparerName: gridCell.comparerName, sortDirection: gridCell.sortDirection, isSortable: gridCell.isSortable, renderedOn: props.renderedOn }));\r\n                    }\r\n                    else {\r\n                        return (React.createElement(TableBodyCell, { cellElement: gridCellElement, class: style, additionalElement: cellAdditionalElement, key: tableId + '_td_' + rowSeqKey + '_' + cellIndex, id: 'td_' + rowSeqKey + '_' + cellIndex, renderedOn: props.renderedOn }));\r\n                    }\r\n                }\r\n            });\r\n            if (!props.avoidLastColumn) {\r\n                if (isHeader) {\r\n                    rowElement.push(React.createElement(\"th\", { className: 'last-cell-header', key: tableId + '_th_' + rowSeqKey + '_empty', id: 'th_' + rowSeqKey + '_empty' },\r\n                        React.createElement(\"span\", { className: 'visually-hidden' }, \" visually hidden text \"),\r\n                        React.createElement(\"div\", { className: 'header-data' })));\r\n                }\r\n                else {\r\n                    rowElement.push(React.createElement(\"td\", { className: 'last-cell', key: tableId + '_td_' + rowSeqKey + '_empty', id: 'td_' + rowSeqKey + '_empty' },\r\n                        React.createElement(\"div\", { className: 'cell-data' })));\r\n                }\r\n            }\r\n            return (React.createElement(TableRow, { class: classNames((_a = {}, _a[tableRow.getRowStyle()] = true, _a), {\r\n                    'draggable': !props.isDraggableRow ?\r\n                        (props.selectedRowIdToDrag ? tableRow.getRowId() === props.selectedRowIdToDrag : false) : false\r\n                }), title: tableRow.getRowTitle(), tableCells: rowElement, key: tableId + '_tableRow_Key_' + rowSeqKey, id: 'tableRow_' + rowSeqKey, additionalElement: additionalRowElement, onClick: that.handleClick.bind(that, props, tableRow.getRowId()), renderedOn: props.renderedOn, onMouseDown: that.mouseDownClick.bind(that, props, tableRow.getRowId()), onMouseUp: that.mouseUpClick.bind(that, props, tableRow.getRowId()), onTouchStart: that.touchStart.bind(that, props, tableRow.getRowId()) }));\r\n            var _a;\r\n        });\r\n        return tableElement;\r\n    };\r\n    /**\r\n     * This method will call callback function\r\n     */\r\n    TableHelper.handleClick = function (props, rowId) {\r\n        if (props.onRowClick) {\r\n            props.onRowClick(rowId);\r\n        }\r\n    };\r\n    /**\r\n     * This method will call callback function for mouse down click of row.\r\n     */\r\n    TableHelper.mouseDownClick = function (props, rowId) {\r\n        if (props.onMouseDown) {\r\n            props.onMouseDown(rowId);\r\n        }\r\n    };\r\n    return TableHelper;\r\n}());\r\n/**\r\n * Represents the table Component\r\n */\r\nvar TableWrapper = function (props) {\r\n    var headerRows;\r\n    var bodyRows;\r\n    if (props.tableHeaderRows) {\r\n        headerRows = TableHelper.getRows(props.tableHeaderRows, true, props);\r\n    }\r\n    if (props.tableBodyRows) {\r\n        bodyRows = TableHelper.getRows(props.tableBodyRows, false, props);\r\n    }\r\n    if (headerRows || bodyRows) {\r\n        return (React.createElement(TableControl, { tableHeader: headerRows, tableBody: bodyRows, class: props.gridStyle, id: props.id, key: 'key_' + props.id, renderedOn: props.renderedOn }));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\nmodule.exports = TableWrapper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 449:
/* no static exports found */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/components/utility/grid/worklistgridcolumns.json ***!
  \**************************************************************/
/***/ (function(module, exports) {

eval("module.exports = {\"definitions\":{\"ResponseIdColumnOpen\":{\"$id\":\"1\",\"GridColumn\":\"ResponseIdColumn\",\"ColumnHeader\":\"Response\",\"ComparerName\":\"responseIdComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"displayId\":\"displayId\",\"rigOrder\":\"rigOrder\",\"esDisplayId\":\"esDisplayId\",\"selectedLanguage\":\"selectedLanguage\",\"updatedDate\":\"updatedDate\"}},\"ResponseIdColumnClosed\":{\"$id\":\"2\",\"GridColumn\":\"ResponseIdColumn\",\"ColumnHeader\":\"Response\",\"ComparerName\":\"responseIdComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"displayId\":\"displayId\",\"rigOrder\":\"rigOrder\",\"esDisplayId\":\"esDisplayId\",\"submittedDate\":\"submittedDate\",\"selectedLanguage\":\"selectedLanguage\"}},\"LastUpdatedColumnOpen\":{\"$id\":\"14\",\"GridColumn\":\"LastUpdatedColumn\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.last-updated\",\"ComparerName\":\"updatedDateComparer\",\"CssClass\":\"col-modified\",\"Sortable\":\"true\",\"ComponentProps\":{\"updatedDate\":\"updatedDate\",\"dateType\":\"dateType\",\"isTileView\":\"isTileView\"}},\"LastUpdatedColumnPending\":{\"$id\":\"18\",\"GridColumn\":\"LastUpdatedColumn\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.last-updated\",\"ComparerName\":\"lastUpdatedDateComparer\",\"CssClass\":\"col-modified\",\"Sortable\":\"true\",\"ComponentProps\":{\"updatedDate\":\"lastUpdatedDate\",\"dateType\":\"dateType\",\"isTileView\":\"isTileView\"}},\"LastUpdatedColumnClosed\":{\"$id\":\"19\",\"GridColumn\":\"LastUpdatedColumn\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.submitted\",\"CssClass\":\"col-modified\",\"ComparerName\":\"submittedDateComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"submittedDate\":\"submittedDate\",\"dateType\":\"dateType\",\"isTileView\":\"isTileView\"}},\"AllocatedDateColumnOpen\":{\"$id\":\"15\",\"GridColumn\":\"AllocatedDate\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.allocated\",\"CssClass\":\"col-allocated\",\"ComparerName\":\"allocatedDateComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"allocatedDate\":\"allocatedDate\",\"dateType\":\"dateType\",\"showAllocatedDate\":\"showAllocatedDate\"}},\"ResponseIdColumnPending\":{\"$id\":\"3\",\"GridColumn\":\"ResponseIdColumn\",\"ColumnHeader\":\"Response\",\"ComparerName\":\"responseIdComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"displayId\":\"displayId\",\"rigOrder\":\"rigOrder\",\"esDisplayId\":\"esDisplayId\",\"updatedDate\":\"lastUpdatedDate\",\"selectedLanguage\":\"selectedLanguage\"}},\"TotalMark\":{\"$id\":\"4\",\"GridColumn\":\"TotalMark\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.total-mark\",\"CssClass\":\"col-mark-obt\",\"ComparerName\":\"markComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"hasNumericMark\":\"hasNumericMark\",\"maximumMark\":\"maximumMark\",\"totalMarkValue\":\"totalMarkValue\",\"markingProgress\":\"markingProgress\",\"selectedLanguage\":\"selectedLanguage\"}},\"AllocatedDate\":{\"$id\":\"5\",\"GridColumn\":\"AllocatedDate\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.allocated\",\"CssClass\":\"col-allocated\",\"ComparerName\":\"allocatedDateComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"allocatedDate\":\"allocatedDate\",\"hasAdditionalObjects\":\"hasAdditionalObjects\",\"hasAllPagesAnnotated\":\"hasAllPagesAnnotated\",\"markingProgress\":\"markingProgress\",\"selectedLanguage\":\"selectedLanguage\"}},\"LinkedMessageIndicator\":{\"$id\":\"6\",\"GridColumn\":\"LinkedMessageIndicator\",\"ColumnHeader\":\"\",\"CssClass\":\"col-message\",\"ComponentProps\":{\"hasMessages\":\"hasMessages\",\"unreadMessagesCount\":\"unreadMessagesCount\",\"displayId\":\"displayId\",\"isTeamManagementMode\":\"isTeamManagementMode\"}},\"SLAOIndicator\":{\"$id\":\"17\",\"GridColumn\":\"SLAOIndicator\",\"ColumnHeader\":\"\",\"CssClass\":\"col-slao\",\"ComponentProps\":{\"hasAdditionalObjects\":\"hasAdditionalObjects\",\"hasAllPagesAnnotated\":\"hasAllPagesAnnotated\",\"markingProgress\":\"markingProgress\"}},\"LinkedExceptionIndicator\":{\"$id\":\"7\",\"GridColumn\":\"LinkedExceptionIndicator\",\"ColumnHeader\":\"\",\"CssClass\":\"col-notification\",\"ComponentProps\":{\"hasExceptions\":\"hasExceptions\",\"hasZoningExceptions\":\"hasZoningExceptions\",\"isZoningExceptionRaisedInSameScript\":\"isZoningExceptionRaisedInSameScript\",\"hasBlockingExceptions\":\"hasBlockingExceptions\",\"resolvedExceptionsCount\":\"resolvedExceptionsCount\",\"markingProgress\":\"markingProgress\",\"displayId\":\"displayId\",\"isTeamManagementMode\":\"isTeamManagementMode\",\"unactionedExceptionCount\":\"unactionedExceptionCount\"}},\"GracePeriodTime\":{\"$id\":\"8\",\"GridColumn\":\"GracePeriodTime\",\"CssClass\":\"col-grace-period\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.time-to-end-of-grace-period\",\"ComparerName\":\"timeToEndGracePeriodComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"timeToEndOfGracePeriod\":\"timeToEndOfGracePeriod\"}},\"markGroupId\":{\"$id\":\"9\",\"markGroupId\":\"markGroupId\"},\"MarkingProgress\":{\"$id\":\"10\",\"GridColumn\":\"MarkingProgress\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.progress\",\"CssClass\":\"col-status\",\"ComparerName\":\"progressComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"markingProgress\":\"markingProgress\",\"selectedLanguage\":\"selectedLanguage\",\"markGroupId\":\"markGroupId\",\"isTeamManagementMode\":\"isTeamManagementMode\"}},\"AccuracyIndicator\":{\"$id\":\"11\",\"GridColumn\":\"AccuracyIndicator\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.accuracy\",\"CssClass\":\"col-accuracy\",\"ComparerName\":\"accuracyComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"accuracyIndicatorTypeID\":\"accuracyIndicatorTypeID\"}},\"MarksDifference\":{\"$id\":\"12\",\"GridColumn\":\"MarksDifference\",\"Sortable\":\"true\",\"ComponentProps\":{\"absoluteMarksDifference\":\"absoluteMarksDifference\",\"totalMarksDifference\":\"totalMarksDifference\",\"accuracyIndicatorTypeID\":\"accuracyIndicatorTypeID\"}},\"AllPageAnnotedIndicator\":{\"$id\":\"13\",\"GridColumn\":\"AllPageAnnotedIndicator\",\"CssClass\":\"col-slao\",\"ColumnHeader\":\"\",\"ComponentProps\":{\"hasAllPagesAnnotated\":\"hasAllPagesAnnotated\",\"markingProgress\":\"markingProgress\",\"isTileView\":\"isTileView\"}},\"AbsoluteMarksDifference\":{\"$id\":\"20\",\"GridColumn\":\"AbsoluteMarksDifference\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.amd\",\"ComparerName\":\"absoluteDifferenceComparer\",\"CssClass\":\"col-amd\",\"Sortable\":\"true\",\"ComponentProps\":{\"absoluteMarksDifference\":\"absoluteMarksDifference\",\"totalMarksDifference\":\"totalMarksDifference\"}},\"TotalMarksDifference\":{\"$id\":\"21\",\"GridColumn\":\"TotalMarksDifference\",\"ComparerName\":\"totalDifferenceComparer\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.tmd\",\"CssClass\":\"col-tmd\",\"Sortable\":\"true\",\"ComponentProps\":{\"absoluteMarksDifference\":\"absoluteMarksDifference\",\"totalMarksDifference\":\"totalMarksDifference\"}},\"OriginalMarkerName\":{\"$id\":\"25\",\"CssClass\":\"col-original-marker\",\"GridColumn\":\"OriginalMarkerName\",\"ComparerName\":\"originalMarkerComparer\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.original-marker\",\"Sortable\":\"true\",\"ComponentProps\":{\"name\":\"name\"}},\"CentreNum\":{\"$id\":\"23\",\"CssClass\":\"col-centre\",\"ComparerName\":\"centreComparer\",\"GridColumn\":\"CentreNum\",\"Sortable\":\"true\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.centre-number\",\"ComponentProps\":{\"centre\":\"centre\"}},\"CentreCandidateNum\":{\"$id\":\"24\",\"CssClass\":\"col-candidate\",\"GridColumn\":\"CentreCandidateNum\",\"ComparerName\":\"candidateComparer\",\"Sortable\":\"true\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.centre-candidate-number\",\"ComponentProps\":{\"candidate\":\"candidate\"}},\"ResponseTypeLabel\":{\"$id\":\"22\",\"GridColumn\":\"ResponseTypeLabel\",\"ColumnHeader\":\"\",\"CssClass\":\"col-seed\",\"ComponentProps\":{\"isResponseTypeLabelVisible\":\"isResponseTypeLabelVisible\"}},\"MarkChangeReason\":{\"$id\":\"26\",\"GridColumn\":\"MarkChangeReason\",\"ColumnHeader\":\"\",\"CssClass\":\"col-eur-reason\",\"ComponentProps\":{\"isInResponse\":\"isInResponse\",\"selectedLanguage\":\"selectedLanguage\",\"markingProgress\":\"markingProgress\",\"markChangeReason\":\"markChangeReason\"}},\"SampleLabel\":{\"$id\":\"27\",\"GridColumn\":\"SampleLabel\",\"ComparerName\":\"sampledColumnComparer\",\"Sortable\":\"true\",\"ColumnHeader\":\"team-management.examiner-worklist.column-headers.sampled\",\"CssClass\":\"col-sampled\",\"ComponentProps\":{\"sampleCommentId\":\"sampleCommentId\"}},\"ReviewedByLabel\":{\"$id\":\"28\",\"GridColumn\":\"ReviewedByLabel\",\"ComparerName\":\"reviewedByComparer\",\"Sortable\":\"true\",\"ColumnHeader\":\"team-management.examiner-worklist.column-headers.reviewed-by\",\"CssClass\":\"col-reviewed\",\"ComponentProps\":{\"reviewedById\":\"reviewedById\",\"reviewedByInitials\":\"reviewedByInitials\",\"reviewedBySurname\":\"reviewedBySurname\"}},\"Finalmarkselected\":{\"$id\":\"29\",\"GridColumn\":\"Finalmarkselected\",\"ComparerName\":\"finalMarkSelectedComparer\",\"Sortable\":\"true\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.final-mark-selected\",\"CssClass\":\"col-final-mark-sltd\",\"ComponentProps\":{}},\"SupervisorRemarkDecision\":{\"$id\":\"30\",\"GridColumn\":\"SupervisorRemarkDecision\",\"ColumnHeader\":\"\",\"CssClass\":\"col-eur-reason\"},\"OriginalMark\":{\"$id\":\"31\",\"GridColumn\":\"OriginalMark\",\"ComparerName\":\"OriginalMarkComparer\",\"Sortable\":\"true\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.original-mark\",\"CssClass\":\"col-original-mark\",\"ComponentProps\":{\"isNonNumericMark\":\"isNonNumericMark\",\"originalMarkTotal\":\"originalMarkTotal\",\"isVisible\":\"isVisible\",\"accuracyIndicatorTypeID\":\"accuracyIndicatorTypeID\"}},\"OriginalMarkAccuracy\":{\"$id\":\"32\",\"GridColumn\":\"OriginalMarkAccuracy\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.original-mark-accuracy\",\"CssClass\":\"col-original-mark-accuracy\",\"ComparerName\":\"OriginalMarkAccuracyComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"accuracyIndicatorTypeID\":\"accuracyIndicatorTypeID\",\"isVisible\":\"isVisible\"}},\"SpecialistType\":{\"$id\":\"36\",\"GridColumn\":\"SpecialistType\",\"ComparerName\":\"specialistTypeComparer\",\"Sortable\":\"true\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.specialist-type\",\"CssClass\":\"col-spcl-type\"}},\"TagIndicator\":{\"$id\":\"33\",\"GridColumn\":\"TagIndicator\",\"ColumnHeader\":\"marking.worklist.list-view-column-headers.tag\",\"CssClass\":\"col-tag\",\"ComparerName\":\"tagComparer\",\"Sortable\":\"true\",\"ComponentProps\":{\"selectedTagId\":\"selectedTagId\",\"tagList\":\"tagList\",\"markGroupId\":\"markGroupId\"},\"AllFilesNotViewedIndicator\":{\"$id\":\"34\",\"GridColumn\":\"AllFilesNotViewedIndicator\",\"CssClass\":\"col-slao\",\"ColumnHeader\":\"\",\"ComponentProps\":{\"allFilesViewed\":\"allFilesViewed\",\"markingProgress\":\"markingProgress\",\"isTileView\":\"isTileView\",\"isECourseworkComponent\":\"isECourseworkComponent\"}},\"SupervisorReviewComment\":{\"$id\":\"35\",\"GridColumn\":\"SupervisorReviewComment\",\"ComparerName\":\"SupervisorReviewCommentComparer\",\"Sortable\":\"true\",\"ColumnHeader\":\"team-management.examiner-worklist.column-headers.review-comment\",\"CssClass\":\"col-review-comment\",\"ComponentProps\":{}}},\"marking\":{\"liveworklist\":{\"open\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"1\"},{\"$ref\":\"10\"},{\"$ref\":\"13\"},{\"$ref\":\"7\"},{\"$ref\":\"17\"},{\"$ref\":\"34\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"36\"},{\"$ref\":\"10\"},{\"$ref\":\"4\"},{\"$ref\":\"34\"},{\"$ref\":\"17\"},{\"$ref\":\"14\"},{\"$ref\":\"13\"},{\"$ref\":\"7\"},{\"$ref\":\"6\"},{\"$ref\":\"33\"},{\"$ref\":\"5\"},{\"$ref\":\"22\"},{\"$ref\":\"27\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}},\"closed\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"2\"},{\"$ref\":\"12\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"23\"},{\"$ref\":\"36\"},{\"$ref\":\"4\"},{\"$ref\":\"17\"},{\"$ref\":\"11\"},{\"$ref\":\"20\"},{\"$ref\":\"21\"},{\"$ref\":\"19\"},{\"$ref\":\"7\"},{\"$ref\":\"6\"},{\"$ref\":\"33\"},{\"$ref\":\"22\"},{\"$ref\":\"27\"},{\"$ref\":\"28\"},{\"$ref\":\"35\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}},\"pending\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"3\"},{\"$ref\":\"8\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"8\"},{\"$ref\":\"36\"},{\"$ref\":\"4\"},{\"$ref\":\"17\"},{\"$ref\":\"18\"},{\"$ref\":\"7\"},{\"$ref\":\"6\"},{\"$ref\":\"33\"},{\"$ref\":\"22\"},{\"$ref\":\"27\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}}},\"standardisationworklist\":{\"open\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"1\"},{\"$ref\":\"10\"},{\"$ref\":\"13\"},{\"$ref\":\"17\"},{\"$ref\":\"34\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"10\"},{\"$ref\":\"4\"},{\"$ref\":\"34\"},{\"$ref\":\"17\"},{\"$ref\":\"14\"},{\"$ref\":\"13\"},{\"$ref\":\"6\"},{\"$ref\":\"5\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}},\"closed\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"2\"},{\"$ref\":\"12\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"4\"},{\"$ref\":\"11\"},{\"$ref\":\"20\"},{\"$ref\":\"21\"},{\"$ref\":\"17\"},{\"$ref\":\"19\"},{\"$ref\":\"6\"},{\"$ref\":\"28\"},{\"$ref\":\"35\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}}},\"practiceworklist\":{\"open\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"1\"},{\"$ref\":\"10\"},{\"$ref\":\"13\"},{\"$ref\":\"17\"},{\"$ref\":\"34\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"10\"},{\"$ref\":\"4\"},{\"$ref\":\"34\"},{\"$ref\":\"17\"},{\"$ref\":\"14\"},{\"$ref\":\"13\"},{\"$ref\":\"6\"},{\"$ref\":\"5\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}},\"closed\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"2\"},{\"$ref\":\"12\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"4\"},{\"$ref\":\"11\"},{\"$ref\":\"20\"},{\"$ref\":\"21\"},{\"$ref\":\"17\"},{\"$ref\":\"19\"},{\"$ref\":\"6\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}}},\"directedremarkworklist\":{\"open\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"1\"},{\"$ref\":\"10\"},{\"$ref\":\"13\"},{\"$ref\":\"30\"},{\"$ref\":\"7\"},{\"$ref\":\"26\"},{\"$ref\":\"17\"},{\"$ref\":\"34\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"23\"},{\"$ref\":\"24\"},{\"$ref\":\"36\"},{\"$ref\":\"10\"},{\"$ref\":\"4\"},{\"$ref\":\"34\"},{\"$ref\":\"31\"},{\"$ref\":\"32\"},{\"$ref\":\"29\"},{\"$ref\":\"17\"},{\"$ref\":\"14\"},{\"$ref\":\"13\"},{\"$ref\":\"30\"},{\"$ref\":\"7\"},{\"$ref\":\"6\"},{\"$ref\":\"26\"},{\"$ref\":\"33\"},{\"$ref\":\"5\"},{\"$ref\":\"25\"},{\"$ref\":\"22\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}},\"closed\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"2\"},{\"$ref\":\"12\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"23\"},{\"$ref\":\"24\"},{\"$ref\":\"36\"},{\"$ref\":\"4\"},{\"$ref\":\"31\"},{\"$ref\":\"32\"},{\"$ref\":\"29\"},{\"$ref\":\"11\"},{\"$ref\":\"20\"},{\"$ref\":\"21\"},{\"$ref\":\"17\"},{\"$ref\":\"19\"},{\"$ref\":\"7\"},{\"$ref\":\"6\"},{\"$ref\":\"33\"},{\"$ref\":\"22\"},{\"$ref\":\"25\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}},\"pending\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"3\"},{\"$ref\":\"8\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"23\"},{\"$ref\":\"24\"},{\"$ref\":\"36\"},{\"$ref\":\"8\"},{\"$ref\":\"4\"},{\"$ref\":\"31\"},{\"$ref\":\"32\"},{\"$ref\":\"29\"},{\"$ref\":\"17\"},{\"$ref\":\"18\"},{\"$ref\":\"7\"},{\"$ref\":\"6\"},{\"$ref\":\"33\"},{\"$ref\":\"25\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}}},\"atypicalworklist\":{\"open\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"1\"},{\"$ref\":\"10\"},{\"$ref\":\"13\"},{\"$ref\":\"7\"},{\"$ref\":\"26\"},{\"$ref\":\"17\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"23\"},{\"$ref\":\"24\"},{\"$ref\":\"10\"},{\"$ref\":\"4\"},{\"$ref\":\"17\"},{\"$ref\":\"14\"},{\"$ref\":\"13\"},{\"$ref\":\"7\"},{\"$ref\":\"6\"},{\"$ref\":\"5\"},{\"$ref\":\"25\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}},\"closed\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"2\"},{\"$ref\":\"12\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"23\"},{\"$ref\":\"24\"},{\"$ref\":\"4\"},{\"$ref\":\"17\"},{\"$ref\":\"19\"},{\"$ref\":\"7\"},{\"$ref\":\"6\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}},\"pending\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"3\"},{\"$ref\":\"8\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"23\"},{\"$ref\":\"24\"},{\"$ref\":\"8\"},{\"$ref\":\"4\"},{\"$ref\":\"17\"},{\"$ref\":\"18\"},{\"$ref\":\"7\"},{\"$ref\":\"6\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}}},\"markingcheckworklist\":{\"open\":{\"detailview\":{\"GridColumns\":[{\"$ref\":\"10\"},{\"$ref\":\"4\"},{\"$ref\":\"14\"},{\"$ref\":\"6\"},{\"$ref\":\"5\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}},\"closed\":{\"detailview\":{\"GridColumns\":[{\"$ref\":\"4\"},{\"$ref\":\"19\"},{\"$ref\":\"6\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}},\"pending\":{\"detailview\":{\"GridColumns\":[{\"$ref\":\"8\"},{\"$ref\":\"4\"},{\"$ref\":\"18\"},{\"$ref\":\"6\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}}},\"simulationworklist\":{\"open\":{\"tileview\":{\"GridColumns\":[{\"$ref\":\"1\"},{\"$ref\":\"10\"},{\"$ref\":\"13\"},{\"$ref\":\"7\"},{\"$ref\":\"17\"}]},\"detailview\":{\"GridColumns\":[{\"$ref\":\"10\"},{\"$ref\":\"4\"},{\"$ref\":\"17\"},{\"$ref\":\"14\"},{\"$ref\":\"13\"},{\"$ref\":\"5\"}]},\"frozenRows\":{\"GridColumns\":[{\"$ref\":\"1\"}]}}}}}//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 452:
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/components/utility/table/tablehelper.ts ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Helper class for table element\r\n */\r\nvar TableHelper = /** @class */ (function () {\r\n    function TableHelper() {\r\n    }\r\n    /**\r\n     * This method will set column widths\r\n     * Implemented based on spike #55912\r\n     * @private\r\n     * @memberof TableHelper\r\n     */\r\n    TableHelper.setColumnWidthsForTable = function (gridControlId, columnHeaderPrefix, rowHeaderPrefix) {\r\n        // Remove the earlier applied inline styles\r\n        var columnHeaderId = columnHeaderPrefix + gridControlId;\r\n        // Get the widths of header columns\r\n        var widths = new Array();\r\n        if (document.getElementById(columnHeaderId)) {\r\n            for (var i = 0; i < document.getElementById(columnHeaderId).querySelectorAll('th').length; i++) {\r\n                // Removing the earlier applied inline styles\r\n                document.querySelectorAll('#' + columnHeaderId + ' th .header-data')[i].removeAttribute('style');\r\n                var rowColumn = document.querySelectorAll('#' + rowHeaderPrefix + gridControlId\r\n                    + ' tr:nth-of-type(1) td .cell-data')[i];\r\n                if (rowColumn) {\r\n                    rowColumn.removeAttribute('style');\r\n                }\r\n                widths.push(document.getElementById(columnHeaderId).querySelectorAll('th')[i].clientWidth);\r\n            }\r\n            // Compare the header columns width with the respective column in the first row and find the highest among them\r\n            var trs = document.getElementById(rowHeaderPrefix + gridControlId) ?\r\n                document.getElementById(rowHeaderPrefix + gridControlId).querySelectorAll(' tr') : [];\r\n            if (trs.length > 0) {\r\n                var lentd = trs[0].querySelectorAll('td').length;\r\n                for (var col = 0; col < lentd; col++) {\r\n                    var curEl = trs[0].querySelectorAll('td')[col];\r\n                    var divWidth = curEl.clientWidth;\r\n                    if (divWidth > widths[col]) {\r\n                        widths[col] = divWidth;\r\n                    }\r\n                }\r\n            }\r\n            // Apply the highest width calculated to header / column as min-width\r\n            // We have to avoid last cell in header and row inorder to avoid setting maximum length for last column\r\n            for (var j = 0; j < widths.length; j++) {\r\n                var headerColumn = document.querySelectorAll('#' + columnHeaderId + ' th:not(.last-cell-header):nth-of-type(' + (j + 1) + ') .header-data')[0];\r\n                if (headerColumn) {\r\n                    headerColumn.style.minWidth = (widths[j] + 5) + 'px';\r\n                }\r\n                var rowColumn = document.querySelectorAll('#' + rowHeaderPrefix + gridControlId + ' tr:nth-of-type(1) td:not(.last-cell):nth-of-type(' + (j + 1) + ') .cell-data')[0];\r\n                if (rowColumn) {\r\n                    rowColumn.style.minWidth = (widths[j] + 5) + 'px';\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return TableHelper;\r\n}());\r\nmodule.exports = TableHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS90YWJsZS90YWJsZWhlbHBlci50cz9iY2ZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBIZWxwZXIgY2xhc3MgZm9yIHRhYmxlIGVsZW1lbnRcclxuICovXHJcbmNsYXNzIFRhYmxlSGVscGVyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgc2V0IGNvbHVtbiB3aWR0aHNcclxuICAgICAqIEltcGxlbWVudGVkIGJhc2VkIG9uIHNwaWtlICM1NTkxMlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBtZW1iZXJvZiBUYWJsZUhlbHBlclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHNldENvbHVtbldpZHRoc0ZvclRhYmxlID0gKGdyaWRDb250cm9sSWQ6IHN0cmluZywgY29sdW1uSGVhZGVyUHJlZml4OiBzdHJpbmcsIHJvd0hlYWRlclByZWZpeDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBlYXJsaWVyIGFwcGxpZWQgaW5saW5lIHN0eWxlc1xyXG4gICAgICAgIGxldCBjb2x1bW5IZWFkZXJJZDogc3RyaW5nID0gY29sdW1uSGVhZGVyUHJlZml4ICsgZ3JpZENvbnRyb2xJZDtcclxuXHJcbiAgICAgICAgLy8gR2V0IHRoZSB3aWR0aHMgb2YgaGVhZGVyIGNvbHVtbnNcclxuICAgICAgICBsZXQgd2lkdGhzOiBudW1iZXJbXSA9IG5ldyBBcnJheTxudW1iZXI+KCk7XHJcbiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbHVtbkhlYWRlcklkKSkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29sdW1uSGVhZGVySWQpLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoJykubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gUmVtb3ZpbmcgdGhlIGVhcmxpZXIgYXBwbGllZCBpbmxpbmUgc3R5bGVzXHJcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyMnICsgY29sdW1uSGVhZGVySWQgKyAnIHRoIC5oZWFkZXItZGF0YScpW2ldLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcclxuICAgICAgICAgICAgbGV0IHJvd0NvbHVtbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyMnICArIHJvd0hlYWRlclByZWZpeCArIGdyaWRDb250cm9sSWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICcgdHI6bnRoLW9mLXR5cGUoMSkgdGQgLmNlbGwtZGF0YScpW2ldO1xyXG4gICAgICAgICAgICBpZiAocm93Q29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICByb3dDb2x1bW4ucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdpZHRocy5wdXNoKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbHVtbkhlYWRlcklkKS5xdWVyeVNlbGVjdG9yQWxsKCd0aCcpW2ldLmNsaWVudFdpZHRoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENvbXBhcmUgdGhlIGhlYWRlciBjb2x1bW5zIHdpZHRoIHdpdGggdGhlIHJlc3BlY3RpdmUgY29sdW1uIGluIHRoZSBmaXJzdCByb3cgYW5kIGZpbmQgdGhlIGhpZ2hlc3QgYW1vbmcgdGhlbVxyXG4gICAgICAgIHZhciB0cnMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChyb3dIZWFkZXJQcmVmaXggKyBncmlkQ29udHJvbElkKSA/XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHJvd0hlYWRlclByZWZpeCArIGdyaWRDb250cm9sSWQpLnF1ZXJ5U2VsZWN0b3JBbGwoJyB0cicpIDogW107XHJcbiAgICAgICAgaWYgKHRycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciBsZW50ZCA9IHRyc1swXS5xdWVyeVNlbGVjdG9yQWxsKCd0ZCcpLmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgbGVudGQ7IGNvbCsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VyRWwgPSB0cnNbMF0ucXVlcnlTZWxlY3RvckFsbCgndGQnKVtjb2xdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRpdldpZHRoID0gY3VyRWwuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGl2V2lkdGggPiB3aWR0aHNbY29sXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoc1tjb2xdID0gZGl2V2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICAgICAvLyBBcHBseSB0aGUgaGlnaGVzdCB3aWR0aCBjYWxjdWxhdGVkIHRvIGhlYWRlciAvIGNvbHVtbiBhcyBtaW4td2lkdGhcclxuICAgICAgICAvLyBXZSBoYXZlIHRvIGF2b2lkIGxhc3QgY2VsbCBpbiBoZWFkZXIgYW5kIHJvdyBpbm9yZGVyIHRvIGF2b2lkIHNldHRpbmcgbWF4aW11bSBsZW5ndGggZm9yIGxhc3QgY29sdW1uXHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB3aWR0aHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgbGV0IGhlYWRlckNvbHVtbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgnIycgKyBjb2x1bW5IZWFkZXJJZCArICcgdGg6bm90KC5sYXN0LWNlbGwtaGVhZGVyKTpudGgtb2YtdHlwZSgnICsgKGogKyAxKSArICcpIC5oZWFkZXItZGF0YScpWzBdO1xyXG4gICAgICAgICAgICBpZiAoaGVhZGVyQ29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAoaGVhZGVyQ29sdW1uIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5taW5XaWR0aCA9ICh3aWR0aHNbal0gKyA1KSArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHJvd0NvbHVtbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGxcclxuICAgICAgICAgICAgKCcjJyArIHJvd0hlYWRlclByZWZpeCArIGdyaWRDb250cm9sSWQgKyAnIHRyOm50aC1vZi10eXBlKDEpIHRkOm5vdCgubGFzdC1jZWxsKTpudGgtb2YtdHlwZSgnICsgKGogKyAxKSArICcpIC5jZWxsLWRhdGEnKVswXTtcclxuICAgICAgICAgICAgaWYgKHJvd0NvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgKHJvd0NvbHVtbiBhcyBIVE1MRWxlbWVudCkuc3R5bGUubWluV2lkdGggPSAod2lkdGhzW2pdICsgNSkgKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG59XHJcblxyXG5leHBvcnQgPSBUYWJsZUhlbHBlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS90YWJsZS90YWJsZWhlbHBlci50cyJdLCJtYXBwaW5ncyI6IjtBQUFBOztBQUVBO0FBQ0E7QUFBQTtBQXlEQTtBQXZEQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 457:
/* no static exports found */
/* all exports used */
/*!*************************************************!*\
  !*** ./src/components/message/messagepopup.tsx ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar MessagePriorityDropDown = __webpack_require__(/*! ./messageprioritydropdown */ 464);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar GenericButton = __webpack_require__(/*! ../utility/genericbutton */ 290);\r\nvar messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar MessageBase = __webpack_require__(/*! ./messagebase */ 462);\r\nvar MessageEditor = __webpack_require__(/*! ./messageeditor */ 463);\r\nvar Subject = __webpack_require__(/*! ./subject */ 466);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../actions/messaging/messagingactioncreator */ 268);\r\nvar popupHelper = __webpack_require__(/*! ../utility/popup/popuphelper */ 288);\r\nvar QigDropDown = __webpack_require__(/*! ../utility/dropdown */ 467);\r\nvar messageHelper = __webpack_require__(/*! ../utility/message/messagehelper */ 283);\r\nvar keyDownHelper = __webpack_require__(/*! ../../utility/generic/keydownhelper */ 258);\r\nvar htmlUtilities = __webpack_require__(/*! ../../utility/generic/htmlutilities */ 243);\r\nvar TeamListPopup = __webpack_require__(/*! ./teamlistpopup */ 478);\r\nvar configurablecharacteristicshelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurablecharacteristicsnames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar teamManagementStore = __webpack_require__(/*! ../../stores/teammanagement/teammanagementstore */ 245);\r\nvar applicationStore = __webpack_require__(/*! ../../stores/applicationoffline/applicationstore */ 247);\r\nvar MessagePopup = /** @class */ (function (_super) {\r\n    __extends(MessagePopup, _super);\r\n    /**\r\n     * Constructor Messagepopup\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function MessagePopup(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.isShowTeamListPopup = false;\r\n        _this._isEntireTeamSelected = false;\r\n        _this._mandatoryMessagesFromMarkingToolCC = false;\r\n        _this.doTriggerMessageOpenEvent = false;\r\n        /**\r\n         * This method will render QIG section for Compose, Reply and Forward message types\r\n         */\r\n        _this.renderQigSection = function () {\r\n            switch (_this.props.messageType) {\r\n                case enums.MessageType.InboxCompose:\r\n                    return (React.createElement(\"div\", { className: 'message-qig' },\r\n                        React.createElement(\"span\", { className: 'dim-text msg-qig-label', id: 'qig-dropdown-label' }, localeStore.instance.TranslateText('messaging.compose-message.question-group') + ':'),\r\n                        React.createElement(QigDropDown, { dropDownType: enums.DropDownType.QIG, id: 'select_qig', style: _this.state.qigDropDownStyle, className: 'dropdown-wrap message-qig-name', selectedItem: _this.selectedQig, isOpen: _this.clickedDropDown === enums.DropDownType.QIG ? _this.isQigDropDownOpen : undefined, items: _this.props.qigItemsList, onClick: _this.onQigDropDownClick, onSelect: _this.onQigItemSelected, title: localeStore.instance.TranslateText('messaging.compose-message.question-group-tooltip') })));\r\n                case enums.MessageType.InboxForward:\r\n                case enums.MessageType.InboxReply:\r\n                case enums.MessageType.WorklistCompose:\r\n                case enums.MessageType.TeamCompose:\r\n                    return (React.createElement(\"div\", { className: 'message-qig' },\r\n                        React.createElement(\"span\", { className: 'dim-text msg-qig-label', id: 'question-group-text' }, localeStore.instance.TranslateText('messaging.compose-message.question-group') + ':'),\r\n                        React.createElement(\"div\", { className: 'message-qig-name', id: 'selected-qig-name' }, _this.selectedQig)));\r\n            }\r\n        };\r\n        /**\r\n         * This method will return associtated response section for Forward and Reply message types\r\n         */\r\n        _this.renderAssociatedResponseSection = function () {\r\n            if ((_this.props.messageType === enums.MessageType.InboxForward || _this.props.messageType === enums.MessageType.InboxReply)\r\n                && (_this.props.responseId != null && _this.props.responseId !== '' && _this.props.responseId !== undefined)) {\r\n                return (React.createElement(\"div\", { className: 'clearfix padding-bottom-10' },\r\n                    React.createElement(\"div\", { className: 'comp-resp-id shift-left' },\r\n                        React.createElement(\"span\", { className: 'dim-text', id: 'associated-response-text' }, localeStore.instance.TranslateText('messaging.compose-message.associated-response') + ':'),\r\n                        React.createElement(\"div\", { className: 'message-resonse-id', id: 'associated-response-id' }, messageHelper.getMarkingModeText(_this.props.selectedMsgDetails.markingModeId, _this.props.selectedMsgDetails.isElectronicStandardisationTeamMember) + _this.props.responseId))));\r\n            }\r\n        };\r\n        /**\r\n         * This method will call on qig dropdown select\r\n         */\r\n        _this.onQigItemSelected = function (selectedItem) {\r\n            // resetting to standard message priority while qig selected\r\n            _this.priorityDropDownSelectedItem = enums.MessagePriority.Standard;\r\n            _this.props.onQigItemSelected(selectedItem);\r\n            var selectedQigItem = _this.props.qigItemsList.filter(function (x) { return x.id === selectedItem; });\r\n            var qigId = selectedItem;\r\n            var examinerRoleId = selectedQigItem[0].examinerRoleId;\r\n            var args = {\r\n                examinerRoleId: examinerRoleId,\r\n                qigId: qigId\r\n            };\r\n            messagingActionCreator.getTeamDetails(args);\r\n        };\r\n        /**\r\n         * On navigate away from inbox\r\n         */\r\n        _this.onNavigateAwayFromInbox = function (navigateTo) {\r\n            if ((navigateTo === enums.SaveAndNavigate.toReplyMessage || navigateTo === enums.SaveAndNavigate.toForwardMessage ||\r\n                navigateTo === enums.SaveAndNavigate.newMessageButtonClick)\r\n                && !messageHelper.isMessagePanelEdited(_this.props.messageType, _this.toFieldValues, _this.toFieldIds)) {\r\n                _this.props.onResetPopupCallback(navigateTo);\r\n            }\r\n            else {\r\n                _this.onNavigateAwayFromResponse(navigateTo);\r\n            }\r\n        };\r\n        /**\r\n         *  This will set the required variables\r\n         */\r\n        _this.onOpen = function (messageType) {\r\n            // if tinymce is not loaded we need to skip this method and retrigger this after editor is loaded\r\n            if (!_this.state.isTinyMCELoaded) {\r\n                _this.doTriggerMessageOpenEvent = true;\r\n                _this.msgType = messageType;\r\n                return;\r\n            }\r\n            // if message type is inbox compose or worklist compose then set the default content for setting default fonts\r\n            if (messageType === enums.MessageType.InboxCompose || messageType === enums.MessageType.WorklistCompose ||\r\n                messageType === enums.MessageType.TeamCompose) {\r\n                _this.messageBody = messageHelper.getMessageContent(messageType);\r\n                if (_this.isMessagePopupMinimized === true) {\r\n                    _this.onMaximizeMessagePanel();\r\n                }\r\n            }\r\n            // if message type is work list compose then set supervisior details in to address fields.\r\n            if (messageType === enums.MessageType.WorklistCompose || messageType === enums.MessageType.TeamCompose) {\r\n                _this._selectedTeamList = new Array();\r\n                _this.toFieldIds = new Array();\r\n                _this.toFieldValues = new Array();\r\n                _this.toFieldIds.push(_this.props.supervisorId);\r\n                _this.toFieldValues.push(_this.props.supervisorName);\r\n                _this._selectedTeamList.push(_this.props.supervisorName);\r\n            }\r\n            // Fix for defect 54276. Reply forward message details has to be set only once. \r\n            if (messageType === enums.MessageType.InboxReply || messageType === enums.MessageType.InboxForward) {\r\n                _this.setInboxForwardReplyMessageDetails();\r\n            }\r\n            // Fix for defect 54276. Reply forward message details has to be set only once. \r\n            if (messageType === enums.MessageType.InboxReply || messageType === enums.MessageType.InboxForward) {\r\n                _this.setInboxForwardReplyMessageDetails();\r\n            }\r\n            // Fix for defect 54276. Reply forward message details has to be set only once. \r\n            if (messageType === enums.MessageType.InboxReply || messageType === enums.MessageType.InboxForward) {\r\n                _this.setInboxForwardReplyMessageDetails();\r\n            }\r\n            _this.setState({ renderedOn: Date.now() });\r\n            // enable send button\r\n            _this.enableDisableSendButton();\r\n        };\r\n        /**\r\n         * Method fired to minimize the message panel.\r\n         */\r\n        _this.onMinimizeMessagePanel = function () {\r\n            // added as part of defect #29269\r\n            if (htmlUtilities.isIPadDevice) {\r\n                htmlUtilities.setFocusToElement('message-subject');\r\n                htmlUtilities.blurElement('message-subject');\r\n            }\r\n            _this.isMessagePopupMinimized = true;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Method fired to maximize the message panel.\r\n         */\r\n        _this.onMaximizeMessagePanel = function () {\r\n            _this.isMessagePopupMinimized = false;\r\n            _this.setState({ renderedOn: Date.now() });\r\n            // enable send button\r\n            _this.enableDisableSendButton();\r\n        };\r\n        /**\r\n         * Method fired to close the message panel.\r\n         */\r\n        _this.onMessagePanelClose = function () {\r\n            keyDownHelper.instance.Activate(enums.MarkEntryDeactivator.Messaging);\r\n            _this.isMessagePopupMinimized = false;\r\n            _this.messageSubject = '';\r\n            if (_this.selectedQigItemId && _this.selectedQigItemId !== 0) {\r\n                var selectedQigItem = _this.props.qigItemsList.filter(function (x) { return x.id === _this.selectedQigItemId; });\r\n                if (selectedQigItem && selectedQigItem.length > 0) {\r\n                    var qigId = _this.selectedQigItemId;\r\n                    var examinerRoleId = selectedQigItem[0].examinerRoleId;\r\n                    messagingActionCreator.clearTeamSelection(examinerRoleId);\r\n                }\r\n            }\r\n            _this._selectedTeamList = new Array();\r\n            _this._isEntireTeamSelected = false;\r\n            /**\r\n             * Defect 64542 fix: setting isShowTeamListPopup to false to prevent TeamList Popup from persisting\r\n             * when closing and opening a new message with only 1 QIG item\r\n             */\r\n            _this.isShowTeamListPopup = false;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * This method is handling the letious popup events.\r\n         */\r\n        _this.onPopUpDisplayEvent = function (popUpType, popUpActionType) {\r\n            switch (popUpType) {\r\n                case enums.PopUpType.DiscardMessage:\r\n                case enums.PopUpType.DiscardMessageNavigateAway:\r\n                    switch (popUpActionType) {\r\n                        case enums.PopUpActionType.Yes:\r\n                            popupHelper.handlePopUpEvents(popUpType, popUpActionType, _this.onDiscardMessageConfirmed);\r\n                            break;\r\n                        case enums.PopUpActionType.No:\r\n                            popupHelper.handlePopUpEvents(popUpType, popUpActionType, _this.onDiscardMessageCancelled);\r\n                            break;\r\n                    }\r\n                    break;\r\n                case enums.PopUpType.DiscardOnNewMessageButtonClick:\r\n                    switch (popUpActionType) {\r\n                        case enums.PopUpActionType.Show:\r\n                            _this.isMessagePopupMinimized = false;\r\n                            _this.setState({ renderedOn: Date.now() });\r\n                            break;\r\n                        case enums.PopUpActionType.Yes:\r\n                            popupHelper.handlePopUpEvents(popUpType, popUpActionType, _this.onDiscardNewPopupConfirmed);\r\n                            break;\r\n                        case enums.PopUpActionType.No:\r\n                            //Reset the navigate to variable when the user chooses to stay on the message panel\r\n                            _this.navigateTo = enums.SaveAndNavigate.none;\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n        _this.onDiscardNewPopupConfirmed = function () {\r\n            if (_this.navigateTo === enums.SaveAndNavigate.newMessageButtonClick) {\r\n                _this.priorityDropDownSelectedItem = enums.MessagePriority.Standard;\r\n                _this.messageSubject = '';\r\n                _this.messageBody = '';\r\n                _this.isDropDownOpen = undefined;\r\n                _this.isQigDropDownOpen = undefined;\r\n                _this.toFieldValues = null;\r\n                _this.toFieldIds = null;\r\n                _this._selectedTeamList = new Array();\r\n                _this._isEntireTeamSelected = false;\r\n                tinymce.activeEditor.setContent('');\r\n                _this.enableDisableSendButton();\r\n                _this.props.onResetPopupCallback(_this.navigateTo);\r\n            }\r\n            else {\r\n                _this.props.onResetPopupCallback(_this.navigateTo);\r\n            }\r\n            _this.navigateTo = enums.SaveAndNavigate.none;\r\n        };\r\n        /**\r\n         *  Callback function for dropdown click\r\n         */\r\n        _this.onQigDropDownClick = function (dropDown, width) {\r\n            if (width) {\r\n                var style = {};\r\n                style.minWidth = width;\r\n                _this.setState({\r\n                    qigDropDownStyle: style\r\n                });\r\n            }\r\n            _this.onDropDownClick(dropDown);\r\n        };\r\n        _this.showToAddressList = function () {\r\n            _this.isShowTeamListPopup = true;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        _this.hideToAddressList = function () {\r\n            _this.setState({ isshowToAddressList: false });\r\n        };\r\n        _this.saveToAddressList = function () {\r\n            _this.setState({ isshowToAddressList: false });\r\n        };\r\n        /**\r\n         * Handles the action event on team list Received.\r\n         */\r\n        _this.updatedTeamListReceived = function (isSaved) {\r\n            if (isSaved === void 0) { isSaved = false; }\r\n            _this.toFieldValues = new Array();\r\n            _this.toFieldIds = new Array();\r\n            _this._selectedTeamList = new Array();\r\n            _this._isEntireTeamSelected = false;\r\n            _this.isSubordinateSelected = false;\r\n            var teams = messageStore.instance.teamDetails;\r\n            if (teams && teams.team) {\r\n                if (teams.team.toTeam) {\r\n                    _this._isEntireTeamSelected = true;\r\n                    _this.isSubordinateSelected = true;\r\n                }\r\n                else {\r\n                    if (teams.team.parent && teams.team.parent.isChecked) {\r\n                        _this._selectedTeamList.push(teams.team.parent.fullName + ';');\r\n                    }\r\n                    if (teams.team.subordinates.length > 0) {\r\n                        _this.getSelectedSubordinateList(teams.team.subordinates);\r\n                    }\r\n                }\r\n                // the logged in user has subordinates, check the store for new TO list\r\n                // if there are no subordinates, the the supervisor details (if any) will be populated via props\r\n                if (messageStore.instance.teamDetails.team.subordinates &&\r\n                    messageStore.instance.teamDetails.team.subordinates.length > 0) {\r\n                    _this.populateToField(teams.team);\r\n                }\r\n                _this.isShowTeamListPopup = false;\r\n                if (isSaved && _this.priorityDropDownSelectedItem === enums.MessagePriority.Mandatory &&\r\n                    !_this.isSubordinateSelected) {\r\n                    messagingActionCreator.displayMandatoryValidationPopup(true);\r\n                }\r\n                _this.setState({ renderedOn: Date.now() });\r\n            }\r\n        };\r\n        /**\r\n         * Populates the To Fields based on the values in the store\r\n         */\r\n        _this.populateToField = function (team) {\r\n            if (team) {\r\n                // Add Parent Examiner of the current examiner if the parent is selected\r\n                if (team.isCurrentExaminer && team.parent && team.parent.isChecked) {\r\n                    _this.toFieldIds.push(team.parent.examinerId);\r\n                    _this.toFieldValues.push(team.parent.fullName);\r\n                }\r\n                if (!team.isCurrentExaminer && team.isChecked) {\r\n                    _this.toFieldIds.push(team.examinerId);\r\n                    _this.toFieldValues.push(team.fullName);\r\n                }\r\n                for (var _i = 0, _a = team.subordinates; _i < _a.length; _i++) {\r\n                    var subTeam = _a[_i];\r\n                    _this.populateToField(subTeam);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Handles the action event on To address list Received.\r\n         */\r\n        _this.teamListReceived = function () {\r\n            var teams = messageStore.instance.teamDetails;\r\n            var qigId = _this.props.selectedQigItemId;\r\n            _this._disableToButtonForStandardisationQig = false;\r\n            //Flag to identify whether the qig is in standardisation setup progress\r\n            var selectedQig = _this.props.qigItemsList.filter(function (x) { return x.id === _this.selectedQigItemId; });\r\n            var coordinationComplete = selectedQig[0].coordinationComplete;\r\n            if (teams && teams.team.subordinates) {\r\n                _this._isEntireTeamSelected = teams.team.toTeam;\r\n                _this.toFieldValues = new Array();\r\n                _this.toFieldIds = new Array();\r\n                _this._selectedTeamList = new Array();\r\n                if (_this.props.messageType === enums.MessageType.InboxReply) {\r\n                    _this.toFieldIds.push(_this.props.selectedMessage.fromExaminerId);\r\n                    _this.toFieldValues.push(_this.props.selectedMessage.examinerDetails.fullName);\r\n                    _this._selectedTeamList.push(_this.props.selectedMessage.examinerDetails.fullName);\r\n                    _this.isSubordinateSelected = _this.isReplyToSubordinate(teams.team.subordinates);\r\n                }\r\n                else if (!coordinationComplete) {\r\n                    // If the message is against standardisationsetup qig or response the receiver \r\n                    // should be stm parent else all work as existing\r\n                    if (teams.team.stmParent) {\r\n                        _this.toFieldIds.push(teams.team.stmParent.examinerId);\r\n                        _this.toFieldValues.push(teams.team.stmParent.fullName);\r\n                        _this._selectedTeamList.push(teams.team.stmParent.fullName);\r\n                        _this.isShowTeamListPopup = false;\r\n                        _this.isSubordinateSelected = false;\r\n                        // Disabling button if the user sends message against standardisation response or Qig\r\n                        _this._disableToButtonForStandardisationQig = true;\r\n                    }\r\n                }\r\n                else if (teams.team.subordinates.length === 0) {\r\n                    if (teams.team.parent) {\r\n                        _this.setMessagePanelToTabForParent(teams.team.parent);\r\n                    }\r\n                }\r\n            }\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * Handles the action event on To address list Received.\r\n         */\r\n        _this.messagePriorityUpdate = function () {\r\n            _this.priorityDropDownSelectedItem = enums.MessagePriority.Standard;\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * Set the selected language state upon successfull confirmation from locale store.\r\n         */\r\n        _this.languageChanged = function () {\r\n            _this.setState({\r\n                renderedOn: Date.now()\r\n            });\r\n        };\r\n        /**\r\n         * Handles the action event on To address list Received.\r\n         */\r\n        _this.isTinyMCELoaded = function (isLoaded) {\r\n            _this.setState({\r\n                isTinyMCELoaded: isLoaded\r\n            });\r\n        };\r\n        // Set the default states\r\n        _this.state = {\r\n            renderedOn: 0,\r\n            qigDropDownStyle: {},\r\n            isTinyMCELoaded: false\r\n        };\r\n        _this._selectedTeamList = new Array();\r\n        _this.teamListReceived = _this.teamListReceived.bind(_this);\r\n        _this._mandatoryMessagesFromMarkingToolCC = configurablecharacteristicshelper.getCharacteristicValue(configurablecharacteristicsnames.MandatoryMessagesFromMarkingTool).toLowerCase() === 'true' ? true : false;\r\n        _this.doShowMandatoryMessagePriority = _this.doShowMandatoryMessagePriority.bind(_this);\r\n        _this.doHideToButton = _this.doHideToButton.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    MessagePopup.prototype.render = function () {\r\n        var _this = this;\r\n        var addressListPopup = this.isShowTeamListPopup ? (React.createElement(TeamListPopup, { isShowTeamListPopup: this.isShowTeamListPopup, id: 'teamlist-popup', key: 'teamlist-popup', selectedLanguage: this.props.selectedLanguage })) : null;\r\n        var toAddressListPopup = (React.createElement(\"div\", null,\r\n            React.createElement(\"button\", { className: 'secondary rounded popup-nav to-address-btn', \"aria-haspopup\": 'true', \"data-popup\": 'addressListPopUp', onClick: this.showToAddressList, id: 'messageToButton', key: 'messageToButton_key', disabled: this.doDisableToButton() }, localeStore.instance.TranslateText('messaging.compose-message.to-button')),\r\n            addressListPopup));\r\n        var _showMandatoryMessagePriority = this.doShowMandatoryMessagePriority();\r\n        var _doHideToButton = this.doHideToButton();\r\n        return (React.createElement(\"div\", { className: classNames('popup full-width popup-overlay  messaging', { 'open': this.props.isOpen }, { 'minimized': this.isMessagePopupMinimized }), id: 'composeMessage', role: 'dialog', \"aria-labelledby\": 'popup2Title', \"aria-describedby\": 'popup2Desc' },\r\n            React.createElement(\"div\", { className: 'popup-wrap compose-new-msg' },\r\n                React.createElement(\"div\", { className: 'popup-content', id: 'popup2Desc' },\r\n                    React.createElement(\"div\", { className: 'comp-msg-top' },\r\n                        React.createElement(\"div\", { className: 'qig-menu-holder' },\r\n                            this.renderQigSection(),\r\n                            React.createElement(\"div\", { className: 'set-priority' },\r\n                                React.createElement(MessagePriorityDropDown, { id: 'select_priority', dropDownType: enums.DropDownType.Priority, className: 'dropdown-wrap align-right', selectedItem: this.getPriorityDropDownItem(this.priorityDropDownSelectedItem), isOpen: this.clickedDropDown === enums.DropDownType.Priority ? this.isDropDownOpen : undefined, items: [{\r\n                                            id: enums.MessagePriority.Standard,\r\n                                            name: this.getPriorityDropDownItem(enums.MessagePriority.Standard)\r\n                                        },\r\n                                        {\r\n                                            id: enums.MessagePriority.Important,\r\n                                            name: this.getPriorityDropDownItem(enums.MessagePriority.Important)\r\n                                        },\r\n                                        _showMandatoryMessagePriority ? {\r\n                                            id: enums.MessagePriority.Mandatory,\r\n                                            name: this.getPriorityDropDownItem(enums.MessagePriority.Mandatory)\r\n                                        } : null], onClick: this.onDropDownClick, onSelect: this.onSelect }))),\r\n                        this.renderAssociatedResponseSection(),\r\n                        React.createElement(\"div\", { className: 'msg-recipient-wrap' },\r\n                            React.createElement(\"div\", { className: 'rec-address-label', id: 'message-popup-to-label' }, _doHideToButton ?\r\n                                localeStore.instance.TranslateText('messaging.compose-message.to-button') + ':' :\r\n                                toAddressListPopup),\r\n                            React.createElement(\"div\", { className: 'recipiants-list-wrap' }, this._isEntireTeamSelected ?\r\n                                React.createElement(\"span\", { className: 'recipiant-name', id: 'message-recipiant-name' }, localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.entire-team') + ';') :\r\n                                this._selectedTeamList.map(function (item, index) {\r\n                                    return React.createElement(\"span\", { className: 'recipiant-name', key: 'recipiant-name' + index.toString() }, item);\r\n                                }))),\r\n                        React.createElement(\"div\", { className: 'comp-subject-wrap' },\r\n                            React.createElement(\"label\", { htmlFor: 'message-subject', id: 'subject-label-popup', className: 'comp-subject-label' }, localeStore.instance.TranslateText('messaging.compose-message.subject') + ':'),\r\n                            React.createElement(Subject, { id: 'message-subject', key: 'key-message-subject', outerClass: 'subject-input-wrap', refName: 'subjectInput', hasFocus: (this.props.messageType === enums.MessageType.InboxCompose ||\r\n                                    this.props.messageType === enums.MessageType.WorklistCompose ||\r\n                                    this.props.messageType === enums.MessageType.TeamCompose), className: 'subject-input', onChange: this.handleSubjectChange, maxLength: 120, isVisible: this.props.isOpen, value: this.messageSubject }))),\r\n                    React.createElement(\"div\", { className: 'comp-msg-bottom', ref: 'msgEditor' },\r\n                        React.createElement(\"div\", { className: 'msg-editor' },\r\n                            React.createElement(MessageEditor, { htmlContent: this.messageBody, id: this.msgEditorId, key: 'key-' + this.msgEditorId, hasFocus: messageHelper.hasFocus(this.props.messageType), \"aria-label\": this.msgEditorId, toggleSaveButtonState: this.toggleSaveButtonState, selectedLanguage: this.props.selectedLanguage, isTinyMCELoaded: this.isTinyMCELoaded })))),\r\n                React.createElement(\"div\", { className: 'popup-header compose-msg-header' },\r\n                    React.createElement(\"h3\", { id: 'popup2Title', className: 'shift-left comp-msg-title' }, messageHelper.getMessageHeader(this.props.messageType)),\r\n                    React.createElement(\"div\", { className: 'shift-left comp-msg-butons' },\r\n                        React.createElement(GenericButton, { id: 'message_send_btn', key: 'key_message_send_btn', className: 'button primary rounded', title: localeStore.instance.TranslateText('messaging.compose-message.send-button-tooltip'), content: localeStore.instance.TranslateText('messaging.compose-message.send-button'), disabled: this.isSendButtonDisabled || this.isShowTeamListPopup, onClick: function () { _this.messageSendValidationCheck(_this.props.messageType); } })),\r\n                    React.createElement(\"div\", { className: 'shift-right minimize-message' },\r\n                        React.createElement(\"a\", { href: 'javascript:void(0)', className: 'minimize-message-link', id: 'message-minimize', title: localeStore.instance.TranslateText('messaging.compose-message.minimise-icon-tooltip'), onClick: this.onMinimize },\r\n                            React.createElement(\"span\", { className: 'minimize-icon lite' }, localeStore.instance.TranslateText('messaging.compose-message.minimise-icon-tooltip'))),\r\n                        React.createElement(\"a\", { href: 'javascript:void(0)', className: 'maximize-message-link', id: 'message-maximize', title: localeStore.instance.TranslateText('messaging.compose-message.maximise-icon-tooltip'), onClick: this.onMaximize },\r\n                            React.createElement(\"span\", { className: 'maxmize-icon lite' }, localeStore.instance.TranslateText('messaging.compose-message.maximise-icon-tooltip'))),\r\n                        React.createElement(\"a\", { href: 'javascript:void(0)', className: 'close-message-link', title: localeStore.instance.TranslateText('messaging.compose-message.close-icon-tooltip'), id: 'message-close', onClick: this.onMessageClose },\r\n                            React.createElement(\"span\", { className: 'close-icon lite' }, localeStore.instance.TranslateText('messaging.compose-message.close-icon-tooltip'))))))));\r\n    };\r\n    /**\r\n     * Component did mount\r\n     */\r\n    MessagePopup.prototype.componentDidMount = function () {\r\n        messageStore.instance.addListener(messageStore.MessageStore.SEND_MESSAGE_SUCCESS_EVENT, this.resetAndCloseMessagePanel);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_OPEN_EVENT, this.onOpen);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_NAVIGATE_EVENT, this.onNavigateAwayFromInbox);\r\n        messageStore.instance.addListener(messageStore.MessageStore.POPUP_DISPLAY_EVENT, this.onPopUpDisplayEvent);\r\n        window.addEventListener('click', this._boundHandleOnClick);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_MINIMIZE_EVENT, this.onMinimizeMessagePanel);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_MAXIMIZE_EVENT, this.onMaximizeMessagePanel);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_CLOSE_EVENT, this.onMessagePanelClose);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_NAVIGATION_EVENT, this.onNavigateFromMessagePanel);\r\n        messageStore.instance.addListener(messageStore.MessageStore.UPDATE_TEAM_LIST_RECEIVED, this.updatedTeamListReceived);\r\n        messageStore.instance.addListener(messageStore.MessageStore.TEAM_LIST_RECEIVED, this.teamListReceived);\r\n        messageStore.instance.addListener(messageStore.MessageStore.UPDATE_MESSAGE_PRIORITY_EVENT, this.messagePriorityUpdate);\r\n        teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.APPROVAL_MANAGEMENT_ACTION_EXECUTED, this.examinerValidation);\r\n        applicationStore.instance.addListener(applicationStore.ApplicationStore.ONLINE_STATUS_UPDATED_EVENT, this.onOnlineStatusChanged);\r\n        localeStore.instance.addListener(localeStore.LocaleStore.LOCALE_CHANGE_EVENT, this.languageChanged);\r\n        // Set the variables from props.\r\n        if (this.props.messageType === enums.MessageType.TeamCompose) {\r\n            this.selectedQig = this.props.selectedQigItem;\r\n            this.selectedQigItemId = this.props.selectedQigItemId;\r\n            this.questionPaperPartId = this.props.questionPaperPartId;\r\n            this.onOpen(enums.MessageType.TeamCompose);\r\n        }\r\n    };\r\n    /**\r\n     * Component will unmount\r\n     */\r\n    MessagePopup.prototype.componentWillUnmount = function () {\r\n        messageStore.instance.removeListener(messageStore.MessageStore.SEND_MESSAGE_SUCCESS_EVENT, this.resetAndCloseMessagePanel);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_OPEN_EVENT, this.onOpen);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_NAVIGATE_EVENT, this.onNavigateAwayFromInbox);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.POPUP_DISPLAY_EVENT, this.onPopUpDisplayEvent);\r\n        window.removeEventListener('click', this._boundHandleOnClick);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_MINIMIZE_EVENT, this.onMinimizeMessagePanel);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_MAXIMIZE_EVENT, this.onMaximizeMessagePanel);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_CLOSE_EVENT, this.onMessagePanelClose);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_NAVIGATION_EVENT, this.onNavigateFromMessagePanel);\r\n        keyDownHelper.instance.Activate(enums.MarkEntryDeactivator.Messaging);\r\n        if (messageStore.instance.messageViewAction !== enums.MessageViewAction.None) {\r\n            messagingActionCreator.messageAction(enums.MessageViewAction.None);\r\n        }\r\n        messageStore.instance.removeListener(messageStore.MessageStore.UPDATE_TEAM_LIST_RECEIVED, this.updatedTeamListReceived);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.TEAM_LIST_RECEIVED, this.teamListReceived);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.UPDATE_MESSAGE_PRIORITY_EVENT, this.messagePriorityUpdate);\r\n        teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.APPROVAL_MANAGEMENT_ACTION_EXECUTED, this.examinerValidation);\r\n        applicationStore.instance.removeListener(applicationStore.ApplicationStore.ONLINE_STATUS_UPDATED_EVENT, this.onOnlineStatusChanged);\r\n        localeStore.instance.removeListener(localeStore.LocaleStore.LOCALE_CHANGE_EVENT, this.languageChanged);\r\n    };\r\n    /**\r\n     * Component will receive props\r\n     * @param {Props} nextProps\r\n     */\r\n    MessagePopup.prototype.componentWillReceiveProps = function (nextProps) {\r\n        // Defect 44392 fix - select a qig text in message area is not getting localized upon changing language \r\n        if (nextProps.selectedQigItemId > 0) {\r\n            this.selectedQig = nextProps.selectedQigItem;\r\n        }\r\n        else {\r\n            this.selectedQig = localeStore.instance.TranslateText('messaging.compose-message.select-qig-placeholder');\r\n        }\r\n        this.selectedQigItemId = nextProps.selectedQigItemId;\r\n        this.questionPaperPartId = nextProps.questionPaperPartId;\r\n        // to close teamlist popup while opening new message\r\n        if (this.selectedQigItemId === 0) {\r\n            this.isShowTeamListPopup = false;\r\n        }\r\n    };\r\n    /**\r\n     * Set Inbox Forward and Replay Message details\r\n     */\r\n    MessagePopup.prototype.setInboxForwardReplyMessageDetails = function () {\r\n        keyDownHelper.instance.DeActivate(enums.MarkEntryDeactivator.Messaging);\r\n        // set messageSubject for reply and forward messages\r\n        if ((this.props.messageType === enums.MessageType.InboxForward || this.props.messageType === enums.MessageType.InboxReply)\r\n            && this.props.isReplyOrForwardClicked && this.props.selectedMessage) {\r\n            // reset isMessagePopupMinimized variable\r\n            this.isMessagePopupMinimized = false;\r\n            this.messageSubject = messageHelper.getSubjectContent(this.props.messageType, this.props.subject);\r\n            this.priorityDropDownSelectedItem = this.props.priorityDropDownSelectedItem;\r\n            this.messageBody = this.props.messageBody;\r\n            var qigId_1 = this.props.selectedQigItemId;\r\n            var examinerRoleId = this.props.qigItemsList.filter(function (x) { return x.id === qigId_1; })[0].examinerRoleId;\r\n            var args = {\r\n                examinerRoleId: examinerRoleId,\r\n                qigId: qigId_1\r\n            };\r\n            // get the teamdetails to find whether atleast one subordinate is\r\n            // selected(for displaying mandatory priority options)\r\n            messagingActionCreator.getTeamDetails(args);\r\n        }\r\n    };\r\n    /**\r\n     * Component did update\r\n     */\r\n    MessagePopup.prototype.componentDidUpdate = function () {\r\n        // enable or disable send button while changing QIG dropdown\r\n        if (this.props.isOpen) {\r\n            this.enableDisableSendButton();\r\n        }\r\n        if (this.doTriggerMessageOpenEvent) {\r\n            this.doTriggerMessageOpenEvent = false;\r\n            this.onOpen(this.msgType);\r\n        }\r\n    };\r\n    /**\r\n     * To avoid the qigs in which the selected examiner has no supervisor\r\n     * @param {Array<Item>} qigItemsList\r\n     * @returns\r\n     */\r\n    MessagePopup.prototype.filterQigItems = function (qigItemsList) {\r\n        return qigItemsList.filter(function (x) { return x.parentExaminerId !== 0; });\r\n    };\r\n    /**\r\n     * To show madatory message priority option in dropdown\r\n     */\r\n    MessagePopup.prototype.doShowMandatoryMessagePriority = function () {\r\n        var _this = this;\r\n        var isMandatoryPriorityAvailable = false;\r\n        // Mandatory Message Priority is availability only if :\r\n        // 1. It is a TeamCompose as TeamCompose is always to subordinates. OR\r\n        // 2. If not WorklistCompose as WorklistCompose will be always to Supervisor. AND\r\n        //      (i).[QIG is not selected.] OR\r\n        //      (ii).[If QIG is selected AND there are no selected examiners.] OR\r\n        //      (iii).[If QIG is selected AND there are selected examiners AND atleast one subordinate is selected.]\r\n        // PS : ResponseCompose Scenarios are handled in message.tsx\r\n        if (this.props.messageType === enums.MessageType.TeamCompose ||\r\n            (this.props.messageType !== enums.MessageType.WorklistCompose &&\r\n                (this.selectedQigItemId === 0 ||\r\n                    (this.selectedQigItemId > 0 && this._selectedTeamList && this._selectedTeamList.length === 0) ||\r\n                    (this.selectedQigItemId > 0 && this._selectedTeamList && this._selectedTeamList.length > 0 && this.isSubordinateSelected)))) {\r\n            isMandatoryPriorityAvailable = true;\r\n        }\r\n        if (this.props.qigItemsList.length > 0 && this.selectedQigItemId > 0) {\r\n            var selectedQig = this.props.qigItemsList.filter(function (x) { return x.id === _this.selectedQigItemId; });\r\n            var currentExaminerApprovalStatus = selectedQig[0].approvalStatusId;\r\n            if (currentExaminerApprovalStatus === enums.ExaminerApproval.NotApproved ||\r\n                currentExaminerApprovalStatus === enums.ExaminerApproval.Suspended) {\r\n                isMandatoryPriorityAvailable = false;\r\n            }\r\n        }\r\n        return this._mandatoryMessagesFromMarkingToolCC && isMandatoryPriorityAvailable;\r\n    };\r\n    /**\r\n     * show or hide 'To' button\r\n     */\r\n    MessagePopup.prototype.doHideToButton = function () {\r\n        var _subordinates = null;\r\n        if (messageStore.instance.teamDetails &&\r\n            messageStore.instance.teamDetails.team &&\r\n            messageStore.instance.teamDetails.team.subordinates) {\r\n            _subordinates = messageStore.instance.teamDetails.team.subordinates;\r\n        }\r\n        return ((_subordinates && _subordinates.length) === 0 ||\r\n            this.props.messageType === enums.MessageType.InboxReply ||\r\n            this.props.messageType === enums.MessageType.WorklistCompose ||\r\n            this.props.messageType === enums.MessageType.TeamCompose);\r\n    };\r\n    /**\r\n     * Get selected subordinated list.\r\n     */\r\n    MessagePopup.prototype.getSelectedSubordinateList = function (teamList) {\r\n        var that = this;\r\n        teamList.map(function (examinerInfo) {\r\n            if (examinerInfo.isChecked) {\r\n                that.isSubordinateSelected = true;\r\n                that._selectedTeamList.push(examinerInfo.fullName + ';');\r\n            }\r\n            if (examinerInfo.subordinates.length > 0) {\r\n                that.getSelectedSubordinateList(examinerInfo.subordinates);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Ensure Reply is done to a subordinate.\r\n     */\r\n    MessagePopup.prototype.isReplyToSubordinate = function (teamList) {\r\n        // Suboridinates of the current examiner will be passed here\r\n        // If the selectedMessage.fromExaminerId is one among them, set isSubordinate as true.\r\n        var that = this;\r\n        var isSubordinate = false;\r\n        teamList.map(function (examinerInfo) {\r\n            if (examinerInfo.examinerId === that.props.selectedMessage.fromExaminerId) {\r\n                isSubordinate = true;\r\n            }\r\n            if (examinerInfo.subordinates.length > 0) {\r\n                that.isReplyToSubordinate(examinerInfo.subordinates);\r\n            }\r\n        });\r\n        return isSubordinate;\r\n    };\r\n    /**\r\n     * This method will set message panel property for sending message to the parent\r\n     */\r\n    MessagePopup.prototype.setMessagePanelToTabForParent = function (parent) {\r\n        this.toFieldIds.push(parent.examinerId);\r\n        this.toFieldValues.push(parent.fullName);\r\n        this._selectedTeamList.push(parent.fullName);\r\n        this.isSubordinateSelected = false;\r\n    };\r\n    /**\r\n     * check to enable to button\r\n     */\r\n    MessagePopup.prototype.doDisableToButton = function () {\r\n        if (this.selectedQigItemId === 0 ||\r\n            !messageStore.instance.teamDetails ||\r\n            messageStore.instance.teamDetails.team.subordinates.length === 0 || this._disableToButtonForStandardisationQig) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    return MessagePopup;\r\n}(MessageBase));\r\nmodule.exports = MessagePopup;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 458:
/* no static exports found */
/* all exports used */
/*!***************************************************************************!*\
  !*** ./src/components/utility/grid/worklisthelpers/worklisthelperbase.ts ***!
  \***************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar gridRow = __webpack_require__(/*! ../../../utility/grid/gridrow */ 296);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar gridCell = __webpack_require__(/*! ../../../utility/grid/gridcell */ 274);\r\nvar MarkingProgress = __webpack_require__(/*! ../../../worklist/shared/markingprogress */ 369);\r\nvar LastUpdatedColumn = __webpack_require__(/*! ../../../worklist/shared/lastupdatedcolumn */ 388);\r\nvar totalMark = __webpack_require__(/*! ../../../worklist/shared/totalmarkdetail */ 391);\r\nvar responseIdColumn = __webpack_require__(/*! ../../../worklist/shared/responseidcolumn */ 1232);\r\nvar ResponseIdGridElement = __webpack_require__(/*! ../../../worklist/shared/responseidgridelement */ 370);\r\nvar allocatedDateColumn = __webpack_require__(/*! ../../../worklist/shared/allocateddatecolumn */ 1224);\r\nvar LinkedMessageIndicator = __webpack_require__(/*! ../../../worklist/shared/linkedmessageindicator */ 389);\r\nvar AccuracyIndicator = __webpack_require__(/*! ../../../worklist/shared/accuracyindicator */ 496);\r\nvar MarksDifferenceColumn = __webpack_require__(/*! ../../../worklist/shared/marksdifferencecolumn */ 1228);\r\nvar MarksDifference = __webpack_require__(/*! ../../../worklist/shared/marksdifference */ 592);\r\nvar LinkedExceptionIndicator = __webpack_require__(/*! ../../../worklist/shared/linkedexceptionindicator */ 1227);\r\nvar gracePeriodTime = __webpack_require__(/*! ../../../worklist/shared/graceperiodtime */ 591);\r\nvar localeStore = __webpack_require__(/*! ../../../../stores/locale/localestore */ 226);\r\nvar worklistValidatorFactory = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorfactory */ 319);\r\nvar worklistValidatorList = __webpack_require__(/*! ../../../../utility/worklistvalidators/worklistvalidatorlist */ 304);\r\nvar enums = __webpack_require__(/*! ../../enums */ 225);\r\nvar GenericComponentWrapper = __webpack_require__(/*! ../genericcomponentwrapper */ 365);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar allPageAnnotationIndicator = __webpack_require__(/*! ../../../worklist/shared/allpageannotationindicator */ 368);\r\nvar ResponseTypeLabel = __webpack_require__(/*! ../../../worklist/shared/responsetypelabel */ 593);\r\nvar ColumnHeader = __webpack_require__(/*! ../../../worklist/shared/columnheader */ 329);\r\nvar allocatedDateElement = __webpack_require__(/*! ../../../worklist/shared/allocateddate */ 1223);\r\nvar slaoannotationindicator = __webpack_require__(/*! ../../../worklist/shared/slaoannotationindicator */ 371);\r\nvar qualityFeedbackHelper = __webpack_require__(/*! ../../../../utility/qualityfeedback/qualityfeedbackhelper */ 309);\r\nvar QualityFeedbackBanner = __webpack_require__(/*! ../../../worklist/banner/qualityfeedbackbanner */ 585);\r\nvar gridColumnNames = __webpack_require__(/*! ../gridcolumnnames */ 291);\r\nvar jsonRefResolver = __webpack_require__(/*! ../../../../utility/jsonrefresolver/josnrefresolver */ 271);\r\nvar qigStore = __webpack_require__(/*! ../../../../stores/qigselector/qigstore */ 230);\r\nvar worklistGridColumnsJson = __webpack_require__(/*! ../../../utility/grid/worklistgridcolumns.json */ 449);\r\nvar GenericTextColumn = __webpack_require__(/*! ../../../worklist/shared/generictextcolumn */ 387);\r\nvar worklistStore = __webpack_require__(/*! ../../../../stores/worklist/workliststore */ 231);\r\nvar comparerList = __webpack_require__(/*! ../../../../utility/sorting/sortbase/comparerlist */ 262);\r\nvar SampleLabel = __webpack_require__(/*! ../../../worklist/shared/samplelabel */ 1234);\r\nvar ReviewedByLabel = __webpack_require__(/*! ../../../worklist/shared/reviewedbylabel */ 1233);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../markeroperationmode/markeroperationmodefactory */ 232);\r\nvar OriginalMark = __webpack_require__(/*! ../../../worklist/shared/originalmarktotal */ 1230);\r\nvar OriginalMarkAccuracy = __webpack_require__(/*! ../../../worklist/shared/originalmarkaccuracy */ 1229);\r\nvar TagList = __webpack_require__(/*! ../../../response/responsescreen/taglist */ 313);\r\nvar allFilesNotViewedIndicator = __webpack_require__(/*! ../../../worklist/shared/allfilesnotviewedindicator */ 386);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../../ecoursework/ecourseworkhelper */ 238);\r\nvar SupervisorReviewComment = __webpack_require__(/*! ../../../worklist/shared/supervisorreviewcomment */ 1236);\r\n/**\r\n * class for WorkList Helper implementation\r\n */\r\nvar WorklistHelperBase = /** @class */ (function () {\r\n    function WorklistHelperBase() {\r\n        this._dateLengthInPixel = 0;\r\n        this._isNonNumeric = false;\r\n    }\r\n    /**\r\n     * Get the Configurable characteristic value.\r\n     * @param ccName\r\n     * @returns\r\n     */\r\n    WorklistHelperBase.prototype.getCCValue = function (ccName, markSchemeGroupId) {\r\n        return configurableCharacteristicsHelper.getCharacteristicValue(ccName, markSchemeGroupId);\r\n    };\r\n    /**\r\n     * GenerateRowDefinion is used for generating row collection for WorkList Grid\r\n     * @param responseListData - list of live open responses\r\n     * @param worklistType - type of the worklist choosen\r\n     * @param responseType - type of the response\r\n     * @param gridType - type of gridview tile/detail\r\n     * @returns grid row collection.\r\n     */\r\n    WorklistHelperBase.prototype.generateRowDefinion = function (responseListData, responseType, gridType) {\r\n        return this._immutableWorkListCollection;\r\n    };\r\n    /**\r\n     * GenerateTableHeader is used for generating header collection.\r\n     * @param responseType - type of the response\r\n     * @param worklistType - type of the worklist\r\n     * @param comparerName - type of the comparer Name\r\n     * @param sortDirection - type of the sort Direction ascending or descending\r\n     * @returns header collection.\r\n     */\r\n    WorklistHelperBase.prototype.generateTableHeader = function (responseType, worklistType, comparerName, sortDirection) {\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(worklistGridColumnsJson);\r\n        var _workListTableHeaderCollection = this.getTableHeaderForListView(worklistType, responseType, comparerName, sortDirection);\r\n        return _workListTableHeaderCollection;\r\n    };\r\n    /**\r\n     * GenerateRowDefinion is used for generating row collection for WorkList Grid\r\n     * @param responseType - type of the response\r\n     * @param gridType - type of gridview tile/detail\r\n     * @returns grid row collection.\r\n     */\r\n    WorklistHelperBase.prototype.generateFrozenRowBody = function (responseListData, responseType, worklistType) {\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(worklistGridColumnsJson);\r\n        var _workListFrozenRowBodyCollection = this.getFrozenRowBodyForListView(responseListData, worklistType, responseType);\r\n        return _workListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * Is used for generating row header collection for WorkList table\r\n     * @param responseListData - list of live open responses\r\n     * @param responseType - type of the response\r\n     * @param gridType - type of gridview tile/detail\r\n     * @returns grid row collection.\r\n     */\r\n    WorklistHelperBase.prototype.generateFrozenRowHeader = function (responseListData, responseType, worklistType, comparerName, sortDirection, isSortable) {\r\n        if (isSortable === void 0) { isSortable = true; }\r\n        this.resolvedGridColumnsJson = jsonRefResolver.resolveRefs(worklistGridColumnsJson);\r\n        var _workListFrozenRowHeaderCollection = this.getFrozenRowHeaderForListView(worklistType, responseType, comparerName, sortDirection, isSortable);\r\n        return _workListFrozenRowHeaderCollection;\r\n    };\r\n    /**\r\n     * creating react element for the  TotalMark component\r\n     * @param responseData - response data\r\n     * @param hasNumericMark - flag for hasNumericMark\r\n     * @param maximumMark - maximum Mark for the response\r\n     * @param propsNames - prop names for the component\r\n     * @param seq - key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getTotalMarkElement = function (responseData, hasNumericMark, maximumMark, propsNames, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            isNonNumericMark: !hasNumericMark,\r\n            maximumMark: maximumMark,\r\n            totalMark: responseData[propsNames.totalMarkValue],\r\n            markingProgress: responseData[propsNames.markingProgress],\r\n            selectedLanguage: localeStore.instance.Locale\r\n        };\r\n        this._isNonNumeric = !hasNumericMark;\r\n        return React.createElement(totalMark, componentProps);\r\n    };\r\n    /**\r\n     * NOTE: allocatedDateColumn is Obsolete after New List view worklist Changes ***\r\n     * creating react element for the  allocatedDateColumn component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the component\r\n     * @param seq - key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getAllocatedDateElement = function (responseData, propsNames, seq, showAllocatedDateElement, showMarkingProgress, showGracePeriodTimeElement, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            dateValue: responseData[propsNames.allocatedDate] ? new Date(responseData[propsNames.allocatedDate]) : null,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isResponseHasSLAO: responseData[propsNames.hasAdditionalObjects],\r\n            isAllAnnotated: responseData[propsNames.hasAllPagesAnnotated],\r\n            markingProgress: showMarkingProgress ? responseData[propsNames.markingProgress] : 100,\r\n            showAllocatedDate: showAllocatedDateElement,\r\n            showTimeToEndofGracePeriod: showGracePeriodTimeElement,\r\n            timeToEndOfGracePeriod: responseData[propsNames.timeToEndOfGracePeriod],\r\n            isTileView: isTileView,\r\n            renderedOn: Date.now(),\r\n            markSchemeGroupId: responseData.markSchemeGroupId\r\n        };\r\n        return React.createElement(allocatedDateColumn, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  getGracePeriodElement component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the component\r\n     * @param seq - key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getGracePeriodElement = function (responseData, propsNames, seq, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            timeToEndOfGracePeriod: responseData[propsNames.timeToEndOfGracePeriod],\r\n            selectedLanguage: localeStore.instance.Locale\r\n        };\r\n        return React.createElement(gracePeriodTime, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  getSLAOIndicatorElement component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the component\r\n     * @param seq - key value for the component\r\n     * @param showMarkingProgress - key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getSLAOIndicatorElement = function (responseData, propsNames, seq, showMarkingProgress, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isResponseHasSLAO: responseData[propsNames.hasAdditionalObjects],\r\n            isAllAnnotated: responseData[propsNames.hasAllPagesAnnotated],\r\n            isMarkingCompleted: ((showMarkingProgress ? responseData[propsNames.markingProgress] : 100) === 100) ? true : false,\r\n            isTileView: isTileView,\r\n            markSchemeGroupId: responseData.markSchemeGroupId\r\n        };\r\n        return React.createElement(slaoannotationindicator, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  getAllPageAnnotatedIndicatorElement component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the component\r\n     * @param seq - key value for the component\r\n     * @param showMarkingProgress - key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getAllPageAnnotatedIndicatorElement = function (responseData, propsNames, seq, showMarkingProgress, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isAllAnnotated: responseData[propsNames.hasAllPagesAnnotated],\r\n            isMarkingCompleted: ((showMarkingProgress ? responseData[propsNames.markingProgress] : 100) === 100) ? true : false,\r\n            isTileView: isTileView,\r\n            markSchemeGroupId: responseData.markSchemeGroupId\r\n        };\r\n        return React.createElement(allPageAnnotationIndicator, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  getAllocatedDate component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the component\r\n     * @param seq - key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getAllocatedDate = function (responseData, propsNames, seq, showAllocatedDateElement) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            dateValue: responseData[propsNames.allocatedDate] ? new Date(responseData[propsNames.allocatedDate]) : null,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            showAllocatedDate: showAllocatedDateElement,\r\n            renderedOn: Date.now()\r\n        };\r\n        return React.createElement(allocatedDateElement, componentProps);\r\n    };\r\n    /**\r\n     * Creating react component for the LinkedMessage component\r\n     * @param {Response} responseData - response data\r\n     * @param {any} propsNames prop names for the component\r\n     * @param {number} seq key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getLinkedMessageElement = function (responseData, propsNames, seq, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            messageCount: responseData[propsNames.unreadMessagesCount],\r\n            hasMessages: responseData[propsNames.hasMessages],\r\n            displayId: responseData[propsNames.displayId],\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isTileView: isTileView,\r\n            isTeamManagementMode: markerOperationModeFactory.operationMode.isTeamManagementMode\r\n        };\r\n        return React.createElement(LinkedMessageIndicator, componentProps);\r\n    };\r\n    /**\r\n     * Creating react component for the AccuracyIndicator component\r\n     * @param {Response} responseData - response data\r\n     * @param {any} propsNames prop names for the component\r\n     * @param {number} seq key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getAccuracyIndicatorElement = function (responseData, propsNames, seq, isTileView) {\r\n        var componentProps;\r\n        var tileView = isTileView !== null ? isTileView : false;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            accuracyIndicator: responseData[propsNames.accuracyIndicatorTypeID],\r\n            isTileView: tileView,\r\n            selectedLanguage: localeStore.instance.Locale\r\n        };\r\n        return React.createElement(AccuracyIndicator, componentProps);\r\n    };\r\n    /**\r\n     * Creating react component for the MarksDifferenceColumn component\r\n     * @param {Response} responseData - response data\r\n     * @param {any} propsNames prop names for the component\r\n     * @param {number} seq key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getMarksDifferenceColumnElement = function (responseData, propsNames, seq, isTileView) {\r\n        var componentProps;\r\n        var tileView = isTileView !== null ? isTileView : false;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            absoluteMarksDifference: responseData[propsNames.absoluteMarksDifference],\r\n            totalMarksDifference: responseData[propsNames.totalMarksDifference],\r\n            accuracyIndicator: responseData[propsNames.accuracyIndicatorTypeID],\r\n            isTileView: tileView,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            showAccuracyIndicator: this.doShowAccuracyIndicator,\r\n            markSchemeGroupId: qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId\r\n        };\r\n        return React.createElement(MarksDifferenceColumn, componentProps);\r\n    };\r\n    /**\r\n     * Creating react component for the MarksDifferenceColumn component\r\n     * @param {Response} responseData - response data\r\n     * @param {any} propsNames prop names for the component\r\n     * @param {number} seq key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getMarksDifferenceElement = function (responseData, propsNames, seq, marksDifferenceType, isTileView) {\r\n        var componentProps;\r\n        var marksDifference;\r\n        var marksDifferenceText;\r\n        var title;\r\n        var className;\r\n        var classNameAmd = 'amd small-text';\r\n        var classNameTmd = 'tmd small-text';\r\n        var titleAmd = markerOperationModeFactory.operationMode.absoluteMarkDifferenceTitle;\r\n        var titleTmd = markerOperationModeFactory.operationMode.totalMarkDifferenceTitle;\r\n        var marksDifferenceTextAmd = 'marking.worklist.tile-view-labels.amd';\r\n        var marksDifferenceTextTmd = 'marking.worklist.tile-view-labels.tmd';\r\n        switch (marksDifferenceType) {\r\n            case enums.MarksDifferenceType.AbsoluteMarksDifference:\r\n                marksDifference = responseData[propsNames.absoluteMarksDifference];\r\n                marksDifferenceText = marksDifferenceTextAmd;\r\n                title = titleAmd;\r\n                className = classNameAmd;\r\n                break;\r\n            case enums.MarksDifferenceType.TotalMarksDifference:\r\n                marksDifference = responseData[propsNames.totalMarksDifference];\r\n                marksDifferenceText = marksDifferenceTextTmd;\r\n                title = titleTmd;\r\n                className = classNameTmd;\r\n                break;\r\n        }\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            className: className,\r\n            title: title,\r\n            //TODO: remove the below ternaries once the AMD,TMD and accuracy columns included in API and SP\r\n            marksDifference: (marksDifference) ? marksDifference : '',\r\n            marksDifferenceText: (marksDifferenceText) ? marksDifferenceText : '',\r\n            marksDifferenceType: (marksDifferenceType) ? marksDifferenceType : '',\r\n            isTileView: isTileView\r\n        };\r\n        return React.createElement(MarksDifference, componentProps);\r\n    };\r\n    /**\r\n     * Creating react component for Linked Exception component.\r\n     * @param {Response} responseData response data\r\n     * @param {any} propsNames prop names for the component\r\n     * @param {number} seq key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getLinkedExceptionElement = function (responseData, propsNames, seq, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            hasExceptions: responseData[propsNames.hasExceptions],\r\n            hasBlockingExceptions: responseData[propsNames.hasBlockingExceptions],\r\n            hasZoningExceptions: responseData[propsNames.hasZoningExceptions],\r\n            isZoningExceptionRaisedInSameScript: responseData[propsNames.isZoningExceptionRaisedInSameScript],\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            resolvedExceptionsCount: responseData[propsNames.resolvedExceptionsCount],\r\n            isTileView: isTileView,\r\n            displayId: responseData[propsNames.displayId],\r\n            isTeamManagementMode: markerOperationModeFactory.operationMode.isTeamManagementMode,\r\n            unactionedExceptionCount: responseData[propsNames.unactionedExceptionCount]\r\n        };\r\n        return React.createElement(LinkedExceptionIndicator, componentProps);\r\n    };\r\n    /**\r\n     * Get generic text column\r\n     * @param {string} textValue\r\n     * @param {any} propsNames\r\n     * @param {string} seq\r\n     * @returns\r\n     */\r\n    WorklistHelperBase.prototype.getGenericTextElement = function (textValue, seq) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            textValue: textValue\r\n        };\r\n        return React.createElement(GenericTextColumn, componentProps);\r\n    };\r\n    /**\r\n     * Set row style to amber if the response has blocking exceptions\r\n     * or all pages are not annotated\r\n     * Set row style based on Accuracy Indicator\r\n     * @param responseStatus\r\n     * @param accuracyType\r\n     */\r\n    WorklistHelperBase.prototype.setRowStyle = function (responseStatus, accuracyType) {\r\n        var accuracy;\r\n        /**  'else' condition is put as the exception/ all pages annotated icons won't appear in Closed worklist */\r\n        if (worklistStore.instance.isMarkingCheckMode) {\r\n            return 'row';\r\n        }\r\n        else if (responseStatus.contains(enums.ResponseStatus.hasException) ||\r\n            responseStatus.contains(enums.ResponseStatus.hasZoningException) ||\r\n            responseStatus.contains(enums.ResponseStatus.notAllPagesAnnotated) ||\r\n            responseStatus.contains(enums.ResponseStatus.markChangeReasonNotExist) ||\r\n            responseStatus.contains(enums.ResponseStatus.supervisorRemarkDecisionNotSelected)) {\r\n            return 'row warning-alert';\r\n        }\r\n        else if (accuracyType !== null && this.doShowAccuracyIndicator) {\r\n            switch (accuracyType) {\r\n                case enums.AccuracyIndicatorType.Accurate:\r\n                case enums.AccuracyIndicatorType.AccurateNR:\r\n                    accuracy = 'row accurate';\r\n                    break;\r\n                case enums.AccuracyIndicatorType.OutsideTolerance:\r\n                case enums.AccuracyIndicatorType.OutsideToleranceNR:\r\n                    accuracy = 'row inaccurate';\r\n                    break;\r\n                case enums.AccuracyIndicatorType.WithinTolerance:\r\n                case enums.AccuracyIndicatorType.WithinToleranceNR:\r\n                    accuracy = 'row intolerance';\r\n                    break;\r\n                default:\r\n                    accuracy = 'row';\r\n                    break;\r\n            }\r\n            return accuracy;\r\n        }\r\n        else {\r\n            return 'row';\r\n        }\r\n    };\r\n    Object.defineProperty(WorklistHelperBase.prototype, \"doShowAccuracyIndicator\", {\r\n        get: function () {\r\n            return markerOperationModeFactory.operationMode.doShowAccuracyIndicator;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(WorklistHelperBase.prototype, \"showSeedLabel\", {\r\n        /**\r\n         * returns true if the seed label should be displayed.\r\n         * @returns\r\n         */\r\n        get: function () {\r\n            var workListType = worklistStore.instance.currentWorklistType;\r\n            if (markerOperationModeFactory.operationMode.isAutomaticQualityFeedbackCCOn &&\r\n                (workListType === enums.WorklistType.live || workListType === enums.WorklistType.directedRemark)) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Set row title based on Accuracy Indicator\r\n     * @param accuracyType\r\n     */\r\n    WorklistHelperBase.prototype.setRowTitle = function (accuracyType) {\r\n        var title;\r\n        if (accuracyType !== null) {\r\n            switch (accuracyType) {\r\n                case enums.AccuracyIndicatorType.Accurate:\r\n                case enums.AccuracyIndicatorType.AccurateNR:\r\n                    title = markerOperationModeFactory.operationMode.accurateAccuracyIndicatorTitle;\r\n                    break;\r\n                case enums.AccuracyIndicatorType.OutsideTolerance:\r\n                case enums.AccuracyIndicatorType.OutsideToleranceNR:\r\n                    title = markerOperationModeFactory.operationMode.inaccurateAccuracyIndicatorTitle;\r\n                    break;\r\n                case enums.AccuracyIndicatorType.WithinTolerance:\r\n                case enums.AccuracyIndicatorType.WithinToleranceNR:\r\n                    title = markerOperationModeFactory.operationMode.intoleranceAccuracyIndicatorTitle;\r\n                    break;\r\n                default:\r\n                    title = '';\r\n                    break;\r\n            }\r\n            return title;\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    };\r\n    /**\r\n     * creating react element for the  MarkingProgress component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the MarkingProgress component\r\n     * @param seq - key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getMarkingProgressElement = function (responseData, propsNames, seq, responseStatuses, worklistType, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        var _worklistValidatorList = worklistValidatorList.liveOpen;\r\n        if (worklistStore.instance.currentWorklistType === enums.WorklistType.directedRemark) {\r\n            _worklistValidatorList = worklistValidatorList.directedRemarkOpen;\r\n        }\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            responseStatus: worklistValidatorFactory.getValidator(_worklistValidatorList).submitButtonValidate(responseData),\r\n            progress: responseData[propsNames.markingProgress],\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            markGroupId: responseData[propsNames.markGroupId],\r\n            isSubmitDisabled: markerOperationModeFactory.operationMode.isSubmitDisabled(worklistType),\r\n            isTileView: isTileView,\r\n            isTeamManagementMode: markerOperationModeFactory.operationMode.isTeamManagementMode\r\n        };\r\n        return React.createElement(MarkingProgress, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  MarkingProgress component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the MarkingProgress component\r\n     * @param seq - key value for the component\r\n     * @param responseMode - key value for the component\r\n     * @param isTileView - whether tile view\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getLastUpdatedElement = function (responseData, propsNames, seq, responseMode, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            dateType: responseMode === enums.ResponseMode.open || responseMode === enums.ResponseMode.pending ?\r\n                enums.WorkListDateType.lastUpdatedDate : enums.WorkListDateType.submittedDate,\r\n            dateValue: this.getDateValueForResponseIdElement(responseMode, responseData, propsNames),\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isTileView: isTileView\r\n        };\r\n        return React.createElement(LastUpdatedColumn, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  ResponseIdColumn component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the component\r\n     * @param seq - key value for the component\r\n     * @param displayText - the text to append with the display id.\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getResponseIdColumnElement = function (responseData, propsNames, seq, hasNumericMark, responseMode, displayText, isResponseIdClickable, isSeedResponse, isTileView, isResponseLabelType) {\r\n        if (isResponseIdClickable === void 0) { isResponseIdClickable = true; }\r\n        if (isSeedResponse === void 0) { isSeedResponse = false; }\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        var _displayId = ((displayText) ? displayText : '') + responseData[propsNames.displayId];\r\n        var qualityFeedbackCCOn = (configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.AutomaticQualityFeedback, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId) === 'true');\r\n        if ((responseData).isWholeResponse) {\r\n            isResponseLabelType = enums.ResponseType.WholeResponse;\r\n        }\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            displayId: _displayId,\r\n            isClickable: isResponseIdClickable,\r\n            worklistDateType: responseMode === enums.ResponseMode.open || responseMode === enums.ResponseMode.pending ?\r\n                enums.WorkListDateType.lastUpdatedDate : enums.WorkListDateType.submittedDate,\r\n            dateValue: this.getDateValueForResponseIdElement(responseMode, responseData, propsNames),\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            isResponseTypeLabelVisible: ((responseData).isWholeResponse && (responseData).atypicalStatus === 0) ? true :\r\n                !markerOperationModeFactory.operationMode.isSeedLabelHidden\r\n                    && isSeedResponse && responseData.accuracyIndicatorTypeID !== enums.AccuracyIndicatorType.Unknown,\r\n            isTileView: isTileView,\r\n            hasNumericMark: hasNumericMark,\r\n            markingProgress: responseData.markingProgress,\r\n            totalMarkValue: responseData.totalMarkValue,\r\n            responseType: isResponseLabelType\r\n        };\r\n        return React.createElement(responseIdColumn, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  ResponseIdColumn component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the component\r\n     * @param seq - key value for the component\r\n     * @param displayText - the text to append with the display id.\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getResponseIdElement = function (responseData, propsNames, seq, displayText, isResponseIdClickable, isTileView) {\r\n        if (isResponseIdClickable === void 0) { isResponseIdClickable = true; }\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        var _displayText;\r\n        if (displayText) {\r\n            _displayText = (responseData[propsNames.rigOrder] !== 0 && !isTileView) ?\r\n                displayText + responseData[propsNames.rigOrder] + ' (' + responseData[propsNames.esDisplayId] + ')' :\r\n                displayText + responseData[propsNames.displayId];\r\n        }\r\n        else {\r\n            _displayText = responseData[propsNames.displayId];\r\n        }\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            displayId: responseData[propsNames.displayId],\r\n            displayText: _displayText,\r\n            isClickable: isResponseIdClickable,\r\n            isTileView: isTileView\r\n        };\r\n        return React.createElement(ResponseIdGridElement, componentProps);\r\n    };\r\n    /**\r\n     * get date value fpr response id column according to response mode\r\n     * @param responseMode\r\n     * @param response\r\n     * @param propsNames\r\n     */\r\n    WorklistHelperBase.prototype.getDateValueForResponseIdElement = function (responseMode, response, propsNames) {\r\n        var dateValue = undefined;\r\n        if (responseMode === enums.ResponseMode.open || responseMode === enums.ResponseMode.pending) {\r\n            dateValue = response[propsNames.updatedDate] ?\r\n                new Date(response[propsNames.updatedDate]) : null;\r\n        }\r\n        else {\r\n            dateValue = response[propsNames.submittedDate] ?\r\n                new Date(response[propsNames.submittedDate]) : null;\r\n        }\r\n        return dateValue;\r\n    };\r\n    /**\r\n     * create a wraper for grid column\r\n     * @param elements\r\n     * @param className\r\n     * @param seq\r\n     */\r\n    WorklistHelperBase.prototype.getWrappedColumn = function (elements, className, seq) {\r\n        var componentProps;\r\n        var _workListCell;\r\n        var _gridCell = new gridCell();\r\n        var element;\r\n        componentProps = {\r\n            key: seq,\r\n            divClassName: className,\r\n            componentList: elements\r\n        };\r\n        _workListCell = new gridCell();\r\n        _workListCell.columnElement = React.createElement(GenericComponentWrapper, componentProps);\r\n        return _workListCell;\r\n    };\r\n    /**\r\n     * creating grid columns collection\r\n     * @param gridgridLeftColumn\r\n     * @param gridMiddleColumn\r\n     * @param key\r\n     * @param gridRightColumn - to display AMD and TMD based on Accuracy Indicator\r\n     * @returns grid cell collection.\r\n     */\r\n    WorklistHelperBase.prototype.getGridCells = function (gridgridLeftColumn, gridMiddleColumn, key, gridRightColumn) {\r\n        var _gridCells = new Array();\r\n        _gridCells.push(this.getWrappedColumn(Immutable.List(gridgridLeftColumn), 'col left-col', 'Grid_left_' + key));\r\n        _gridCells.push(this.getWrappedColumn(Immutable.List(gridMiddleColumn), 'col centre-col', 'Grid_centre_' + key));\r\n        // create column for AMD and TMD only if gridRightColumn is not null\r\n        if (gridRightColumn !== null) {\r\n            _gridCells.push(this.getWrappedColumn(Immutable.List(gridRightColumn), 'col right-col', 'Grid_right_' + key));\r\n        }\r\n        return _gridCells;\r\n    };\r\n    /**\r\n     * creating grid row\r\n     * @param responseStatus\r\n     * @param displayId\r\n     * @param gridCells\r\n     * @param accuracyType - to display AMD and TMD based on Accuracy Indicator\r\n     * @returns grid row.\r\n     */\r\n    WorklistHelperBase.prototype.getGridRow = function (responseStatus, displayId, gridCells, accuracyType, additionalComponent, cssClass) {\r\n        var _gridRow = new gridRow();\r\n        var className = this.setRowStyle(responseStatus, accuracyType !== null ? accuracyType : null);\r\n        className = (cssClass) ? (className + ' ' + cssClass) : className;\r\n        _gridRow.setRowStyle(className);\r\n        _gridRow.setRowId(parseFloat(displayId));\r\n        _gridRow.setCells(gridCells);\r\n        _gridRow.setAdditionalElement(additionalComponent);\r\n        // setting row title based on Accuracy Indicator\r\n        _gridRow.setRowTitle(this.setRowTitle(accuracyType !== null ? accuracyType : null));\r\n        return _gridRow;\r\n    };\r\n    /**\r\n     * Group the elements based on the classNames.\r\n     * @param {string} groupClassName\r\n     * @param {string} seq\r\n     * @returns the grouped JSX.Element.\r\n     * @Summary groupClassName is the root element className and the column list may contain\r\n     * the key same as groupClassName. Then that will not group the elements instead add it as\r\n     * immediate child node.\r\n     */\r\n    WorklistHelperBase.prototype.groupColumnElements = function (groupClassName, seq) {\r\n        var elements = Immutable.List();\r\n        // loop through the class group names to find the child and group.\r\n        for (var key in this._groupColumns) {\r\n            if (this._groupColumns[key].values) {\r\n                var componentProps_1 = {\r\n                    id: this._groupColumns[key] + seq,\r\n                    key: this._groupColumns[key] + seq,\r\n                    divClassName: key,\r\n                    componentList: this._groupColumns[key].values\r\n                };\r\n                // If the key same as main group className then we dont need to create a childnode.\r\n                // treating it as immediate child of the main element.\r\n                if (key !== groupClassName) {\r\n                    elements = elements.push(React.createElement(GenericComponentWrapper, componentProps_1));\r\n                }\r\n                else {\r\n                    this._groupColumns[key].values.map(function (x) {\r\n                        elements = elements.push(x);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        var componentProps = {\r\n            id: groupClassName + seq,\r\n            key: groupClassName + seq,\r\n            divClassName: groupClassName,\r\n            componentList: elements\r\n        };\r\n        return React.createElement(GenericComponentWrapper, componentProps);\r\n    };\r\n    /**\r\n     * Show the AllPageAnnotationIndicator when the CC is on and marking is completed\r\n     * blocking submission.\r\n     * @param {ResponseBase} responseData\r\n     * @param {any} propsNames\r\n     * @param {string} seq\r\n     * @returns\r\n     */\r\n    WorklistHelperBase.prototype.getAllPageAnnotationIndicatorElement = function (responseData, propsNames, seq, isTileView, showMarkingProgress) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        if (showMarkingProgress === void 0) { showMarkingProgress = true; }\r\n        var isForceAnnotationCCOn = this.getCCValue(configurableCharacteristicsNames.ForceAnnotationOnEachPage, responseData.markSchemeGroupId);\r\n        var markingProgress = responseData[propsNames.markingProgress];\r\n        // we need to show this in tile view only if we 100% marked responses and\r\n        // all page annotation cc is on.\r\n        if (isForceAnnotationCCOn === 'true' && markingProgress === 100) {\r\n            var componentProps = void 0;\r\n            componentProps = {\r\n                key: seq,\r\n                id: seq,\r\n                selectedLanguage: localeStore.instance.Locale,\r\n                isAllAnnotated: responseData[propsNames.hasAllPagesAnnotated],\r\n                isMarkingCompleted: ((showMarkingProgress ? responseData[propsNames.markingProgress] : 100) === 100) ? true : false,\r\n                isTileView: isTileView,\r\n                markSchemeGroupId: responseData.markSchemeGroupId\r\n            };\r\n            var allPageElement = Immutable.List([React.createElement(allPageAnnotationIndicator, componentProps)]);\r\n            return this.getWrappedColumn(allPageElement, 'col wl-slao-holder', seq + 'wrapped').columnElement;\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Start with fresh group.\r\n     */\r\n    WorklistHelperBase.prototype.emptyGroupColumns = function () {\r\n        // start with a fresh list of column group set.\r\n        this._groupColumns = {};\r\n    };\r\n    Object.defineProperty(WorklistHelperBase.prototype, \"groupColumns\", {\r\n        /**\r\n         * Return the group columns\r\n         * @returns\r\n         */\r\n        get: function () {\r\n            return this._groupColumns;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Mapping the each elements to a group.\r\n     * This add the elements to a dictionary which has className as key\r\n     * and list of elements that  grouped under the className.\r\n     * @param {string} className\r\n     * @param {JSX.Element} element\r\n     */\r\n    WorklistHelperBase.prototype.mapGroupColumns = function (className, element) {\r\n        // If not group class has been added create a new object\r\n        // otherwise add to the existing.\r\n        if (this._groupColumns[className] === undefined) {\r\n            this._groupColumns[className] = { values: Immutable.List() };\r\n        }\r\n        this._groupColumns[className].values = this._groupColumns[className].values.push(element);\r\n    };\r\n    /**\r\n     * Check if response is seed\r\n     * @param seedType\r\n     */\r\n    WorklistHelperBase.prototype.isSeedResponse = function (seedType) {\r\n        return seedType !== enums.SeedType.None ? true : false;\r\n    };\r\n    /**\r\n     * creating react element for the  Column Header component\r\n     * @param seq - key value for the component\r\n     * @param displayText - the text to append with the display id.\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getColumnHeaderElement = function (seq, headerText, gridColumn, isCurrentSort, isSortRequired, sortDirection) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            headerText: headerText,\r\n            sortDirection: sortDirection,\r\n            isCurrentSort: isCurrentSort,\r\n            isSortingRequired: isSortRequired\r\n        };\r\n        return React.createElement(ColumnHeader, componentProps);\r\n    };\r\n    /**\r\n     * Gets the response label type for worklist\r\n     *\r\n     * @protected\r\n     * @param {string} seq\r\n     * @param {boolean} [isResponseTypeLabelVisible]\r\n     * @param {enums.ResponseType} [responseType]\r\n     * @returns {JSX.Element}\r\n     * @memberof WorklistHelperBase\r\n     */\r\n    WorklistHelperBase.prototype.getResponseTypeLabel = function (seq, isResponseTypeLabelVisible, responseType) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            isResponseTypeLabelVisible: isResponseTypeLabelVisible,\r\n            responseType: responseType\r\n        };\r\n        return React.createElement(ResponseTypeLabel, componentProps);\r\n    };\r\n    /**\r\n     * returns the sample label element\r\n     * @param seq\r\n     * @param sampleCommentId\r\n     */\r\n    WorklistHelperBase.prototype.getSampleLabel = function (seq, sampleCommentId) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            sampleCommentId: sampleCommentId\r\n        };\r\n        return React.createElement(SampleLabel, componentProps);\r\n    };\r\n    /**\r\n     * returns the reviewed by label element\r\n     * @param seq\r\n     * @param responseData\r\n     */\r\n    WorklistHelperBase.prototype.getReviewedByLabel = function (seq, responseData) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            reviewedById: responseData.reviewedByRoleId,\r\n            reviewedByInitials: responseData.reviewedByInitials,\r\n            reviewedBySurname: responseData.reviewedBySurname,\r\n            isAutoChecked: !this.getSeniorExaminerPoolCCValue() && responseData.esMarkGroupStatus === enums.ESMarkGroupStatus.AutoChecked\r\n        };\r\n        return React.createElement(ReviewedByLabel, componentProps);\r\n    };\r\n    /**\r\n     * returns the QualityFeedbackBanner component\r\n     * @param index - row index\r\n     * @param worklistType\r\n     */\r\n    WorklistHelperBase.prototype.renderQualityFeedbackBanner = function (rowIndex, worklistType) {\r\n        var isQualityFeedbackMessageToBeDisplayed = qualityFeedbackHelper.isQualtiyHelperMessageNeededToBeDisplayed(worklistType);\r\n        if (rowIndex === 0 && isQualityFeedbackMessageToBeDisplayed) {\r\n            var componentProps = {\r\n                id: 'quality-feedback-banner',\r\n                key: 'quality-feedback-banner',\r\n                isAriaHidden: false,\r\n                selectedLanguage: localeStore.instance.Locale,\r\n                header: '',\r\n                message: qualityFeedbackHelper.getQualityFeedbackStatusMessage(),\r\n                role: '',\r\n                bannerType: enums.BannerType.QualityFeedbackBanner\r\n            };\r\n            return React.createElement(QualityFeedbackBanner, componentProps);\r\n        }\r\n    };\r\n    /**\r\n     * returns the OriginalMark React component\r\n     * @param seq\r\n     * @param responseData\r\n     */\r\n    WorklistHelperBase.prototype.getOriginalMarkElement = function (seq, responseData, propsNames, isVisible) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            isNonNumericMark: this._isNonNumeric,\r\n            originalMarkTotal: responseData[propsNames.originalMarkTotal],\r\n            isVisible: isVisible,\r\n            accuracyIndicatorType: responseData[propsNames.accuracyIndicatorTypeID]\r\n        };\r\n        return React.createElement(OriginalMark, componentProps);\r\n    };\r\n    /**\r\n     * returns the OriginalMark accuracy React component\r\n     * @param seq\r\n     * @param responseData\r\n     */\r\n    WorklistHelperBase.prototype.getOriginalMarkAccuracyElement = function (seq, responseData, propsNames, isVisible) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            isVisible: isVisible,\r\n            accuracyIndicatorType: responseData[propsNames.accuracyIndicatorTypeID]\r\n        };\r\n        return React.createElement(OriginalMarkAccuracy, componentProps);\r\n    };\r\n    /**\r\n     * returns supervisor review comment\r\n     * @param seq\r\n     * @param responseData\r\n     */\r\n    WorklistHelperBase.prototype.getSupervisorReviewComment = function (seq, responseData) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            reviewCommentId: responseData.setAsReviewedCommentId,\r\n        };\r\n        return React.createElement(SupervisorReviewComment, componentProps);\r\n    };\r\n    /**\r\n     * returns the table row collection for worklist table header.\r\n     * @param worklistType\r\n     * @param responseMode\r\n     */\r\n    WorklistHelperBase.prototype.getTableHeaderForListView = function (worklistType, responseMode, comparerName, sortDirection) {\r\n        var _workListColumnHeaderCollection = Array();\r\n        var _workListCell;\r\n        var _worklistRow = new gridRow();\r\n        var _workListColumnHeaderCellcollection = new Array();\r\n        var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, worklistType, responseMode);\r\n        var gridColumnLength = gridColumns.length;\r\n        this.resetDynamicColumnSettings();\r\n        // Getting the worklist columns\r\n        for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n            _workListCell = new gridCell();\r\n            var _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n            var headerText = gridColumns[gridColumnCount].ColumnHeader;\r\n            var _comparerName = gridColumns[gridColumnCount].ComparerName;\r\n            headerText = (headerText && headerText !== '') ? localeStore.instance.TranslateText(headerText) : '';\r\n            var key = 'columnHeader_' + gridColumnCount;\r\n            _workListCell.columnElement = this.getColumnHeaderElement(key, headerText, _responseColumn, (comparerName === _comparerName), (gridColumns[gridColumnCount].Sortable === 'true'), sortDirection);\r\n            _workListCell.isHidden = this.getCellVisibility(_responseColumn);\r\n            _workListCell.comparerName = _comparerName;\r\n            _workListCell.sortDirection = this.getSortDirection((comparerName === _comparerName), sortDirection);\r\n            var cellStyle = (gridColumns[gridColumnCount].CssClass) ? gridColumns[gridColumnCount].CssClass : '';\r\n            _workListCell.setCellStyle(cellStyle);\r\n            // Creating the grid row collection.\r\n            _workListColumnHeaderCellcollection.push(_workListCell);\r\n        }\r\n        _worklistRow.setRowId(1);\r\n        _worklistRow.setCells(_workListColumnHeaderCellcollection);\r\n        _workListColumnHeaderCollection.push(_worklistRow);\r\n        var _workListTableHeaderCollection = Immutable.fromJS(_workListColumnHeaderCollection);\r\n        return _workListTableHeaderCollection;\r\n    };\r\n    /**\r\n     *  returns the table row collection of frozen table (response id)\r\n     * @param responseListData\r\n     * @param worklistType\r\n     * @param responseMode\r\n     */\r\n    WorklistHelperBase.prototype.getFrozenRowBodyForListView = function (responseListData, worklistType, responseMode) {\r\n        var _workListRowHeaderCellcollection = Array();\r\n        var _worklistRow;\r\n        var _workListRowCollection = Array();\r\n        var _responseColumn;\r\n        var componentPropsJson;\r\n        var _workListCell;\r\n        var key;\r\n        var cssClass;\r\n        if (responseListData != null) {\r\n            var gridSeq = responseListData.responses.keySeq();\r\n            var _responseListData = responseListData.responses.toArray();\r\n            for (var responseListCount = 0; responseListCount < _responseListData.length; responseListCount++) {\r\n                // Getting the worklist data row\r\n                _worklistRow = new gridRow();\r\n                _workListRowHeaderCellcollection = new Array();\r\n                // instead of accessing _responseListData[responseListCount] collection inside loop, its accessed\r\n                // outside the loop globally\r\n                var responseData = _responseListData[responseListCount];\r\n                var responseStatus = this.getResponseStatus(responseData, responseMode);\r\n                var gridColumns = this.getGridColumns(this.resolvedGridColumnsJson, worklistType, responseMode, true);\r\n                var gridColumnLength = gridColumns.length;\r\n                // Getting the worklist columns\r\n                for (var gridColumnCount = 0; gridColumnCount < gridColumnLength; gridColumnCount++) {\r\n                    _responseColumn = gridColumns[gridColumnCount].GridColumn;\r\n                    _workListCell = new gridCell();\r\n                    componentPropsJson = gridColumns[gridColumnCount].ComponentProps;\r\n                    //Switch statement for adding frozen columns in future.\r\n                    switch (_responseColumn) {\r\n                        case gridColumnNames.ResponseIdColumn:\r\n                            key = gridSeq.get(responseListCount) + '_ResponseIdColumn_' + gridColumnCount;\r\n                            _workListCell.columnElement = this.getResponseIdElement(responseData, componentPropsJson, key, this.getDisplayTextOfResponse(worklistType), true, false);\r\n                            _workListCell.setCellStyle('col-response header-col');\r\n                            _workListRowHeaderCellcollection.push(_workListCell);\r\n                            if (worklistType === enums.WorklistType.live || worklistType === enums.WorklistType.directedRemark) {\r\n                                var additionalComponent = this.renderQualityFeedbackBanner(responseListCount, enums.WorklistType.live);\r\n                                _workListCell.setAdditionalElement(additionalComponent);\r\n                                cssClass = (additionalComponent) ? 'highlight-seed' : '';\r\n                            }\r\n                            else {\r\n                                cssClass = '';\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                // Creating the table row collection.\r\n                _workListRowCollection.push(this.getGridRow(responseStatus, responseData.displayId, _workListRowHeaderCellcollection, this.getAccuracyType(responseMode, responseData), undefined, cssClass));\r\n            }\r\n        }\r\n        var _workListFrozenRowBodyCollection = Immutable.fromJS(_workListRowCollection);\r\n        return _workListFrozenRowBodyCollection;\r\n    };\r\n    /**\r\n     * returns the table row elements for frozen table header\r\n     * @param responseListData - list of responses\r\n     * @returns grid row collection.\r\n     */\r\n    WorklistHelperBase.prototype.getFrozenRowHeaderForListView = function (worklistType, responseMode, comparerName, sortDirection, isSortable) {\r\n        var _workListColumnHeaderCollection = Array();\r\n        var _workListCell;\r\n        var _worklistRow = new gridRow();\r\n        var _workListColumnHeaderCellcollection = new Array();\r\n        _workListCell = new gridCell();\r\n        var key = 'frozenRowHeader';\r\n        var _comparerName = comparerList.responseIdComparer;\r\n        //TODO : Move the magic strings outside (json?)\r\n        _workListCell.columnElement = this.getColumnHeaderElement(key, localeStore.instance.TranslateText('marking.worklist.list-view-column-headers.response-id'), undefined, (comparerList[comparerName] === _comparerName), isSortable, sortDirection);\r\n        _workListCell.comparerName = comparerList[_comparerName];\r\n        _workListCell.sortDirection = this.getSortDirection((comparerList[comparerName] === _comparerName), sortDirection);\r\n        _workListCell.setCellStyle('col-response header-col');\r\n        // Creating the grid row collection.\r\n        _workListColumnHeaderCellcollection.push(_workListCell);\r\n        _worklistRow.setRowId(1);\r\n        _worklistRow.setCells(_workListColumnHeaderCellcollection);\r\n        _workListColumnHeaderCollection.push(_worklistRow);\r\n        var _workListFrozenRowHeaderCollection = Immutable.fromJS(_workListColumnHeaderCollection);\r\n        return _workListFrozenRowHeaderCollection;\r\n    };\r\n    /**\r\n     * returns the gridcolumns based on the response mode and worklist type\r\n     * @param responseMode\r\n     */\r\n    WorklistHelperBase.prototype.getGridColumns = function (resolvedGridColumnsJson, worklistType, responseMode, isFrozen) {\r\n        if (isFrozen === void 0) { isFrozen = false; }\r\n        var gridColumns;\r\n        return gridColumns;\r\n    };\r\n    /**\r\n     * return the display text for response id\r\n     * @param worklistType\r\n     */\r\n    WorklistHelperBase.prototype.getDisplayTextOfResponse = function (worklistType) {\r\n        var displayText = undefined;\r\n        switch (worklistType) {\r\n            case enums.WorklistType.practice:\r\n                displayText = localeStore.instance.TranslateText('marking.worklist.response-data.practice-response-title') + ' ';\r\n                break;\r\n            case enums.WorklistType.standardisation:\r\n                displayText = localeStore.instance.TranslateText('marking.worklist.response-data.standardisation-response-title') + ' ';\r\n                break;\r\n            case enums.WorklistType.secondstandardisation:\r\n                var isESTeamMember = qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember;\r\n                displayText = isESTeamMember ?\r\n                    localeStore.instance.TranslateText('marking.worklist.response-data.stm-standardisation-response-title') + ' ' :\r\n                    localeStore.instance.TranslateText('marking.worklist.response-data.second-standardisation-response-title') + ' ';\r\n                break;\r\n        }\r\n        return displayText;\r\n    };\r\n    /**\r\n     * returns the resposne staus based on the worklist and its validator type\r\n     * @param worklistType\r\n     * @param responseMode\r\n     */\r\n    WorklistHelperBase.prototype.getResponseStatus = function (responseData, responseMode) {\r\n        var responseStatus;\r\n        return responseStatus;\r\n    };\r\n    /**\r\n     * returns whether the the given column is hidden or not\r\n     * @param responseColumn\r\n     */\r\n    WorklistHelperBase.prototype.getCellVisibility = function (column) {\r\n        return false;\r\n    };\r\n    /**\r\n     * returns the accuracy type based on accuracy  and CC values\r\n     * @param responseMode\r\n     * @param responseData\r\n     */\r\n    WorklistHelperBase.prototype.getAccuracyType = function (responseMode, responseData) {\r\n        return enums.AccuracyIndicatorType.Unknown;\r\n    };\r\n    /**\r\n     * returns whether the current qig is structured or not.\r\n     */\r\n    WorklistHelperBase.prototype.isStructuredQIG = function () {\r\n        return (qigStore.instance.selectedQIGForMarkerOperation.markingMethod === enums.MarkingMethod.Structured);\r\n    };\r\n    /**\r\n     * returns whether the value is numeric or not.\r\n     */\r\n    WorklistHelperBase.prototype.isNonNumeric = function () {\r\n        return this._isNonNumeric;\r\n    };\r\n    /**\r\n     * Sets the whether the response is numeric or not.\r\n     */\r\n    WorklistHelperBase.prototype.setNonNumeric = function (isNonNumeric) {\r\n        this._isNonNumeric = isNonNumeric;\r\n    };\r\n    /**\r\n     * Reset dynamic column\r\n     */\r\n    WorklistHelperBase.prototype.resetDynamicColumnSettings = function () {\r\n        this._dateLengthInPixel = 0;\r\n    };\r\n    /**\r\n     * return the sort direction - if it is current sort just reverse the direction otherwise asc as defaualt direction.\r\n     * @param isCurrentSort\r\n     * @param sortDirection\r\n     */\r\n    WorklistHelperBase.prototype.getSortDirection = function (isCurrentSort, sortDirection) {\r\n        return ((isCurrentSort === true) ?\r\n            ((sortDirection === enums.SortDirection.Ascending) ? enums.SortDirection.Descending : enums.SortDirection.Ascending)\r\n            : enums.SortDirection.Ascending);\r\n    };\r\n    /**\r\n     * get the value of senior examiner pool cc.\r\n     */\r\n    WorklistHelperBase.prototype.getSeniorExaminerPoolCCValue = function () {\r\n        var ccValue = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.SeniorExaminerPool, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        return ccValue;\r\n    };\r\n    /**\r\n     * returns the Selected Tag Id of response.\r\n     * @param seq\r\n     * @param tagId\r\n     * @param tagList\r\n     * @param markGroupId\r\n     */\r\n    WorklistHelperBase.prototype.getTag = function (seq, tagId, tagList, markGroupId) {\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedTagId: tagId,\r\n            tagList: tagList,\r\n            markGroupId: markGroupId\r\n        };\r\n        return React.createElement(TagList, componentProps);\r\n    };\r\n    /**\r\n     * creating react element for the  getAllPageAnnotatedIndicatorElement component\r\n     * @param responseData - response data\r\n     * @param propsNames - prop names for the component\r\n     * @param seq - key value for the component\r\n     * @param showMarkingProgress - key value for the component\r\n     * @returns JSX.Element.\r\n     */\r\n    WorklistHelperBase.prototype.getAllFilesNotViewedIndicatorElement = function (responseData, propsNames, seq, isTileView) {\r\n        if (isTileView === void 0) { isTileView = true; }\r\n        var componentProps;\r\n        componentProps = {\r\n            key: seq,\r\n            id: seq,\r\n            selectedLanguage: localeStore.instance.Locale,\r\n            allFilesViewed: responseData[propsNames.allFilesViewed],\r\n            isMarkingCompleted: responseData[propsNames.markingProgress] === 100 ? true : false,\r\n            isTileView: isTileView,\r\n            isECourseworkComponent: eCourseworkHelper.isECourseworkComponent\r\n        };\r\n        return React.createElement(allFilesNotViewedIndicator, componentProps);\r\n    };\r\n    return WorklistHelperBase;\r\n}());\r\nmodule.exports = WorklistHelperBase;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 462:
/* no static exports found */
/* all exports used */
/*!***********************************************!*\
  !*** ./src/components/message/messagebase.ts ***!
  \***********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../actions/messaging/messagingactioncreator */ 268);\r\nvar popupHelper = __webpack_require__(/*! ../utility/popup/popuphelper */ 288);\r\nvar popUpDisplayActionCreator = __webpack_require__(/*! ../../actions/popupdisplay/popupdisplayactioncreator */ 328);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar qualityfeedbackHelper = __webpack_require__(/*! ../../utility/qualityfeedback/qualityfeedbackhelper */ 309);\r\nvar messageHelper = __webpack_require__(/*! ../utility/message/messagehelper */ 283);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar teamManagementActionCreator = __webpack_require__(/*! ../../actions/teammanagement/teammanagementactioncreator */ 263);\r\nvar applicationStore = __webpack_require__(/*! ../../stores/applicationoffline/applicationstore */ 247);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar MessageBase = /** @class */ (function (_super) {\r\n    __extends(MessageBase, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function MessageBase(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.isSelectedItemClicked = false;\r\n        _this.navigateTo = enums.SaveAndNavigate.none;\r\n        _this.msgEditorId = 'msg-tinymce-editor';\r\n        _this._boundHandleOnClick = null;\r\n        _this.isSubordinateSelected = false;\r\n        _this.sendMessageActionInProgress = false;\r\n        _this.messageType = enums.MessageType.None;\r\n        /**\r\n         * Callback function for dropdown select\r\n         */\r\n        _this.onSelect = function (selectedItem, event) {\r\n            _this.priorityDropDownSelectedItem = selectedItem;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         *  Callback function for dropdown click\r\n         */\r\n        _this.onDropDownClick = function (dropDown) {\r\n            _this.clickedDropDown = dropDown;\r\n            _this.isSelectedItemClicked = true;\r\n            if (_this.clickedDropDown === enums.DropDownType.Priority) {\r\n                _this.isQigDropDownOpen = undefined;\r\n                _this.isDropDownOpen = _this.isDropDownOpen === undefined ? true : !_this.isDropDownOpen;\r\n            }\r\n            else if (_this.clickedDropDown === enums.DropDownType.QIG) {\r\n                _this.isDropDownOpen = undefined;\r\n                _this.isQigDropDownOpen = _this.isQigDropDownOpen === undefined ? true : !_this.isQigDropDownOpen;\r\n            }\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Handle click events on the window and collapse priority selection dropdown\r\n         * @param {any} source - The source element\r\n         */\r\n        _this.handleOnClick = function () {\r\n            if (!_this.isSelectedItemClicked && ((_this.isDropDownOpen !== undefined && _this.isDropDownOpen)\r\n                || (_this.isQigDropDownOpen !== undefined && _this.isQigDropDownOpen))) {\r\n                // collapse the priority dropdown\r\n                _this.isDropDownOpen = false;\r\n                _this.isQigDropDownOpen = false;\r\n                _this.setState({ renderedOn: Date.now() });\r\n            }\r\n            else {\r\n                _this.isSelectedItemClicked = false;\r\n            }\r\n        };\r\n        /**\r\n         *  This will return the localised string for message priority dropdown\r\n         */\r\n        _this.getPriorityDropDownItem = function (dropDownItem) {\r\n            var localisedDropDownItem;\r\n            switch (dropDownItem) {\r\n                case enums.MessagePriority.Important:\r\n                    localisedDropDownItem = localeStore.instance.TranslateText('messaging.compose-message.priority.important');\r\n                    break;\r\n                case enums.MessagePriority.Mandatory:\r\n                    localisedDropDownItem = localeStore.instance.TranslateText('messaging.compose-message.priority.mandatory');\r\n                    break;\r\n                default:\r\n                    localisedDropDownItem = localeStore.instance.TranslateText('messaging.compose-message.priority.standard');\r\n                    break;\r\n            }\r\n            return localisedDropDownItem;\r\n        };\r\n        /**\r\n         * Method fired when the message is closed.\r\n         */\r\n        _this.onMessageClose = function () {\r\n            // Show discard message if content edited; or just close the panel.\r\n            if (_this.isMessagePanelEdited) {\r\n                messagingActionCreator.messageAction(enums.MessageViewAction.Maximize);\r\n                if (_this.navigateTo === enums.SaveAndNavigate.newMessageButtonClick\r\n                    || _this.navigateTo === enums.SaveAndNavigate.toReplyMessage\r\n                    || _this.navigateTo === enums.SaveAndNavigate.toForwardMessage) {\r\n                    popUpDisplayActionCreator.popUpDisplay(enums.PopUpType.DiscardOnNewMessageButtonClick, enums.PopUpActionType.Show, enums.SaveAndNavigate.none, {\r\n                        popupContent: localeStore.instance.TranslateText('messaging.compose-message.discard-message-dialog.body-start-new-message-while-composing')\r\n                    });\r\n                }\r\n                else if (_this.navigateTo === enums.SaveAndNavigate.toNewResponseMessageCompose) {\r\n                    popUpDisplayActionCreator.popUpDisplay(enums.PopUpType.DiscardOnNewMessageButtonClick, enums.PopUpActionType.Show, enums.SaveAndNavigate.none, {\r\n                        popupContent: localeStore.instance.TranslateText('marking.response.discard-message-or-exception-dialog.body')\r\n                    });\r\n                }\r\n                else {\r\n                    var messageType = _this.navigateTo !== enums.SaveAndNavigate.none\r\n                        ? enums.PopUpType.DiscardMessageNavigateAway : enums.PopUpType.DiscardMessage;\r\n                    popUpDisplayActionCreator.popUpDisplay(messageType, enums.PopUpActionType.Show, messageStore.instance.navigateFrom, {\r\n                        popupContent: (_this.navigateTo === enums.SaveAndNavigate.messageWithInResponse ?\r\n                            localeStore.instance.TranslateText('marking.response.discard-message-or-exception-dialog.body') : undefined)\r\n                    });\r\n                }\r\n            }\r\n            else if (_this.navigateTo !== enums.SaveAndNavigate.none && _this.navigateTo !== enums.SaveAndNavigate.messageWithInResponse\r\n                && _this.navigateTo !== enums.SaveAndNavigate.newMessageButtonClick) {\r\n                // hide the message panel and navigate away\r\n                _this.onDiscardMessageConfirmed();\r\n            }\r\n            else if (_this.navigateTo === enums.SaveAndNavigate.newMessageButtonClick) {\r\n                _this.navigateTo = enums.SaveAndNavigate.none;\r\n                _this.isMessagePopupMinimized = false;\r\n                _this.setState({ renderedOn: Date.now() });\r\n            }\r\n            else {\r\n                // Close the Message Panel.\r\n                _this.resetAndCloseMessagePanel();\r\n                _this.navigateTo = enums.SaveAndNavigate.none;\r\n            }\r\n        };\r\n        /**\r\n         * Navigate away from current response.\r\n         */\r\n        _this.onNavigateAwayFromResponse = function (navigateTo) {\r\n            _this.navigateTo = navigateTo;\r\n            _this.onMessageClose();\r\n        };\r\n        /**\r\n         * Reset message panel and close\r\n         */\r\n        _this.resetAndCloseMessagePanel = function () {\r\n            _this.priorityDropDownSelectedItem = enums.MessagePriority.Standard;\r\n            _this.toFieldValues = null;\r\n            _this.toFieldIds = null;\r\n            _this.messageSubject = '';\r\n            _this.messageBody = '';\r\n            _this.isDropDownOpen = undefined;\r\n            _this.isQigDropDownOpen = undefined;\r\n            _this.props.closeMessagePanel(_this.navigateTo);\r\n            _this.selectedQigItemId = undefined;\r\n            _this.questionPaperPartId = undefined;\r\n            messageHelper.handleSubjectChange(_this.messageSubject);\r\n            _this.sendMessageActionInProgress = false;\r\n            // updating message component with default values\r\n            // this enable or Disable send button will call setState\r\n            _this.enableDisableSendButton();\r\n            // Need to Update the UI (Subject box in the message, after closing the message : Bug 28224\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Method fired when discard message is confirmed.\r\n         */\r\n        _this.onDiscardMessageConfirmed = function (actionFromCombinedPopup, navigateTo) {\r\n            if (actionFromCombinedPopup === void 0) { actionFromCombinedPopup = false; }\r\n            if (navigateTo === void 0) { navigateTo = enums.SaveAndNavigate.none; }\r\n            // If message panel is not edited, no need to change the UI while logout\r\n            if (_this.isMessagePanelEdited) {\r\n                // Close the Message Panel.\r\n                _this.resetAndCloseMessagePanel();\r\n            }\r\n            else if (!_this.isMessagePanelEdited && _this.navigateTo === enums.SaveAndNavigate.newMessageButtonClick) {\r\n                messagingActionCreator.messageAction(enums.MessageViewAction.Open);\r\n            }\r\n            else {\r\n                _this.resetAndCloseMessagePanel();\r\n            }\r\n            // on message close navigate away from response scenario\r\n            if (_this.navigateTo !== enums.SaveAndNavigate.none && _this.navigateTo !== enums.SaveAndNavigate.messageWithInResponse\r\n                && _this.navigateTo !== enums.SaveAndNavigate.toNewResponseMessageCompose &&\r\n                !(_this.navigateTo === enums.SaveAndNavigate.toResponse && qualityfeedbackHelper.isResponseNavigationBlocked())) {\r\n                if (_this.navigateTo === enums.SaveAndNavigate.toSupervisorRemark) {\r\n                    // Response Going from readonly mode to marking. Reset the message related values from response screen.\r\n                    _this.resetAndCloseMessagePanel();\r\n                }\r\n                // if navigate away from Resposne then close the response and move to worklist.\r\n                popupHelper.navigateAway(_this.navigateTo);\r\n            }\r\n            else if (actionFromCombinedPopup) {\r\n                popupHelper.navigateAway(navigateTo);\r\n            }\r\n            _this.navigateTo = enums.SaveAndNavigate.none;\r\n        };\r\n        /**\r\n         * Method fired when discard message is cancelled.\r\n         */\r\n        _this.onDiscardMessageCancelled = function () {\r\n            // reset navigate away from response\r\n            _this.navigateTo = enums.SaveAndNavigate.none;\r\n            messageHelper.handleSubjectChange(_this.messageSubject);\r\n        };\r\n        /**\r\n         * Handles changes in the message panel subject section.\r\n         * @param e\r\n         */\r\n        _this.handleSubjectChange = function (subject) {\r\n            _this.messageSubject = subject;\r\n            _this.enableDisableSendButton();\r\n            messageHelper.handleSubjectChange(subject);\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Enable and disable send button on tinyMCE editor change.\r\n         */\r\n        _this.toggleSaveButtonState = function () {\r\n            _this.enableDisableSendButton();\r\n        };\r\n        /**\r\n         * Method fired when the message panel is minimized.\r\n         */\r\n        _this.onMinimize = function () {\r\n            messagingActionCreator.messageAction(enums.MessageViewAction.Minimize);\r\n        };\r\n        /**\r\n         * Method fired when the message panel is maximized.\r\n         */\r\n        _this.onMaximize = function () {\r\n            messagingActionCreator.messageAction(enums.MessageViewAction.Maximize);\r\n        };\r\n        /**\r\n         * This method will call on message send button click\r\n         */\r\n        _this.onMessageSend = function (messageType) {\r\n            _this.enableDisableSendButton();\r\n            var candidateScriptId = undefined;\r\n            var markGroupId = undefined;\r\n            var esMarkGroupId = undefined;\r\n            _this.messageBody = tinymce.get(_this.msgEditorId).getContent();\r\n            switch (messageType) {\r\n                case enums.MessageType.ResponseCompose:\r\n                case enums.MessageType.ResponseReply:\r\n                case enums.MessageType.ResponseForward:\r\n                    // selected Qig id for compose message in response screen\r\n                    _this.selectedQigItemId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n                    _this.questionPaperPartId = qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId;\r\n                    var openedResponseDetails = _this.props.responseId ?\r\n                        markerOperationModeFactory.operationMode.openedResponseDetails(_this.props.responseId.toString()) : null;\r\n                    var isEsResponse = (worklistStore.instance.currentWorklistType === enums.WorklistType.standardisation\r\n                        || worklistStore.instance.currentWorklistType === enums.WorklistType.practice ||\r\n                        worklistStore.instance.currentWorklistType === enums.WorklistType.secondstandardisation\r\n                        || markerOperationModeFactory.operationMode.isStandardisationSetupMode) ? true : false;\r\n                    if (openedResponseDetails) {\r\n                        candidateScriptId = openedResponseDetails.candidateScriptId;\r\n                        if (markerOperationModeFactory.operationMode.isStandardisationSetupMode) {\r\n                            esMarkGroupId = openedResponseDetails.esMarkGroupId;\r\n                        }\r\n                        else {\r\n                            markGroupId = isEsResponse ? undefined : openedResponseDetails.markGroupId;\r\n                            esMarkGroupId = isEsResponse ? openedResponseDetails.markGroupId : undefined;\r\n                        }\r\n                    }\r\n                    break;\r\n                // Not setting candidateScriptId, markGroupId, esMarkGroupId if composing message from response and worklist\r\n                // since not associated with any particular response.\r\n                case enums.MessageType.InboxCompose:\r\n                case enums.MessageType.WorklistCompose:\r\n                    break;\r\n                default:\r\n                    var currentMessageDetails = _this.props.selectedMsgDetails;\r\n                    if (currentMessageDetails !== undefined && currentMessageDetails !== null) {\r\n                        candidateScriptId = currentMessageDetails.candidateScriptId;\r\n                        markGroupId = currentMessageDetails.markGroupId;\r\n                        esMarkGroupId = currentMessageDetails.esMarkGroupId;\r\n                    }\r\n                    break;\r\n            }\r\n            // fetching currently selected qig's examiner roleId\r\n            var examinerRoleId = 0;\r\n            var msg = messageStore.instance.messagesMarkSchemes;\r\n            if (msg) {\r\n                msg.forEach(function (message) {\r\n                    if (message.markSchemeGroupId === _this.selectedQigItemId) {\r\n                        examinerRoleId = message.examinerRoleId;\r\n                    }\r\n                });\r\n            }\r\n            var toTeam = messageStore.instance.teamDetails ? messageStore.instance.teamDetails.team.toTeam : false;\r\n            messagingActionCreator.sendExaminerMessage(_this.toFieldIds, _this.messageBody, _this.messageSubject, _this.questionPaperPartId, _this.props.responseId, _this.priorityDropDownSelectedItem, _this.selectedQigItemId, candidateScriptId, markGroupId, esMarkGroupId, toTeam, examinerRoleId);\r\n        };\r\n        /**\r\n         * Navigating away from message panel when the pop up is opened\r\n         */\r\n        _this.onNavigateFromMessagePanel = function (messageNavigationArguments) {\r\n            if (messageNavigationArguments.hasMessageContainsDirtyValue === undefined) {\r\n                // Should be possible to open the response, If the message composed from Team management\r\n                if (_this.isMessagePanelEdited) {\r\n                    messagingActionCreator.messageAction(enums.MessageViewAction.Maximize);\r\n                    // To maximise the message panel when the discard popup is shown\r\n                    _this.isMessagePopupMinimized = false;\r\n                    _this.setState({ renderedOn: Date.now() });\r\n                    messageNavigationArguments.hasMessageContainsDirtyValue = true;\r\n                    messagingActionCreator.canMessageNavigate(messageNavigationArguments);\r\n                }\r\n                else if (!messageNavigationArguments.canNavigate) {\r\n                    messagingActionCreator.messageAction(enums.MessageViewAction.Close);\r\n                    messageNavigationArguments.hasMessageContainsDirtyValue = false;\r\n                    if (messageNavigationArguments.navigateTo === enums.MessageNavigation.newException) {\r\n                        _this.navigateTo = enums.SaveAndNavigate.newExceptionButtonClick;\r\n                    }\r\n                    else if (messageNavigationArguments.navigateTo === enums.MessageNavigation.exceptionWithInResponse) {\r\n                        _this.navigateTo = enums.SaveAndNavigate.exceptionWithInResponse;\r\n                    }\r\n                    else if (messageNavigationArguments.navigateTo === enums.MessageNavigation.newExceptionFromMediaErrorDialog) {\r\n                        _this.navigateTo = enums.SaveAndNavigate.newExceptionFromMediaErrorDialog;\r\n                    }\r\n                    _this.resetAndCloseMessagePanel();\r\n                    messageNavigationArguments.canNavigate = true;\r\n                    messagingActionCreator.canMessageNavigate(messageNavigationArguments);\r\n                }\r\n            }\r\n            else if (messageNavigationArguments.hasMessageContainsDirtyValue && messageNavigationArguments.canNavigate) {\r\n                _this.isMessagePopupMinimized = false;\r\n                if (messageNavigationArguments.navigateTo === enums.MessageNavigation.newException) {\r\n                    _this.navigateTo = enums.SaveAndNavigate.newExceptionButtonClick;\r\n                }\r\n                else if (messageNavigationArguments.navigateTo === enums.MessageNavigation.exceptionWithInResponse) {\r\n                    _this.navigateTo = enums.SaveAndNavigate.exceptionWithInResponse;\r\n                }\r\n                else if (messageNavigationArguments.navigateTo === enums.MessageNavigation.newExceptionFromMediaErrorDialog) {\r\n                    _this.navigateTo = enums.SaveAndNavigate.newExceptionFromMediaErrorDialog;\r\n                }\r\n                _this.resetAndCloseMessagePanel();\r\n            }\r\n        };\r\n        /**\r\n         * checks whether the supervisor examiner is valid to send a message or not\r\n         */\r\n        _this.messageSendValidationCheck = function (messageType) {\r\n            _this.sendMessageActionInProgress = true;\r\n            _this.messageType = messageType;\r\n            // While in SEP view we need to check whether the supervisor examiner is valid to send a message to subordinate examiner\r\n            if (markerOperationModeFactory.operationMode.isHelpExaminersView) {\r\n                _this.enableDisableSendButton();\r\n                var dataCollection = new Array();\r\n                var examinerSEPAction = {\r\n                    examinerRoleId: qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId,\r\n                    markSchemeGroupId: qigStore.instance.getSelectedQIGForTheLoggedInUser.markSchemeGroupId,\r\n                    requestedByExaminerRoleId: qigStore.instance.getSelectedQIGForTheLoggedInUser.examinerRoleId\r\n                };\r\n                dataCollection.push(examinerSEPAction);\r\n                var examinerSEPActions = Immutable.List(dataCollection);\r\n                var doSEPApprovalManagementActionArgument = {\r\n                    actionIdentifier: enums.SEPAction.SendMessage,\r\n                    examiners: examinerSEPActions\r\n                };\r\n                teamManagementActionCreator.ExecuteApprovalManagementAction(doSEPApprovalManagementActionArgument);\r\n            }\r\n            else {\r\n                _this.onMessageSend(_this.messageType);\r\n            }\r\n        };\r\n        /**\r\n         * To check whether the examiner is valid to send a message\r\n         */\r\n        _this.examinerValidation = function (actionIdentifier) {\r\n            // No need to handle, If user clicks help examiners and immidietly navigated to inbox\r\n            if (_this.props.messageType === enums.MessageType.InboxCompose) {\r\n                return;\r\n            }\r\n            // If there is no failure code then the supervisor examiner is valid to send a message\r\n            if (actionIdentifier === enums.SEPAction.SendMessage) {\r\n                _this.onMessageSend(_this.messageType);\r\n            }\r\n        };\r\n        /**\r\n         * enable send button state on offline\r\n         */\r\n        _this.onOnlineStatusChanged = function () {\r\n            if (!applicationStore.instance.isOnline) {\r\n                _this.toggleSaveButtonState();\r\n            }\r\n        };\r\n        _this.priorityDropDownSelectedItem = enums.MessagePriority.Standard;\r\n        _this.isSendButtonDisabled = true;\r\n        _this.messageSubject = '';\r\n        _this.messageBody = '';\r\n        _this._boundHandleOnClick = _this.handleOnClick.bind(_this);\r\n        _this.isSubordinateSelected = false;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MessageBase.prototype, \"isMessagePanelEdited\", {\r\n        /**\r\n         * Returns a boolean indicating whether the message panel is edited.\r\n         */\r\n        get: function () {\r\n            return messageHelper.isMessagePanelEdited(this.props.messageType, this.toFieldValues, this.toFieldIds);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets the enable/disable status of send button.\r\n     */\r\n    MessageBase.prototype.enableDisableSendButton = function () {\r\n        var currentSendButtonStatusAfterChange = true;\r\n        var activeEditorgetContentLength = 0;\r\n        // if sending message is in progress no need to execute logic to enabling/ disabling button\r\n        if (!this.sendMessageActionInProgress) {\r\n            var activeEditor = tinymce.get(this.msgEditorId);\r\n            //Defect Id:48277 First time active Editor does not contains 'Body' Then throws exception 'Body Undefined'\r\n            if (activeEditor && activeEditor.contentDocument != null) {\r\n                activeEditorgetContentLength = activeEditor.getContent({ format: 'text' }).trim().length;\r\n            }\r\n            if (this.props.messageType === enums.MessageType.InboxCompose ||\r\n                this.props.messageType === enums.MessageType.ResponseCompose\r\n                || this.props.messageType === enums.MessageType.WorklistCompose ||\r\n                this.props.messageType === enums.MessageType.ResponseReply\r\n                || this.props.messageType === enums.MessageType.ResponseForward ||\r\n                this.props.messageType === enums.MessageType.TeamCompose) {\r\n                currentSendButtonStatusAfterChange = !(this.messageSubject.trim().length > 0 &&\r\n                    (this.toFieldIds && this.toFieldIds.length > 0)\r\n                    && (this.toFieldValues && this.toFieldValues.length > 0)\r\n                    && (activeEditorgetContentLength > 0 ||\r\n                        messageHelper._isPasteEnabled));\r\n            }\r\n            else if (this.props.messageType === enums.MessageType.InboxForward ||\r\n                this.props.messageType === enums.MessageType.InboxReply) {\r\n                currentSendButtonStatusAfterChange = !(this.messageSubject.trim().length > 0\r\n                    && (this.toFieldIds && this.toFieldIds.length > 0)\r\n                    && (this.toFieldValues && this.toFieldValues.length > 0)\r\n                    && this.selectedQigItemId > 1\r\n                    && (activeEditorgetContentLength > 0\r\n                        || messageHelper._isPasteEnabled));\r\n            }\r\n        }\r\n        else {\r\n            // disable send button when send message action is in progress if the application is online\r\n            currentSendButtonStatusAfterChange = applicationStore.instance.isOnline;\r\n        }\r\n        if (this.isSendButtonDisabled !== currentSendButtonStatusAfterChange) {\r\n            this.isSendButtonDisabled = currentSendButtonStatusAfterChange;\r\n            // It is noticed due to render in same time, state change not happening. Add some extra time for rendering.\r\n            this.setState({ renderedOn: Date.now() + 10 });\r\n        }\r\n        // Reset setPasteEnabledAction as false after the paste action fired.\r\n        messageHelper.setPasteEnabledAction(false);\r\n    };\r\n    return MessageBase;\r\n}(pureRenderComponent));\r\nmodule.exports = MessageBase;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWVzc2FnZS9tZXNzYWdlYmFzZS50cz84MDA0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBSZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IGV4YW1pbmVyU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbWFya2VyaW5mb3JtYXRpb24vZXhhbWluZXJzdG9yZScpO1xyXG5pbXBvcnQgbWVzc2FnaW5nQWN0aW9uQ3JlYXRvciA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbnMvbWVzc2FnaW5nL21lc3NhZ2luZ2FjdGlvbmNyZWF0b3InKTtcclxuaW1wb3J0IHBvcHVwSGVscGVyID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9wb3B1cC9wb3B1cGhlbHBlcicpO1xyXG5pbXBvcnQgcG9wVXBEaXNwbGF5QWN0aW9uQ3JlYXRvciA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbnMvcG9wdXBkaXNwbGF5L3BvcHVwZGlzcGxheWFjdGlvbmNyZWF0b3InKTtcclxuaW1wb3J0IHFpZ1N0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL3FpZ3NlbGVjdG9yL3FpZ3N0b3JlJyk7XHJcbmltcG9ydCBtZXNzYWdlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbWVzc2FnZS9tZXNzYWdlc3RvcmUnKTtcclxuaW1wb3J0IGh0bWxVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2dlbmVyaWMvaHRtbHV0aWxpdGllcycpO1xyXG5pbXBvcnQgd29ya2xpc3RTdG9yZSA9IHJlcXVpcmUoJy4uLy4uL3N0b3Jlcy93b3JrbGlzdC93b3JrbGlzdHN0b3JlJyk7XHJcbmltcG9ydCByZXNwb25zZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL3Jlc3BvbnNlL3Jlc3BvbnNlc3RvcmUnKTtcclxuaW1wb3J0IG1hcmtpbmdBY3Rpb25DcmVhdG9yID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9ucy9tYXJraW5nL21hcmtpbmdhY3Rpb25jcmVhdG9yJyk7XHJcbmltcG9ydCBxdWFsaXR5ZmVlZGJhY2tIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L3F1YWxpdHlmZWVkYmFjay9xdWFsaXR5ZmVlZGJhY2toZWxwZXInKTtcclxuaW1wb3J0IG1lc3NhZ2VIZWxwZXIgPSByZXF1aXJlKCcuLi91dGlsaXR5L21lc3NhZ2UvbWVzc2FnZWhlbHBlcicpO1xyXG5pbXBvcnQgbWFya2VyT3BlcmF0aW9uTW9kZUZhY3RvcnkgPSByZXF1aXJlKCcuLi91dGlsaXR5L21hcmtlcm9wZXJhdGlvbm1vZGUvbWFya2Vyb3BlcmF0aW9ubW9kZWZhY3RvcnknKTtcclxuaW1wb3J0IHRlYW1NYW5hZ2VtZW50QWN0aW9uQ3JlYXRvciA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbnMvdGVhbW1hbmFnZW1lbnQvdGVhbW1hbmFnZW1lbnRhY3Rpb25jcmVhdG9yJyk7XHJcbmltcG9ydCBhcHBsaWNhdGlvblN0b3JlID0gcmVxdWlyZSgnLi4vLi4vc3RvcmVzL2FwcGxpY2F0aW9ub2ZmbGluZS9hcHBsaWNhdGlvbnN0b3JlJyk7XHJcbmltcG9ydCBJbW11dGFibGUgPSByZXF1aXJlKCdpbW11dGFibGUnKTtcclxuXHJcbmRlY2xhcmUgbGV0IHRpbnltY2U6IGFueTtcclxuXHJcbmNsYXNzIE1lc3NhZ2VCYXNlIGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxhbnksIGFueT4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBpc1NlbmRCdXR0b25EaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIHByb3RlY3RlZCB0b0ZpZWxkSWRzOiBBcnJheTxudW1iZXI+O1xyXG4gICAgcHJvdGVjdGVkIHRvRmllbGRWYWx1ZXM6IEFycmF5PHN0cmluZz47XHJcbiAgICBwcm90ZWN0ZWQgc2VsZWN0ZWRRaWdJdGVtSWQ6IG51bWJlcjtcclxuICAgIHByb3RlY3RlZCBzZWxlY3RlZFFpZzogc3RyaW5nO1xyXG4gICAgcHJvdGVjdGVkIHF1ZXN0aW9uUGFwZXJQYXJ0SWQ6IG51bWJlcjtcclxuICAgIHByb3RlY3RlZCBtZXNzYWdlU3ViamVjdDogc3RyaW5nO1xyXG4gICAgcHJvdGVjdGVkIG1lc3NhZ2VCb2R5OiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgaXNEcm9wRG93bk9wZW46IGJvb2xlYW47XHJcbiAgICBwcm90ZWN0ZWQgaXNRaWdEcm9wRG93bk9wZW46IGJvb2xlYW47XHJcbiAgICBwcm90ZWN0ZWQgcHJpb3JpdHlEcm9wRG93blNlbGVjdGVkSXRlbTogZW51bXMuTWVzc2FnZVByaW9yaXR5O1xyXG4gICAgcHJvdGVjdGVkIGlzU2VsZWN0ZWRJdGVtQ2xpY2tlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJvdGVjdGVkIG5hdmlnYXRlVG86IGVudW1zLlNhdmVBbmROYXZpZ2F0ZSA9IGVudW1zLlNhdmVBbmROYXZpZ2F0ZS5ub25lO1xyXG4gICAgcHJvdGVjdGVkIG1zZ0VkaXRvcklkOiBzdHJpbmcgPSAnbXNnLXRpbnltY2UtZWRpdG9yJztcclxuICAgIHByb3RlY3RlZCBfYm91bmRIYW5kbGVPbkNsaWNrOiBFdmVudExpc3RlbmVyT2JqZWN0ID0gbnVsbDtcclxuICAgIHByb3RlY3RlZCBjbGlja2VkRHJvcERvd246IGVudW1zLkRyb3BEb3duVHlwZTtcclxuICAgIHByb3RlY3RlZCBpc01lc3NhZ2VQb3B1cE1pbmltaXplZDogYm9vbGVhbjtcclxuICAgIHByb3RlY3RlZCBpc1N1Ym9yZGluYXRlU2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByb3RlY3RlZCBzZW5kTWVzc2FnZUFjdGlvbkluUHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHByb3RlY3RlZCBtZXNzYWdlVHlwZTogZW51bXMuTWVzc2FnZVR5cGUgPSBlbnVtcy5NZXNzYWdlVHlwZS5Ob25lO1xyXG5cclxuICAgIC8qKiByZWZzICovXHJcbiAgICBwdWJsaWMgcmVmczoge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IChFbGVtZW50KTtcclxuICAgICAgICBtc2dFZGl0b3I6IChIVE1MRGl2RWxlbWVudCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBhbnksIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xyXG5cclxuICAgICAgICB0aGlzLnByaW9yaXR5RHJvcERvd25TZWxlY3RlZEl0ZW0gPSBlbnVtcy5NZXNzYWdlUHJpb3JpdHkuU3RhbmRhcmQ7XHJcbiAgICAgICAgdGhpcy5pc1NlbmRCdXR0b25EaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlU3ViamVjdCA9ICcnO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUJvZHkgPSAnJztcclxuICAgICAgICB0aGlzLl9ib3VuZEhhbmRsZU9uQ2xpY2sgPSB0aGlzLmhhbmRsZU9uQ2xpY2suYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmlzU3Vib3JkaW5hdGVTZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIGRyb3Bkb3duIHNlbGVjdFxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb25TZWxlY3QgPSAoc2VsZWN0ZWRJdGVtOiBlbnVtcy5NZXNzYWdlUHJpb3JpdHksIGV2ZW50OiBhbnkpOiB2b2lkID0+IHtcclxuICAgICAgICB0aGlzLnByaW9yaXR5RHJvcERvd25TZWxlY3RlZEl0ZW0gPSBzZWxlY3RlZEl0ZW07XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJlbmRlcmVkT246IERhdGUubm93KCkgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogIENhbGxiYWNrIGZ1bmN0aW9uIGZvciBkcm9wZG93biBjbGlja1xyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb25Ecm9wRG93bkNsaWNrID0gKGRyb3BEb3duOiBlbnVtcy5Ecm9wRG93blR5cGUpOiB2b2lkID0+IHtcclxuICAgICAgICB0aGlzLmNsaWNrZWREcm9wRG93biA9IGRyb3BEb3duO1xyXG4gICAgICAgIHRoaXMuaXNTZWxlY3RlZEl0ZW1DbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICBpZiAodGhpcy5jbGlja2VkRHJvcERvd24gPT09IGVudW1zLkRyb3BEb3duVHlwZS5Qcmlvcml0eSkge1xyXG4gICAgICAgICAgICB0aGlzLmlzUWlnRHJvcERvd25PcGVuID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLmlzRHJvcERvd25PcGVuID0gdGhpcy5pc0Ryb3BEb3duT3BlbiA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICF0aGlzLmlzRHJvcERvd25PcGVuO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jbGlja2VkRHJvcERvd24gPT09IGVudW1zLkRyb3BEb3duVHlwZS5RSUcpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0Ryb3BEb3duT3BlbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5pc1FpZ0Ryb3BEb3duT3BlbiA9IHRoaXMuaXNRaWdEcm9wRG93bk9wZW4gPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhdGhpcy5pc1FpZ0Ryb3BEb3duT3BlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJlbmRlcmVkT246IERhdGUubm93KCkgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIGNsaWNrIGV2ZW50cyBvbiB0aGUgd2luZG93IGFuZCBjb2xsYXBzZSBwcmlvcml0eSBzZWxlY3Rpb24gZHJvcGRvd25cclxuICAgICAqIEBwYXJhbSB7YW55fSBzb3VyY2UgLSBUaGUgc291cmNlIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGhhbmRsZU9uQ2xpY2sgPSAoKTogYW55ID0+IHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNTZWxlY3RlZEl0ZW1DbGlja2VkICYmICgodGhpcy5pc0Ryb3BEb3duT3BlbiAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaXNEcm9wRG93bk9wZW4pXHJcbiAgICAgICAgICAgIHx8ICh0aGlzLmlzUWlnRHJvcERvd25PcGVuICE9PSB1bmRlZmluZWQgJiYgdGhpcy5pc1FpZ0Ryb3BEb3duT3BlbikpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbGxhcHNlIHRoZSBwcmlvcml0eSBkcm9wZG93blxyXG4gICAgICAgICAgICB0aGlzLmlzRHJvcERvd25PcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuaXNRaWdEcm9wRG93bk9wZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJlbmRlcmVkT246IERhdGUubm93KCkgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5pc1NlbGVjdGVkSXRlbUNsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogIFRoaXMgd2lsbCByZXR1cm4gdGhlIGxvY2FsaXNlZCBzdHJpbmcgZm9yIG1lc3NhZ2UgcHJpb3JpdHkgZHJvcGRvd25cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldFByaW9yaXR5RHJvcERvd25JdGVtID0gKGRyb3BEb3duSXRlbTogZW51bXMuTWVzc2FnZVByaW9yaXR5KTogc3RyaW5nID0+IHtcclxuICAgICAgICBsZXQgbG9jYWxpc2VkRHJvcERvd25JdGVtOiBzdHJpbmc7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoZHJvcERvd25JdGVtKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZVByaW9yaXR5LkltcG9ydGFudDpcclxuICAgICAgICAgICAgICAgIGxvY2FsaXNlZERyb3BEb3duSXRlbSA9IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21lc3NhZ2luZy5jb21wb3NlLW1lc3NhZ2UucHJpb3JpdHkuaW1wb3J0YW50Jyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5NZXNzYWdlUHJpb3JpdHkuTWFuZGF0b3J5OlxyXG4gICAgICAgICAgICAgICAgbG9jYWxpc2VkRHJvcERvd25JdGVtID0gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWVzc2FnaW5nLmNvbXBvc2UtbWVzc2FnZS5wcmlvcml0eS5tYW5kYXRvcnknKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgbG9jYWxpc2VkRHJvcERvd25JdGVtID0gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWVzc2FnaW5nLmNvbXBvc2UtbWVzc2FnZS5wcmlvcml0eS5zdGFuZGFyZCcpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsb2NhbGlzZWREcm9wRG93bkl0ZW07XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWV0aG9kIGZpcmVkIHdoZW4gdGhlIG1lc3NhZ2UgaXMgY2xvc2VkLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb25NZXNzYWdlQ2xvc2UgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gU2hvdyBkaXNjYXJkIG1lc3NhZ2UgaWYgY29udGVudCBlZGl0ZWQ7IG9yIGp1c3QgY2xvc2UgdGhlIHBhbmVsLlxyXG4gICAgICAgIGlmICh0aGlzLmlzTWVzc2FnZVBhbmVsRWRpdGVkKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2luZ0FjdGlvbkNyZWF0b3IubWVzc2FnZUFjdGlvbihlbnVtcy5NZXNzYWdlVmlld0FjdGlvbi5NYXhpbWl6ZSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm5hdmlnYXRlVG8gPT09IGVudW1zLlNhdmVBbmROYXZpZ2F0ZS5uZXdNZXNzYWdlQnV0dG9uQ2xpY2tcclxuICAgICAgICAgICAgICAgIHx8IHRoaXMubmF2aWdhdGVUbyA9PT0gZW51bXMuU2F2ZUFuZE5hdmlnYXRlLnRvUmVwbHlNZXNzYWdlXHJcbiAgICAgICAgICAgICAgICB8fCB0aGlzLm5hdmlnYXRlVG8gPT09IGVudW1zLlNhdmVBbmROYXZpZ2F0ZS50b0ZvcndhcmRNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBwb3BVcERpc3BsYXlBY3Rpb25DcmVhdG9yLnBvcFVwRGlzcGxheShlbnVtcy5Qb3BVcFR5cGUuRGlzY2FyZE9uTmV3TWVzc2FnZUJ1dHRvbkNsaWNrLFxyXG4gICAgICAgICAgICAgICAgICAgIGVudW1zLlBvcFVwQWN0aW9uVHlwZS5TaG93LFxyXG4gICAgICAgICAgICAgICAgICAgIGVudW1zLlNhdmVBbmROYXZpZ2F0ZS5ub25lLFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBDb250ZW50OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoJ21lc3NhZ2luZy5jb21wb3NlLW1lc3NhZ2UuZGlzY2FyZC1tZXNzYWdlLWRpYWxvZy5ib2R5LXN0YXJ0LW5ldy1tZXNzYWdlLXdoaWxlLWNvbXBvc2luZycpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5uYXZpZ2F0ZVRvID09PSBlbnVtcy5TYXZlQW5kTmF2aWdhdGUudG9OZXdSZXNwb25zZU1lc3NhZ2VDb21wb3NlKSB7XHJcbiAgICAgICAgICAgICAgICBwb3BVcERpc3BsYXlBY3Rpb25DcmVhdG9yLnBvcFVwRGlzcGxheShlbnVtcy5Qb3BVcFR5cGUuRGlzY2FyZE9uTmV3TWVzc2FnZUJ1dHRvbkNsaWNrLFxyXG4gICAgICAgICAgICAgICAgICAgIGVudW1zLlBvcFVwQWN0aW9uVHlwZS5TaG93LFxyXG4gICAgICAgICAgICAgICAgICAgIGVudW1zLlNhdmVBbmROYXZpZ2F0ZS5ub25lLFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBDb250ZW50OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLnJlc3BvbnNlLmRpc2NhcmQtbWVzc2FnZS1vci1leGNlcHRpb24tZGlhbG9nLmJvZHknKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2VUeXBlOiBlbnVtcy5Qb3BVcFR5cGUgPSB0aGlzLm5hdmlnYXRlVG8gIT09IGVudW1zLlNhdmVBbmROYXZpZ2F0ZS5ub25lXHJcbiAgICAgICAgICAgICAgICAgICAgPyBlbnVtcy5Qb3BVcFR5cGUuRGlzY2FyZE1lc3NhZ2VOYXZpZ2F0ZUF3YXkgOiBlbnVtcy5Qb3BVcFR5cGUuRGlzY2FyZE1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBwb3BVcERpc3BsYXlBY3Rpb25DcmVhdG9yLnBvcFVwRGlzcGxheShcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBlbnVtcy5Qb3BVcEFjdGlvblR5cGUuU2hvdyxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlU3RvcmUuaW5zdGFuY2UubmF2aWdhdGVGcm9tLFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBDb250ZW50OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5uYXZpZ2F0ZVRvID09PSBlbnVtcy5TYXZlQW5kTmF2aWdhdGUubWVzc2FnZVdpdGhJblJlc3BvbnNlID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcucmVzcG9uc2UuZGlzY2FyZC1tZXNzYWdlLW9yLWV4Y2VwdGlvbi1kaWFsb2cuYm9keScpIDogdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm5hdmlnYXRlVG8gIT09IGVudW1zLlNhdmVBbmROYXZpZ2F0ZS5ub25lICYmIHRoaXMubmF2aWdhdGVUbyAhPT0gZW51bXMuU2F2ZUFuZE5hdmlnYXRlLm1lc3NhZ2VXaXRoSW5SZXNwb25zZVxyXG4gICAgICAgICAgICAmJiB0aGlzLm5hdmlnYXRlVG8gIT09IGVudW1zLlNhdmVBbmROYXZpZ2F0ZS5uZXdNZXNzYWdlQnV0dG9uQ2xpY2spIHtcclxuICAgICAgICAgICAgLy8gaGlkZSB0aGUgbWVzc2FnZSBwYW5lbCBhbmQgbmF2aWdhdGUgYXdheVxyXG4gICAgICAgICAgICB0aGlzLm9uRGlzY2FyZE1lc3NhZ2VDb25maXJtZWQoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubmF2aWdhdGVUbyA9PT0gZW51bXMuU2F2ZUFuZE5hdmlnYXRlLm5ld01lc3NhZ2VCdXR0b25DbGljaykge1xyXG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRlVG8gPSBlbnVtcy5TYXZlQW5kTmF2aWdhdGUubm9uZTtcclxuICAgICAgICAgICAgdGhpcy5pc01lc3NhZ2VQb3B1cE1pbmltaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVuZGVyZWRPbjogRGF0ZS5ub3coKSB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBDbG9zZSB0aGUgTWVzc2FnZSBQYW5lbC5cclxuICAgICAgICAgICAgdGhpcy5yZXNldEFuZENsb3NlTWVzc2FnZVBhbmVsKCk7XHJcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGVUbyA9IGVudW1zLlNhdmVBbmROYXZpZ2F0ZS5ub25lO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOYXZpZ2F0ZSBhd2F5IGZyb20gY3VycmVudCByZXNwb25zZS5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG9uTmF2aWdhdGVBd2F5RnJvbVJlc3BvbnNlID0gKG5hdmlnYXRlVG86IGVudW1zLlNhdmVBbmROYXZpZ2F0ZSkgPT4ge1xyXG4gICAgICAgIHRoaXMubmF2aWdhdGVUbyA9IG5hdmlnYXRlVG87XHJcbiAgICAgICAgdGhpcy5vbk1lc3NhZ2VDbG9zZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlc2V0IG1lc3NhZ2UgcGFuZWwgYW5kIGNsb3NlXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCByZXNldEFuZENsb3NlTWVzc2FnZVBhbmVsID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIHRoaXMucHJpb3JpdHlEcm9wRG93blNlbGVjdGVkSXRlbSA9IGVudW1zLk1lc3NhZ2VQcmlvcml0eS5TdGFuZGFyZDtcclxuICAgICAgICB0aGlzLnRvRmllbGRWYWx1ZXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudG9GaWVsZElkcyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlU3ViamVjdCA9ICcnO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUJvZHkgPSAnJztcclxuICAgICAgICB0aGlzLmlzRHJvcERvd25PcGVuID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuaXNRaWdEcm9wRG93bk9wZW4gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5wcm9wcy5jbG9zZU1lc3NhZ2VQYW5lbCh0aGlzLm5hdmlnYXRlVG8pO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRRaWdJdGVtSWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5xdWVzdGlvblBhcGVyUGFydElkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIG1lc3NhZ2VIZWxwZXIuaGFuZGxlU3ViamVjdENoYW5nZSh0aGlzLm1lc3NhZ2VTdWJqZWN0KTtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQWN0aW9uSW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgICAgIC8vIHVwZGF0aW5nIG1lc3NhZ2UgY29tcG9uZW50IHdpdGggZGVmYXVsdCB2YWx1ZXNcclxuICAgICAgICAvLyB0aGlzIGVuYWJsZSBvciBEaXNhYmxlIHNlbmQgYnV0dG9uIHdpbGwgY2FsbCBzZXRTdGF0ZVxyXG4gICAgICAgIHRoaXMuZW5hYmxlRGlzYWJsZVNlbmRCdXR0b24oKTtcclxuXHJcbiAgICAgICAgLy8gTmVlZCB0byBVcGRhdGUgdGhlIFVJIChTdWJqZWN0IGJveCBpbiB0aGUgbWVzc2FnZSwgYWZ0ZXIgY2xvc2luZyB0aGUgbWVzc2FnZSA6IEJ1ZyAyODIyNFxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyByZW5kZXJlZE9uOiBEYXRlLm5vdygpIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCBmaXJlZCB3aGVuIGRpc2NhcmQgbWVzc2FnZSBpcyBjb25maXJtZWQuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvbkRpc2NhcmRNZXNzYWdlQ29uZmlybWVkID0gKGFjdGlvbkZyb21Db21iaW5lZFBvcHVwOiBib29sZWFuID0gZmFsc2UsXHJcbiAgICAgICAgbmF2aWdhdGVUbzogZW51bXMuU2F2ZUFuZE5hdmlnYXRlID0gZW51bXMuU2F2ZUFuZE5hdmlnYXRlLm5vbmUpID0+IHtcclxuICAgICAgICAvLyBJZiBtZXNzYWdlIHBhbmVsIGlzIG5vdCBlZGl0ZWQsIG5vIG5lZWQgdG8gY2hhbmdlIHRoZSBVSSB3aGlsZSBsb2dvdXRcclxuICAgICAgICBpZiAodGhpcy5pc01lc3NhZ2VQYW5lbEVkaXRlZCkge1xyXG4gICAgICAgICAgICAvLyBDbG9zZSB0aGUgTWVzc2FnZSBQYW5lbC5cclxuICAgICAgICAgICAgdGhpcy5yZXNldEFuZENsb3NlTWVzc2FnZVBhbmVsKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5pc01lc3NhZ2VQYW5lbEVkaXRlZCAmJiB0aGlzLm5hdmlnYXRlVG8gPT09IGVudW1zLlNhdmVBbmROYXZpZ2F0ZS5uZXdNZXNzYWdlQnV0dG9uQ2xpY2spIHtcclxuICAgICAgICAgICAgbWVzc2FnaW5nQWN0aW9uQ3JlYXRvci5tZXNzYWdlQWN0aW9uKGVudW1zLk1lc3NhZ2VWaWV3QWN0aW9uLk9wZW4pO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0QW5kQ2xvc2VNZXNzYWdlUGFuZWwoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG9uIG1lc3NhZ2UgY2xvc2UgbmF2aWdhdGUgYXdheSBmcm9tIHJlc3BvbnNlIHNjZW5hcmlvXHJcbiAgICAgICAgaWYgKHRoaXMubmF2aWdhdGVUbyAhPT0gZW51bXMuU2F2ZUFuZE5hdmlnYXRlLm5vbmUgJiYgdGhpcy5uYXZpZ2F0ZVRvICE9PSBlbnVtcy5TYXZlQW5kTmF2aWdhdGUubWVzc2FnZVdpdGhJblJlc3BvbnNlXHJcbiAgICAgICAgICAgICYmIHRoaXMubmF2aWdhdGVUbyAhPT0gZW51bXMuU2F2ZUFuZE5hdmlnYXRlLnRvTmV3UmVzcG9uc2VNZXNzYWdlQ29tcG9zZSAmJlxyXG4gICAgICAgICAgICAhKHRoaXMubmF2aWdhdGVUbyA9PT0gZW51bXMuU2F2ZUFuZE5hdmlnYXRlLnRvUmVzcG9uc2UgJiYgcXVhbGl0eWZlZWRiYWNrSGVscGVyLmlzUmVzcG9uc2VOYXZpZ2F0aW9uQmxvY2tlZCgpKSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubmF2aWdhdGVUbyA9PT0gZW51bXMuU2F2ZUFuZE5hdmlnYXRlLnRvU3VwZXJ2aXNvclJlbWFyaykge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVzcG9uc2UgR29pbmcgZnJvbSByZWFkb25seSBtb2RlIHRvIG1hcmtpbmcuIFJlc2V0IHRoZSBtZXNzYWdlIHJlbGF0ZWQgdmFsdWVzIGZyb20gcmVzcG9uc2Ugc2NyZWVuLlxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldEFuZENsb3NlTWVzc2FnZVBhbmVsKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGlmIG5hdmlnYXRlIGF3YXkgZnJvbSBSZXNwb3NuZSB0aGVuIGNsb3NlIHRoZSByZXNwb25zZSBhbmQgbW92ZSB0byB3b3JrbGlzdC5cclxuICAgICAgICAgICAgcG9wdXBIZWxwZXIubmF2aWdhdGVBd2F5KHRoaXMubmF2aWdhdGVUbyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChhY3Rpb25Gcm9tQ29tYmluZWRQb3B1cCkge1xyXG4gICAgICAgICAgICBwb3B1cEhlbHBlci5uYXZpZ2F0ZUF3YXkobmF2aWdhdGVUbyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm5hdmlnYXRlVG8gPSBlbnVtcy5TYXZlQW5kTmF2aWdhdGUubm9uZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIG1lc3NhZ2UgcGFuZWwgaXMgZWRpdGVkLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0IGlzTWVzc2FnZVBhbmVsRWRpdGVkKCkge1xyXG4gICAgICAgIHJldHVybiBtZXNzYWdlSGVscGVyLmlzTWVzc2FnZVBhbmVsRWRpdGVkKHRoaXMucHJvcHMubWVzc2FnZVR5cGUsIHRoaXMudG9GaWVsZFZhbHVlcywgdGhpcy50b0ZpZWxkSWRzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZCBmaXJlZCB3aGVuIGRpc2NhcmQgbWVzc2FnZSBpcyBjYW5jZWxsZWQuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvbkRpc2NhcmRNZXNzYWdlQ2FuY2VsbGVkID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIHJlc2V0IG5hdmlnYXRlIGF3YXkgZnJvbSByZXNwb25zZVxyXG4gICAgICAgIHRoaXMubmF2aWdhdGVUbyA9IGVudW1zLlNhdmVBbmROYXZpZ2F0ZS5ub25lO1xyXG4gICAgICAgIG1lc3NhZ2VIZWxwZXIuaGFuZGxlU3ViamVjdENoYW5nZSh0aGlzLm1lc3NhZ2VTdWJqZWN0KTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIGNoYW5nZXMgaW4gdGhlIG1lc3NhZ2UgcGFuZWwgc3ViamVjdCBzZWN0aW9uLlxyXG4gICAgICogQHBhcmFtIGVcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGhhbmRsZVN1YmplY3RDaGFuZ2UgPSAoc3ViamVjdDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlU3ViamVjdCA9IHN1YmplY3Q7XHJcbiAgICAgICAgdGhpcy5lbmFibGVEaXNhYmxlU2VuZEJ1dHRvbigpO1xyXG4gICAgICAgIG1lc3NhZ2VIZWxwZXIuaGFuZGxlU3ViamVjdENoYW5nZShzdWJqZWN0KTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVuZGVyZWRPbjogRGF0ZS5ub3coKSB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBlbmFibGUvZGlzYWJsZSBzdGF0dXMgb2Ygc2VuZCBidXR0b24uXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBlbmFibGVEaXNhYmxlU2VuZEJ1dHRvbigpIHtcclxuICAgICAgICBsZXQgY3VycmVudFNlbmRCdXR0b25TdGF0dXNBZnRlckNoYW5nZTogYm9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgbGV0IGFjdGl2ZUVkaXRvcmdldENvbnRlbnRMZW5ndGggOiBudW1iZXIgPSAwO1xyXG4gICAgICAgIC8vIGlmIHNlbmRpbmcgbWVzc2FnZSBpcyBpbiBwcm9ncmVzcyBubyBuZWVkIHRvIGV4ZWN1dGUgbG9naWMgdG8gZW5hYmxpbmcvIGRpc2FibGluZyBidXR0b25cclxuICAgICAgICBpZiAoIXRoaXMuc2VuZE1lc3NhZ2VBY3Rpb25JblByb2dyZXNzKSB7XHJcbiAgICAgICAgICAgIGxldCBhY3RpdmVFZGl0b3IgPSB0aW55bWNlLmdldCh0aGlzLm1zZ0VkaXRvcklkKTtcclxuICAgICAgICAgICAgLy9EZWZlY3QgSWQ6NDgyNzcgRmlyc3QgdGltZSBhY3RpdmUgRWRpdG9yIGRvZXMgbm90IGNvbnRhaW5zICdCb2R5JyBUaGVuIHRocm93cyBleGNlcHRpb24gJ0JvZHkgVW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlRWRpdG9yICYmIGFjdGl2ZUVkaXRvci5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRWRpdG9yZ2V0Q29udGVudExlbmd0aCA9IGFjdGl2ZUVkaXRvci5nZXRDb250ZW50KHsgZm9ybWF0OiAndGV4dCcgfSkudHJpbSgpLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tZXNzYWdlVHlwZSA9PT0gZW51bXMuTWVzc2FnZVR5cGUuSW5ib3hDb21wb3NlIHx8XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm1lc3NhZ2VUeXBlID09PSBlbnVtcy5NZXNzYWdlVHlwZS5SZXNwb25zZUNvbXBvc2VcclxuICAgICAgICAgICAgICAgIHx8IHRoaXMucHJvcHMubWVzc2FnZVR5cGUgPT09IGVudW1zLk1lc3NhZ2VUeXBlLldvcmtsaXN0Q29tcG9zZSB8fFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5tZXNzYWdlVHlwZSA9PT0gZW51bXMuTWVzc2FnZVR5cGUuUmVzcG9uc2VSZXBseVxyXG4gICAgICAgICAgICAgICAgfHwgdGhpcy5wcm9wcy5tZXNzYWdlVHlwZSA9PT0gZW51bXMuTWVzc2FnZVR5cGUuUmVzcG9uc2VGb3J3YXJkIHx8XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm1lc3NhZ2VUeXBlID09PSBlbnVtcy5NZXNzYWdlVHlwZS5UZWFtQ29tcG9zZSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFNlbmRCdXR0b25TdGF0dXNBZnRlckNoYW5nZSA9ICEodGhpcy5tZXNzYWdlU3ViamVjdC50cmltKCkubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnRvRmllbGRJZHMgJiYgdGhpcy50b0ZpZWxkSWRzLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgKHRoaXMudG9GaWVsZFZhbHVlcyAmJiB0aGlzLnRvRmllbGRWYWx1ZXMubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgICAgICAmJiAoYWN0aXZlRWRpdG9yZ2V0Q29udGVudExlbmd0aCAgPiAwIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VIZWxwZXIuX2lzUGFzdGVFbmFibGVkKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5tZXNzYWdlVHlwZSA9PT0gZW51bXMuTWVzc2FnZVR5cGUuSW5ib3hGb3J3YXJkIHx8XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm1lc3NhZ2VUeXBlID09PSBlbnVtcy5NZXNzYWdlVHlwZS5JbmJveFJlcGx5KSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50U2VuZEJ1dHRvblN0YXR1c0FmdGVyQ2hhbmdlID0gISh0aGlzLm1lc3NhZ2VTdWJqZWN0LnRyaW0oKS5sZW5ndGggPiAwXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgKHRoaXMudG9GaWVsZElkcyAmJiB0aGlzLnRvRmllbGRJZHMubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgICAgICAmJiAodGhpcy50b0ZpZWxkVmFsdWVzICYmIHRoaXMudG9GaWVsZFZhbHVlcy5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICYmIHRoaXMuc2VsZWN0ZWRRaWdJdGVtSWQgPiAxXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgKGFjdGl2ZUVkaXRvcmdldENvbnRlbnRMZW5ndGggID4gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBtZXNzYWdlSGVscGVyLl9pc1Bhc3RlRW5hYmxlZCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZGlzYWJsZSBzZW5kIGJ1dHRvbiB3aGVuIHNlbmQgbWVzc2FnZSBhY3Rpb24gaXMgaW4gcHJvZ3Jlc3MgaWYgdGhlIGFwcGxpY2F0aW9uIGlzIG9ubGluZVxyXG4gICAgICAgICAgICBjdXJyZW50U2VuZEJ1dHRvblN0YXR1c0FmdGVyQ2hhbmdlID0gYXBwbGljYXRpb25TdG9yZS5pbnN0YW5jZS5pc09ubGluZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzU2VuZEJ1dHRvbkRpc2FibGVkICE9PSBjdXJyZW50U2VuZEJ1dHRvblN0YXR1c0FmdGVyQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNTZW5kQnV0dG9uRGlzYWJsZWQgPSBjdXJyZW50U2VuZEJ1dHRvblN0YXR1c0FmdGVyQ2hhbmdlO1xyXG5cclxuICAgICAgICAgICAgLy8gSXQgaXMgbm90aWNlZCBkdWUgdG8gcmVuZGVyIGluIHNhbWUgdGltZSwgc3RhdGUgY2hhbmdlIG5vdCBoYXBwZW5pbmcuIEFkZCBzb21lIGV4dHJhIHRpbWUgZm9yIHJlbmRlcmluZy5cclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHJlbmRlcmVkT246IERhdGUubm93KCkgICsgMTAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXNldCBzZXRQYXN0ZUVuYWJsZWRBY3Rpb24gYXMgZmFsc2UgYWZ0ZXIgdGhlIHBhc3RlIGFjdGlvbiBmaXJlZC5cclxuICAgICAgICBtZXNzYWdlSGVscGVyLnNldFBhc3RlRW5hYmxlZEFjdGlvbihmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmFibGUgYW5kIGRpc2FibGUgc2VuZCBidXR0b24gb24gdGlueU1DRSBlZGl0b3IgY2hhbmdlLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgdG9nZ2xlU2F2ZUJ1dHRvblN0YXRlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZW5hYmxlRGlzYWJsZVNlbmRCdXR0b24oKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRob2QgZmlyZWQgd2hlbiB0aGUgbWVzc2FnZSBwYW5lbCBpcyBtaW5pbWl6ZWQuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvbk1pbmltaXplID0gKCkgPT4ge1xyXG4gICAgICAgIG1lc3NhZ2luZ0FjdGlvbkNyZWF0b3IubWVzc2FnZUFjdGlvbihlbnVtcy5NZXNzYWdlVmlld0FjdGlvbi5NaW5pbWl6ZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWV0aG9kIGZpcmVkIHdoZW4gdGhlIG1lc3NhZ2UgcGFuZWwgaXMgbWF4aW1pemVkLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb25NYXhpbWl6ZSA9ICgpID0+IHtcclxuICAgICAgICBtZXNzYWdpbmdBY3Rpb25DcmVhdG9yLm1lc3NhZ2VBY3Rpb24oZW51bXMuTWVzc2FnZVZpZXdBY3Rpb24uTWF4aW1pemUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgY2FsbCBvbiBtZXNzYWdlIHNlbmQgYnV0dG9uIGNsaWNrXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvbk1lc3NhZ2VTZW5kID0gKG1lc3NhZ2VUeXBlOiBlbnVtcy5NZXNzYWdlVHlwZSkgPT4ge1xyXG4gICAgICAgIHRoaXMuZW5hYmxlRGlzYWJsZVNlbmRCdXR0b24oKTtcclxuICAgICAgICBsZXQgY2FuZGlkYXRlU2NyaXB0SWQ6IG51bWJlciA9IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgbWFya0dyb3VwSWQ6IG51bWJlciA9IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgZXNNYXJrR3JvdXBJZDogbnVtYmVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUJvZHkgPSB0aW55bWNlLmdldCh0aGlzLm1zZ0VkaXRvcklkKS5nZXRDb250ZW50KCk7XHJcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1lc3NhZ2VUeXBlLlJlc3BvbnNlQ29tcG9zZTpcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5NZXNzYWdlVHlwZS5SZXNwb25zZVJlcGx5OlxyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1lc3NhZ2VUeXBlLlJlc3BvbnNlRm9yd2FyZDpcclxuICAgICAgICAgICAgICAgIC8vIHNlbGVjdGVkIFFpZyBpZCBmb3IgY29tcG9zZSBtZXNzYWdlIGluIHJlc3BvbnNlIHNjcmVlblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFFpZ0l0ZW1JZCA9IHFpZ1N0b3JlLmluc3RhbmNlLnNlbGVjdGVkUUlHRm9yTWFya2VyT3BlcmF0aW9uLm1hcmtTY2hlbWVHcm91cElkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWVzdGlvblBhcGVyUGFydElkID0gcWlnU3RvcmUuaW5zdGFuY2Uuc2VsZWN0ZWRRSUdGb3JNYXJrZXJPcGVyYXRpb24ucXVlc3Rpb25QYXBlclBhcnRJZDtcclxuICAgICAgICAgICAgICAgIGxldCBvcGVuZWRSZXNwb25zZURldGFpbHMgPSB0aGlzLnByb3BzLnJlc3BvbnNlSWQgP1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlck9wZXJhdGlvbk1vZGVGYWN0b3J5Lm9wZXJhdGlvbk1vZGUub3BlbmVkUmVzcG9uc2VEZXRhaWxzKHRoaXMucHJvcHMucmVzcG9uc2VJZC50b1N0cmluZygpKSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXNFc1Jlc3BvbnNlOiBib29sZWFuID0gKHdvcmtsaXN0U3RvcmUuaW5zdGFuY2UuY3VycmVudFdvcmtsaXN0VHlwZSA9PT0gZW51bXMuV29ya2xpc3RUeXBlLnN0YW5kYXJkaXNhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIHx8IHdvcmtsaXN0U3RvcmUuaW5zdGFuY2UuY3VycmVudFdvcmtsaXN0VHlwZSA9PT0gZW51bXMuV29ya2xpc3RUeXBlLnByYWN0aWNlIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgd29ya2xpc3RTdG9yZS5pbnN0YW5jZS5jdXJyZW50V29ya2xpc3RUeXBlID09PSBlbnVtcy5Xb3JrbGlzdFR5cGUuc2Vjb25kc3RhbmRhcmRpc2F0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgbWFya2VyT3BlcmF0aW9uTW9kZUZhY3Rvcnkub3BlcmF0aW9uTW9kZS5pc1N0YW5kYXJkaXNhdGlvblNldHVwTW9kZSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAob3BlbmVkUmVzcG9uc2VEZXRhaWxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlU2NyaXB0SWQgPSBvcGVuZWRSZXNwb25zZURldGFpbHMuY2FuZGlkYXRlU2NyaXB0SWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtlck9wZXJhdGlvbk1vZGVGYWN0b3J5Lm9wZXJhdGlvbk1vZGUuaXNTdGFuZGFyZGlzYXRpb25TZXR1cE1vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXNNYXJrR3JvdXBJZCA9IG9wZW5lZFJlc3BvbnNlRGV0YWlscy5lc01hcmtHcm91cElkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtHcm91cElkID0gaXNFc1Jlc3BvbnNlID8gdW5kZWZpbmVkIDogb3BlbmVkUmVzcG9uc2VEZXRhaWxzLm1hcmtHcm91cElkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlc01hcmtHcm91cElkID0gaXNFc1Jlc3BvbnNlID8gb3BlbmVkUmVzcG9uc2VEZXRhaWxzLm1hcmtHcm91cElkIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAvLyBOb3Qgc2V0dGluZyBjYW5kaWRhdGVTY3JpcHRJZCwgbWFya0dyb3VwSWQsIGVzTWFya0dyb3VwSWQgaWYgY29tcG9zaW5nIG1lc3NhZ2UgZnJvbSByZXNwb25zZSBhbmQgd29ya2xpc3RcclxuICAgICAgICAgICAgLy8gc2luY2Ugbm90IGFzc29jaWF0ZWQgd2l0aCBhbnkgcGFydGljdWxhciByZXNwb25zZS5cclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5NZXNzYWdlVHlwZS5JbmJveENvbXBvc2U6XHJcbiAgICAgICAgICAgIGNhc2UgZW51bXMuTWVzc2FnZVR5cGUuV29ya2xpc3RDb21wb3NlOlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudE1lc3NhZ2VEZXRhaWxzOiBNZXNzYWdlRGV0YWlscyA9IHRoaXMucHJvcHMuc2VsZWN0ZWRNc2dEZXRhaWxzO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TWVzc2FnZURldGFpbHMgIT09IHVuZGVmaW5lZCAmJiBjdXJyZW50TWVzc2FnZURldGFpbHMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVTY3JpcHRJZCA9IGN1cnJlbnRNZXNzYWdlRGV0YWlscy5jYW5kaWRhdGVTY3JpcHRJZDtcclxuICAgICAgICAgICAgICAgICAgICBtYXJrR3JvdXBJZCA9IGN1cnJlbnRNZXNzYWdlRGV0YWlscy5tYXJrR3JvdXBJZDtcclxuICAgICAgICAgICAgICAgICAgICBlc01hcmtHcm91cElkID0gY3VycmVudE1lc3NhZ2VEZXRhaWxzLmVzTWFya0dyb3VwSWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZldGNoaW5nIGN1cnJlbnRseSBzZWxlY3RlZCBxaWcncyBleGFtaW5lciByb2xlSWRcclxuICAgICAgICBsZXQgZXhhbWluZXJSb2xlSWQ6IG51bWJlciA9IDA7XHJcbiAgICAgICAgbGV0IG1zZyA9IG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS5tZXNzYWdlc01hcmtTY2hlbWVzO1xyXG4gICAgICAgIGlmIChtc2cpIHtcclxuICAgICAgICAgICAgbXNnLmZvckVhY2goKG1lc3NhZ2U6IE1lc3NhZ2luZ01hcmtTY2hlbWUpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLm1hcmtTY2hlbWVHcm91cElkID09PSB0aGlzLnNlbGVjdGVkUWlnSXRlbUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXhhbWluZXJSb2xlSWQgPSBtZXNzYWdlLmV4YW1pbmVyUm9sZUlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHRvVGVhbTogYm9vbGVhbiA9IG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS50ZWFtRGV0YWlscyA/IG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS50ZWFtRGV0YWlscy50ZWFtLnRvVGVhbSA6IGZhbHNlO1xyXG4gICAgICAgIG1lc3NhZ2luZ0FjdGlvbkNyZWF0b3Iuc2VuZEV4YW1pbmVyTWVzc2FnZSh0aGlzLnRvRmllbGRJZHMsXHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZUJvZHksXHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZVN1YmplY3QsXHJcbiAgICAgICAgICAgIHRoaXMucXVlc3Rpb25QYXBlclBhcnRJZCxcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5yZXNwb25zZUlkLFxyXG4gICAgICAgICAgICB0aGlzLnByaW9yaXR5RHJvcERvd25TZWxlY3RlZEl0ZW0sXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRRaWdJdGVtSWQsXHJcbiAgICAgICAgICAgIGNhbmRpZGF0ZVNjcmlwdElkLFxyXG4gICAgICAgICAgICBtYXJrR3JvdXBJZCxcclxuICAgICAgICAgICAgZXNNYXJrR3JvdXBJZCxcclxuICAgICAgICAgICAgdG9UZWFtLFxyXG4gICAgICAgICAgICBleGFtaW5lclJvbGVJZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTmF2aWdhdGluZyBhd2F5IGZyb20gbWVzc2FnZSBwYW5lbCB3aGVuIHRoZSBwb3AgdXAgaXMgb3BlbmVkXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvbk5hdmlnYXRlRnJvbU1lc3NhZ2VQYW5lbCA9IChtZXNzYWdlTmF2aWdhdGlvbkFyZ3VtZW50czogTWVzc2FnZU5hdmlnYXRpb25Bcmd1bWVudHMpID0+IHtcclxuICAgICAgICBpZiAobWVzc2FnZU5hdmlnYXRpb25Bcmd1bWVudHMuaGFzTWVzc2FnZUNvbnRhaW5zRGlydHlWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIC8vIFNob3VsZCBiZSBwb3NzaWJsZSB0byBvcGVuIHRoZSByZXNwb25zZSwgSWYgdGhlIG1lc3NhZ2UgY29tcG9zZWQgZnJvbSBUZWFtIG1hbmFnZW1lbnRcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNNZXNzYWdlUGFuZWxFZGl0ZWQpIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2luZ0FjdGlvbkNyZWF0b3IubWVzc2FnZUFjdGlvbihlbnVtcy5NZXNzYWdlVmlld0FjdGlvbi5NYXhpbWl6ZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBUbyBtYXhpbWlzZSB0aGUgbWVzc2FnZSBwYW5lbCB3aGVuIHRoZSBkaXNjYXJkIHBvcHVwIGlzIHNob3duXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTWVzc2FnZVBvcHVwTWluaW1pemVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcmVuZGVyZWRPbjogRGF0ZS5ub3coKSB9KTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VOYXZpZ2F0aW9uQXJndW1lbnRzLmhhc01lc3NhZ2VDb250YWluc0RpcnR5VmFsdWUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnaW5nQWN0aW9uQ3JlYXRvci5jYW5NZXNzYWdlTmF2aWdhdGUobWVzc2FnZU5hdmlnYXRpb25Bcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFtZXNzYWdlTmF2aWdhdGlvbkFyZ3VtZW50cy5jYW5OYXZpZ2F0ZSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnaW5nQWN0aW9uQ3JlYXRvci5tZXNzYWdlQWN0aW9uKGVudW1zLk1lc3NhZ2VWaWV3QWN0aW9uLkNsb3NlKTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VOYXZpZ2F0aW9uQXJndW1lbnRzLmhhc01lc3NhZ2VDb250YWluc0RpcnR5VmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlTmF2aWdhdGlvbkFyZ3VtZW50cy5uYXZpZ2F0ZVRvID09PSBlbnVtcy5NZXNzYWdlTmF2aWdhdGlvbi5uZXdFeGNlcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlVG8gPSBlbnVtcy5TYXZlQW5kTmF2aWdhdGUubmV3RXhjZXB0aW9uQnV0dG9uQ2xpY2s7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2VOYXZpZ2F0aW9uQXJndW1lbnRzLm5hdmlnYXRlVG8gPT09IGVudW1zLk1lc3NhZ2VOYXZpZ2F0aW9uLmV4Y2VwdGlvbldpdGhJblJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvID0gZW51bXMuU2F2ZUFuZE5hdmlnYXRlLmV4Y2VwdGlvbldpdGhJblJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlTmF2aWdhdGlvbkFyZ3VtZW50cy5uYXZpZ2F0ZVRvID09PSBlbnVtcy5NZXNzYWdlTmF2aWdhdGlvbi5uZXdFeGNlcHRpb25Gcm9tTWVkaWFFcnJvckRpYWxvZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGVUbyA9IGVudW1zLlNhdmVBbmROYXZpZ2F0ZS5uZXdFeGNlcHRpb25Gcm9tTWVkaWFFcnJvckRpYWxvZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRBbmRDbG9zZU1lc3NhZ2VQYW5lbCgpO1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZU5hdmlnYXRpb25Bcmd1bWVudHMuY2FuTmF2aWdhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnaW5nQWN0aW9uQ3JlYXRvci5jYW5NZXNzYWdlTmF2aWdhdGUobWVzc2FnZU5hdmlnYXRpb25Bcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlTmF2aWdhdGlvbkFyZ3VtZW50cy5oYXNNZXNzYWdlQ29udGFpbnNEaXJ0eVZhbHVlICYmIG1lc3NhZ2VOYXZpZ2F0aW9uQXJndW1lbnRzLmNhbk5hdmlnYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNNZXNzYWdlUG9wdXBNaW5pbWl6ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKG1lc3NhZ2VOYXZpZ2F0aW9uQXJndW1lbnRzLm5hdmlnYXRlVG8gPT09IGVudW1zLk1lc3NhZ2VOYXZpZ2F0aW9uLm5ld0V4Y2VwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZVRvID0gZW51bXMuU2F2ZUFuZE5hdmlnYXRlLm5ld0V4Y2VwdGlvbkJ1dHRvbkNsaWNrO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2VOYXZpZ2F0aW9uQXJndW1lbnRzLm5hdmlnYXRlVG8gPT09IGVudW1zLk1lc3NhZ2VOYXZpZ2F0aW9uLmV4Y2VwdGlvbldpdGhJblJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlVG8gPSBlbnVtcy5TYXZlQW5kTmF2aWdhdGUuZXhjZXB0aW9uV2l0aEluUmVzcG9uc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZU5hdmlnYXRpb25Bcmd1bWVudHMubmF2aWdhdGVUbyA9PT0gZW51bXMuTWVzc2FnZU5hdmlnYXRpb24ubmV3RXhjZXB0aW9uRnJvbU1lZGlhRXJyb3JEaWFsb2cpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGVUbyA9IGVudW1zLlNhdmVBbmROYXZpZ2F0ZS5uZXdFeGNlcHRpb25Gcm9tTWVkaWFFcnJvckRpYWxvZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJlc2V0QW5kQ2xvc2VNZXNzYWdlUGFuZWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogY2hlY2tzIHdoZXRoZXIgdGhlIHN1cGVydmlzb3IgZXhhbWluZXIgaXMgdmFsaWQgdG8gc2VuZCBhIG1lc3NhZ2Ugb3Igbm90XHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBtZXNzYWdlU2VuZFZhbGlkYXRpb25DaGVjayA9IChtZXNzYWdlVHlwZTogZW51bXMuTWVzc2FnZVR5cGUpID0+IHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQWN0aW9uSW5Qcm9ncmVzcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlVHlwZSA9IG1lc3NhZ2VUeXBlO1xyXG4gICAgICAgIC8vIFdoaWxlIGluIFNFUCB2aWV3IHdlIG5lZWQgdG8gY2hlY2sgd2hldGhlciB0aGUgc3VwZXJ2aXNvciBleGFtaW5lciBpcyB2YWxpZCB0byBzZW5kIGEgbWVzc2FnZSB0byBzdWJvcmRpbmF0ZSBleGFtaW5lclxyXG4gICAgICAgIGlmIChtYXJrZXJPcGVyYXRpb25Nb2RlRmFjdG9yeS5vcGVyYXRpb25Nb2RlLmlzSGVscEV4YW1pbmVyc1ZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy5lbmFibGVEaXNhYmxlU2VuZEJ1dHRvbigpO1xyXG4gICAgICAgICAgICBsZXQgZGF0YUNvbGxlY3Rpb246IEFycmF5PEV4YW1pbmVyRm9yU0VQQWN0aW9uPiA9IG5ldyBBcnJheTxFeGFtaW5lckZvclNFUEFjdGlvbj4oKTtcclxuICAgICAgICAgICAgbGV0IGV4YW1pbmVyU0VQQWN0aW9uOiBFeGFtaW5lckZvclNFUEFjdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgIGV4YW1pbmVyUm9sZUlkOiBxaWdTdG9yZS5pbnN0YW5jZS5zZWxlY3RlZFFJR0Zvck1hcmtlck9wZXJhdGlvbi5leGFtaW5lclJvbGVJZCxcclxuICAgICAgICAgICAgICAgIG1hcmtTY2hlbWVHcm91cElkOiBxaWdTdG9yZS5pbnN0YW5jZS5nZXRTZWxlY3RlZFFJR0ZvclRoZUxvZ2dlZEluVXNlci5tYXJrU2NoZW1lR3JvdXBJZCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RlZEJ5RXhhbWluZXJSb2xlSWQ6IHFpZ1N0b3JlLmluc3RhbmNlLmdldFNlbGVjdGVkUUlHRm9yVGhlTG9nZ2VkSW5Vc2VyLmV4YW1pbmVyUm9sZUlkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGRhdGFDb2xsZWN0aW9uLnB1c2goZXhhbWluZXJTRVBBY3Rpb24pO1xyXG4gICAgICAgICAgICBsZXQgZXhhbWluZXJTRVBBY3Rpb25zID0gSW1tdXRhYmxlLkxpc3Q8RXhhbWluZXJGb3JTRVBBY3Rpb24+KGRhdGFDb2xsZWN0aW9uKTtcclxuICAgICAgICAgICAgbGV0IGRvU0VQQXBwcm92YWxNYW5hZ2VtZW50QWN0aW9uQXJndW1lbnQ6IERvU0VQQXBwcm92YWxNYW5hZ2VtZW50QWN0aW9uQXJndW1lbnQgPSB7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb25JZGVudGlmaWVyOiBlbnVtcy5TRVBBY3Rpb24uU2VuZE1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICBleGFtaW5lcnM6IGV4YW1pbmVyU0VQQWN0aW9uc1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0ZWFtTWFuYWdlbWVudEFjdGlvbkNyZWF0b3IuRXhlY3V0ZUFwcHJvdmFsTWFuYWdlbWVudEFjdGlvbihkb1NFUEFwcHJvdmFsTWFuYWdlbWVudEFjdGlvbkFyZ3VtZW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9uTWVzc2FnZVNlbmQodGhpcy5tZXNzYWdlVHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRvIGNoZWNrIHdoZXRoZXIgdGhlIGV4YW1pbmVyIGlzIHZhbGlkIHRvIHNlbmQgYSBtZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBleGFtaW5lclZhbGlkYXRpb24gPSAoYWN0aW9uSWRlbnRpZmllcjogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgICAgIC8vIE5vIG5lZWQgdG8gaGFuZGxlLCBJZiB1c2VyIGNsaWNrcyBoZWxwIGV4YW1pbmVycyBhbmQgaW1taWRpZXRseSBuYXZpZ2F0ZWQgdG8gaW5ib3hcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5tZXNzYWdlVHlwZSA9PT0gZW51bXMuTWVzc2FnZVR5cGUuSW5ib3hDb21wb3NlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGZhaWx1cmUgY29kZSB0aGVuIHRoZSBzdXBlcnZpc29yIGV4YW1pbmVyIGlzIHZhbGlkIHRvIHNlbmQgYSBtZXNzYWdlXHJcbiAgICAgICAgaWYgKGFjdGlvbklkZW50aWZpZXIgPT09IGVudW1zLlNFUEFjdGlvbi5TZW5kTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbk1lc3NhZ2VTZW5kKHRoaXMubWVzc2FnZVR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBlbmFibGUgc2VuZCBidXR0b24gc3RhdGUgb24gb2ZmbGluZVxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgb25PbmxpbmVTdGF0dXNDaGFuZ2VkID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICghYXBwbGljYXRpb25TdG9yZS5pbnN0YW5jZS5pc09ubGluZSkge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVNhdmVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCA9IE1lc3NhZ2VCYXNlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9tZXNzYWdlL21lc3NhZ2ViYXNlLnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQUE7QUE2QkE7O0FBRUE7QUFDQTtBQUFBO0FBbkJBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBc0JBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBSUE7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBU0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBbURBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVlBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFsY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBMExBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBc0JBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQTRMQTtBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 463:
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/components/message/messageeditor.tsx ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar TINYMCE = __webpack_require__(/*! react-tinymce */ 45);\r\nvar messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\nvar htmlUtilities = __webpack_require__(/*! ../../utility/generic/htmlutilities */ 243);\r\nvar urls = __webpack_require__(/*! ../../dataservices/base/urls */ 266);\r\nvar messageEditorConstants = __webpack_require__(/*! ../utility/messageeditorconstants */ 325);\r\nvar localeHelper = __webpack_require__(/*! ../../utility/locale/localehelper */ 281);\r\nvar messageHelper = __webpack_require__(/*! ../utility/message/messagehelper */ 283);\r\nvar MessageEditor = /** @class */ (function (_super) {\r\n    __extends(MessageEditor, _super);\r\n    /**\r\n     * Constructor messageeditor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function MessageEditor(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.isEditorInitialised = false;\r\n        _this.lastTap = 0;\r\n        _this.contentStyle = htmlUtilities.isIPadDevice ?\r\n            '.mce-content-body{word-break: break-word;font-family:' + messageEditorConstants.TINYMCE_DEFAULT_FONT +\r\n                '; font-size:' + messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE + '; list-style-position: inside;}' + 'p{ margin:0; padding:0;}'\r\n            : htmlUtilities.isIE ? '.mce-content-body{font-family:' + messageEditorConstants.TINYMCE_DEFAULT_FONT +\r\n                '; font-size:' + messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE + ';} p{ margin:0; padding:0;}' :\r\n                '.mce-content-body{font-family:' + messageEditorConstants.TINYMCE_DEFAULT_FONT +\r\n                    '; font-size:' + messageEditorConstants.TINYMCE_DEFAULT_FONTSIZE + '; list-style-position: inside; } p{ margin:0; padding:0;}';\r\n        /**\r\n         * This will block the double-tap zoom in ipad\r\n         */\r\n        _this.blockDoubleTapZoom = function (e) {\r\n            var currentTime = new Date().getTime();\r\n            var tapLength = currentTime - _this.lastTap;\r\n            if (tapLength < 500 && tapLength > 0) {\r\n                e.preventDefault();\r\n            }\r\n            _this.lastTap = currentTime;\r\n        };\r\n        /**\r\n         * This will block the pinch-to-zoom in ipad\r\n         */\r\n        _this.blockPinchToZoom = function (e) {\r\n            if (e.touches.length > 1) {\r\n                e.preventDefault();\r\n            }\r\n        };\r\n        _this.onKeyup = function (o, e) {\r\n            _this.props.toggleSaveButtonState();\r\n        };\r\n        _this.onEditorInit = function (o, e) {\r\n            _this.activeEditor.on('SetContent', _this.onSetContent);\r\n            // Set the height of the iFrame section in the tiny mce as 100% for supporting the height calculation in css.\r\n            document.getElementById('msg-tinymce-editor_ifr').style.height = '100%';\r\n            if (htmlUtilities.isIPadDevice) {\r\n                document.getElementById('msg-tinymce-editor_ifr').setAttribute('scrolling', 'no');\r\n            }\r\n            _this.isEditorInitialised = true;\r\n            if (htmlUtilities.isIPadDevice && htmlUtilities.getUserDevice().browser === 'Safari') {\r\n                e.getWin().document.documentElement.addEventListener('touchend', _this.blockDoubleTapZoom);\r\n                e.getWin().document.documentElement.addEventListener('touchstart', _this.blockPinchToZoom);\r\n            }\r\n        };\r\n        _this.onRemove = function (o, e) {\r\n            if (htmlUtilities.isIPadDevice && htmlUtilities.getUserDevice().browser === 'Safari') {\r\n                e.getWin().document.documentElement.removeEventListener('touchend', _this.blockDoubleTapZoom);\r\n                e.getWin().document.documentElement.removeEventListener('touchstart', _this.blockPinchToZoom);\r\n            }\r\n        };\r\n        /**\r\n         * Simulate window click while clicking on tinyMCE editor to close opened priority drop down and user option panel.\r\n         */\r\n        _this.onClick = function (o, e) {\r\n            // we have to close opened priority drop down and user options (logout options) while clicking on outside that. TinyMCE editor was\r\n            // preventing the click event to propagate outside so closing of those things are not happening while clicking on TinyMCE editor.\r\n            var event = document.createEvent('MouseEvents');\r\n            event.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);\r\n            window.dispatchEvent(event);\r\n        };\r\n        _this.onPaste = function (o, e) {\r\n            // find the clipboard data from any possible (window.clipboarddata is for ie)\r\n            var clipBoardData = (o.clipboardData || window.clipboardData ||\r\n                (o.originalEvent && o.originalEvent.clipboardData));\r\n            // set getdata argument - 'text' is only for ie11 and other device/browsers need 'text/plain'\r\n            var getDataArgument = htmlUtilities.isIE11 ? 'text' : 'text/plain';\r\n            // If you paste text into the editor with mouse by right- click\r\n            // TinyMCE's onPaste event is fired, but text is not available via .getContent().\r\n            // So that checking the clipboard data item when the user pasting the text via mouse by right- click.\r\n            if (clipBoardData && clipBoardData.getData(getDataArgument).trim() !== '') {\r\n                messageHelper.setPasteEnabledAction(true);\r\n            }\r\n            _this.props.toggleSaveButtonState();\r\n        };\r\n        /**\r\n         * This method will enable the send button when hyperlink is added.\r\n         */\r\n        _this.onSetContent = function (e) {\r\n            _this.props.toggleSaveButtonState();\r\n        };\r\n        /**\r\n         * This method will clear tinyMCE content\r\n         */\r\n        _this.onMessagePanelClose = function () {\r\n            _this.activeEditor.setContent('');\r\n        };\r\n        /**\r\n         * This method will set focus to tinyMCE editor\r\n         */\r\n        _this.setFocus = function () {\r\n            if (_this.state.scriptLoaded) {\r\n                if (_this.activeEditor && _this.isEditorInitialised && _this.props.hasFocus) {\r\n                    // this will set dom focus to tinymce editor\r\n                    _this.activeEditor.focus();\r\n                }\r\n            }\r\n        };\r\n        //initialize state\r\n        _this.state = {\r\n            scriptLoaded: false,\r\n            renderedOn: 0\r\n        };\r\n        _this.onRemove = _this.onRemove.bind(_this);\r\n        _this.onEditorInit = _this.onEditorInit.bind(_this);\r\n        _this.onSetContent = _this.onSetContent.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Component did mount\r\n     */\r\n    MessageEditor.prototype.componentDidMount = function () {\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_CLOSE_EVENT, this.onMessagePanelClose);\r\n        this.setFocus();\r\n    };\r\n    /**\r\n     * Component will mount\r\n     */\r\n    MessageEditor.prototype.componentWillMount = function () {\r\n        var url = htmlUtilities.getFullUrl(urls.TINYMCE_URL);\r\n        // If tinyMCE script is not loaded then load that\r\n        if (!htmlUtilities.isScriptLoaded(url)) {\r\n            var script = document.createElement('script');\r\n            script.src = url;\r\n            script.async = true;\r\n            script.onload = (this.dependenciesLoaded.bind(this));\r\n            document.body.appendChild(script);\r\n        }\r\n        else {\r\n            this.dependenciesLoaded();\r\n        }\r\n    };\r\n    /**\r\n     * component will unmount\r\n     */\r\n    MessageEditor.prototype.componentWillUnmount = function () {\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_CLOSE_EVENT, this.onMessagePanelClose);\r\n        if (tinymce.get(this.props.id)) {\r\n            tinymce.remove('#' + this.props.id);\r\n        }\r\n    };\r\n    /**\r\n     * Component did update\r\n     */\r\n    MessageEditor.prototype.componentDidUpdate = function () {\r\n        this.setFocus();\r\n    };\r\n    /**\r\n     * Render component\r\n     */\r\n    MessageEditor.prototype.render = function () {\r\n        if (this.state.scriptLoaded) {\r\n            var selectedLang = localeHelper.getAwardingBodyLocale(this.props.selectedLanguage);\r\n            var editorConfig = {\r\n                menubar: false,\r\n                statusbar: false,\r\n                renderedOn: Date.now(),\r\n                plugins: messageEditorConstants.TINYMCE_PLUGINS,\r\n                toolbar: messageEditorConstants.TINYMCE_TOOLBAR,\r\n                fontsize_formats: messageEditorConstants.TINYMCE_FONTSIZES,\r\n                font_formats: messageEditorConstants.TINYMCE_FONTS,\r\n                language: selectedLang,\r\n                browser_spellcheck: true,\r\n                content_style: this.contentStyle,\r\n                default_link_target: '_blank',\r\n                target_list: false,\r\n                invalid_elements: 'embed'\r\n            };\r\n            return (React.createElement(TINYMCE, { content: this.props.htmlContent, id: this.props.id, theme: messageEditorConstants.TINYMCE_THEME, config: editorConfig, onKeyup: this.onKeyup, onPaste: this.onPaste, onInit: this.onEditorInit, onClick: this.onClick, onRemove: this.onRemove }));\r\n        }\r\n        else {\r\n            //show loading icon if script is not loaded\r\n            return (React.createElement(\"div\", null));\r\n        }\r\n    };\r\n    /**\r\n     * Method to load dependencies\r\n     */\r\n    MessageEditor.prototype.dependenciesLoaded = function () {\r\n        if (this.props.isTinyMCELoaded) {\r\n            this.props.isTinyMCELoaded(true);\r\n        }\r\n        this.setState({ scriptLoaded: true });\r\n    };\r\n    Object.defineProperty(MessageEditor.prototype, \"activeEditor\", {\r\n        /**\r\n         * This method will return the active editor\r\n         */\r\n        get: function () {\r\n            return tinymce.get(this.props.id);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return MessageEditor;\r\n}(pureRenderComponent));\r\nmodule.exports = MessageEditor;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 464:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/message/messageprioritydropdown.tsx ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\n/* tslint:disable:variable-name */\r\nvar ListItem = function (props) {\r\n    return React.createElement(\"li\", { role: 'menuitem' },\r\n        React.createElement(\"a\", { href: 'javascript:void(0)', onClick: function () { props.onSelect(props.item.id); } }, props.item.name));\r\n};\r\nvar List = function (props) { return (React.createElement(\"ul\", { id: props.id + '_drop-down-items', className: 'menu', role: 'menu', title: localeStore.instance.TranslateText('messaging.compose-message.priority.priority-tooltip'), \"aria-hidden\": 'true' }, props.items.map(function (item) { return (item !== null) ?\r\n    (React.createElement(ListItem, { key: 'key_drop_down_' + item.id, onSelect: props.onSelect, item: item })) :\r\n    null; }))); };\r\nvar DropDown = function (props) {\r\n    return (React.createElement(\"div\", { id: props.id + '_dropdown', className: classNames(props.className, { 'open': props.isOpen }, { 'close': props.isOpen === undefined ? false : !props.isOpen }), onClick: function () { props.onClick(props.dropDownType); } },\r\n        React.createElement(\"a\", { href: 'javascript:void(0)', id: props.id + '_component', className: 'menu-button' },\r\n            React.createElement(\"span\", { id: props.id + '_items' },\r\n                \" \",\r\n                props.selectedItem,\r\n                \" \"),\r\n            React.createElement(\"span\", { className: 'sprite-icon menu-arrow-icon' })),\r\n        React.createElement(List, { id: props.id, key: 'key_drop_down_items', onSelect: props.onSelect, items: props.items })));\r\n};\r\nmodule.exports = DropDown;\r\n/* tslint:enable */ \r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWVzc2FnZS9tZXNzYWdlcHJpb3JpdHlkcm9wZG93bi50c3g/YTU0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmxldCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xyXG5sZXQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcblxyXG5pbnRlcmZhY2UgSXRlbSB7XHJcbiAgICBpZDogZW51bXMuTWVzc2FnZVByaW9yaXR5O1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgRHJvcERvd25JdGVtcyB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgZHJvcERvd25UeXBlOiBlbnVtcy5Ecm9wRG93blR5cGU7XHJcbiAgICBjbGFzc05hbWU6IHN0cmluZztcclxuICAgIGlzT3BlbjogYm9vbGVhbjtcclxuICAgIG9uQ2xpY2s6IEZ1bmN0aW9uO1xyXG4gICAgb25TZWxlY3Q6IEZ1bmN0aW9uO1xyXG4gICAgc2VsZWN0ZWRJdGVtOiBzdHJpbmc7XHJcbiAgICBpdGVtczogQXJyYXk8SXRlbT47XHJcbn1cclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuXHJcbmNvbnN0IExpc3RJdGVtID0gKHByb3BzOiB7IG9uU2VsZWN0OiBGdW5jdGlvbiwgaXRlbTogSXRlbX0pID0+XHJcbiAgICA8bGkgcm9sZT0nbWVudWl0ZW0nPjxhIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKScgb25DbGljayA9IHsoKSA9PiB7IHByb3BzLm9uU2VsZWN0KHByb3BzLml0ZW0uaWQpOyB9IH0+eyBwcm9wcy5pdGVtLm5hbWUgfTwvYT48L2xpPjtcclxuY29uc3QgTGlzdCA9IChwcm9wczogeyBvblNlbGVjdDogRnVuY3Rpb24sIGl0ZW1zOiBBcnJheTxJdGVtPiwgaWQ6IHN0cmluZyB9KSA9PiAoXHJcbiAgICA8dWwgaWQ9e3Byb3BzLmlkICsgJ19kcm9wLWRvd24taXRlbXMnfSBjbGFzc05hbWU9J21lbnUnIHJvbGU9J21lbnUnXHJcbiAgICAgICAgdGl0bGU9e2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21lc3NhZ2luZy5jb21wb3NlLW1lc3NhZ2UucHJpb3JpdHkucHJpb3JpdHktdG9vbHRpcCcpfSBhcmlhLWhpZGRlbj0ndHJ1ZScgPlxyXG4gICAgICAgIHsgcHJvcHMuaXRlbXMubWFwKChpdGVtOiBJdGVtKSA9PiAoaXRlbSAhPT0gbnVsbCkgP1xyXG4gICAgICAgICAgICAoPExpc3RJdGVtIGtleT0geydrZXlfZHJvcF9kb3duXycgKyBpdGVtLmlkfSBvblNlbGVjdD0ge3Byb3BzLm9uU2VsZWN0fSBpdGVtPXsgaXRlbSB9IC8+KSA6XHJcbiAgICAgICAgICAgIG51bGwpIH1cclxuICAgIDwvdWw+XHJcbik7XHJcblxyXG5jb25zdCBEcm9wRG93biA9IChwcm9wczogRHJvcERvd25JdGVtcykgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGlkPXtwcm9wcy5pZCArICdfZHJvcGRvd24nfSBjbGFzc05hbWU9e2NsYXNzTmFtZXMocHJvcHMuY2xhc3NOYW1lLCB7ICdvcGVuJzogcHJvcHMuaXNPcGVuIH0sXHJcbiAgICAgICAgICAgIHsgJ2Nsb3NlJzogcHJvcHMuaXNPcGVuID09PSB1bmRlZmluZWQgPyBmYWxzZSA6ICFwcm9wcy5pc09wZW4gfSkgfSBvbkNsaWNrID0geyAoKSA9PiB7IHByb3BzLm9uQ2xpY2socHJvcHMuZHJvcERvd25UeXBlKTsgfSB9PlxyXG4gICAgICAgICAgICA8YSBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknIGlkPXtwcm9wcy5pZCArICdfY29tcG9uZW50J30gY2xhc3NOYW1lPSdtZW51LWJ1dHRvbic+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBpZCA9IHtwcm9wcy5pZCArICdfaXRlbXMnfSA+IHsgcHJvcHMuc2VsZWN0ZWRJdGVtIH0gPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdzcHJpdGUtaWNvbiBtZW51LWFycm93LWljb24nPjwvc3Bhbj5cclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICA8TGlzdCBpZD17cHJvcHMuaWR9IGtleT17J2tleV9kcm9wX2Rvd25faXRlbXMnfSAgb25TZWxlY3Q9IHtwcm9wcy5vblNlbGVjdH0gaXRlbXMgPSB7IHByb3BzLml0ZW1zIH0vPlxyXG4gICAgICAgIDwvZGl2Pik7XHJcbn07XHJcblxyXG5leHBvcnQgPSBEcm9wRG93bjtcclxuXHJcbi8qIHRzbGludDplbmFibGUgKi9cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvbWVzc2FnZS9tZXNzYWdlcHJpb3JpdHlkcm9wZG93bi50c3giXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBO0FBQ0E7QUFrQkE7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBSUE7QUFDQTtBQUlBO0FBQ0E7QUFHQTtBQUNBOztBQUFBO0FBQUE7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 466:
/* no static exports found */
/* all exports used */
/*!********************************************!*\
  !*** ./src/components/message/subject.tsx ***!
  \********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\nvar htmlUtilities = __webpack_require__(/*! ../../utility/generic/htmlutilities */ 243);\r\nvar Subject = /** @class */ (function (_super) {\r\n    __extends(Subject, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function Subject(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * seting focus back to subject on message close for fixing cursor and onscreen keyboard displaying issue in ipad\r\n         * Defect: 24608\r\n         */\r\n        _this.closeMessage = function () {\r\n            if (_this.props.hasFocus && htmlUtilities.isIPadDevice) {\r\n                _this.setFocusOnSubject();\r\n                (_this.refs[_this.props.refName]).blur();\r\n            }\r\n            // close message callback function called\r\n            if (_this.props.callback) {\r\n                _this.props.callback();\r\n            }\r\n        };\r\n        /**\r\n         * This method will call on subject onChange event\r\n         */\r\n        _this.onChange = function (event) {\r\n            _this.props.onChange(event.target.value);\r\n        };\r\n        /**\r\n         * Set Focus to the input field if necessary\r\n         */\r\n        _this.setFocusOnSubject = function () {\r\n            if (_this.props.hasFocus) {\r\n                (_this.refs[_this.props.refName]).blur();\r\n                (_this.refs[_this.props.refName]).focus();\r\n            }\r\n        };\r\n        _this.onAnimationEnd = _this.onAnimationEnd.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Event on animation end\r\n     * @param event\r\n     */\r\n    Subject.prototype.onAnimationEnd = function (event) {\r\n        // If any child element has triggered the transion-end ignore it\r\n        var element = event.srcElement || event.target;\r\n        if (element.id !== 'messaging-panel') {\r\n            return;\r\n        }\r\n        // setting scroll top - fix for ipad issue #49587\r\n        if (htmlUtilities.isIPadDevice) {\r\n            window.scrollTo(0, 0);\r\n            document.body.scrollTop = 0;\r\n        }\r\n        this.setFocusOnSubject();\r\n    };\r\n    /**\r\n     * Render method\r\n     */\r\n    Subject.prototype.render = function () {\r\n        return (React.createElement(\"div\", { className: this.props.outerClass },\r\n            React.createElement(\"input\", { type: 'text', ref: this.props.refName, id: this.props.id, \"aria-label\": 'Subject', placeholder: this.props.placeHolder, className: this.props.className, maxLength: this.props.maxLength, value: this.props.value, onInput: this.onChange })));\r\n    };\r\n    /**\r\n     * This function gets invoked when the component is about to be mounted\r\n     */\r\n    Subject.prototype.componentDidMount = function () {\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_CLOSE_EVENT, this.closeMessage);\r\n        // While creating a message from worklist and Inbox, set the focus to subject\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_OPEN_EVENT, this.setFocusOnSubject);\r\n        this.messagingPanel = document.getElementsByClassName('messaging-panel').item(0);\r\n        if (this.messagingPanel) {\r\n            // While creating a message inside the response, set the focus to subject\r\n            this.messagingPanel.addEventListener('transitionend', this.onAnimationEnd);\r\n        }\r\n        // While composing a message from Team management. Set focus to subject\r\n        this.setFocusOnSubject();\r\n    };\r\n    /**\r\n     * This function gets invoked when the component is about to be mounted\r\n     */\r\n    Subject.prototype.componentWillUnmount = function () {\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_CLOSE_EVENT, this.closeMessage);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_OPEN_EVENT, this.setFocusOnSubject);\r\n        if (this.messagingPanel) {\r\n            this.messagingPanel.removeEventListener('transitionend', this.onAnimationEnd);\r\n        }\r\n    };\r\n    return Subject;\r\n}(pureRenderComponent));\r\nmodule.exports = Subject;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWVzc2FnZS9zdWJqZWN0LnRzeD9hNzFhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBSZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBtZXNzYWdlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbWVzc2FnZS9tZXNzYWdlc3RvcmUnKTtcclxuaW1wb3J0IGh0bWxVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2dlbmVyaWMvaHRtbHV0aWxpdGllcycpO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgUHJvcHNCYXNlLCBMb2NhbGVTZWxlY3Rpb25CYXNlIHtcclxuICAgIG91dGVyQ2xhc3M6IHN0cmluZztcclxuICAgIHJlZk5hbWU6IHN0cmluZztcclxuICAgIGhhc0ZvY3VzOiBib29sZWFuO1xyXG4gICAgY2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgICBwbGFjZUhvbGRlcj86IHN0cmluZztcclxuICAgIG1heExlbmd0aDogbnVtYmVyO1xyXG4gICAgdmFsdWU6IHN0cmluZztcclxuICAgIG9uQ2hhbmdlOiBGdW5jdGlvbjtcclxuICAgIGNhbGxiYWNrPzogRnVuY3Rpb247XHJcbiAgICBpc1Zpc2libGU6IGJvb2xlYW47XHJcbn1cclxuXHJcbmNsYXNzIFN1YmplY3QgZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcclxuICAgIC8qIHByaXZhdGUgdmFyaWFibGUgdG8gbWFuYWdlIGV2ZW50IGxpc3RlbmVycyBmb3IgbWVzc2FnaW5nIHBhbmVsKi9cclxuICAgIHByaXZhdGUgbWVzc2FnaW5nUGFuZWw6IEVsZW1lbnQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjb25zdHJ1Y3RvclxyXG4gICAgICogQHBhcmFtIHByb3BzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzLCBzdGF0ZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIHN0YXRlKTtcclxuICAgICAgICB0aGlzLm9uQW5pbWF0aW9uRW5kID0gdGhpcy5vbkFuaW1hdGlvbkVuZC5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgb24gYW5pbWF0aW9uIGVuZFxyXG4gICAgICogQHBhcmFtIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25BbmltYXRpb25FbmQoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICAgICAgLy8gSWYgYW55IGNoaWxkIGVsZW1lbnQgaGFzIHRyaWdnZXJlZCB0aGUgdHJhbnNpb24tZW5kIGlnbm9yZSBpdFxyXG4gICAgICAgIGxldCBlbGVtZW50OiBhbnkgPSBldmVudC5zcmNFbGVtZW50IHx8IGV2ZW50LnRhcmdldDtcclxuICAgICAgICBpZiAoZWxlbWVudC5pZCAhPT0gJ21lc3NhZ2luZy1wYW5lbCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2V0dGluZyBzY3JvbGwgdG9wIC0gZml4IGZvciBpcGFkIGlzc3VlICM0OTU4N1xyXG4gICAgICAgIGlmIChodG1sVXRpbGl0aWVzLmlzSVBhZERldmljZSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRGb2N1c09uU3ViamVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIG1ldGhvZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5vdXRlckNsYXNzfT5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyByZWY9e3RoaXMucHJvcHMucmVmTmFtZX0gaWQ9e3RoaXMucHJvcHMuaWR9IGFyaWEtbGFiZWw9J1N1YmplY3QnXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMucGxhY2VIb2xkZXJ9IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoPXt0aGlzLnByb3BzLm1heExlbmd0aH0gdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9IG9uSW5wdXQ9e3RoaXMub25DaGFuZ2V9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2Pik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGdldHMgaW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgbW91bnRlZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICAgICAgbWVzc2FnZVN0b3JlLmluc3RhbmNlLmFkZExpc3RlbmVyKG1lc3NhZ2VTdG9yZS5NZXNzYWdlU3RvcmUuTUVTU0FHRV9DTE9TRV9FVkVOVCwgdGhpcy5jbG9zZU1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAvLyBXaGlsZSBjcmVhdGluZyBhIG1lc3NhZ2UgZnJvbSB3b3JrbGlzdCBhbmQgSW5ib3gsIHNldCB0aGUgZm9jdXMgdG8gc3ViamVjdFxyXG4gICAgICAgIG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS5hZGRMaXN0ZW5lcihtZXNzYWdlU3RvcmUuTWVzc2FnZVN0b3JlLk1FU1NBR0VfT1BFTl9FVkVOVCwgdGhpcy5zZXRGb2N1c09uU3ViamVjdCk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdpbmdQYW5lbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21lc3NhZ2luZy1wYW5lbCcpLml0ZW0oMCk7XHJcbiAgICAgICAgaWYgKHRoaXMubWVzc2FnaW5nUGFuZWwpIHtcclxuICAgICAgICAgICAgLy8gV2hpbGUgY3JlYXRpbmcgYSBtZXNzYWdlIGluc2lkZSB0aGUgcmVzcG9uc2UsIHNldCB0aGUgZm9jdXMgdG8gc3ViamVjdFxyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2luZ1BhbmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCB0aGlzLm9uQW5pbWF0aW9uRW5kKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFdoaWxlIGNvbXBvc2luZyBhIG1lc3NhZ2UgZnJvbSBUZWFtIG1hbmFnZW1lbnQuIFNldCBmb2N1cyB0byBzdWJqZWN0XHJcbiAgICAgICAgdGhpcy5zZXRGb2N1c09uU3ViamVjdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiBnZXRzIGludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFib3V0IHRvIGJlIG1vdW50ZWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgICAgIG1lc3NhZ2VTdG9yZS5pbnN0YW5jZS5yZW1vdmVMaXN0ZW5lcihtZXNzYWdlU3RvcmUuTWVzc2FnZVN0b3JlLk1FU1NBR0VfQ0xPU0VfRVZFTlQsIHRoaXMuY2xvc2VNZXNzYWdlKTtcclxuICAgICAgICBtZXNzYWdlU3RvcmUuaW5zdGFuY2UucmVtb3ZlTGlzdGVuZXIobWVzc2FnZVN0b3JlLk1lc3NhZ2VTdG9yZS5NRVNTQUdFX09QRU5fRVZFTlQsIHRoaXMuc2V0Rm9jdXNPblN1YmplY3QpO1xyXG4gICAgICAgIGlmICh0aGlzLm1lc3NhZ2luZ1BhbmVsKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnaW5nUGFuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMub25BbmltYXRpb25FbmQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldGluZyBmb2N1cyBiYWNrIHRvIHN1YmplY3Qgb24gbWVzc2FnZSBjbG9zZSBmb3IgZml4aW5nIGN1cnNvciBhbmQgb25zY3JlZW4ga2V5Ym9hcmQgZGlzcGxheWluZyBpc3N1ZSBpbiBpcGFkXHJcbiAgICAgKiBEZWZlY3Q6IDI0NjA4XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2xvc2VNZXNzYWdlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmhhc0ZvY3VzICYmIGh0bWxVdGlsaXRpZXMuaXNJUGFkRGV2aWNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Rm9jdXNPblN1YmplY3QoKTtcclxuICAgICAgICAgICAgKCh0aGlzLnJlZnNbdGhpcy5wcm9wcy5yZWZOYW1lXSkgYXMgSFRNTElucHV0RWxlbWVudCkuYmx1cigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY2xvc2UgbWVzc2FnZSBjYWxsYmFjayBmdW5jdGlvbiBjYWxsZWRcclxuICAgICAgICBpZiAodGhpcy5wcm9wcy5jYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgY2FsbCBvbiBzdWJqZWN0IG9uQ2hhbmdlIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25DaGFuZ2UgPSAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgRm9jdXMgdG8gdGhlIGlucHV0IGZpZWxkIGlmIG5lY2Vzc2FyeVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNldEZvY3VzT25TdWJqZWN0ID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmhhc0ZvY3VzKSB7XHJcbiAgICAgICAgICAgICgodGhpcy5yZWZzW3RoaXMucHJvcHMucmVmTmFtZV0pIGFzIEhUTUxJbnB1dEVsZW1lbnQpLmJsdXIoKTtcclxuICAgICAgICAgICAgKCh0aGlzLnJlZnNbdGhpcy5wcm9wcy5yZWZOYW1lXSkgYXMgSFRNTElucHV0RWxlbWVudCkuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFN1YmplY3Q7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9tZXNzYWdlL3N1YmplY3QudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFFQTtBQUNBO0FBZUE7QUFBQTtBQUlBOzs7O0FBSUE7QUFDQTtBQUFBO0FBaUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTlGQTs7QUFDQTtBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFJQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWtDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 467:
/* no static exports found */
/* all exports used */
/*!*********************************************!*\
  !*** ./src/components/utility/dropdown.tsx ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\n/* tslint:disable:variable-name */\r\nvar ListItem = function (props) {\r\n    return React.createElement(\"li\", { role: 'menuitem' },\r\n        React.createElement(\"a\", { href: 'javascript:void(0)', onClick: function () { props.onSelect(props.item.id); } }, props.item.name));\r\n};\r\nvar List = function (props) { return (React.createElement(\"ul\", { id: 'drop-down-items', className: 'menu', role: 'menu', title: '', \"aria-hidden\": 'true', style: props.style }, props.items.map(function (item) { return React.createElement(ListItem, { key: 'key_drop_down_' + item.id, onSelect: props.onSelect, item: item }); }))); };\r\n/* tslint:enable */\r\nvar DropDown = /** @class */ (function (_super) {\r\n    __extends(DropDown, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function DropDown(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * This will find the width of the anchor tag and pass to parent for applying width style of menu ul\r\n         */\r\n        _this.onDropDownClick = function (dropdownType) {\r\n            var width = _this.refs.qigDropDown.getBoundingClientRect().width;\r\n            _this.props.onClick(dropdownType, width);\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    DropDown.prototype.render = function () {\r\n        var _this = this;\r\n        return (React.createElement(\"div\", { id: this.props.id + '_dropdown', title: this.props.title, className: classNames(this.props.className, { 'open': this.props.isOpen }, { 'close': this.props.isOpen === undefined ? false : !this.props.isOpen }), onClick: function () { _this.onDropDownClick(_this.props.dropDownType); } },\r\n            React.createElement(\"a\", { ref: 'qigDropDown', href: 'javascript:void(0)', id: this.props.id + '_component', className: 'menu-button' },\r\n                React.createElement(\"span\", { id: this.props.id + '_items' },\r\n                    \" \",\r\n                    this.props.selectedItem,\r\n                    \" \"),\r\n                React.createElement(\"span\", { className: 'sprite-icon menu-arrow-icon' })),\r\n            React.createElement(List, { key: 'key_drop_down_items', onSelect: this.props.onSelect, items: this.props.items, style: this.props.style })));\r\n    };\r\n    return DropDown;\r\n}(pureRenderComponent));\r\nmodule.exports = DropDown;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9kcm9wZG93bi50c3g/ZTY2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmxldCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcblxyXG5pbnRlcmZhY2UgSXRlbSB7XHJcbiAgICBpZDogZW51bXMuTWVzc2FnZVByaW9yaXR5O1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGRyb3BEb3duVHlwZTogZW51bXMuRHJvcERvd25UeXBlO1xyXG4gICAgY2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgICBzdHlsZTogUmVhY3QuQ1NTUHJvcGVydGllcztcclxuICAgIGlzT3BlbjogYm9vbGVhbjtcclxuICAgIG9uQ2xpY2s6IEZ1bmN0aW9uO1xyXG4gICAgb25TZWxlY3Q6IEZ1bmN0aW9uO1xyXG4gICAgc2VsZWN0ZWRJdGVtOiBzdHJpbmc7XHJcbiAgICBpdGVtczogQXJyYXk8SXRlbT47XHJcbiAgICB0aXRsZTogc3RyaW5nO1xyXG59XHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcblxyXG5jb25zdCBMaXN0SXRlbSA9IChwcm9wczogeyBvblNlbGVjdDogRnVuY3Rpb24sIGl0ZW06IEl0ZW0gfSkgPT5cclxuICAgIDxsaSByb2xlPSdtZW51aXRlbSc+PGEgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJyBvbkNsaWNrPXsoKSA9PiB7IHByb3BzLm9uU2VsZWN0KHByb3BzLml0ZW0uaWQpOyB9fT57cHJvcHMuaXRlbS5uYW1lfTwvYT48L2xpPjtcclxuY29uc3QgTGlzdCA9IChwcm9wczogeyBvblNlbGVjdDogRnVuY3Rpb24sIHN0eWxlOiBSZWFjdC5DU1NQcm9wZXJ0aWVzLCBpdGVtczogQXJyYXk8SXRlbT4gfSkgPT4gKFxyXG4gICAgPHVsIGlkPSdkcm9wLWRvd24taXRlbXMnIGNsYXNzTmFtZT0nbWVudScgcm9sZT0nbWVudScgdGl0bGU9JycgYXJpYS1oaWRkZW49J3RydWUnIHN0eWxlPXtwcm9wcy5zdHlsZX0+XHJcbiAgICAgICAge3Byb3BzLml0ZW1zLm1hcCgoaXRlbTogSXRlbSkgPT4gPExpc3RJdGVtIGtleT17J2tleV9kcm9wX2Rvd25fJyArIGl0ZW0uaWR9IG9uU2VsZWN0PXtwcm9wcy5vblNlbGVjdH0gaXRlbT17aXRlbX0gLz4pfVxyXG4gICAgPC91bD5cclxuKTtcclxuXHJcbi8qIHRzbGludDplbmFibGUgKi9cclxuXHJcbmNsYXNzIERyb3BEb3duIGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcblxyXG4gICAgcHJpdmF0ZSBzdHlsZTogUmVhY3QuQ1NTUHJvcGVydGllcztcclxuXHJcbiAgICAvKiogcmVmcyAqL1xyXG4gICAgcHVibGljIHJlZnM6IHtcclxuICAgICAgICBba2V5OiBzdHJpbmddOiAoRWxlbWVudCk7XHJcbiAgICAgICAgcWlnRHJvcERvd246IChIVE1MQW5jaG9yRWxlbWVudCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcywgc3RhdGU6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBzdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgY29tcG9uZW50XHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGlkPXt0aGlzLnByb3BzLmlkICsgJ19kcm9wZG93bid9XHJcbiAgICAgICAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy50aXRsZX1cclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyh0aGlzLnByb3BzLmNsYXNzTmFtZSwgeyAnb3Blbic6IHRoaXMucHJvcHMuaXNPcGVuIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyAnY2xvc2UnOiB0aGlzLnByb3BzLmlzT3BlbiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAhdGhpcy5wcm9wcy5pc09wZW4gfSl9IG9uQ2xpY2s9XHJcbiAgICAgICAgICAgICAgICB7KCkgPT4geyB0aGlzLm9uRHJvcERvd25DbGljayh0aGlzLnByb3BzLmRyb3BEb3duVHlwZSk7IH19PlxyXG4gICAgICAgICAgICAgICAgPGEgcmVmPSdxaWdEcm9wRG93bicgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJyBpZD17dGhpcy5wcm9wcy5pZCArICdfY29tcG9uZW50J30gY2xhc3NOYW1lPSdtZW51LWJ1dHRvbic+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9e3RoaXMucHJvcHMuaWQgKyAnX2l0ZW1zJ30gPiB7dGhpcy5wcm9wcy5zZWxlY3RlZEl0ZW19IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3Nwcml0ZS1pY29uIG1lbnUtYXJyb3ctaWNvbic+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgPExpc3Qga2V5PXsna2V5X2Ryb3BfZG93bl9pdGVtcyd9IG9uU2VsZWN0PXt0aGlzLnByb3BzLm9uU2VsZWN0fSBpdGVtcz17dGhpcy5wcm9wcy5pdGVtc31cclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17dGhpcy5wcm9wcy5zdHlsZX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgd2lsbCBmaW5kIHRoZSB3aWR0aCBvZiB0aGUgYW5jaG9yIHRhZyBhbmQgcGFzcyB0byBwYXJlbnQgZm9yIGFwcGx5aW5nIHdpZHRoIHN0eWxlIG9mIG1lbnUgdWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkRyb3BEb3duQ2xpY2sgPSAoZHJvcGRvd25UeXBlOiBlbnVtcy5Ecm9wRG93blR5cGUpID0+IHtcclxuICAgICAgICBsZXQgd2lkdGg6IG51bWJlciA9IHRoaXMucmVmcy5xaWdEcm9wRG93bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcclxuICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2soZHJvcGRvd25UeXBlLCB3aWR0aCk7XHJcbiAgICB9O1xyXG5cclxufVxyXG5cclxuZXhwb3J0ID0gRHJvcERvd247XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvZHJvcGRvd24udHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQXFCQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFNQTtBQUVBO0FBQUE7QUFVQTs7OztBQUlBO0FBQ0E7QUFBQTtBQXdCQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQTVCQTtBQUVBOzs7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQU1BO0FBQ0E7O0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFHQTtBQVVBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 472:
/* no static exports found */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/components/utility/banner/bannerbase.tsx ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:enable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\n/**\r\n * Banner base class\r\n */\r\nvar BannerBase = /** @class */ (function (_super) {\r\n    __extends(BannerBase, _super);\r\n    /**\r\n     * Constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function BannerBase(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.state = {\r\n            renderedOn: 0,\r\n            isVisible: _this.props.isVisible\r\n        };\r\n        return _this;\r\n    }\r\n    return BannerBase;\r\n}(pureRenderComponent));\r\nmodule.exports = BannerBase;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9iYW5uZXIvYmFubmVyYmFzZS50c3g/MDE2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuaW1wb3J0IFJlYWN0RG9tID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XHJcbi8qIHRzbGludDplbmFibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uL2VudW1zJyk7XHJcblxyXG4vKlxyXG4gKiBTdGF0ZSBvZiBiYW5uZXJcclxuICovXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgICByZW5kZXJlZE9uPzogbnVtYmVyO1xyXG4gICAgaXNWaXNpYmxlPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFByb3BlcnRpZXMgb2YgYmFubmVyXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgaGVhZGVyOiBzdHJpbmc7XHJcbiAgICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgICByb2xlOiBzdHJpbmc7XHJcbiAgICBpc0FyaWFIaWRkZW46IGJvb2xlYW47XHJcbiAgICBiYW5uZXJUeXBlOiBlbnVtcy5CYW5uZXJUeXBlO1xyXG4gICAgaXNWaXNpYmxlPzogYm9vbGVhbjtcclxuICAgIG9uQ2xvc2VDbGljaz86IEZ1bmN0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogQmFubmVyIGJhc2UgY2xhc3NcclxuICovXHJcbmNsYXNzIEJhbm5lckJhc2UgZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcywgc3RhdGU6IFN0YXRlKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIHN0YXRlKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgcmVuZGVyZWRPbjogMCxcclxuICAgICAgICAgICAgaXNWaXNpYmxlOiB0aGlzLnByb3BzLmlzVmlzaWJsZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IEJhbm5lckJhc2U7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvYmFubmVyL2Jhbm5lcmJhc2UudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUdBO0FBQ0E7QUF3QkE7O0FBRUE7QUFDQTtBQUFBO0FBRUE7Ozs7QUFJQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 475:
/* no static exports found */
/* all exports used */
/*!******************************************************************************!*\
  !*** ./src/utility/teammanagement/helpers/warningmessagenavigationhelper.ts ***!
  \******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../../../components/utility/enums */ 225);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar teamManagementActionCreator = __webpack_require__(/*! ../../../actions/teammanagement/teammanagementactioncreator */ 263);\r\nvar qigActionCreator = __webpack_require__(/*! ../../../actions/qigselector/qigselectoractioncreator */ 253);\r\nvar loadContainerActionCreator = __webpack_require__(/*! ../../../actions/navigation/loadcontaineractioncreator */ 397);\r\nvar navigationHelper = __webpack_require__(/*! ../../../components/utility/navigation/navigationhelper */ 248);\r\nvar storageAdapterHelper = __webpack_require__(/*! ../../../dataservices/storageadapters/storageadapterhelper */ 269);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar worklistActionCreator = __webpack_require__(/*! ../../../actions/worklist/worklistactioncreator */ 261);\r\nvar markerInformationActionCreator = __webpack_require__(/*! ../../../actions/markerinformation/markerinformationactioncreator */ 381);\r\nvar teamManagementStore = __webpack_require__(/*! ../../../stores/teammanagement/teammanagementstore */ 245);\r\nvar responseActionCreator = __webpack_require__(/*! ../../../actions/response/responseactioncreator */ 257);\r\nvar markingCheckActionCreator = __webpack_require__(/*! ../../../actions/markingcheck/markingcheckactioncreator */ 311);\r\n/**\r\n * Helper class for warning message navigation\r\n */\r\nvar WarningMessageNavigationHelper = /** @class */ (function () {\r\n    function WarningMessageNavigationHelper() {\r\n    }\r\n    /**\r\n     * Refresh worklist data.\r\n     */\r\n    WarningMessageNavigationHelper.refreshworklistData = function (failureCode) {\r\n        // Clear worklist cache and do content refresh\r\n        var markingMode = worklistStore.instance.\r\n            getMarkingModeByWorkListType(worklistStore.instance.currentWorklistType);\r\n        WarningMessageNavigationHelper._storageAdapterHelper.\r\n            clearCache(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, markingMode, worklistStore.instance.getRemarkRequestType, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, worklistStore.instance.currentWorklistType);\r\n        var worklistType = worklistStore.instance.currentWorklistType;\r\n        var responseMode = worklistStore.instance.getResponseMode;\r\n        if (failureCode === enums.FailureCode.ExaminerStatusAlreadyChanged) {\r\n            worklistType = enums.WorklistType.live;\r\n            responseMode = enums.ResponseMode.open;\r\n        }\r\n        // Load work list.\r\n        if (failureCode === enums.FailureCode.ExaminerStatusAlreadyChanged ||\r\n            failureCode === enums.FailureCode.Suspended) {\r\n            var markSchemeGroupId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n            var examinerRoleId = qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId;\r\n            var questionPaperPartId = qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId;\r\n            var remarkRequestType = worklistStore.instance.getRemarkRequestType;\r\n            var isDirectedRemark = worklistStore.instance.isDirectedRemark;\r\n            worklistActionCreator.notifyWorklistTypeChange(markSchemeGroupId, examinerRoleId, questionPaperPartId, worklistType, responseMode, remarkRequestType, isDirectedRemark, qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember, false);\r\n        }\r\n        // Load the marking progress\r\n        worklistActionCreator.getWorklistMarkerProgressData(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember);\r\n        // Load the marker information\r\n        markerInformationActionCreator.\r\n            GetMarkerInformation(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, true, false, enums.ExaminerApproval.None);\r\n    };\r\n    /**\r\n     * Method to handle the supervisor sampling navigation.\r\n     */\r\n    WarningMessageNavigationHelper.supervisorSamplingFailureNavigation = function (failureCode) {\r\n        switch (failureCode) {\r\n            case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                WarningMessageNavigationHelper.clearMyTeamDataCache();\r\n                navigationHelper.loadTeamManagement();\r\n                break;\r\n            case enums.FailureCode.Withdrawn:\r\n            case enums.FailureCode.HierarchyChanged:\r\n                WarningMessageNavigationHelper.clearQIGSelectorCache();\r\n                navigationHelper.loadQigSelector();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * method to handle the promote to seed failure navigation.\r\n     */\r\n    WarningMessageNavigationHelper.promoteSeedCheckFailureNavigation = function (failureCode) {\r\n        switch (failureCode) {\r\n            case enums.FailureCode.Suspended:\r\n                navigationHelper.handleNavigation(enums.SaveAndNavigate.toWorklist);\r\n                break;\r\n            case enums.FailureCode.Withdrawn:\r\n                WarningMessageNavigationHelper.removeQIGSelectorCacheRemoveHistoryAndNavigate();\r\n                break;\r\n            case enums.FailureCode.HierarchyChanged:\r\n                navigationHelper.handleNavigation(enums.SaveAndNavigate.toQigSelector);\r\n                break;\r\n            case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                navigationHelper.handleNavigation(enums.SaveAndNavigate.toTeam);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * method to handle the worklist failure navigation.\r\n     */\r\n    WarningMessageNavigationHelper.teamWorklistFailureNavigation = function (failureCode) {\r\n        switch (failureCode) {\r\n            case enums.FailureCode.Withdrawn:\r\n            case enums.FailureCode.NotTeamLead:\r\n                WarningMessageNavigationHelper.removeQIGSelectorCacheRemoveHistoryAndNavigate();\r\n                break;\r\n            case enums.FailureCode.HierarchyChanged:\r\n            case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                WarningMessageNavigationHelper.clearMyTeamDataCache();\r\n                navigationHelper.loadTeamManagement();\r\n                break;\r\n            case enums.FailureCode.Suspended:\r\n                WarningMessageNavigationHelper.refreshworklistData(failureCode);\r\n                navigationHelper.handleNavigation(enums.SaveAndNavigate.toWorklist);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Method to handle the supervisor remark check failure navigation\r\n     */\r\n    WarningMessageNavigationHelper.superVisorRemarkCheckFailureNavigation = function (failureCode) {\r\n        switch (failureCode) {\r\n            case enums.FailureCode.Suspended:\r\n                responseActionCreator.doVisibleSupervisorRemarkButton(false);\r\n                break;\r\n            case enums.FailureCode.Withdrawn:\r\n            case enums.FailureCode.NotTeamLead:\r\n                WarningMessageNavigationHelper.removeQIGSelectorCacheRemoveHistoryAndNavigate();\r\n                break;\r\n            case enums.FailureCode.HierarchyChanged:\r\n                navigationHelper.loadTeamManagement();\r\n                break;\r\n            case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                navigationHelper.handleNavigation(enums.SaveAndNavigate.toTeam);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Method to handle the change examiner status failure navigation.\r\n     */\r\n    WarningMessageNavigationHelper.checkingExaminerViewingResponseFailureNavigation = function (failureCode) {\r\n        switch (failureCode) {\r\n            case enums.FailureCode.Suspended:\r\n                // Load the marker information\r\n                markerInformationActionCreator.\r\n                    GetMarkerInformation(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, true, false, enums.ExaminerApproval.None);\r\n                markingCheckActionCreator.getMarkingCheckInfo(true, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId);\r\n                navigationHelper.handleNavigation(enums.SaveAndNavigate.toWorklist);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Method to handle the change examiner status failure navigation.\r\n     */\r\n    WarningMessageNavigationHelper.changeExaminerStatusFailureNavigation = function (failureCode) {\r\n        switch (failureCode) {\r\n            case enums.FailureCode.Withdrawn:\r\n            case enums.FailureCode.NotTeamLead:\r\n                WarningMessageNavigationHelper.removeQIGSelectorCacheRemoveHistoryAndNavigate();\r\n                break;\r\n            case enums.FailureCode.HierarchyChanged:\r\n            case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                navigationHelper.loadTeamManagement();\r\n                break;\r\n            case enums.FailureCode.ExaminerStatusAlreadyChanged:\r\n            case enums.FailureCode.Suspended:\r\n                WarningMessageNavigationHelper.refreshworklistData(failureCode);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Method to handle the marking check failure navigation.\r\n     */\r\n    WarningMessageNavigationHelper.markingCheckFailureNavigation = function (failureCode, warningMessageAction) {\r\n        switch (worklistStore.instance.markingCheckFailureCode) {\r\n            case enums.FailureCode.Suspended:\r\n                if (warningMessageAction === enums.WarningMessageAction.CheckMyMarks &&\r\n                    qigStore.instance.selectedQIGForMarkerOperation) {\r\n                    markingCheckActionCreator.getMarkingCheckInfo(true, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId);\r\n                }\r\n                else {\r\n                    navigationHelper.handleNavigation(enums.SaveAndNavigate.toWorklist);\r\n                }\r\n                break;\r\n            case enums.FailureCode.Withdrawn:\r\n                navigationHelper.handleNavigation(enums.SaveAndNavigate.toQigSelector);\r\n                break;\r\n            case enums.FailureCode.HierarchyChanged:\r\n                if (warningMessageAction === enums.WarningMessageAction.MarksChecked) {\r\n                    navigationHelper.handleNavigation(enums.SaveAndNavigate.toQigSelector);\r\n                }\r\n                else {\r\n                    navigationHelper.handleNavigation(enums.SaveAndNavigate.toWorklist);\r\n                    if (qigStore.instance.selectedQIGForMarkerOperation) {\r\n                        markingCheckActionCreator.getMarkingCheckInfo(true, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Method to handle the set as reviewd failure navigation.\r\n     */\r\n    WarningMessageNavigationHelper.setAsReviewedFailureNavigation = function (failureCode) {\r\n        switch (failureCode) {\r\n            case enums.FailureCode.Withdrawn:\r\n            case enums.FailureCode.NotTeamLead:\r\n                WarningMessageNavigationHelper.removeQIGSelectorCacheRemoveHistoryAndNavigate();\r\n                break;\r\n            case enums.FailureCode.HierarchyChanged:\r\n            case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                WarningMessageNavigationHelper.clearMyTeamDataCache();\r\n                navigationHelper.loadTeamManagement();\r\n                break;\r\n            case enums.FailureCode.Suspended:\r\n                WarningMessageNavigationHelper.refreshworklistData(failureCode);\r\n                navigationHelper.handleNavigation(enums.SaveAndNavigate.toWorklist);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Method to handle the set as reviewd failure navigation.\r\n     */\r\n    WarningMessageNavigationHelper.exceptionActionFailureNavigation = function (failureCode) {\r\n        switch (failureCode) {\r\n            case enums.FailureCode.Withdrawn:\r\n            case enums.FailureCode.NotTeamLead:\r\n                WarningMessageNavigationHelper.removeQIGSelectorCacheRemoveHistoryAndNavigate();\r\n                break;\r\n            case enums.FailureCode.HierarchyChanged:\r\n            case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                WarningMessageNavigationHelper.clearMyTeamDataCache();\r\n                WarningMessageNavigationHelper.clearUnActionedExceptionDataCache();\r\n                WarningMessageNavigationHelper.clearTeamOverViewDataCache();\r\n                teamManagementActionCreator.teammanagementTabSelect(enums.TeamManagement.MyTeam);\r\n                navigationHelper.loadTeamManagement();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Clear the unactioned exception cache.\r\n     */\r\n    WarningMessageNavigationHelper.clearUnActionedExceptionDataCache = function () {\r\n        var cacheKey = 'team';\r\n        var cacheValue = 'unActionedException_' +\r\n            teamManagementStore.instance.selectedMarkSchemeGroupId;\r\n        WarningMessageNavigationHelper._storageAdapterHelper.clearCacheByKey(cacheKey, cacheValue);\r\n    };\r\n    /**\r\n     * Clear the my team data cache.\r\n     */\r\n    WarningMessageNavigationHelper.clearMyTeamDataCache = function () {\r\n        var cacheKey = 'team';\r\n        var cacheValue = 'myTeamData_' +\r\n            teamManagementStore.instance.selectedExaminerRoleId + '_' +\r\n            teamManagementStore.instance.selectedMarkSchemeGroupId;\r\n        WarningMessageNavigationHelper._storageAdapterHelper.clearCacheByKey(cacheKey, cacheValue);\r\n    };\r\n    /**\r\n     * Clear cache for team overview.\r\n     */\r\n    WarningMessageNavigationHelper.clearTeamOverViewDataCache = function () {\r\n        // Clear cache for team overview\r\n        var cacheKey = 'team';\r\n        var cacheValue = 'teamOverviewCount_' + teamManagementStore.instance.selectedExaminerRoleId + '_' +\r\n            teamManagementStore.instance.selectedMarkSchemeGroupId;\r\n        WarningMessageNavigationHelper._storageAdapterHelper.clearCacheByKey(cacheKey, cacheValue);\r\n    };\r\n    // Storage adapter helper\r\n    WarningMessageNavigationHelper._storageAdapterHelper = new storageAdapterHelper();\r\n    /**\r\n     * Handle Withdrawn Scenarios.\r\n     */\r\n    WarningMessageNavigationHelper.removeQIGSelectorCacheRemoveHistoryAndNavigate = function () {\r\n        WarningMessageNavigationHelper.clearQIGSelectorCache();\r\n        if (qigStore.instance.getOverviewData && qigStore.instance.getSelectedQIGForTheLoggedInUser) {\r\n            var currentQig = qigStore.instance.getOverviewData.qigSummary.filter(function (qig) {\r\n                return qig.examinerRoleId === qigStore.instance.getSelectedQIGForTheLoggedInUser.examinerRoleId;\r\n            }).first();\r\n            teamManagementActionCreator.removeHistoryItem(currentQig ?\r\n                currentQig.markSchemeGroupId : 0);\r\n        }\r\n        qigActionCreator.getQIGSelectorData(0);\r\n        loadContainerActionCreator.loadContainer(enums.PageContainers.QigSelector);\r\n        navigationHelper.handleNavigation(enums.SaveAndNavigate.toQigSelector);\r\n    };\r\n    /**\r\n     * Method to handle the warning message navigation.\r\n     */\r\n    WarningMessageNavigationHelper.handleWarningMessageNavigation = function (failureCode, warningMessageAction, args) {\r\n        switch (warningMessageAction) {\r\n            case enums.WarningMessageAction.SupervisorSampling:\r\n                WarningMessageNavigationHelper.supervisorSamplingFailureNavigation(failureCode);\r\n                break;\r\n            case enums.WarningMessageAction.PromoteToSeed:\r\n                WarningMessageNavigationHelper.promoteSeedCheckFailureNavigation(failureCode);\r\n                break;\r\n            case enums.WarningMessageAction.SuperVisorRemarkCheck:\r\n                WarningMessageNavigationHelper.superVisorRemarkCheckFailureNavigation(failureCode);\r\n                break;\r\n            case enums.WarningMessageAction.CheckingExaminerViewingResponse:\r\n                WarningMessageNavigationHelper.checkingExaminerViewingResponseFailureNavigation(failureCode);\r\n                break;\r\n            case enums.WarningMessageAction.SEPAction:\r\n                WarningMessageNavigationHelper.sepActionFailureActions(failureCode);\r\n                break;\r\n            case enums.WarningMessageAction.ChangeExaminerStatus:\r\n                WarningMessageNavigationHelper.changeExaminerStatusFailureNavigation(failureCode);\r\n                break;\r\n            case enums.WarningMessageAction.MarksChecked:\r\n            case enums.WarningMessageAction.CheckMyMarks:\r\n                WarningMessageNavigationHelper.markingCheckFailureNavigation(failureCode, warningMessageAction);\r\n                break;\r\n            case enums.WarningMessageAction.MyTeamAction:\r\n                WarningMessageNavigationHelper.myTeamActionFailureActions(failureCode);\r\n                break;\r\n            case enums.WarningMessageAction.SetAsReviewed:\r\n                WarningMessageNavigationHelper.setAsReviewedFailureNavigation(failureCode);\r\n                break;\r\n            case enums.WarningMessageAction.ExceptionAction:\r\n                WarningMessageNavigationHelper.exceptionActionFailureNavigation(failureCode);\r\n                break;\r\n            case enums.WarningMessageAction.TeamWorklist:\r\n                WarningMessageNavigationHelper.teamWorklistFailureNavigation(failureCode);\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Actions for the SEP failure\r\n     */\r\n    WarningMessageNavigationHelper.sepActionFailureActions = function (failureCode) {\r\n        switch (failureCode) {\r\n            case enums.FailureCode.NotApproved:\r\n            case enums.FailureCode.NotInLockStatus:\r\n                WarningMessageNavigationHelper.clearQIGSelectorCache();\r\n                teamManagementActionCreator.teammanagementTabSelect(enums.TeamManagement.MyTeam);\r\n                navigationHelper.loadTeamManagement();\r\n                break;\r\n            case enums.FailureCode.Withdrawn:\r\n            case enums.FailureCode.NotASeniorExaminer:\r\n                WarningMessageNavigationHelper.removeQIGSelectorCacheRemoveHistoryAndNavigate();\r\n                break;\r\n            case enums.FailureCode.InvalidPriority:\r\n            case enums.FailureCode.LockLimitMet:\r\n            case enums.FailureCode.LockIsRequired:\r\n            case enums.FailureCode.AlreadyLocked:\r\n            case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                navigationHelper.loadTeamManagement();\r\n                break;\r\n            case enums.FailureCode.Suspended:\r\n                teamManagementActionCreator.teammanagementTabSelect(enums.TeamManagement.MyTeam);\r\n                navigationHelper.loadTeamManagement();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Clear the QIG Selector Cache\r\n     */\r\n    WarningMessageNavigationHelper.clearQIGSelectorCache = function () {\r\n        WarningMessageNavigationHelper._storageAdapterHelper.clearCacheByKey('qigselector', 'overviewdata');\r\n    };\r\n    /**\r\n     * Actions for the my team failure\r\n     */\r\n    WarningMessageNavigationHelper.myTeamActionFailureActions = function (failureCode) {\r\n        switch (failureCode) {\r\n            case enums.FailureCode.NotTeamLead:\r\n            case enums.FailureCode.Withdrawn:\r\n                WarningMessageNavigationHelper.removeQIGSelectorCacheRemoveHistoryAndNavigate();\r\n                break;\r\n            case enums.FailureCode.SubordinateExaminerWithdrawn:\r\n                navigationHelper.loadTeamManagement();\r\n                break;\r\n        }\r\n    };\r\n    return WarningMessageNavigationHelper;\r\n}());\r\nmodule.exports = WarningMessageNavigationHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 478:
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/components/message/teamlistpopup.tsx ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar GenericButton = __webpack_require__(/*! ../utility/genericbutton */ 290);\r\nvar messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../actions/messaging/messagingactioncreator */ 268);\r\nvar TeamListTreeview = __webpack_require__(/*! ./teamlisttreeview */ 479);\r\nvar htmlUtilities = __webpack_require__(/*! ../../utility/generic/htmlutilities */ 243);\r\n/**\r\n * TeamListPopup section contain team list\r\n * @param props\r\n * @param state\r\n */\r\nvar TeamListPopup = /** @class */ (function (_super) {\r\n    __extends(TeamListPopup, _super);\r\n    /**\r\n     * Constructor Messagepopup\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function TeamListPopup(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.isShowAddressPopup = false;\r\n        _this.isToTeamChecked = false;\r\n        _this.prevPageY = 0;\r\n        _this.allowUp = false;\r\n        _this.allowDown = false;\r\n        /**\r\n         * event handler for touch start\r\n         */\r\n        _this.onTouchStart = function (event) {\r\n            _this.prevPageY = (event.changedTouches) ? event.changedTouches[0].pageY : 0;\r\n            var content = _this.teamListRef;\r\n            _this.allowUp = (content.scrollTop > 0);\r\n            _this.allowDown = (content.scrollTop <= content.scrollHeight - content.clientHeight);\r\n        };\r\n        /**\r\n         * event handler for touch move\r\n         */\r\n        _this.onTouchMove = function (event) {\r\n            setTimeout(function () {\r\n                event.preventDefault();\r\n                var content = _this.teamListRef;\r\n                var pageY = event.changedTouches[0].pageY;\r\n                var up = (pageY > _this.prevPageY);\r\n                var down = (pageY < _this.prevPageY);\r\n                var diff = Math.abs(_this.prevPageY - event.pageY);\r\n                _this.prevPageY = event.pageY;\r\n                if ((up && _this.allowUp)) {\r\n                    content.scrollTop = (content.scrollTop - diff);\r\n                }\r\n                else if (down && _this.allowDown) {\r\n                    content.scrollTop = (content.scrollTop + diff);\r\n                }\r\n            }, 0);\r\n        };\r\n        /**\r\n         * event handler for touch end\r\n         */\r\n        _this.onTouchEnd = function (event) {\r\n            _this.prevPageY = 0;\r\n        };\r\n        /**\r\n         * Method to cancel team selection.\r\n         */\r\n        _this.cancelTeamSelection = function () {\r\n            messagingActionCreator.updateSelectedTeamList(false);\r\n        };\r\n        /**\r\n         * Method to save selected team list in the message store.\r\n         */\r\n        _this.saveSelectedTeamList = function () {\r\n            messagingActionCreator.updateSelectedTeamList(true);\r\n        };\r\n        /**\r\n         * Method for handling entire team click.\r\n         */\r\n        _this.entireTeamClick = function () {\r\n            messagingActionCreator.entireTeamChecked(!_this.teamList.team.toTeam);\r\n        };\r\n        /**\r\n         * Method for update team list.\r\n         */\r\n        _this.teamListUpdated = function (isToTeamClick, isExpand) {\r\n            // avoid EntireTeam's checked-status change while clicking Expand/Collapse button\r\n            if (isExpand === undefined || !isExpand) {\r\n                _this.isToTeamChecked = isToTeamClick && messageStore.instance.teamDetails.team.toTeam ? true : false;\r\n            }\r\n            _this.teamList = messageStore.instance.teamDetails;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /*\r\n         * event handler for team list panel scroll.\r\n         */\r\n        _this.onScroll = function () {\r\n            _this.setState({\r\n                renderedOn: _this.state.renderedOn,\r\n                teamListScrollHeight: _this.getTeamListScrollHeight()\r\n            });\r\n        };\r\n        /**\r\n         * Clicking on check/uncheck of superviser\r\n         */\r\n        _this.updateTeamListStatus = function (uniqueId, isExpand) {\r\n            messagingActionCreator.updateTeamListStatus(uniqueId, isExpand);\r\n        };\r\n        // Set the default states\r\n        _this.state = {\r\n            renderedOn: 0,\r\n        };\r\n        _this.isShowAddressPopup = false;\r\n        if (messageStore.instance.teamDetails && messageStore.instance.teamDetails.team.subordinates) {\r\n            _this.isShowAddressPopup = messageStore.instance.teamDetails.team.subordinates.length > 0 ? true : false;\r\n        }\r\n        _this.teamList = messageStore.instance.teamDetails;\r\n        _this.isToTeamChecked = false;\r\n        if (_this.teamList) {\r\n            _this.isToTeamChecked = _this.teamList.team.toTeam;\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    TeamListPopup.prototype.render = function () {\r\n        var _this = this;\r\n        this.teamList = messageStore.instance.teamDetails;\r\n        var toTeamListPopup = this.teamList ? (React.createElement(\"div\", null,\r\n            React.createElement(\"div\", { className: classNames('popup small msg-address-list-popup in-page-popout', this.isShowAddressPopup ? 'popup-overlay open' : 'popup-overlay close'), id: 'addressListPopUp', role: 'dialog', \"aria-describedby\": 'addressList' },\r\n                React.createElement(\"div\", { className: 'popup-wrap' },\r\n                    React.createElement(\"div\", { className: 'popup-content', id: 'popup1Desc', ref: function (ele) { _this.teamListRef = ele; } },\r\n                        React.createElement(\"div\", { className: 'tree-view' },\r\n                            React.createElement(\"ul\", { role: 'tree', id: 'addressList', onScroll: this.onScroll },\r\n                                React.createElement(\"li\", { className: 'node highlighted', role: 'treeitem', \"aria-expanded\": 'false', id: 'id_entire_team' },\r\n                                    React.createElement(\"input\", { type: 'checkbox', className: 'text-middle checkbox', id: 'item1', checked: this.isToTeamChecked, onChange: this.entireTeamClick }),\r\n                                    React.createElement(\"label\", { htmlFor: 'item1', id: 'id_entire_team_label' }, localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.entire-team'))),\r\n                                React.createElement(\"li\", { className: 'node expanded', role: 'treeitem', \"aria-expanded\": 'true' },\r\n                                    React.createElement(\"input\", { type: 'checkbox', className: 'text-middle checkbox', id: 'item2', checked: this.teamList && this.teamList.team.parent ?\r\n                                            this.teamList.team.parent.isChecked : false }),\r\n                                    this.teamList && this.teamList.team.parent ?\r\n                                        React.createElement(\"label\", { htmlFor: 'item2', onClick: this.updateTeamListStatus.bind(this, this.teamList.team.parent.examinerRoleId, false) }, this.teamList.team.parent.fullName) : null,\r\n                                    React.createElement(\"ul\", { role: 'group', id: this.props.id + '_TeamList' },\r\n                                        React.createElement(\"li\", { className: 'node expanded', role: 'treeitem', \"aria-expanded\": 'true', id: 'li_' + this.teamList.team.examinerRoleId },\r\n                                            React.createElement(\"span\", { className: 'sprite-icon user-icon-medium tree-icon' }),\r\n                                            React.createElement(\"label\", { className: 'text-middle', id: 'current_login_user' }, this.teamList.team.fullName),\r\n                                            React.createElement(TeamListTreeview, { id: 'teamList', key: 'teamList_key', addressList: this.teamList.team.subordinates, renderedOn: this.state.renderedOn }))))))),\r\n                    React.createElement(\"div\", { className: 'popup-footer text-right' },\r\n                        React.createElement(GenericButton, { id: 'button-rounded-close-button', key: 'key_button rounded close-button', className: 'button rounded close-button', title: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.cancel-button'), content: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.cancel-button'), disabled: false, onClick: this.cancelTeamSelection }),\r\n                        React.createElement(GenericButton, { id: 'button-primary-rounded-button', key: 'key_button primary rounded-button', className: 'button primary rounded', title: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.ok-button'), content: localeStore.instance.TranslateText('messaging.compose-message.recipient-selector.ok-button'), disabled: false, onClick: this.saveSelectedTeamList })))))) : null;\r\n        return (toTeamListPopup);\r\n    };\r\n    /**\r\n     * Component did mount\r\n     */\r\n    TeamListPopup.prototype.componentDidMount = function () {\r\n        /* these events are used to implement custom\r\n           scrolling logic to handle the elastic scroll behavior of ipad */\r\n        if (this.teamListRef && (htmlUtilities.isIPadDevice)) {\r\n            this.teamListRef.addEventListener('touchstart', this.onTouchStart);\r\n            this.teamListRef.addEventListener('touchmove', this.onTouchMove);\r\n            this.teamListRef.addEventListener('touchend', this.onTouchEnd);\r\n        }\r\n        messageStore.instance.addListener(messageStore.MessageStore.TEAM_LIST_UPDATED, this.teamListUpdated);\r\n    };\r\n    /**\r\n     * Component will unmount\r\n     */\r\n    TeamListPopup.prototype.componentWillUnmount = function () {\r\n        messageStore.instance.removeListener(messageStore.MessageStore.TEAM_LIST_UPDATED, this.teamListUpdated);\r\n        this.teamListRef.removeEventListener('touchstart', this.onTouchStart);\r\n        this.teamListRef.removeEventListener('touchmove', this.onTouchMove);\r\n        this.teamListRef.removeEventListener('touchend', this.onTouchEnd);\r\n    };\r\n    /**\r\n     * componentWillReceiveProps\r\n     * @param nextProps\r\n     */\r\n    TeamListPopup.prototype.componentWillReceiveProps = function (nextProps) {\r\n        this.isShowAddressPopup = false;\r\n        if (messageStore.instance.teamDetails && messageStore.instance.teamDetails.team.subordinates) {\r\n            this.isShowAddressPopup = messageStore.instance.teamDetails.team.subordinates.length > 0 ? true : false;\r\n        }\r\n    };\r\n    /**\r\n     * returns the team list scroll height\r\n     */\r\n    TeamListPopup.prototype.getTeamListScrollHeight = function () {\r\n        return (this.teamListRef) ? (this.teamListRef.clientHeight + this.teamListRef.scrollTop) : undefined;\r\n    };\r\n    return TeamListPopup;\r\n}(pureRenderComponent));\r\nmodule.exports = TeamListPopup;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 479:
/* no static exports found */
/* all exports used */
/*!*****************************************************!*\
  !*** ./src/components/message/teamlisttreeview.tsx ***!
  \*****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../actions/messaging/messagingactioncreator */ 268);\r\nvar TeamListTreeview = /** @class */ (function (_super) {\r\n    __extends(TeamListTreeview, _super);\r\n    /**\r\n     * Constructor Messagepopup\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function TeamListTreeview(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.isInitialLoad = true;\r\n        /**\r\n         * Clicking on expand/collapse or check/uncheck\r\n         */\r\n        _this.updateTeamListStatus = function (uniqueId, isExpand) {\r\n            messagingActionCreator.updateTeamListStatus(uniqueId, isExpand);\r\n        };\r\n        _this._className = _this.props.addressList.length > 0 ? 'sub-items has-expandables' : null;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    TeamListTreeview.prototype.render = function () {\r\n        var that = this;\r\n        var nodes;\r\n        var teamListTreeView;\r\n        if (that.props.addressList !== undefined) {\r\n            nodes = that.props.addressList.map(function (nodeItem, index) {\r\n                return that.getNodeItem(nodeItem, index);\r\n            });\r\n        }\r\n        return (React.createElement(\"ul\", { role: 'group', className: this._className, id: this.props.id, key: this.props.id }, nodes));\r\n    };\r\n    /**\r\n     * getting node items\r\n     */\r\n    TeamListTreeview.prototype.getNodeItem = function (nodeItem, index) {\r\n        var checkBoxId = 'cbx_' + nodeItem.examinerRoleId;\r\n        if (nodeItem.subordinates.length > 0) {\r\n            var teamListTreeview = nodeItem.isOpen ? (React.createElement(TeamListTreeview, { id: 'nodeItem_' + nodeItem.examinerRoleId, key: 'nodeItem_' + index.toString() + '_key_' + nodeItem.examinerRoleId, addressList: nodeItem.subordinates, renderedOn: Date.now() })) : null;\r\n            var classNameForExpand = nodeItem.isOpen ? 'node has-sub expanded' : 'node has-sub collapsed';\r\n            return (React.createElement(\"li\", { id: 'li_' + nodeItem.examinerRoleId, key: 'li_' + index.toString() + '_' + nodeItem.examinerRoleId, className: classNameForExpand, role: 'treeitem', \"aria-expanded\": 'true' },\r\n                React.createElement(\"a\", { id: 'a_' + nodeItem.examinerRoleId, onClick: this.updateTeamListStatus.bind(this, nodeItem.examinerRoleId, true), href: 'javascript:void(0);', className: 'parent-node' }),\r\n                React.createElement(\"input\", { type: 'checkbox', className: 'text-middle checkbox', id: checkBoxId, checked: nodeItem.isChecked, onChange: this.updateTeamListStatus.bind(this, nodeItem.examinerRoleId, false) }),\r\n                React.createElement(\"label\", { htmlFor: checkBoxId }, nodeItem.fullName),\r\n                teamListTreeview));\r\n        }\r\n        else {\r\n            return (React.createElement(\"li\", { id: 'li_' + nodeItem.examinerRoleId, key: 'li_' + index.toString() + '_' + nodeItem.examinerRoleId, className: 'node', role: 'treeitem' },\r\n                React.createElement(\"input\", { type: 'checkbox', className: 'text-middle checkbox', id: checkBoxId, checked: nodeItem.isChecked, onChange: this.updateTeamListStatus.bind(this, nodeItem.examinerRoleId, false) }),\r\n                React.createElement(\"label\", { htmlFor: checkBoxId }, nodeItem.fullName)));\r\n        }\r\n    };\r\n    return TeamListTreeview;\r\n}(pureRenderComponent));\r\nmodule.exports = TeamListTreeview;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvbWVzc2FnZS90ZWFtbGlzdHRyZWV2aWV3LnRzeD84MjIxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBSZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBHZW5lcmljQnV0dG9uID0gcmVxdWlyZSgnLi4vdXRpbGl0eS9nZW5lcmljYnV0dG9uJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IHRvQWRkcmVzc0xpc3QgPSByZXF1aXJlKCcuLi8uLi9zdG9yZXMvbWVzc2FnZS90eXBpbmdzL3RlYW1yZXR1cm4nKTtcclxuaW1wb3J0IG1lc3NhZ2luZ0FjdGlvbkNyZWF0b3IgPSByZXF1aXJlKCcuLi8uLi9hY3Rpb25zL21lc3NhZ2luZy9tZXNzYWdpbmdhY3Rpb25jcmVhdG9yJyk7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBQcm9wc0Jhc2UsIExvY2FsZVNlbGVjdGlvbkJhc2Uge1xyXG4gICAgYWRkcmVzc0xpc3Q6IEFycmF5PEV4YW1pbmVySW5mbz47XHJcbiAgICByZW5kZXJlZE9uPzogbnVtYmVyO1xyXG59XHJcblxyXG5jbGFzcyBUZWFtTGlzdFRyZWV2aWV3IGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcblxyXG4gICAgcHJpdmF0ZSBfY2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGlzSW5pdGlhbExvYWQ6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3IgTWVzc2FnZXBvcHVwXHJcbiAgICAgKiBAcGFyYW0gcHJvcHNcclxuICAgICAqIEBwYXJhbSBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xyXG5cclxuICAgICAgICB0aGlzLl9jbGFzc05hbWUgPSB0aGlzLnByb3BzLmFkZHJlc3NMaXN0Lmxlbmd0aCA+IDAgPyAnc3ViLWl0ZW1zIGhhcy1leHBhbmRhYmxlcycgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIGNvbXBvbmVudFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIGxldCBub2RlczogYW55O1xyXG5cclxuICAgICAgICBsZXQgdGVhbUxpc3RUcmVlVmlldzogYW55O1xyXG5cclxuICAgICAgICBpZiAodGhhdC5wcm9wcy5hZGRyZXNzTGlzdCAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgICAgICAgICBub2RlcyA9IHRoYXQucHJvcHMuYWRkcmVzc0xpc3QubWFwKGZ1bmN0aW9uIChub2RlSXRlbTogRXhhbWluZXJJbmZvLCBpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5nZXROb2RlSXRlbShub2RlSXRlbSwgaW5kZXgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx1bCByb2xlPSdncm91cCcgY2xhc3NOYW1lPXt0aGlzLl9jbGFzc05hbWV9IGlkPXt0aGlzLnByb3BzLmlkfSBrZXk9e3RoaXMucHJvcHMuaWR9PlxyXG4gICAgICAgICAgICAgICAge25vZGVzfVxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2V0dGluZyBub2RlIGl0ZW1zXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0Tm9kZUl0ZW0obm9kZUl0ZW06IEV4YW1pbmVySW5mbywgaW5kZXg6IG51bWJlcik6IGFueSB7XHJcbiAgICAgICAgbGV0IGNoZWNrQm94SWQ6IHN0cmluZyA9ICdjYnhfJyArIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkO1xyXG5cclxuICAgICAgICBpZiAobm9kZUl0ZW0uc3Vib3JkaW5hdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IHRlYW1MaXN0VHJlZXZpZXcgPSBub2RlSXRlbS5pc09wZW4gPyAoPFRlYW1MaXN0VHJlZXZpZXdcclxuICAgICAgICAgICAgICAgIGlkPXsnbm9kZUl0ZW1fJyArIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkfVxyXG4gICAgICAgICAgICAgICAga2V5PXsnbm9kZUl0ZW1fJyArIGluZGV4LnRvU3RyaW5nKCkgKyAnX2tleV8nICsgbm9kZUl0ZW0uZXhhbWluZXJSb2xlSWQgfVxyXG4gICAgICAgICAgICAgICAgYWRkcmVzc0xpc3QgPXtub2RlSXRlbS5zdWJvcmRpbmF0ZXN9XHJcbiAgICAgICAgICAgICAgICByZW5kZXJlZE9uID0ge0RhdGUubm93KCl9Lz4pIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGxldCBjbGFzc05hbWVGb3JFeHBhbmQgPSBub2RlSXRlbS5pc09wZW4gPyAnbm9kZSBoYXMtc3ViIGV4cGFuZGVkJyA6ICdub2RlIGhhcy1zdWIgY29sbGFwc2VkJztcclxuICAgICAgICAgICAgcmV0dXJuICg8bGkgaWQ9eydsaV8nICsgbm9kZUl0ZW0uZXhhbWluZXJSb2xlSWR9IGtleT17J2xpXycgKyBpbmRleC50b1N0cmluZygpICsgJ18nICsgbm9kZUl0ZW0uZXhhbWluZXJSb2xlSWR9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZUZvckV4cGFuZH0gcm9sZT0ndHJlZWl0ZW0nIGFyaWEtZXhwYW5kZWQ9J3RydWUnPlxyXG4gICAgICAgICAgICAgICAgPGFcclxuICAgICAgICAgICAgICAgICAgICBpZD17J2FfJyArIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2sgPSB7dGhpcy51cGRhdGVUZWFtTGlzdFN0YXR1cy5iaW5kKHRoaXMsIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkLCB0cnVlKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApOycgY2xhc3NOYW1lPSdwYXJlbnQtbm9kZSc+PC9hPlxyXG4gICAgICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT0nY2hlY2tib3gnXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPSd0ZXh0LW1pZGRsZSBjaGVja2JveCdcclxuICAgICAgICAgICAgICAgICAgICBpZD17Y2hlY2tCb3hJZH1cclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkID0ge25vZGVJdGVtLmlzQ2hlY2tlZH1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy51cGRhdGVUZWFtTGlzdFN0YXR1cy5iaW5kKHRoaXMsIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkLCBmYWxzZSkgfVxyXG4gICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxsYWJlbFxyXG4gICAgICAgICAgICAgICAgICAgIGh0bWxGb3I9e2NoZWNrQm94SWR9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtub2RlSXRlbS5mdWxsTmFtZX1cclxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgIHt0ZWFtTGlzdFRyZWV2aWV3fVxyXG4gICAgICAgICAgICA8L2xpPik7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoPGxpIGlkPXsnbGlfJyArIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkfSBrZXk9eydsaV8nICsgaW5kZXgudG9TdHJpbmcoKSArICdfJyArIG5vZGVJdGVtLmV4YW1pbmVyUm9sZUlkfVxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPSdub2RlJyByb2xlPSd0cmVlaXRlbSc+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICB0eXBlPSdjaGVja2JveCdcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3RleHQtbWlkZGxlIGNoZWNrYm94J1xyXG4gICAgICAgICAgICAgICAgICAgIGlkPXtjaGVja0JveElkfVxyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQgPSB7bm9kZUl0ZW0uaXNDaGVja2VkfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZVRlYW1MaXN0U3RhdHVzLmJpbmQodGhpcywgbm9kZUl0ZW0uZXhhbWluZXJSb2xlSWQsIGZhbHNlKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxsYWJlbFxyXG4gICAgICAgICAgICAgICAgICAgIGh0bWxGb3I9e2NoZWNrQm94SWR9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtub2RlSXRlbS5mdWxsTmFtZX08L2xhYmVsPlxyXG4gICAgICAgICAgICA8L2xpPik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsaWNraW5nIG9uIGV4cGFuZC9jb2xsYXBzZSBvciBjaGVjay91bmNoZWNrXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgdXBkYXRlVGVhbUxpc3RTdGF0dXMgPSAodW5pcXVlSWQ6IG51bWJlciwgaXNFeHBhbmQ6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICBtZXNzYWdpbmdBY3Rpb25DcmVhdG9yLnVwZGF0ZVRlYW1MaXN0U3RhdHVzKHVuaXF1ZUlkLCBpc0V4cGFuZCk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgPSBUZWFtTGlzdFRyZWV2aWV3O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9tZXNzYWdlL3RlYW1saXN0dHJlZXZpZXcudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFLQTtBQU9BO0FBQUE7QUFLQTs7OztBQUlBO0FBQ0E7QUFBQTtBQVBBO0FBeUZBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBcEZBOztBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFNQTtBQUNBO0FBRUE7QUFJQTtBQU9BO0FBSUE7QUFHQTtBQUFBO0FBQ0E7QUFFQTtBQU9BO0FBSUE7QUFDQTtBQVNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 483:
/* no static exports found */
/* all exports used */
/*!***************************************************************************!*\
  !*** ./src/components/utility/qigselector/qigselectorvalidationhelper.ts ***!
  \***************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar targetSummaryStore = __webpack_require__(/*! ../../../stores/worklist/targetsummarystore */ 305);\r\nvar qigValidationResult = __webpack_require__(/*! ../../../stores/qigselector/qigvalidationresult */ 533);\r\nvar aggregatedQigValidationResult = __webpack_require__(/*! ../../../stores/qigselector/aggregatedqigvalidationresult */ 497);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * Class for the Validations in the QIG Selector\r\n */\r\nvar QigSelectorValidationHelper = /** @class */ (function () {\r\n    function QigSelectorValidationHelper() {\r\n        this.qigValidationResult = [];\r\n    }\r\n    /**\r\n     * Method to find the validation results by passing the QIG list\r\n     * @param qigsummaryCollection\r\n     */\r\n    QigSelectorValidationHelper.prototype.getValidationResults = function (qigsummaryCollection) {\r\n        var _this = this;\r\n        // clearing existing result before filling to enusre while opened and tranlate language\r\n        // should fill new results at the top.\r\n        this.qigValidationResult = [];\r\n        // Loop through each QIG and find the properties for the QIG selector\r\n        qigsummaryCollection.map(function (qigsummary) {\r\n            var qigValidationResultObj = new qigValidationResult();\r\n            _this.populateValidationResultForQig(qigsummary, qigValidationResultObj);\r\n            // Add the validation Result object to the collection\r\n            _this.qigValidationResult.push(qigValidationResultObj);\r\n        });\r\n        return this.qigValidationResult;\r\n    };\r\n    /**\r\n     * Set the Visibility properties for UI Components\r\n     * @param qigsummary\r\n     * @param qigValidationResult\r\n     */\r\n    QigSelectorValidationHelper.prototype.setVisibilityPropertiesBasedOnExaminerQIGStatus = function (qigsummary, qigValidationResult) {\r\n        switch (qigsummary.examinerQigStatus) {\r\n            case enums.ExaminerQIGStatus.Practice:\r\n            case enums.ExaminerQIGStatus.StandardisationMarking:\r\n            case enums.ExaminerQIGStatus.STMStandardisationMarking:\r\n            case enums.ExaminerQIGStatus.SecondStandardisationMarking:\r\n                qigValidationResult.displayTargetDate = true;\r\n                break;\r\n            case enums.ExaminerQIGStatus.QualityFeedback:\r\n            case enums.ExaminerQIGStatus.Suspended:\r\n                if (qigsummary.isForAdminRemark !== true) {\r\n                    qigValidationResult.displayTargetDate = true;\r\n                    qigValidationResult.displayProgressBar = qigsummary.groupId <= 0;\r\n                    qigValidationResult.displayTarget = true;\r\n                }\r\n                break;\r\n            case enums.ExaminerQIGStatus.LiveMarking:\r\n                qigValidationResult.displayTargetDate = true;\r\n                qigValidationResult.displayProgressBar = qigsummary.groupId <= 0;\r\n                qigValidationResult.displayTarget = true;\r\n                if (this.getTotalOpenResponsesCount(qigsummary) > 0) {\r\n                    qigValidationResult.displayOpenResponseIndicator = true;\r\n                }\r\n                else if (this.hasAvailableResponsesInPool(qigsummary)) {\r\n                    qigValidationResult.displayResponseAvailableIndicator = true;\r\n                }\r\n                if (this.hasRemarkOpenResponse(qigsummary)) {\r\n                    qigValidationResult.displayRemarkOpenResponseIndicator = true;\r\n                    qigValidationResult.displayRemarkAvailableResponseIndicator = false;\r\n                }\r\n                else if (this.hasRemarkResponseInPool(qigsummary)) {\r\n                    qigValidationResult.displayRemarkAvailableResponseIndicator = true;\r\n                    qigValidationResult.displayRemarkOpenResponseIndicator = false;\r\n                }\r\n                break;\r\n            case enums.ExaminerQIGStatus.LiveComplete:\r\n                qigValidationResult.displayTargetDate = true;\r\n                qigValidationResult.displayProgressBar = qigsummary.groupId <= 0;\r\n                qigValidationResult.displayTarget = true;\r\n                if (qigsummary.currentMarkingTarget.openResponsesCount > 0) {\r\n                    qigValidationResult.displayOpenResponseIndicator = true;\r\n                }\r\n                else if (this.isIntoOverAllocation(qigsummary) && this.hasAvailableResponsesInPool(qigsummary)) {\r\n                    qigValidationResult.displayResponseAvailableIndicator = true;\r\n                }\r\n                if (this.hasRemarkOpenResponse(qigsummary)) {\r\n                    qigValidationResult.displayRemarkOpenResponseIndicator = true;\r\n                    qigValidationResult.displayRemarkAvailableResponseIndicator = false;\r\n                }\r\n                else if (this.hasRemarkResponseInPool(qigsummary)) {\r\n                    qigValidationResult.displayRemarkAvailableResponseIndicator = true;\r\n                    qigValidationResult.displayRemarkOpenResponseIndicator = false;\r\n                }\r\n                break;\r\n            case enums.ExaminerQIGStatus.AdminRemark:\r\n                if (qigsummary.currentMarkingTarget.openResponsesCount > 0) {\r\n                    qigValidationResult.displayOpenResponseIndicator = true;\r\n                    qigValidationResult.displayResponseAvailableIndicator = false;\r\n                }\r\n                else if (this.hasAvailableResponsesInPool(qigsummary)) {\r\n                    qigValidationResult.displayResponseAvailableIndicator = true;\r\n                    qigValidationResult.displayOpenResponseIndicator = false;\r\n                }\r\n                break;\r\n            case enums.ExaminerQIGStatus.Simulation:\r\n                if (qigsummary.currentMarkingTarget.openResponsesCount > 0) {\r\n                    qigValidationResult.displayOpenResponseIndicator = true;\r\n                    qigValidationResult.displayResponseAvailableIndicator = false;\r\n                }\r\n                else if (this.hasAvailableResponsesInPool(qigsummary)) {\r\n                    qigValidationResult.displayResponseAvailableIndicator = true;\r\n                    qigValidationResult.displayOpenResponseIndicator = false;\r\n                }\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * Get the Status color class for the text in UI.\r\n     * @param qigsummary\r\n     */\r\n    QigSelectorValidationHelper.prototype.getStatusClassBasedOnExaminerQIGStatus = function (qigsummary) {\r\n        switch (qigsummary.examinerQigStatus) {\r\n            case enums.ExaminerQIGStatus.QualityFeedback:\r\n                return 'warning'; //Amber\r\n            case enums.ExaminerQIGStatus.WaitingStandardisation:\r\n            case enums.ExaminerQIGStatus.AwaitingApproval:\r\n            case enums.ExaminerQIGStatus.Suspended:\r\n            case enums.ExaminerQIGStatus.NoLiveTarget:\r\n            case enums.ExaminerQIGStatus.AwaitingScripts:\r\n                return 'error'; // Red\r\n            default:\r\n                return ''; // Black\r\n        }\r\n    };\r\n    /**\r\n     * To check the remark open response\r\n     * Returns true if any remark is available in the any remark open worklist\r\n     */\r\n    QigSelectorValidationHelper.prototype.hasRemarkOpenResponse = function (qigsummary) {\r\n        if (qigsummary.markingTargets) {\r\n            return qigsummary.markingTargets.some(function (remark) {\r\n                return remark.markingMode === enums.MarkingMode.Remarking\r\n                    && remark.openResponsesCount > 0;\r\n            });\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * To check the remark pool status\r\n     * Returns true if any remark is available in the any remark pool\r\n     */\r\n    QigSelectorValidationHelper.prototype.hasRemarkResponseInPool = function (qigsummary) {\r\n        if (qigsummary.markingTargets) {\r\n            return qigsummary.markingTargets.some(function (remark) {\r\n                return remark.markingMode === enums.MarkingMode.Remarking\r\n                    && !remark.isDirectedRemark\r\n                    && remark.areResponsesAvailableToBeDownloaded\r\n                    && remark.maximumMarkingLimit > remark.closedResponsesCount;\r\n            });\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * * AvailableResponseExists logic *\r\n     * If live marking target is having responses in the pool\r\n     * @param qigsummary\r\n     */\r\n    QigSelectorValidationHelper.prototype.hasAvailableResponsesInPool = function (qigsummary) {\r\n        if (qigsummary.markingTargets == null) {\r\n            if (qigsummary.isForAdminRemark) {\r\n                if (qigsummary.currentMarkingTarget.areResponsesAvailableToBeDownloaded) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            return false;\r\n        }\r\n        for (var index in qigsummary.markingTargets) {\r\n            if (qigsummary.markingTargets[index].areResponsesAvailableToBeDownloaded\r\n                && qigsummary.markingTargets[index].markingMode === enums.MarkingMode.LiveMarking) {\r\n                return true;\r\n            }\r\n            else if (qigsummary.markingTargets[index].areResponsesAvailableToBeDownloaded\r\n                && qigsummary.markingTargets[index].markingMode === enums.MarkingMode.Remarking\r\n                && qigsummary.isForAdminRemark) {\r\n                return true;\r\n            }\r\n            else if (qigsummary.markingTargets[index].areResponsesAvailableToBeDownloaded\r\n                && qigsummary.markingTargets[index].markingMode === enums.MarkingMode.Simulation) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Check the user having access to live target\r\n     * @param qigsummary\r\n     */\r\n    QigSelectorValidationHelper.prototype.hasLiveMarkingTargetExists = function (qigsummary) {\r\n        for (var index in qigsummary.markingTargets) {\r\n            if (qigsummary.markingTargets[index].markingMode === enums.MarkingMode.LiveMarking) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Check the user has completed the non line targets.\r\n     * @param qigsummary\r\n     */\r\n    QigSelectorValidationHelper.prototype.hasNonLiveTargetCompleted = function (qigsummary) {\r\n        for (var index in qigsummary.markingTargets) {\r\n            if (qigsummary.markingTargets.hasOwnProperty(index)) {\r\n                var target = qigsummary.markingTargets[index];\r\n                if (target.markingMode === enums.MarkingMode.LiveMarking ||\r\n                    target.markingMode === enums.MarkingMode.Simulation ||\r\n                    target.markingMode === enums.MarkingMode.Remarking) {\r\n                    continue;\r\n                }\r\n                if (target.maximumMarkingLimit > target.closedResponsesCount) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Examiner QIG Status Text to display in QIG selector\r\n     * @param qigsummary\r\n     */\r\n    QigSelectorValidationHelper.prototype.getStatusText = function (qigsummary) {\r\n        var isIntoOverAllocation = this.isIntoOverAllocation(qigsummary);\r\n        var qigStatusKey = 'home.qig-statuses.' +\r\n            enums.ExaminerQIGStatus[qigsummary.examinerQigStatus];\r\n        if (isIntoOverAllocation) {\r\n            qigStatusKey = 'home.qig-statuses.LiveTargetOverAllocation';\r\n        }\r\n        return localeStore.instance.TranslateText(qigStatusKey);\r\n    };\r\n    /**\r\n     * checks if marking targets contains any directed remarks\r\n     * @param {qigSummary} qigsummary\r\n     * @returns\r\n     */\r\n    QigSelectorValidationHelper.prototype.filterDirectedRemarks = function (qigsummary) {\r\n        var directedRemarkTargets = [];\r\n        if (qigsummary.markingTargets != null) {\r\n            qigsummary.markingTargets.map(function (remark) {\r\n                if (remark.isDirectedRemark === true) {\r\n                    directedRemarkTargets.push(remark);\r\n                }\r\n            });\r\n        }\r\n        return directedRemarkTargets;\r\n    };\r\n    /**\r\n     * Retrieving the total open responses count\r\n     * @param qigsummary\r\n     */\r\n    QigSelectorValidationHelper.prototype.getTotalOpenResponsesCount = function (qigsummary) {\r\n        if (!qigsummary.currentMarkingTarget) {\r\n            return 0;\r\n        }\r\n        var totalOpenResponsesCount = 0;\r\n        var directedRemarkTargets = this.filterDirectedRemarks(qigsummary);\r\n        if (directedRemarkTargets !== undefined && directedRemarkTargets != null) {\r\n            directedRemarkTargets.map(function (remark) {\r\n                totalOpenResponsesCount += remark.openResponsesCount;\r\n            });\r\n        }\r\n        if (qigsummary.currentMarkingTarget !== undefined && qigsummary.currentMarkingTarget != null) {\r\n            totalOpenResponsesCount += isNaN(qigsummary.currentMarkingTarget.openResponsesCount) ?\r\n                0 : qigsummary.currentMarkingTarget.openResponsesCount;\r\n            totalOpenResponsesCount += isNaN(qigsummary.currentMarkingTarget.openAtypicalResponsesCount) ?\r\n                0 : qigsummary.currentMarkingTarget.openAtypicalResponsesCount;\r\n        }\r\n        return totalOpenResponsesCount;\r\n    };\r\n    /**\r\n     * Method to verify if the QIG is into the over allocation mode\r\n     * A marker would move to the over allocation mode only if\r\n     * the marker has an over allocation mentioned in the target\r\n     * and the total submitted responses count has crossed the actual\r\n     * marking target\r\n     * @param {qigSummary} qigsummary\r\n     * @returns\r\n     */\r\n    QigSelectorValidationHelper.prototype.isIntoOverAllocation = function (qigsummary) {\r\n        if (!qigsummary.currentMarkingTarget || qigsummary.currentMarkingTarget.overAllocationCount <= 0) {\r\n            return false;\r\n        }\r\n        var totalResponsesCount = 0;\r\n        var directedRemarkTargets = this.filterDirectedRemarks(qigsummary);\r\n        if (directedRemarkTargets !== undefined && directedRemarkTargets != null) {\r\n            directedRemarkTargets.map(function (remark) {\r\n                totalResponsesCount += remark.openResponsesCount +\r\n                    remark.pendingResponsesCount +\r\n                    remark.closedResponsesCount;\r\n            });\r\n        }\r\n        if (qigsummary.currentMarkingTarget !== undefined && qigsummary.currentMarkingTarget != null) {\r\n            totalResponsesCount += isNaN(qigsummary.currentMarkingTarget.openResponsesCount) ?\r\n                0 : qigsummary.currentMarkingTarget.openResponsesCount;\r\n            totalResponsesCount += isNaN(qigsummary.currentMarkingTarget.pendingResponsesCount) ?\r\n                0 : qigsummary.currentMarkingTarget.pendingResponsesCount;\r\n            totalResponsesCount += isNaN(qigsummary.currentMarkingTarget.closedResponsesCount) ?\r\n                0 : qigsummary.currentMarkingTarget.closedResponsesCount;\r\n        }\r\n        return totalResponsesCount >= qigsummary.currentMarkingTarget.maximumMarkingLimit;\r\n    };\r\n    /**\r\n     * Method to verify if the concurrent limit is met\r\n     * @param qigsummary\r\n     * @param concurrentLimit\r\n     */\r\n    QigSelectorValidationHelper.prototype.isConcurrentLimitMet = function (qigsummary, liveOpenWorklist) {\r\n        var totalOpenResponsesCount = 0;\r\n        var currentTarget = targetSummaryStore.instance.getCurrentTarget();\r\n        var directedRemarkTargets = this.filterDirectedRemarks(qigsummary);\r\n        //The directed remark targest have to be checked only when the worklist type is live\r\n        if (directedRemarkTargets !== undefined && directedRemarkTargets != null\r\n            && (worklistStore.instance.currentWorklistType === enums.WorklistType.live\r\n                || worklistStore.instance.currentWorklistType === enums.WorklistType.atypical)) {\r\n            directedRemarkTargets.map(function (remark) {\r\n                totalOpenResponsesCount += remark.openResponsesCount;\r\n            });\r\n        }\r\n        var concurrentLimit = 0;\r\n        if (qigStore.instance.isAggregatedQigCCEnabledForCurrentQig) {\r\n            concurrentLimit = currentTarget.aggregatedMaximumConcurrentLimit;\r\n            // calculating aggregated open response count including atypical. \r\n            totalOpenResponsesCount = currentTarget.aggregatedOpenResponsesCount;\r\n        }\r\n        else {\r\n            concurrentLimit = liveOpenWorklist.concurrentLimit;\r\n            totalOpenResponsesCount += liveOpenWorklist && liveOpenWorklist.responses ? liveOpenWorklist.responses.count() : 0;\r\n            if (worklistStore.instance.currentWorklistType === enums.WorklistType.live) {\r\n                totalOpenResponsesCount += isNaN(currentTarget.examinerProgress.atypicalOpenResponsesCount) ?\r\n                    0 : currentTarget.examinerProgress.atypicalOpenResponsesCount;\r\n            }\r\n            else if (worklistStore.instance.currentWorklistType === enums.WorklistType.atypical) {\r\n                totalOpenResponsesCount += isNaN(currentTarget.examinerProgress.openResponsesCount) ?\r\n                    0 : currentTarget.examinerProgress.openResponsesCount;\r\n            }\r\n        }\r\n        return liveOpenWorklist &&\r\n            totalOpenResponsesCount >= concurrentLimit;\r\n    };\r\n    /**\r\n     * Method to find the aggregated QIg validation result.\r\n     * @param qigsummaryCollection\r\n     */\r\n    QigSelectorValidationHelper.prototype.getAggregatedQigValidationResult = function (qigsummaryCollection) {\r\n        this.aggregatedQigValidationResult = new aggregatedQigValidationResult();\r\n        var qigValidationResultObj = new aggregatedQigValidationResult();\r\n        // Sets the visibility properties of different elements in the agregated qig.\r\n        this.setVisibilityPropertiesForAggregatedQig(qigsummaryCollection);\r\n        return this.aggregatedQigValidationResult;\r\n    };\r\n    /**\r\n     * Set the Visibility properties for the aggregatedQig\r\n     * @param qigsummary\r\n     * @param qigValidationResult\r\n     */\r\n    QigSelectorValidationHelper.prototype.setVisibilityPropertiesForAggregatedQig = function (qigsummary) {\r\n        this.aggregatedQigValidationResult.displayTargetDate = false;\r\n        // Display indicator properties.\r\n        this.aggregatedQigValidationResult.displayOpenResponseIndicator = this.displayAggregatedOpenResponseIndicator(qigsummary);\r\n        this.aggregatedQigValidationResult.displayResponseAvailableIndicator =\r\n            this.aggregatedQigValidationResult.displayOpenResponseIndicator ?\r\n                false : this.displayAggregatedResponseAvailabilityIndicator(qigsummary);\r\n        this.aggregatedQigValidationResult.displayRemarkOpenResponseIndicator =\r\n            this.displayAggregatedOpenResponseIndicator(qigsummary, true);\r\n        this.aggregatedQigValidationResult.displayRemarkAvailableResponseIndicator =\r\n            this.aggregatedQigValidationResult.displayRemarkOpenResponseIndicator ?\r\n                false : this.displayAggregatedResponseAvailabilityIndicator(qigsummary, true);\r\n        // Traget properties.\r\n        this.aggregatedQigValidationResult.displayTarget = this.displayAggregatedTarget(qigsummary);\r\n        // For displaying aggregated status text.\r\n        this.aggregatedQigValidationResult.displayAggregatedStatusText = true;\r\n        this.aggregatedQigValidationResult.statusText = localeStore.instance.TranslateText('home.qig-statuses.LiveMarking');\r\n        // Progress bar.\r\n        this.aggregatedQigValidationResult.displayProgressBar = this.aggregatedQigValidationResult.displayTarget;\r\n        // Response counts.\r\n        this.aggregatedQigValidationResult.aggregatedMaxMarkingLimit = this.aggregatedMaximiumMarkingLimit(qigsummary);\r\n        var _a = this.aggregatedResponseCount(qigsummary), openCount = _a[0], pendingCount = _a[1], closedCount = _a[2];\r\n        this.aggregatedQigValidationResult.aggregatedOpenResponsesCount = openCount;\r\n        this.aggregatedQigValidationResult.aggregatedPendingResponsesCount = pendingCount;\r\n        this.aggregatedQigValidationResult.aggregatedClosedResponsesCount = closedCount;\r\n        this.aggregatedQigValidationResult.aggregatedSubmittedResponsesCount = this.aggregatedSubmittedResponseCount(qigsummary);\r\n    };\r\n    /**\r\n     * Whether or not to display the aggregated response availability indicator.\r\n     * @param qigsummary\r\n     * @param isForRemark\r\n     */\r\n    QigSelectorValidationHelper.prototype.displayAggregatedResponseAvailabilityIndicator = function (qigsummary, isForRemark) {\r\n        if (isForRemark === void 0) { isForRemark = false; }\r\n        var displayIndicator = false;\r\n        var qigsCount = qigsummary.count();\r\n        for (var i = 0; i < qigsCount; i++) {\r\n            var qig = qigsummary.get(i);\r\n            if (qig.examinerQigStatus !== enums.ExaminerQIGStatus.LiveMarking\r\n                && qig.examinerQigStatus !== enums.ExaminerQIGStatus.LiveComplete) {\r\n                displayIndicator = false;\r\n            }\r\n            else if (isForRemark && this.hasRemarkResponseInPool(qig)) {\r\n                displayIndicator = true;\r\n                break;\r\n            }\r\n            else if (!isForRemark && qig.examinerQigStatus === enums.ExaminerQIGStatus.LiveComplete) {\r\n                if (this.isIntoOverAllocation(qig) && this.hasAvailableResponsesInPool(qig)) {\r\n                    displayIndicator = true;\r\n                    break;\r\n                }\r\n                else {\r\n                    displayIndicator = false;\r\n                }\r\n            }\r\n            else if (!isForRemark && this.hasAvailableResponsesInPool(qig)) {\r\n                displayIndicator = true;\r\n                break;\r\n            }\r\n        }\r\n        return displayIndicator;\r\n    };\r\n    /**\r\n     * Whether or not to display the aggregated response open indicator.\r\n     * @param qigsummary\r\n     * @param isForRemark\r\n     */\r\n    QigSelectorValidationHelper.prototype.displayAggregatedOpenResponseIndicator = function (qigsummary, isForRemark) {\r\n        if (isForRemark === void 0) { isForRemark = false; }\r\n        var displayIndicator = false;\r\n        var qigsCount = qigsummary.count();\r\n        for (var i = 0; i < qigsCount; i++) {\r\n            var qig = qigsummary.get(i);\r\n            if (qig.examinerQigStatus !== enums.ExaminerQIGStatus.LiveMarking\r\n                && qig.examinerQigStatus !== enums.ExaminerQIGStatus.LiveComplete) {\r\n                displayIndicator = false;\r\n            }\r\n            else if (isForRemark && this.hasRemarkOpenResponse(qig)) {\r\n                displayIndicator = true;\r\n                break;\r\n            }\r\n            else if (!isForRemark && qig.examinerQigStatus === enums.ExaminerQIGStatus.LiveComplete) {\r\n                if (qig.currentMarkingTarget.openResponsesCount > 0) {\r\n                    displayIndicator = true;\r\n                    break;\r\n                }\r\n                else {\r\n                    displayIndicator = false;\r\n                }\r\n            }\r\n            else if (!isForRemark && this.getTotalOpenResponsesCount(qig) > 0) {\r\n                displayIndicator = true;\r\n                break;\r\n            }\r\n        }\r\n        return displayIndicator;\r\n    };\r\n    /**\r\n     * Whether or not to display the aggregated target.\r\n     * @param qigsummary\r\n     */\r\n    QigSelectorValidationHelper.prototype.displayAggregatedTarget = function (qigsummary) {\r\n        var displayTarget = false;\r\n        var qigsCount = qigsummary.count();\r\n        for (var i = 0; i < qigsCount; i++) {\r\n            var qig = qigsummary.get(i);\r\n            if (this.isInLiveMarkingMode(qig.examinerQigStatus)) {\r\n                displayTarget = true;\r\n                break;\r\n            }\r\n        }\r\n        return displayTarget;\r\n    };\r\n    /**\r\n     * Returns the aggregated maximum marking limit.\r\n     * @param qigsummary\r\n     */\r\n    QigSelectorValidationHelper.prototype.aggregatedMaximiumMarkingLimit = function (qigsummary) {\r\n        var aggregatedOpenCount = 0;\r\n        qigsummary.map(function (qig) {\r\n            aggregatedOpenCount += qig.currentMarkingTarget.maximumMarkingLimit;\r\n        });\r\n        return aggregatedOpenCount;\r\n    };\r\n    /**\r\n     * Finds the submitted responses count for a qig, including directed remarks.\r\n     * @param directedRemarkTargets\r\n     * @param currentMarkingTarget\r\n     */\r\n    QigSelectorValidationHelper.prototype.findSubmittedResponsesCount = function (directedRemarkTargets, currentMarkingTarget) {\r\n        var totalClosedResponsesCount = 0;\r\n        var remarkClosedResponsesCount = 0;\r\n        var remarkPendingResponsesCount = 0;\r\n        if (directedRemarkTargets != null && directedRemarkTargets !== undefined) {\r\n            directedRemarkTargets.map(function (remark) {\r\n                remarkClosedResponsesCount += remark.closedResponsesCount;\r\n                remarkPendingResponsesCount += remark.pendingResponsesCount;\r\n            });\r\n        }\r\n        totalClosedResponsesCount += remarkClosedResponsesCount + remarkPendingResponsesCount;\r\n        if (currentMarkingTarget !== undefined && currentMarkingTarget != null) {\r\n            totalClosedResponsesCount += currentMarkingTarget.closedResponsesCount\r\n                + (isNaN(currentMarkingTarget.pendingResponsesCount) ? 0 : currentMarkingTarget.pendingResponsesCount)\r\n                + (isNaN(currentMarkingTarget.pendingAtypicalResponsesCount) ? 0 : currentMarkingTarget.pendingAtypicalResponsesCount)\r\n                + (isNaN(currentMarkingTarget.closedAtypicalResponsesCount) ? 0 : currentMarkingTarget.closedAtypicalResponsesCount);\r\n        }\r\n        return totalClosedResponsesCount;\r\n    };\r\n    /**\r\n     * Returns the aggregated submitted responses count.\r\n     * @param qigsummary\r\n     */\r\n    QigSelectorValidationHelper.prototype.aggregatedSubmittedResponseCount = function (qigsummary) {\r\n        var _this = this;\r\n        var aggregatedSubmittedCount = 0;\r\n        var directedRemarkTargets;\r\n        qigsummary.map(function (qig) {\r\n            directedRemarkTargets = [];\r\n            if (qig.markingTargets !== undefined && qig.markingTargets !== null) {\r\n                qig.markingTargets.map(function (target) {\r\n                    if (target.isDirectedRemark === true) {\r\n                        directedRemarkTargets.push(target);\r\n                    }\r\n                });\r\n            }\r\n            if (_this.isInLiveMarkingMode(qig.examinerQigStatus)) {\r\n                aggregatedSubmittedCount += _this.findSubmittedResponsesCount(Immutable.List(directedRemarkTargets), qig.currentMarkingTarget);\r\n            }\r\n        });\r\n        return aggregatedSubmittedCount;\r\n    };\r\n    /**\r\n     * Finds the response count in open-pending-closed worklist.\r\n     * @param directedRemarkTargets\r\n     * @param currentMarkingTarget\r\n     */\r\n    QigSelectorValidationHelper.prototype.findResponseCountInWorklist = function (directedRemarkTargets, currentMarkingTarget) {\r\n        var openCount = 0;\r\n        var pendingCount = 0;\r\n        var closedCount = 0;\r\n        if (directedRemarkTargets != null && directedRemarkTargets !== undefined) {\r\n            directedRemarkTargets.map(function (remark) {\r\n                openCount += remark.openResponsesCount;\r\n                pendingCount += remark.pendingResponsesCount;\r\n                closedCount += remark.closedResponsesCount;\r\n            });\r\n        }\r\n        if (currentMarkingTarget !== undefined && currentMarkingTarget != null) {\r\n            openCount += isNaN(currentMarkingTarget.openResponsesCount) ? 0 : currentMarkingTarget.openResponsesCount\r\n                + (isNaN(currentMarkingTarget.openAtypicalResponsesCount) ? 0 : currentMarkingTarget.openAtypicalResponsesCount);\r\n            pendingCount += isNaN(currentMarkingTarget.pendingResponsesCount) ? 0 : currentMarkingTarget.pendingResponsesCount\r\n                + (isNaN(currentMarkingTarget.pendingAtypicalResponsesCount) ? 0 : currentMarkingTarget.pendingAtypicalResponsesCount);\r\n            closedCount += isNaN(currentMarkingTarget.closedResponsesCount) ? 0 : currentMarkingTarget.closedResponsesCount\r\n                + (isNaN(currentMarkingTarget.closedAtypicalResponsesCount) ? 0 : currentMarkingTarget.closedAtypicalResponsesCount);\r\n        }\r\n        return [openCount, pendingCount, closedCount];\r\n    };\r\n    /**\r\n     * Returns the aggregated response count in each qig's open, pending and closed worklist.\r\n     * @param qigsummary\r\n     */\r\n    QigSelectorValidationHelper.prototype.aggregatedResponseCount = function (qigsummary) {\r\n        var _this = this;\r\n        var directedRemarkTargets;\r\n        var openCount = 0;\r\n        var pendingCount = 0;\r\n        var closedCount = 0;\r\n        qigsummary.map(function (qig) {\r\n            directedRemarkTargets = [];\r\n            if (qig.markingTargets !== undefined && qig.markingTargets !== null) {\r\n                qig.markingTargets.map(function (target) {\r\n                    if (target.isDirectedRemark === true) {\r\n                        directedRemarkTargets.push(target);\r\n                    }\r\n                });\r\n            }\r\n            if (_this.isInLiveMarkingMode(qig.examinerQigStatus)) {\r\n                var responseCounts = _this.findResponseCountInWorklist(Immutable.List(directedRemarkTargets), qig.currentMarkingTarget);\r\n                openCount += responseCounts[0];\r\n                pendingCount += responseCounts[1];\r\n                closedCount += responseCounts[2];\r\n            }\r\n        });\r\n        return [openCount, pendingCount, closedCount];\r\n    };\r\n    /**\r\n     * Populates validation result for qig.\r\n     * @param qig\r\n     * @param qigValidationResultObj\r\n     * @param hasAggregatedTargets\r\n     */\r\n    QigSelectorValidationHelper.prototype.populateValidationResultForQig = function (qig, qigValidationResultObj) {\r\n        // Set examinerQig Status as 'NoLiveTarget'\r\n        // 1. If no Targets specified\r\n        // 2. If User is having non live targets and all those targets completed.\r\n        // 3. User having live target but limit is 0\r\n        if (qig.isForAdminRemark) {\r\n            if (qig.examinerQigStatus !== enums.ExaminerQIGStatus.Suspended) {\r\n                qig.examinerQigStatus = enums.ExaminerQIGStatus.AdminRemark;\r\n            }\r\n        }\r\n        else if (qig.markingTargets == null ||\r\n            (this.hasNonLiveTargetCompleted(qig) && !this.hasLiveMarkingTargetExists(qig)) ||\r\n            (qig.currentMarkingTarget.markingMode === enums.MarkingMode.LiveMarking\r\n                && qig.currentMarkingTarget.maximumMarkingLimit === 0)\r\n                && qig.examinerQigStatus !== enums.ExaminerQIGStatus.WaitingStandardisation) {\r\n            qig.examinerQigStatus = enums.ExaminerQIGStatus.NoLiveTarget;\r\n        }\r\n        qigValidationResultObj.statusColourClass = this.getStatusClassBasedOnExaminerQIGStatus(qig);\r\n        this.setVisibilityPropertiesBasedOnExaminerQIGStatus(qig, qigValidationResultObj);\r\n        qigValidationResultObj.statusText = this.getStatusText(qig);\r\n        // Added examinerQigStatus if it is in simulation mode.\r\n        if (qig.examinerQigStatus === enums.ExaminerQIGStatus.Simulation) {\r\n            qigValidationResultObj.isSimulationMode = true;\r\n        }\r\n        // Added to set visibility of status text in marking target component\r\n        // Status text is not needed if Qualification set up button is visble\r\n        if (qig.examinerQigStatus === enums.ExaminerQIGStatus.WaitingStandardisation) {\r\n            qigValidationResultObj.isInStandardisationMode = true;\r\n        }\r\n        // Setting the open responses count when there is an over allocation\r\n        qigValidationResultObj.openResponsesCount =\r\n            this.isIntoOverAllocation(qig) ?\r\n                this.getTotalOpenResponsesCount(qig) : 0;\r\n    };\r\n    /**\r\n     * Checks if the marker is in live marking mode.\r\n     * @param examinerStatus\r\n     */\r\n    QigSelectorValidationHelper.prototype.isInLiveMarkingMode = function (examinerStatus) {\r\n        return examinerStatus === enums.ExaminerQIGStatus.Suspended\r\n            || examinerStatus === enums.ExaminerQIGStatus.LiveMarking\r\n            || examinerStatus === enums.ExaminerQIGStatus.LiveComplete;\r\n    };\r\n    /**\r\n     * Logic moved to QIG Store\r\n     */\r\n    QigSelectorValidationHelper.isQigHasBrowseScriptPermissionOnly = function (selectedQIG) {\r\n        return qigStore.instance.isQigHasBrowseScriptPermissionOnly(selectedQIG);\r\n    };\r\n    return QigSelectorValidationHelper;\r\n}());\r\nmodule.exports = QigSelectorValidationHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 485:
/* no static exports found */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/stores/qigselector/qigvalidationresultbase.ts ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar QigValidationResultBase = /** @class */ (function () {\r\n    function QigValidationResultBase() {\r\n    }\r\n    return QigValidationResultBase;\r\n}());\r\nmodule.exports = QigValidationResultBase;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3Jlcy9xaWdzZWxlY3Rvci9xaWd2YWxpZGF0aW9ucmVzdWx0YmFzZS50cz8wYWUxIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFFpZ1ZhbGlkYXRpb25SZXN1bHRCYXNlIHtcclxuICAgIHB1YmxpYyBkaXNwbGF5UHJvZ3Jlc3NCYXI6IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgZGlzcGxheVRhcmdldDogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBkaXNwbGF5VGFyZ2V0RGF0ZTogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBkaXNwbGF5T3BlblJlc3BvbnNlSW5kaWNhdG9yOiBib29sZWFuO1xyXG4gICAgcHVibGljIGRpc3BsYXlSZXNwb25zZUF2YWlsYWJsZUluZGljYXRvcjogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBzdGF0dXNUZXh0OiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgZGlzcGxheVJlbWFya09wZW5SZXNwb25zZUluZGljYXRvcjogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBkaXNwbGF5UmVtYXJrQXZhaWxhYmxlUmVzcG9uc2VJbmRpY2F0b3I6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCA9IFFpZ1ZhbGlkYXRpb25SZXN1bHRCYXNlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvc3RvcmVzL3FpZ3NlbGVjdG9yL3FpZ3ZhbGlkYXRpb25yZXN1bHRiYXNlLnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQTtBQVNBO0FBQUE7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 486:
/* no static exports found */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/utility/teammanagement/helpers/helpexaminersdatahelper.ts ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar teamManagementStore = __webpack_require__(/*! ../../../stores/teammanagement/teammanagementstore */ 245);\r\nvar enums = __webpack_require__(/*! ../../../components/utility/enums */ 225);\r\n/**\r\n * Helper class for help examiner data\r\n */\r\nvar HelpExaminerDataHelper = /** @class */ (function () {\r\n    function HelpExaminerDataHelper() {\r\n        var _this = this;\r\n        /**\r\n         * Get SEP Actions.\r\n         */\r\n        this.getSEPActions = function (examinerRoleId) {\r\n            if (teamManagementStore && teamManagementStore.instance.examinersForHelpExaminers) {\r\n                _this.sepActions = new Array();\r\n                var examinersForHelpExaminers = teamManagementStore.instance.examinersForHelpExaminers.toArray();\r\n                examinersForHelpExaminers.forEach(function (examiner) {\r\n                    if (examiner.examinerRoleId === examinerRoleId) {\r\n                        var actions = examiner.actions;\r\n                        actions.forEach(function (item) {\r\n                            if (item === enums.SEPAction.ProvideSecondStandardisation\r\n                                || item === enums.SEPAction.Approve\r\n                                || item === enums.SEPAction.Re_approve\r\n                                || item === enums.SEPAction.SendMessage) {\r\n                                _this.sepActions.push(item);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            return _this.sepActions;\r\n        };\r\n    }\r\n    return HelpExaminerDataHelper;\r\n}());\r\nmodule.exports = HelpExaminerDataHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxpdHkvdGVhbW1hbmFnZW1lbnQvaGVscGVycy9oZWxwZXhhbWluZXJzZGF0YWhlbHBlci50cz83MWNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZWFtTWFuYWdlbWVudFN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL3RlYW1tYW5hZ2VtZW50L3RlYW1tYW5hZ2VtZW50c3RvcmUnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vLi4vY29tcG9uZW50cy91dGlsaXR5L2VudW1zJyk7XHJcblxyXG4vKipcclxuICogSGVscGVyIGNsYXNzIGZvciBoZWxwIGV4YW1pbmVyIGRhdGFcclxuICovXHJcbmNsYXNzIEhlbHBFeGFtaW5lckRhdGFIZWxwZXIge1xyXG5cclxuICAgIHByaXZhdGUgc2VwQWN0aW9uczogQXJyYXk8bnVtYmVyPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBTRVAgQWN0aW9ucy5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFNFUEFjdGlvbnMgPSAoZXhhbWluZXJSb2xlSWQgOiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAodGVhbU1hbmFnZW1lbnRTdG9yZSAmJiB0ZWFtTWFuYWdlbWVudFN0b3JlLmluc3RhbmNlLmV4YW1pbmVyc0ZvckhlbHBFeGFtaW5lcnMpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXBBY3Rpb25zID0gbmV3IEFycmF5PG51bWJlcj4oKTtcclxuICAgICAgICAgICAgbGV0IGV4YW1pbmVyc0ZvckhlbHBFeGFtaW5lcnMgPSB0ZWFtTWFuYWdlbWVudFN0b3JlLmluc3RhbmNlLmV4YW1pbmVyc0ZvckhlbHBFeGFtaW5lcnMudG9BcnJheSgpO1xyXG4gICAgICAgICAgICBleGFtaW5lcnNGb3JIZWxwRXhhbWluZXJzLmZvckVhY2goKGV4YW1pbmVyOiBFeGFtaW5lckRhdGFGb3JIZWxwRXhhbWluZXIpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChleGFtaW5lci5leGFtaW5lclJvbGVJZCA9PT0gZXhhbWluZXJSb2xlSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYWN0aW9ucyA9IGV4YW1pbmVyLmFjdGlvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucy5mb3JFYWNoKChpdGVtOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT09IGVudW1zLlNFUEFjdGlvbi5Qcm92aWRlU2Vjb25kU3RhbmRhcmRpc2F0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBpdGVtID09PSBlbnVtcy5TRVBBY3Rpb24uQXBwcm92ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgaXRlbSA9PT0gZW51bXMuU0VQQWN0aW9uLlJlX2FwcHJvdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGl0ZW0gPT09IGVudW1zLlNFUEFjdGlvbi5TZW5kTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXBBY3Rpb25zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5zZXBBY3Rpb25zO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBIZWxwRXhhbWluZXJEYXRhSGVscGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvdXRpbGl0eS90ZWFtbWFuYWdlbWVudC9oZWxwZXJzL2hlbHBleGFtaW5lcnNkYXRhaGVscGVyLnRzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBSUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 496:
/* no static exports found */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/components/worklist/shared/accuracyindicator.tsx ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar AccuracyIndicator = /** @class */ (function (_super) {\r\n    __extends(AccuracyIndicator, _super);\r\n    /**\r\n     * Constructor for Accuracy indicator\r\n     * @param props\r\n     */\r\n    function AccuracyIndicator(props) {\r\n        return _super.call(this, props, null) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    AccuracyIndicator.prototype.render = function () {\r\n        this.getAccuracy(this.props.accuracyIndicator);\r\n        var accuracy = this.props.isTileView ?\r\n            (React.createElement(\"div\", { className: 'tolerance-level small-text', id: this.props.id + '_accuracyIndicator' }, this.accuracyType)) :\r\n            (this.props.isInMarkSchemePanel ?\r\n                (React.createElement(\"div\", { title: this.title, className: 'tolerance-level small-text' }, this.accuracyType)) : (React.createElement(\"div\", { className: 'col wl-tolerance', title: this.title },\r\n                React.createElement(\"div\", { className: 'col-inner' },\r\n                    React.createElement(\"div\", { id: this.props.id + '_accuracyIndicator', className: 'tolerance-level small-text' }, this.accuracyType)))));\r\n        return (accuracy);\r\n    };\r\n    /**\r\n     * Get the Accuracy indicator type\r\n     * @param AccuracyIndicatorType\r\n     */\r\n    AccuracyIndicator.prototype.getAccuracy = function (indicatorType) {\r\n        switch (indicatorType) {\r\n            case enums.AccuracyIndicatorType.Accurate:\r\n            case enums.AccuracyIndicatorType.AccurateNR:\r\n                this.accuracyType = localeStore.instance.TranslateText('generic.accuracy-indicators.accurate');\r\n                this.title = markerOperationModeFactory.operationMode.accurateAccuracyIndicatorTitle;\r\n                break;\r\n            case enums.AccuracyIndicatorType.OutsideTolerance:\r\n            case enums.AccuracyIndicatorType.OutsideToleranceNR:\r\n                this.accuracyType = localeStore.instance.TranslateText('generic.accuracy-indicators.inaccurate');\r\n                this.title = markerOperationModeFactory.operationMode.inaccurateAccuracyIndicatorTitle;\r\n                break;\r\n            case enums.AccuracyIndicatorType.WithinTolerance:\r\n            case enums.AccuracyIndicatorType.WithinToleranceNR:\r\n                this.accuracyType = localeStore.instance.TranslateText('generic.accuracy-indicators.in-tolerance');\r\n                this.title = markerOperationModeFactory.operationMode.intoleranceAccuracyIndicatorTitle;\r\n                break;\r\n            default:\r\n                this.accuracyType = '';\r\n                this.title = '';\r\n                break;\r\n        }\r\n        return this.accuracyType;\r\n    };\r\n    return AccuracyIndicator;\r\n}(PureRenderComponent));\r\nmodule.exports = AccuracyIndicator;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2FjY3VyYWN5aW5kaWNhdG9yLnRzeD9jNDFiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgUHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBsb2NhbGVIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2xvY2FsZS9sb2NhbGVoZWxwZXInKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9lbnVtcycpO1xyXG5pbXBvcnQgbWFya2VyT3BlcmF0aW9uTW9kZUZhY3RvcnkgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L21hcmtlcm9wZXJhdGlvbm1vZGUvbWFya2Vyb3BlcmF0aW9ubW9kZWZhY3RvcnknKTtcclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIGNvbXBvbmVudC5cclxuICogQHBhcmFtIHtQcm9wc30gcHJvcHNcclxuICovXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcbiAgICBhY2N1cmFjeUluZGljYXRvcj86IG51bWJlcjtcclxuICAgIGlzVGlsZVZpZXc/OiBib29sZWFuO1xyXG4gICAgaXNJbk1hcmtTY2hlbWVQYW5lbD86IGJvb2xlYW47XHJcbn1cclxuXHJcbmNsYXNzIEFjY3VyYWN5SW5kaWNhdG9yIGV4dGVuZHMgUHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcbiAgICBwcml2YXRlIGFjY3VyYWN5VHlwZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSB0aXRsZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3IgZm9yIEFjY3VyYWN5IGluZGljYXRvclxyXG4gICAgICogQHBhcmFtIHByb3BzXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBudWxsKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBjb21wb25lbnRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XHJcbiAgICAgICAgdGhpcy5nZXRBY2N1cmFjeSh0aGlzLnByb3BzLmFjY3VyYWN5SW5kaWNhdG9yKTtcclxuICAgICAgICBsZXQgYWNjdXJhY3k6IEpTWC5FbGVtZW50ID0gdGhpcy5wcm9wcy5pc1RpbGVWaWV3ID9cclxuICAgICAgICAgICAgKDxkaXYgY2xhc3NOYW1lPSd0b2xlcmFuY2UtbGV2ZWwgc21hbGwtdGV4dCcgaWQ9e3RoaXMucHJvcHMuaWQgKyAnX2FjY3VyYWN5SW5kaWNhdG9yJ30+e3RoaXMuYWNjdXJhY3lUeXBlfTwvZGl2PikgOlxyXG4gICAgICAgICAgICAodGhpcy5wcm9wcy5pc0luTWFya1NjaGVtZVBhbmVsID9cclxuICAgICAgICAgICAgICAgICg8ZGl2IHRpdGxlPXt0aGlzLnRpdGxlfSBjbGFzc05hbWU9J3RvbGVyYW5jZS1sZXZlbCBzbWFsbC10ZXh0Jz57dGhpcy5hY2N1cmFjeVR5cGV9PC9kaXY+KSA6IChcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2wgd2wtdG9sZXJhbmNlJyB0aXRsZT17dGhpcy50aXRsZX0gPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbC1pbm5lcic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9e3RoaXMucHJvcHMuaWQgKyAnX2FjY3VyYWN5SW5kaWNhdG9yJ30gY2xhc3NOYW1lPSd0b2xlcmFuY2UtbGV2ZWwgc21hbGwtdGV4dCc+e3RoaXMuYWNjdXJhY3lUeXBlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj4pKTtcclxuICAgICAgICByZXR1cm4gKGFjY3VyYWN5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgQWNjdXJhY3kgaW5kaWNhdG9yIHR5cGVcclxuICAgICAqIEBwYXJhbSBBY2N1cmFjeUluZGljYXRvclR5cGVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRBY2N1cmFjeShpbmRpY2F0b3JUeXBlOiBlbnVtcy5BY2N1cmFjeUluZGljYXRvclR5cGUpOiBhbnkge1xyXG4gICAgICAgIHN3aXRjaCAoaW5kaWNhdG9yVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLkFjY3VyYWN5SW5kaWNhdG9yVHlwZS5BY2N1cmF0ZTpcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5BY2N1cmFjeUluZGljYXRvclR5cGUuQWNjdXJhdGVOUjpcclxuICAgICAgICAgICAgICAgIHRoaXMuYWNjdXJhY3lUeXBlID0gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnZ2VuZXJpYy5hY2N1cmFjeS1pbmRpY2F0b3JzLmFjY3VyYXRlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpdGxlID0gbWFya2VyT3BlcmF0aW9uTW9kZUZhY3Rvcnkub3BlcmF0aW9uTW9kZS5hY2N1cmF0ZUFjY3VyYWN5SW5kaWNhdG9yVGl0bGU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5BY2N1cmFjeUluZGljYXRvclR5cGUuT3V0c2lkZVRvbGVyYW5jZTpcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5BY2N1cmFjeUluZGljYXRvclR5cGUuT3V0c2lkZVRvbGVyYW5jZU5SOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5hY2N1cmFjeVR5cGUgPSBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdnZW5lcmljLmFjY3VyYWN5LWluZGljYXRvcnMuaW5hY2N1cmF0ZScpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aXRsZSA9IG1hcmtlck9wZXJhdGlvbk1vZGVGYWN0b3J5Lm9wZXJhdGlvbk1vZGUuaW5hY2N1cmF0ZUFjY3VyYWN5SW5kaWNhdG9yVGl0bGU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBlbnVtcy5BY2N1cmFjeUluZGljYXRvclR5cGUuV2l0aGluVG9sZXJhbmNlOlxyXG4gICAgICAgICAgICBjYXNlIGVudW1zLkFjY3VyYWN5SW5kaWNhdG9yVHlwZS5XaXRoaW5Ub2xlcmFuY2VOUjpcclxuICAgICAgICAgICAgICAgIHRoaXMuYWNjdXJhY3lUeXBlID0gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnZ2VuZXJpYy5hY2N1cmFjeS1pbmRpY2F0b3JzLmluLXRvbGVyYW5jZScpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aXRsZSA9IG1hcmtlck9wZXJhdGlvbk1vZGVGYWN0b3J5Lm9wZXJhdGlvbk1vZGUuaW50b2xlcmFuY2VBY2N1cmFjeUluZGljYXRvclRpdGxlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFjY3VyYWN5VHlwZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aXRsZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmFjY3VyYWN5VHlwZTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gQWNjdXJhY3lJbmRpY2F0b3I7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9zaGFyZWQvYWNjdXJhY3lpbmRpY2F0b3IudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQVlBO0FBQUE7QUFJQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 497:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/stores/qigselector/aggregatedqigvalidationresult.ts ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar qigValidationResultBase = __webpack_require__(/*! ./qigvalidationresultbase */ 485);\r\nvar AggregatedQigValidationResult = /** @class */ (function (_super) {\r\n    __extends(AggregatedQigValidationResult, _super);\r\n    function AggregatedQigValidationResult() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return AggregatedQigValidationResult;\r\n}(qigValidationResultBase));\r\nmodule.exports = AggregatedQigValidationResult;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3Jlcy9xaWdzZWxlY3Rvci9hZ2dyZWdhdGVkcWlndmFsaWRhdGlvbnJlc3VsdC50cz9mNzc4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBxaWdWYWxpZGF0aW9uUmVzdWx0QmFzZSA9IHJlcXVpcmUoJy4vcWlndmFsaWRhdGlvbnJlc3VsdGJhc2UnKTtcclxuXHJcbmNsYXNzIEFnZ3JlZ2F0ZWRRaWdWYWxpZGF0aW9uUmVzdWx0IGV4dGVuZHMgcWlnVmFsaWRhdGlvblJlc3VsdEJhc2Uge1xyXG4gICAgcHVibGljIGRpc3BsYXlBZ2dyZWdhdGVkU3RhdHVzVGV4dDogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBhZ2dyZWdhdGVkTWF4TWFya2luZ0xpbWl0OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgYWdncmVnYXRlZE9wZW5SZXNwb25zZXNDb3VudDogbnVtYmVyO1xyXG4gICAgcHVibGljIGFnZ3JlZ2F0ZWRQZW5kaW5nUmVzcG9uc2VzQ291bnQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyBhZ2dyZWdhdGVkQ2xvc2VkUmVzcG9uc2VzQ291bnQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyBhZ2dyZWdhdGVkU3VibWl0dGVkUmVzcG9uc2VzQ291bnQ6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0ID0gQWdncmVnYXRlZFFpZ1ZhbGlkYXRpb25SZXN1bHQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9zdG9yZXMvcWlnc2VsZWN0b3IvYWdncmVnYXRlZHFpZ3ZhbGlkYXRpb25yZXN1bHQudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUFBO0FBQUE7O0FBT0E7QUFBQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 502:
/* no static exports found */
/* all exports used */
/*!*****************************************************************!*\
  !*** ./src/components/markschemestructure/markchangereason.tsx ***!
  \*****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar domManager = __webpack_require__(/*! ../../utility/generic/domhelper */ 294);\r\nvar markingActionCreator = __webpack_require__(/*! ../../actions/marking/markingactioncreator */ 246);\r\nvar keyDownHelper = __webpack_require__(/*! ../../utility/generic/keydownhelper */ 258);\r\nvar markingStore = __webpack_require__(/*! ../../stores/marking/markingstore */ 236);\r\nvar deviceHelper = __webpack_require__(/*! ../../utility/touch/devicehelper */ 316);\r\nvar eventManagerBase = __webpack_require__(/*! ../base/eventmanager/eventmanagerbase */ 320);\r\nvar ReactDom = __webpack_require__(/*! react-dom */ 6);\r\nvar eventTypes = __webpack_require__(/*! ../base/eventmanager/eventtypes */ 306);\r\nvar direction = __webpack_require__(/*! ../base/eventmanager/direction */ 333);\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\n/**\r\n * Mark Change Reason component.\r\n * @param {Props} props\r\n * @returns\r\n */\r\nvar MarkChangeReason = /** @class */ (function (_super) {\r\n    __extends(MarkChangeReason, _super);\r\n    /**\r\n     * Constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function MarkChangeReason(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this._onClick = null;\r\n        /**\r\n         * Render markchangereason text area\r\n         */\r\n        _this.renderMarkChangeReasonTextArea = function () {\r\n            return (_this.props.isResponseEditable ?\r\n                React.createElement(\"textarea\", { name: 'markChangeReasonTextarea', id: 'markChangeReasonTextarea', className: 'eur-edit-input', ref: 'markChangeReasonTextarea', value: _this._markChangeReason ? _this._markChangeReason : '', onChange: _this.handleChange, onClick: _this.onClickOfMarkChangeReason, readOnly: !_this.props.isResponseEditable }) :\r\n                React.createElement(\"div\", { id: 'markChangeReasonTextarea', className: 'eur-edit-input input-box' }, _this._markChangeReason ? _this._markChangeReason : ''));\r\n        };\r\n        /**\r\n         * Change visibility of mark change reason\r\n         */\r\n        _this.showHideMarkChangeReason = function () {\r\n            if (markingStore.instance.isMarkChangeReasonVisible(markingStore.instance.currentMarkGroupId)) {\r\n                _this.setState({ isVisible: true });\r\n            }\r\n            else if (_this.state.isVisible) {\r\n                markingActionCreator.markChangeReasonUpdated('');\r\n                _this.setState({ isVisible: false });\r\n            }\r\n        };\r\n        /**\r\n         * handling click of MarkChangeReason text area\r\n         */\r\n        _this.onClickOfMarkChangeReason = function (event) {\r\n            event.stopPropagation();\r\n        };\r\n        /**\r\n         * Open mark change reason\r\n         */\r\n        _this.openMarkChangeReason = function () {\r\n            keyDownHelper.instance.DeActivate(enums.MarkEntryDeactivator.MarksChangeReason);\r\n            _this.setState({ isOpen: true });\r\n        };\r\n        /**\r\n         * Click event of MarkChangeReason icon\r\n         */\r\n        _this.onMarkChangeReasonClick = function (event) {\r\n            if (!markerOperationModeFactory.operationMode.isTeamManagementMode || _this._markChangeReason) {\r\n                if (_this.state.isOpen) {\r\n                    _this.saveMarkChangeReason();\r\n                    keyDownHelper.instance.Activate(enums.MarkEntryDeactivator.MarksChangeReason);\r\n                }\r\n                else {\r\n                    keyDownHelper.instance.DeActivate(enums.MarkEntryDeactivator.MarksChangeReason);\r\n                }\r\n                _this.setState({\r\n                    isOpen: !_this.state.isOpen,\r\n                    markChangeReasonRenderedOn: Date.now()\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * Handle click events on the window\r\n         * @param {any} source - The source element\r\n         */\r\n        _this.handleOnClick = function (source) {\r\n            if (source.target !== undefined &&\r\n                domManager.searchParentNode(source.target, function (el) { return el.id === 'markChangeReason'; }) == null) {\r\n                if (_this.state.isOpen !== undefined && _this.state.isOpen === true) {\r\n                    _this.saveMarkChangeReason();\r\n                    _this.setState({ isOpen: false });\r\n                    keyDownHelper.instance.Activate(enums.MarkEntryDeactivator.MarksChangeReason);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * On mouse scroll hide context menu\r\n         * @param event\r\n         */\r\n        _this.onScrollHandler = function (event) {\r\n            if (_this.state.isOpen) {\r\n                event.stopPropagation();\r\n            }\r\n        };\r\n        /**\r\n         * On Response opened\r\n         * When response is changed close the mark change reason text box\r\n         */\r\n        _this.onResponseOpened = function () {\r\n            _this.setState({ isOpen: false });\r\n        };\r\n        _this.state = {\r\n            isOpen: undefined,\r\n            markChangeReasonRenderedOn: Date.now(),\r\n            isVisible: false\r\n        };\r\n        _this._markChangeReason = _this.props.markChangeReason;\r\n        _this.onMarkChangeReasonClick = _this.onMarkChangeReasonClick.bind(_this);\r\n        _this._onClick = _this.handleOnClick.bind(_this);\r\n        _this.handleChange = _this.handleChange.bind(_this);\r\n        _this.openMarkChangeReason = _this.openMarkChangeReason.bind(_this);\r\n        _this.onClickOfMarkChangeReason = _this.onClickOfMarkChangeReason.bind(_this);\r\n        _this.onScrollHandler = _this.onScrollHandler.bind(_this);\r\n        _this.showHideMarkChangeReason = _this.showHideMarkChangeReason.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    MarkChangeReason.prototype.render = function () {\r\n        var _className = 'sprite-icon ';\r\n        if (this._markChangeReason && this._markChangeReason.trim().length > 0) {\r\n            _className = _className + 'edit-box-icon';\r\n        }\r\n        else if (markerOperationModeFactory.operationMode.\r\n            hasMarkChangeReasonYellowIcon(this.props.isResponseEditable, this.props.isInResponse)) {\r\n            _className = _className + 'edit-box-yellow-icon';\r\n        }\r\n        var isTeamManagement = markerOperationModeFactory.operationMode.isTeamManagementMode;\r\n        var popoutHeader = isTeamManagement ?\r\n            (this._markChangeReason ?\r\n                localeStore.instance.TranslateText('marking.response.eur-marks-change-popout.header') :\r\n                localeStore.instance.TranslateText('team-management.examiner-worklist.response-data.mark-change-reason-not-specified-icon-tooltip')) :\r\n            localeStore.instance.TranslateText('marking.response.eur-marks-change-popout.header');\r\n        var menuCallOutText = isTeamManagement ?\r\n            localeStore.instance.TranslateText('marking.response.eur-marks-change-popout.header') :\r\n            localeStore.instance.TranslateText('marking.response.eur-marks-change-popout.body');\r\n        if (this.props.isInResponse) {\r\n            if (this.state.isVisible) {\r\n                return (React.createElement(\"div\", { className: classNames('eur-reason-holder icon-menu-wrap dropdown-wrap up white', { 'open': this.state.isOpen }), id: 'markChangeReason' },\r\n                    React.createElement(\"a\", { href: 'javascript:void(0)', className: classNames('eur-reason-link menu-button'), onClick: this.onMarkChangeReasonClick },\r\n                        React.createElement(\"span\", { className: _className, title: popoutHeader })),\r\n                    React.createElement(\"div\", { className: 'menu-callout' }),\r\n                    React.createElement(\"div\", { className: 'menu' },\r\n                        React.createElement(\"div\", { className: 'eur-reason-label dim-text' }, menuCallOutText),\r\n                        React.createElement(\"div\", { className: 'eur-reason-edit' }, this.renderMarkChangeReasonTextArea()))));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            return (React.createElement(\"span\", { className: _className, title: markerOperationModeFactory.operationMode.markChangeReasonTitle }));\r\n        }\r\n    };\r\n    /**\r\n     * This function gets called when the component is mounted\r\n     */\r\n    MarkChangeReason.prototype.componentDidMount = function () {\r\n        if (deviceHelper.isTouchDevice()) {\r\n            this.setUpEvents();\r\n        }\r\n        window.addEventListener('click', this._onClick);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.OPEN_MARK_CHANGE_REASON, this.openMarkChangeReason);\r\n        document.documentElement.addEventListener('touchstart', this.onScrollHandler, true);\r\n        document.documentElement.addEventListener('touchmove', this.onScrollHandler, true);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.MARK_CHANGE_REASON_VISIBILITY_UPDATED, this.showHideMarkChangeReason);\r\n        markingStore.instance.addListener(markingStore.MarkingStore.OPEN_RESPONSE_EVENT, this.onResponseOpened);\r\n    };\r\n    /**\r\n     * This function gets invoked when the component is about to be unmounted\r\n     */\r\n    MarkChangeReason.prototype.componentWillUnmount = function () {\r\n        if (deviceHelper.isTouchDevice()) {\r\n            this.unRegisterEvents();\r\n        }\r\n        window.removeEventListener('click', this._onClick);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.OPEN_MARK_CHANGE_REASON, this.openMarkChangeReason);\r\n        if (this.props.isInResponse) {\r\n            keyDownHelper.instance.Activate(enums.MarkEntryDeactivator.MarksChangeReason);\r\n        }\r\n        document.documentElement.removeEventListener('touchstart', this.onScrollHandler, true);\r\n        document.documentElement.removeEventListener('touchmove', this.onScrollHandler, true);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.MARK_CHANGE_REASON_VISIBILITY_UPDATED, this.showHideMarkChangeReason);\r\n        markingStore.instance.removeListener(markingStore.MarkingStore.OPEN_RESPONSE_EVENT, this.onResponseOpened);\r\n    };\r\n    /**\r\n     * This function gets called when the component is remounted\r\n     */\r\n    MarkChangeReason.prototype.componentDidUpdate = function () {\r\n        if (this.refs && this.refs.markChangeReasonTextarea) {\r\n            this.refs.markChangeReasonTextarea.focus();\r\n        }\r\n    };\r\n    /**\r\n     * Comparing the props to check the updats are made by self\r\n     * @param {Props} nextProps\r\n     */\r\n    MarkChangeReason.prototype.componentWillReceiveProps = function (nextProps) {\r\n        this._markChangeReason = nextProps.markChangeReason;\r\n    };\r\n    /**\r\n     * This method will hook the touch events\r\n     */\r\n    MarkChangeReason.prototype.setUpEvents = function () {\r\n        var element = ReactDom.findDOMNode(this);\r\n        if (element && !this.eventHandler.isInitialized) {\r\n            // we don't want hammer in MS Touch devices like surface because it containes pointer events\r\n            var touchActionValue = 'pan-x,pan-y';\r\n            this.eventHandler.initEvents(element, touchActionValue, true);\r\n            this.eventHandler.get(eventTypes.PAN, { direction: direction.DirectionOptions.DIRECTION_ALL, threshold: 0 });\r\n            this.eventHandler.on(eventTypes.PAN, this.handleOnClick);\r\n        }\r\n    };\r\n    /**\r\n     * unsubscribing hammer touch events and handlers\r\n     */\r\n    MarkChangeReason.prototype.unRegisterEvents = function () {\r\n        if (this.eventHandler.isInitialized) {\r\n            this.eventHandler.destroy();\r\n        }\r\n    };\r\n    /**\r\n     * Saving mark change reason\r\n     */\r\n    MarkChangeReason.prototype.saveMarkChangeReason = function () {\r\n        if (this.props.isResponseEditable) {\r\n            var markChangeReason = this.refs.markChangeReasonTextarea.value;\r\n            if (!markChangeReason.replace(/\\s/g, '').length) {\r\n                markChangeReason = '';\r\n            }\r\n            markingActionCreator.markChangeReasonUpdated(markChangeReason);\r\n        }\r\n    };\r\n    /**\r\n     * Setting markchange reason text\r\n     */\r\n    MarkChangeReason.prototype.handleChange = function (e) {\r\n        if (markerOperationModeFactory.operationMode.isTeamManagementMode || this.props.isResponseEditable) {\r\n            if (e.target.value.length <= 500) {\r\n                this._markChangeReason = e.target.value;\r\n                this.saveMarkChangeReason();\r\n                this.setState({\r\n                    markChangeReasonRenderedOn: Date.now()\r\n                });\r\n            }\r\n        }\r\n    };\r\n    return MarkChangeReason;\r\n}(eventManagerBase));\r\nmodule.exports = MarkChangeReason;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 522:
/* no static exports found */
/* all exports used */
/*!********************************************************************************************!*\
  !*** ./src/components/utility/responseallocation/responseallocationvalidationparameter.ts ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/**\r\n * Entity class for response allocation validation\r\n */\r\nvar ResponseAllocationValidationParameter = /** @class */ (function () {\r\n    /**\r\n     * Initializing new instance of response allocation validation entity.\r\n     */\r\n    function ResponseAllocationValidationParameter(errorDialogHeaderText, errorDialogContentText, responseAllocateButtonVisibility) {\r\n        this.errorDialogHeaderText = errorDialogHeaderText;\r\n        this.errorDialogContentText = errorDialogContentText;\r\n        this.responseAllocateButtonVisibility = responseAllocateButtonVisibility;\r\n    }\r\n    Object.defineProperty(ResponseAllocationValidationParameter.prototype, \"ErrorDialogHeaderText\", {\r\n        /**\r\n         * Returns back the Resource Key for Error Dialog Header Text\r\n         */\r\n        get: function () {\r\n            return this.errorDialogHeaderText;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResponseAllocationValidationParameter.prototype, \"ErrorDialogContentText\", {\r\n        /**\r\n         * Returns back the Resource Key for Error Dialog Content Text\r\n         */\r\n        get: function () {\r\n            return this.errorDialogContentText;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ResponseAllocationValidationParameter.prototype, \"ResponseAllocateButtonVisibility\", {\r\n        /**\r\n         * Returns back the visibility for the Allocate New Response button\r\n         */\r\n        get: function () {\r\n            return this.responseAllocateButtonVisibility;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return ResponseAllocationValidationParameter;\r\n}());\r\nmodule.exports = ResponseAllocationValidationParameter;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9yZXNwb25zZWFsbG9jYXRpb24vcmVzcG9uc2VhbGxvY2F0aW9udmFsaWRhdGlvbnBhcmFtZXRlci50cz80ZmM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBFbnRpdHkgY2xhc3MgZm9yIHJlc3BvbnNlIGFsbG9jYXRpb24gdmFsaWRhdGlvblxyXG4gKi9cclxuY2xhc3MgUmVzcG9uc2VBbGxvY2F0aW9uVmFsaWRhdGlvblBhcmFtZXRlciB7XHJcbiAgICBwcml2YXRlIGVycm9yRGlhbG9nSGVhZGVyVGV4dDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBlcnJvckRpYWxvZ0NvbnRlbnRUZXh0OiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHJlc3BvbnNlQWxsb2NhdGVCdXR0b25WaXNpYmlsaXR5OiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6aW5nIG5ldyBpbnN0YW5jZSBvZiByZXNwb25zZSBhbGxvY2F0aW9uIHZhbGlkYXRpb24gZW50aXR5LlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihlcnJvckRpYWxvZ0hlYWRlclRleHQ6IHN0cmluZywgZXJyb3JEaWFsb2dDb250ZW50VGV4dDogc3RyaW5nLCByZXNwb25zZUFsbG9jYXRlQnV0dG9uVmlzaWJpbGl0eTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuZXJyb3JEaWFsb2dIZWFkZXJUZXh0ID0gZXJyb3JEaWFsb2dIZWFkZXJUZXh0O1xyXG4gICAgICAgIHRoaXMuZXJyb3JEaWFsb2dDb250ZW50VGV4dCA9IGVycm9yRGlhbG9nQ29udGVudFRleHQ7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZUFsbG9jYXRlQnV0dG9uVmlzaWJpbGl0eSA9IHJlc3BvbnNlQWxsb2NhdGVCdXR0b25WaXNpYmlsaXR5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBiYWNrIHRoZSBSZXNvdXJjZSBLZXkgZm9yIEVycm9yIERpYWxvZyBIZWFkZXIgVGV4dFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IEVycm9yRGlhbG9nSGVhZGVyVGV4dCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yRGlhbG9nSGVhZGVyVGV4dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYmFjayB0aGUgUmVzb3VyY2UgS2V5IGZvciBFcnJvciBEaWFsb2cgQ29udGVudCBUZXh0XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgRXJyb3JEaWFsb2dDb250ZW50VGV4dCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yRGlhbG9nQ29udGVudFRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGJhY2sgdGhlIHZpc2liaWxpdHkgZm9yIHRoZSBBbGxvY2F0ZSBOZXcgUmVzcG9uc2UgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgUmVzcG9uc2VBbGxvY2F0ZUJ1dHRvblZpc2liaWxpdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzcG9uc2VBbGxvY2F0ZUJ1dHRvblZpc2liaWxpdHk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFJlc3BvbnNlQWxsb2NhdGlvblZhbGlkYXRpb25QYXJhbWV0ZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvcmVzcG9uc2VhbGxvY2F0aW9uL3Jlc3BvbnNlYWxsb2NhdGlvbnZhbGlkYXRpb25wYXJhbWV0ZXIudHMiXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQTtBQUNBO0FBS0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFIQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFLQTtBQUhBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUtBO0FBSEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBQ0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 526:
/* no static exports found */
/* all exports used */
/*!***************************************************!*\
  !*** ./src/components/utility/tab/tabcontrol.tsx ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/// <reference path='typings/tabheaderdata.ts' />\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar TabHeader = __webpack_require__(/*! ./tabheader */ 527);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\n/**\r\n * Represents the TabControl Compoent\r\n */\r\nvar TabControl = /** @class */ (function (_super) {\r\n    __extends(TabControl, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function TabControl(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    /**\r\n     * Render method for TabControl.\r\n     */\r\n    TabControl.prototype.render = function () {\r\n        var _this = this;\r\n        var tabHeaders = [];\r\n        this.props.tabHeaders.map(function (tabItem) {\r\n            tabHeaders.push(React.createElement(TabHeader, { index: tabItem.index, key: 'tabHeaderItem_' + tabItem.key, id: 'tabHeaderItem_' + tabItem.id, class: tabItem.class, isSelected: tabItem.isSelected, isDisabled: tabItem.isDisabled, tabNavigation: tabItem.tabNavigation, headerCount: tabItem.headerCount === undefined ? 0 : tabItem.headerCount, isHeaderCountNotRequired: tabItem.isHeaderCountNotRequired === undefined\r\n                    ? false : tabItem.isHeaderCountNotRequired, headerText: tabItem.headerText, selectTab: _this.props.selectTab }));\r\n        });\r\n        return (React.createElement(\"ul\", { className: 'tab-nav', role: 'tablist' }, tabHeaders));\r\n    };\r\n    return TabControl;\r\n}(pureRenderComponent));\r\nmodule.exports = TabControl;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS90YWIvdGFiY29udHJvbC50c3g/ODNjNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPSd0eXBpbmdzL3RhYmhlYWRlcmRhdGEudHMnIC8+XHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgVGFiSGVhZGVyID0gcmVxdWlyZSgnLi90YWJoZWFkZXInKTtcclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIFRhYkNvbnRyb2wgY29tcG9uZW50XHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlIHtcclxuICAgIHRhYkhlYWRlcnM6IEFycmF5PFRhYkhlYWRlckRhdGE+O1xyXG4gICAgc2VsZWN0VGFiOiBGdW5jdGlvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgdGhlIFRhYkNvbnRyb2wgQ29tcG9lbnRcclxuICovXHJcbmNsYXNzIFRhYkNvbnRyb2wgZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcclxuICAgIC8qKlxyXG4gICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcywgc3RhdGU6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzLCBzdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgbWV0aG9kIGZvciBUYWJDb250cm9sLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBsZXQgdGFiSGVhZGVyczogSlNYLkVsZW1lbnRbXSA9IFtdO1xyXG4gICAgICAgIHRoaXMucHJvcHMudGFiSGVhZGVycy5tYXAoKHRhYkl0ZW06IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgdGFiSGVhZGVycy5wdXNoKDxUYWJIZWFkZXIgaW5kZXg9e3RhYkl0ZW0uaW5kZXh9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgPXsndGFiSGVhZGVySXRlbV8nICsgdGFiSXRlbS5rZXkgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9eyd0YWJIZWFkZXJJdGVtXycgKyB0YWJJdGVtLmlkIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSB7dGFiSXRlbS5jbGFzc31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQ9IHt0YWJJdGVtLmlzU2VsZWN0ZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0Rpc2FibGVkPSB7dGFiSXRlbS5pc0Rpc2FibGVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiTmF2aWdhdGlvbiA9IHt0YWJJdGVtLnRhYk5hdmlnYXRpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJDb3VudCA9IHt0YWJJdGVtLmhlYWRlckNvdW50ID09PSB1bmRlZmluZWQgPyAwIDogdGFiSXRlbS5oZWFkZXJDb3VudH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSGVhZGVyQ291bnROb3RSZXF1aXJlZD17dGFiSXRlbS5pc0hlYWRlckNvdW50Tm90UmVxdWlyZWQgPT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZmFsc2UgOiB0YWJJdGVtLmlzSGVhZGVyQ291bnROb3RSZXF1aXJlZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlclRleHQgPSB7IHRhYkl0ZW0uaGVhZGVyVGV4dCB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RUYWIgPSB7IHRoaXMucHJvcHMuc2VsZWN0VGFiIH0vPik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9J3RhYi1uYXYnIHJvbGU9J3RhYmxpc3QnPlxyXG4gICAgICAgICAgICAgICB7dGFiSGVhZGVyc31cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCA9IFRhYkNvbnRyb2w7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvdGFiL3RhYmNvbnRyb2wudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTs7QUFFQTtBQUNBO0FBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQVNBO0FBR0E7QUFFQTtBQUtBO0FBQ0E7QUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 527:
/* no static exports found */
/* all exports used */
/*!**************************************************!*\
  !*** ./src/components/utility/tab/tabheader.tsx ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\n/* tslint:disable:no-reserved-keywords */\r\n/**\r\n * Represents the Tab header Compoent\r\n */\r\nvar TabHeader = /** @class */ (function (_super) {\r\n    __extends(TabHeader, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function TabHeader(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.handleClick = _this.handleClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render method for Tab header.\r\n     */\r\n    TabHeader.prototype.render = function () {\r\n        return (React.createElement(\"li\", { className: this.getClassNames(), id: this.props.id, key: 'key_' + this.props.id, role: 'tab', \"aria-selected\": this.props.isSelected, onClick: this.handleClick },\r\n            React.createElement(\"a\", { href: 'javascript:void(0)', \"data-tab-nav\": this.props.tabNavigation, \"aria-controls\": this.props.tabNavigation, className: 'arrow-link' },\r\n                React.createElement(\"span\", { className: 'tab-text-holder' },\r\n                    this.HeaderCount(),\r\n                    React.createElement(\"span\", { className: 'tab-text' }, this.props.headerText)))));\r\n    };\r\n    /**\r\n     * This method will update the state.\r\n     */\r\n    TabHeader.prototype.handleClick = function () {\r\n        if (this.props.isDisabled !== true) {\r\n            this.props.selectTab(this.props.index);\r\n        }\r\n    };\r\n    /**\r\n     * This method will return count visible status\r\n     */\r\n    TabHeader.prototype.HeaderCount = function () {\r\n        return this.props.isHeaderCountNotRequired ? null :\r\n            (React.createElement(\"span\", { className: 'response-count count' }, this.props.headerCount));\r\n    };\r\n    /**\r\n     * This method will return class name depend on disable required status\r\n     */\r\n    TabHeader.prototype.getClassNames = function () {\r\n        return this.props.isHeaderCountNotRequired ? (classNames(this.props.class, { ' active': this.props.isSelected })) :\r\n            (classNames(this.props.class, { ' active': this.props.isSelected }, { ' disabled': this.props.isDisabled }));\r\n    };\r\n    return TabHeader;\r\n}(pureRenderComponent));\r\nmodule.exports = TabHeader;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS90YWIvdGFiaGVhZGVyLnRzeD9lNmQ4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgcHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5sZXQgY2xhc3NOYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXJlc2VydmVkLWtleXdvcmRzICovXHJcbi8qKlxyXG4gKiBQcm9wZXJ0aWVzIG9mIHRoZSBUYWIgaGVhZGVyIGNvbXBvbmVudFxyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSB7XHJcbiAgICBpbmRleDogbnVtYmVyO1xyXG4gICAga2V5OiBzdHJpbmc7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgY2xhc3M6IHN0cmluZztcclxuICAgIGlzU2VsZWN0ZWQ6IGJvb2xlYW47XHJcbiAgICBpc0Rpc2FibGVkOiBib29sZWFuO1xyXG4gICAgdGFiTmF2aWdhdGlvbjogc3RyaW5nO1xyXG4gICAgaGVhZGVyQ291bnQ6IG51bWJlcjtcclxuICAgIGlzSGVhZGVyQ291bnROb3RSZXF1aXJlZD86IGJvb2xlYW47XHJcbiAgICBoZWFkZXJUZXh0OiBzdHJpbmc7XHJcbiAgICBzZWxlY3RUYWI6IEZ1bmN0aW9uO1xyXG59XHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXJlc2VydmVkLWtleXdvcmRzICovXHJcblxyXG4vKipcclxuICogUmVwcmVzZW50cyB0aGUgVGFiIGhlYWRlciBDb21wb2VudFxyXG4gKi9cclxuY2xhc3MgVGFiSGVhZGVyIGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcbiAgICAvKipcclxuICAgICAqIEBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xyXG5cclxuICAgICAgICB0aGlzLmhhbmRsZUNsaWNrID0gdGhpcy5oYW5kbGVDbGljay5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIG1ldGhvZCBmb3IgVGFiIGhlYWRlci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9eyB0aGlzLmdldENsYXNzTmFtZXMoKSB9XHJcbiAgICAgICAgICAgICAgICBpZD17dGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgIGtleT17J2tleV8nICsgdGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgIHJvbGU9J3RhYidcclxuICAgICAgICAgICAgICAgIGFyaWEtc2VsZWN0ZWQ9e3RoaXMucHJvcHMuaXNTZWxlY3RlZH1cclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyB0aGlzLmhhbmRsZUNsaWNrIH0+XHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS10YWItbmF2PXt0aGlzLnByb3BzLnRhYk5hdmlnYXRpb259XHJcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1jb250cm9scz17dGhpcy5wcm9wcy50YWJOYXZpZ2F0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9ICdhcnJvdy1saW5rJz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3RhYi10ZXh0LWhvbGRlcic+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLkhlYWRlckNvdW50KCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZSA9ICd0YWItdGV4dCcgPnt0aGlzLnByb3BzLmhlYWRlclRleHR9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIHVwZGF0ZSB0aGUgc3RhdGUuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlQ2xpY2soKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaXNEaXNhYmxlZCAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLnNlbGVjdFRhYih0aGlzLnByb3BzLmluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBjb3VudCB2aXNpYmxlIHN0YXR1c1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIEhlYWRlckNvdW50KCk6IEpTWC5FbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5pc0hlYWRlckNvdW50Tm90UmVxdWlyZWQgPyBudWxsIDpcclxuICAgICAgICAgICAgKDxzcGFuIGNsYXNzTmFtZT0ncmVzcG9uc2UtY291bnQgY291bnQnPnt0aGlzLnByb3BzLmhlYWRlckNvdW50fTwvc3Bhbj4pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gY2xhc3MgbmFtZSBkZXBlbmQgb24gZGlzYWJsZSByZXF1aXJlZCBzdGF0dXNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRDbGFzc05hbWVzKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaXNIZWFkZXJDb3VudE5vdFJlcXVpcmVkID8gKGNsYXNzTmFtZXModGhpcy5wcm9wcy5jbGFzcywgeyAnIGFjdGl2ZSc6IHRoaXMucHJvcHMuaXNTZWxlY3RlZCB9KSkgOlxyXG4gICAgICAgIChjbGFzc05hbWVzKHRoaXMucHJvcHMuY2xhc3MsIHsgJyBhY3RpdmUnOiB0aGlzLnByb3BzLmlzU2VsZWN0ZWQgfSwgeyAnIGRpc2FibGVkJzogdGhpcy5wcm9wcy5pc0Rpc2FibGVkIH0pKTtcclxuXHJcbiAgICB9XHJcbn1cclxuZXhwb3J0ID0gVGFiSGVhZGVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy91dGlsaXR5L3RhYi90YWJoZWFkZXIudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBbUJBO0FBRUE7O0FBRUE7QUFDQTtBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUFBO0FBR0E7O0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7QUFPQTtBQUlBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 529:
/* no static exports found */
/* all exports used */
/*!*************************************************************!*\
  !*** ./src/components/worklist/shared/gridtogglebutton.tsx ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\n/**\r\n * React component\r\n * @param {Props} props\r\n */\r\nvar GridToggleButton = /** @class */ (function (_super) {\r\n    __extends(GridToggleButton, _super);\r\n    /**\r\n     * Constructor for Grid toggle button\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function GridToggleButton(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.toggleView = _this.toggleView.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    GridToggleButton.prototype.render = function () {\r\n        var buttonTitle;\r\n        var iconStyle;\r\n        var click;\r\n        var _class;\r\n        if (this.props.buttonType === enums.GridType.tiled) {\r\n            buttonTitle = localeStore.instance.TranslateText('marking.worklist.view-switcher.tile-view');\r\n            iconStyle = 'sprite-icon tile-view-icon';\r\n        }\r\n        else if (this.props.buttonType === enums.GridType.detailed) {\r\n            buttonTitle = localeStore.instance.TranslateText('marking.worklist.view-switcher.list-view');\r\n            iconStyle = 'sprite-icon grid-view-icon';\r\n        }\r\n        else if (this.props.buttonType === enums.GridType.markByQuestion) {\r\n            buttonTitle = localeStore.instance.TranslateText('standardisation-setup.view-switcher.mark-by-question-view');\r\n            iconStyle = 'sprite-icon view-total-mark-icon';\r\n        }\r\n        else if (this.props.buttonType === enums.GridType.totalMarks) {\r\n            buttonTitle = localeStore.instance.TranslateText('standardisation-setup.view-switcher.total-mark-view');\r\n            iconStyle = 'sprite-icon grid-view-icon';\r\n        }\r\n        if (this.props.isSelected) {\r\n            _class = 'switch-view active';\r\n            click = null;\r\n        }\r\n        else {\r\n            _class = 'switch-view';\r\n            click = this.toggleView;\r\n        }\r\n        return (React.createElement(\"a\", { href: 'javascript:void(0)', title: buttonTitle, key: 'key_' + this.props.id, id: this.props.id, onClick: click, className: _class },\r\n            React.createElement(\"span\", { className: iconStyle }),\r\n            React.createElement(\"span\", { className: 'view-text', id: this.props.id + '_ToggleText' }, buttonTitle)));\r\n    };\r\n    /**\r\n     * this will toggle the grid view (tile/detail).\r\n     */\r\n    GridToggleButton.prototype.toggleView = function (evnt) {\r\n        this.props.toggleGridView();\r\n    };\r\n    return GridToggleButton;\r\n}(pureRenderComponent));\r\nmodule.exports = GridToggleButton;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2dyaWR0b2dnbGVidXR0b24udHN4P2VhZmMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcbmxldCBjbGFzc05hbWVzID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9lbnVtcycpO1xuXG4vKipcbiAqIFByb3BlcnRpZXMgb2YgYSBjb21wb25lbnRcbiAqL1xuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcbiAgICB0b2dnbGVHcmlkVmlldzogRnVuY3Rpb247XG4gICAgaXNTZWxlY3RlZDogYm9vbGVhbjtcbiAgICBidXR0b25UeXBlOiBlbnVtcy5HcmlkVHlwZTtcbn1cblxuLyoqXG4gKiBSZWFjdCBjb21wb25lbnRcbiAqIEBwYXJhbSB7UHJvcHN9IHByb3BzXG4gKi9cbmNsYXNzIEdyaWRUb2dnbGVCdXR0b24gZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yIGZvciBHcmlkIHRvZ2dsZSBidXR0b25cbiAgICAgKiBAcGFyYW0gcHJvcHNcbiAgICAgKiBAcGFyYW0gc3RhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocHJvcHMsIHN0YXRlKTtcbiAgICAgICAgdGhpcy50b2dnbGVWaWV3ID0gdGhpcy50b2dnbGVWaWV3LmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIGNvbXBvbmVudFxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XG4gICAgICAgIGxldCBidXR0b25UaXRsZTtcbiAgICAgICAgbGV0IGljb25TdHlsZTtcbiAgICAgICAgbGV0IGNsaWNrOiBSZWFjdC5FdmVudEhhbmRsZXI8YW55PjtcbiAgICAgICAgbGV0IF9jbGFzcztcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuYnV0dG9uVHlwZSA9PT0gZW51bXMuR3JpZFR5cGUudGlsZWQpIHtcbiAgICAgICAgICAgIGJ1dHRvblRpdGxlID0gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC52aWV3LXN3aXRjaGVyLnRpbGUtdmlldycpO1xuICAgICAgICAgICAgaWNvblN0eWxlID0gJ3Nwcml0ZS1pY29uIHRpbGUtdmlldy1pY29uJztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmJ1dHRvblR5cGUgPT09IGVudW1zLkdyaWRUeXBlLmRldGFpbGVkKSB7XG4gICAgICAgICAgICBidXR0b25UaXRsZSA9IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3Qudmlldy1zd2l0Y2hlci5saXN0LXZpZXcnKTtcbiAgICAgICAgICAgIGljb25TdHlsZSA9ICdzcHJpdGUtaWNvbiBncmlkLXZpZXctaWNvbic7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5idXR0b25UeXBlID09PSBlbnVtcy5HcmlkVHlwZS5tYXJrQnlRdWVzdGlvbikge1xuICAgICAgICAgICAgYnV0dG9uVGl0bGUgPSBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdzdGFuZGFyZGlzYXRpb24tc2V0dXAudmlldy1zd2l0Y2hlci5tYXJrLWJ5LXF1ZXN0aW9uLXZpZXcnKTtcbiAgICAgICAgICAgIGljb25TdHlsZSA9ICdzcHJpdGUtaWNvbiB2aWV3LXRvdGFsLW1hcmstaWNvbic7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5idXR0b25UeXBlID09PSBlbnVtcy5HcmlkVHlwZS50b3RhbE1hcmtzKSB7XG4gICAgICAgICAgICBidXR0b25UaXRsZSA9IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ3N0YW5kYXJkaXNhdGlvbi1zZXR1cC52aWV3LXN3aXRjaGVyLnRvdGFsLW1hcmstdmlldycpO1xuICAgICAgICAgICAgaWNvblN0eWxlID0gJ3Nwcml0ZS1pY29uIGdyaWQtdmlldy1pY29uJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIF9jbGFzcyA9ICdzd2l0Y2gtdmlldyBhY3RpdmUnO1xuICAgICAgICAgICAgY2xpY2sgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX2NsYXNzID0gJ3N3aXRjaC12aWV3JztcbiAgICAgICAgICAgIGNsaWNrID0gdGhpcy50b2dnbGVWaWV3O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcblxuICAgICAgICAgICAgPGEgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJyB0aXRsZT17YnV0dG9uVGl0bGV9XG4gICAgICAgICAgICAgICAga2V5PXsna2V5XycgKyB0aGlzLnByb3BzLmlkfVxuICAgICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLmlkfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2NsaWNrIH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e19jbGFzc30gPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiAgY2xhc3NOYW1lPXtpY29uU3R5bGV9ID48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0ndmlldy10ZXh0JyBpZCA9IHt0aGlzLnByb3BzLmlkICsgJ19Ub2dnbGVUZXh0J30+e2J1dHRvblRpdGxlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdGhpcyB3aWxsIHRvZ2dsZSB0aGUgZ3JpZCB2aWV3ICh0aWxlL2RldGFpbCkuXG4gICAgICovXG4gICAgcHJpdmF0ZSB0b2dnbGVWaWV3KGV2bnQ6IGFueSkge1xuICAgICAgICB0aGlzLnByb3BzLnRvZ2dsZUdyaWRWaWV3KCk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCA9IEdyaWRUb2dnbGVCdXR0b247XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2dyaWR0b2dnbGVidXR0b24udHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVdBOzs7QUFHQTtBQUNBO0FBQUE7QUFFQTs7OztBQUlBO0FBQ0E7QUFBQTtBQUVBOztBQUNBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBT0E7QUFDQTtBQUdBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 530:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/worklist/shared/worklistmessage.tsx ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar localeHelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\n/**\r\n * Class for displaying worklist message.\r\n */\r\nvar WorkListMessage = /** @class */ (function (_super) {\r\n    __extends(WorkListMessage, _super);\r\n    /**\r\n     * Constructor for worklist message\r\n     * @param props\r\n     */\r\n    function WorkListMessage(props) {\r\n        return _super.call(this, props, null) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    WorkListMessage.prototype.render = function () {\r\n        if (this.props.hasResponsesAvailableInPool === true) {\r\n            if (!this.props.isSimulation) {\r\n                // return the worklistmessage based on AggregateQIGTargets CC value\r\n                var worklistEmptyMessage = this.worklistMessageBody;\r\n                /** Replacing the message with concurrent limit */\r\n                worklistEmptyMessage = worklistEmptyMessage.replace('{0}', localeHelper.toLocaleString(this.props.responseConcurrentLimit));\r\n                return (React.createElement(\"div\", { className: 'grid-holder grid-view' },\r\n                    React.createElement(\"div\", { className: 'grid-wrapper', id: this.props.id },\r\n                        React.createElement(\"div\", { className: 'message-box dark-msg info-guide callout download-resp-msg' },\r\n                            React.createElement(\"h4\", { id: this.props.id + '_messageHeader', className: 'bolder padding-bottom-10' }, localeStore.instance.TranslateText('marking.worklist.empty-worklist-helper.header')),\r\n                            React.createElement(\"p\", { id: this.props.id + '_messageContent', className: 'message-body' },\r\n                                localeStore.instance.TranslateText('marking.worklist.empty-worklist-helper.body-line-1'),\r\n                                \" \",\r\n                                React.createElement(\"br\", null),\r\n                                worklistEmptyMessage,\r\n                                \" \",\r\n                                React.createElement(\"br\", null),\r\n                                React.createElement(\"br\", null),\r\n                                localeStore.instance.TranslateText('marking.worklist.empty-worklist-helper.body-line-3'))))));\r\n            }\r\n            else {\r\n                return (React.createElement(\"div\", { className: 'grid-holder grid-view' },\r\n                    React.createElement(\"div\", { className: 'grid-wrapper', id: this.props.id },\r\n                        React.createElement(\"div\", { className: 'message-box text-left float-msg dark-msg info-guide callout download-resp-msg' },\r\n                            React.createElement(\"h4\", { id: this.props.id + '_messageHeader', className: 'bolder padding-bottom-10' }, localeStore.instance.TranslateText('marking.worklist.empty-worklist-helper.header')),\r\n                            React.createElement(\"p\", { id: this.props.id + '_messageContent1', className: 'message-body' }, localeStore.instance.TranslateText('marking.worklist.simulation-helper.body-line-1')),\r\n                            React.createElement(\"p\", { id: this.props.id + '_messageContent2', className: 'message-body padding-top-10' }, localeStore.instance.TranslateText('marking.worklist.simulation-helper.body-line-2'))))));\r\n            }\r\n        }\r\n        else if (this.props.hasTargetCompleted === true) {\r\n            return (React.createElement(\"div\", { className: 'grid-holder grid-view' },\r\n                React.createElement(\"div\", { className: 'grid-wrapper', id: this.props.id },\r\n                    React.createElement(\"div\", { className: 'message-box dark-msg float-msg info-guide download-resp-msg' },\r\n                        React.createElement(\"h4\", { id: this.props.id + '_messageHeader', className: 'bolder padding-bottom-10' }, localeStore.instance.TranslateText('marking.worklist.marking-target-complete-helper.header')),\r\n                        React.createElement(\"p\", { id: this.props.id + '_messageContent', className: 'message-body' },\r\n                            this.worklistMessageBody,\r\n                            \" \")))));\r\n        }\r\n        else {\r\n            return (React.createElement(\"div\", { className: 'grid-holder grid-view' },\r\n                React.createElement(\"div\", { className: 'grid-wrapper', id: this.props.id },\r\n                    React.createElement(\"div\", { className: 'message-box dark-msg info-guide download-resp-msg' },\r\n                        React.createElement(\"h4\", { id: this.props.id + '_messageHeader', className: 'bolder padding-bottom-10' }, localeStore.instance.TranslateText('marking.worklist.no-responses-available-helper.header')),\r\n                        React.createElement(\"p\", { id: this.props.id + '_messageContent', className: 'message-body' }, localeStore.instance.TranslateText('marking.worklist.no-responses-available-helper.body'))))));\r\n        }\r\n    };\r\n    Object.defineProperty(WorkListMessage.prototype, \"worklistMessageBody\", {\r\n        /**\r\n         * Return corresonding worklistmessage based on condition.\r\n         */\r\n        get: function () {\r\n            if (this.props.hasResponsesAvailableInPool && !this.props.isSimulation) {\r\n                if (this.props.isAggregateQIGTargetsON) {\r\n                    return localeStore.instance.TranslateText('marking.worklist.empty-worklist-helper.aggregated-body-line-2');\r\n                }\r\n                else {\r\n                    return localeStore.instance.TranslateText('marking.worklist.empty-worklist-helper.body-line-2');\r\n                }\r\n            }\r\n            else if (this.props.hasTargetCompleted === true) {\r\n                if (!this.props.isAggregateQIGTargetsON) {\r\n                    return localeStore.instance.TranslateText('marking.worklist.marking-target-complete-helper.body');\r\n                }\r\n                else {\r\n                    return localeStore.instance.TranslateText('marking.worklist.marking-target-complete-helper.aggregate-body');\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return WorkListMessage;\r\n}(pureRenderComponent));\r\nmodule.exports = WorkListMessage;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3dvcmtsaXN0bWVzc2FnZS50c3g/MDU0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuLyogdHNsaW50OmRpc2FibGU6bm8tdW51c2VkLXZhcmlhYmxlICovXHJcbmltcG9ydCBwdXJlUmVuZGVyQ29tcG9uZW50ID0gcmVxdWlyZSgnLi4vLi4vYmFzZS9wdXJlcmVuZGVyY29tcG9uZW50Jyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IGxvY2FsZUhlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvbG9jYWxlL2xvY2FsZWhlbHBlcicpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBCdXN5SW5kaWNhdG9yID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9idXN5aW5kaWNhdG9yL2J1c3lpbmRpY2F0b3InKTtcclxuaW1wb3J0IHRhcmdldFN1bW1hcnlTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy93b3JrbGlzdC90YXJnZXRzdW1tYXJ5c3RvcmUnKTtcclxuaW1wb3J0IG1hcmtpbmdUYXJnZXRTdW1tYXJ5ID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL3dvcmtsaXN0L3R5cGluZ3MvbWFya2luZ3RhcmdldHN1bW1hcnknKTtcclxuXHJcbi8qKlxyXG4gKiBQcm9wc1xyXG4gKiBAcGFyYW0ge1Byb3BzfSBwcm9wc1xyXG4gKi9cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIGhhc1Jlc3BvbnNlc0F2YWlsYWJsZUluUG9vbDogYm9vbGVhbjtcclxuICAgIHJlc3BvbnNlQ29uY3VycmVudExpbWl0PzogbnVtYmVyO1xyXG4gICAgaGFzVGFyZ2V0Q29tcGxldGVkPzogYm9vbGVhbjtcclxuICAgIGlzU2ltdWxhdGlvbj86IGJvb2xlYW47XHJcbiAgICBpc0FnZ3JlZ2F0ZVFJR1RhcmdldHNPTj86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGFzcyBmb3IgZGlzcGxheWluZyB3b3JrbGlzdCBtZXNzYWdlLlxyXG4gKi9cclxuY2xhc3MgV29ya0xpc3RNZXNzYWdlIGV4dGVuZHMgcHVyZVJlbmRlckNvbXBvbmVudDxQcm9wcywgYW55PiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3Igd29ya2xpc3QgbWVzc2FnZSBcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgbnVsbCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIGNvbXBvbmVudFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbmRlcigpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaGFzUmVzcG9uc2VzQXZhaWxhYmxlSW5Qb29sID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5wcm9wcy5pc1NpbXVsYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIC8vIHJldHVybiB0aGUgd29ya2xpc3RtZXNzYWdlIGJhc2VkIG9uIEFnZ3JlZ2F0ZVFJR1RhcmdldHMgQ0MgdmFsdWVcclxuICAgICAgICAgICAgICAgIGxldCB3b3JrbGlzdEVtcHR5TWVzc2FnZSA6IHN0cmluZyA9IHRoaXMud29ya2xpc3RNZXNzYWdlQm9keTtcclxuICAgICAgICAgICAgICAgIC8qKiBSZXBsYWNpbmcgdGhlIG1lc3NhZ2Ugd2l0aCBjb25jdXJyZW50IGxpbWl0ICovXHJcbiAgICAgICAgICAgICAgICB3b3JrbGlzdEVtcHR5TWVzc2FnZSA9IHdvcmtsaXN0RW1wdHlNZXNzYWdlLnJlcGxhY2UoJ3swfScsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlSGVscGVyLnRvTG9jYWxlU3RyaW5nKHRoaXMucHJvcHMucmVzcG9uc2VDb25jdXJyZW50TGltaXQpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2dyaWQtaG9sZGVyIGdyaWQtdmlldyc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdncmlkLXdyYXBwZXInIGlkPXt0aGlzLnByb3BzLmlkfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtZXNzYWdlLWJveCBkYXJrLW1zZyBpbmZvLWd1aWRlIGNhbGxvdXQgZG93bmxvYWQtcmVzcC1tc2cnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBpZD17dGhpcy5wcm9wcy5pZCArICdfbWVzc2FnZUhlYWRlcid9IGNsYXNzTmFtZT0nYm9sZGVyIHBhZGRpbmctYm90dG9tLTEwJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QuZW1wdHktd29ya2xpc3QtaGVscGVyLmhlYWRlcicpfTwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgaWQ9e3RoaXMucHJvcHMuaWQgKyAnX21lc3NhZ2VDb250ZW50J30gY2xhc3NOYW1lPSdtZXNzYWdlLWJvZHknPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5lbXB0eS13b3JrbGlzdC1oZWxwZXIuYm9keS1saW5lLTEnKX0gPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt3b3JrbGlzdEVtcHR5TWVzc2FnZX0gPGJyIC8+PGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LmVtcHR5LXdvcmtsaXN0LWhlbHBlci5ib2R5LWxpbmUtMycpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdncmlkLWhvbGRlciBncmlkLXZpZXcnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZ3JpZC13cmFwcGVyJyBpZD17dGhpcy5wcm9wcy5pZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWVzc2FnZS1ib3ggdGV4dC1sZWZ0IGZsb2F0LW1zZyBkYXJrLW1zZyBpbmZvLWd1aWRlIGNhbGxvdXQgZG93bmxvYWQtcmVzcC1tc2cnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNCBpZD17dGhpcy5wcm9wcy5pZCArICdfbWVzc2FnZUhlYWRlcid9IGNsYXNzTmFtZT0nYm9sZGVyIHBhZGRpbmctYm90dG9tLTEwJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QuZW1wdHktd29ya2xpc3QtaGVscGVyLmhlYWRlcicpfTwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgaWQ9e3RoaXMucHJvcHMuaWQgKyAnX21lc3NhZ2VDb250ZW50MSd9IGNsYXNzTmFtZT0nbWVzc2FnZS1ib2R5Jz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3Quc2ltdWxhdGlvbi1oZWxwZXIuYm9keS1saW5lLTEnKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgaWQ9e3RoaXMucHJvcHMuaWQgKyAnX21lc3NhZ2VDb250ZW50Mid9IGNsYXNzTmFtZT0nbWVzc2FnZS1ib2R5IHBhZGRpbmctdG9wLTEwJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3Quc2ltdWxhdGlvbi1oZWxwZXIuYm9keS1saW5lLTInKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmhhc1RhcmdldENvbXBsZXRlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2dyaWQtaG9sZGVyIGdyaWQtdmlldyc+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2dyaWQtd3JhcHBlcicgaWQgPSB7dGhpcy5wcm9wcy5pZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtZXNzYWdlLWJveCBkYXJrLW1zZyBmbG9hdC1tc2cgaW5mby1ndWlkZSBkb3dubG9hZC1yZXNwLW1zZyc+XHJcbiAgICAgICAgICAgIDxoNCBpZCA9IHt0aGlzLnByb3BzLmlkICsgJ19tZXNzYWdlSGVhZGVyJ30gY2xhc3NOYW1lPSdib2xkZXIgcGFkZGluZy1ib3R0b20tMTAnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0Lm1hcmtpbmctdGFyZ2V0LWNvbXBsZXRlLWhlbHBlci5oZWFkZXInKSB9PC9oND5cclxuICAgICAgICAgICAgICAgIDxwIGlkID0geyB0aGlzLnByb3BzLmlkICsgJ19tZXNzYWdlQ29udGVudCcgfSBjbGFzc05hbWU9ICdtZXNzYWdlLWJvZHknID5cclxuICAgICAgICAgICAgICAgICAgICB7IHRoaXMud29ya2xpc3RNZXNzYWdlQm9keSB9IDwvcCA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdncmlkLWhvbGRlciBncmlkLXZpZXcnPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdncmlkLXdyYXBwZXInIGlkID0ge3RoaXMucHJvcHMuaWR9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWVzc2FnZS1ib3ggZGFyay1tc2cgaW5mby1ndWlkZSBkb3dubG9hZC1yZXNwLW1zZyc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgaWQgPSB7dGhpcy5wcm9wcy5pZCArICdfbWVzc2FnZUhlYWRlcid9IGNsYXNzTmFtZT0nYm9sZGVyIHBhZGRpbmctYm90dG9tLTEwJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5uby1yZXNwb25zZXMtYXZhaWxhYmxlLWhlbHBlci5oZWFkZXInKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9oND5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGlkID0ge3RoaXMucHJvcHMuaWQgKyAnX21lc3NhZ2VDb250ZW50J30gY2xhc3NOYW1lPSdtZXNzYWdlLWJvZHknPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0Lm5vLXJlc3BvbnNlcy1hdmFpbGFibGUtaGVscGVyLmJvZHknKSB9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiBjb3JyZXNvbmRpbmcgd29ya2xpc3RtZXNzYWdlIGJhc2VkIG9uIGNvbmRpdGlvbi5cclxuICAgICAqL1xyXG5cclxuICAgIHByaXZhdGUgZ2V0IHdvcmtsaXN0TWVzc2FnZUJvZHkoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuaGFzUmVzcG9uc2VzQXZhaWxhYmxlSW5Qb29sICYmICF0aGlzLnByb3BzLmlzU2ltdWxhdGlvbikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5pc0FnZ3JlZ2F0ZVFJR1RhcmdldHNPTikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QuZW1wdHktd29ya2xpc3QtaGVscGVyLmFnZ3JlZ2F0ZWQtYm9keS1saW5lLTInKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LmVtcHR5LXdvcmtsaXN0LWhlbHBlci5ib2R5LWxpbmUtMicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmhhc1RhcmdldENvbXBsZXRlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucHJvcHMuaXNBZ2dyZWdhdGVRSUdUYXJnZXRzT04pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0Lm1hcmtpbmctdGFyZ2V0LWNvbXBsZXRlLWhlbHBlci5ib2R5Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5tYXJraW5nLXRhcmdldC1jb21wbGV0ZS1oZWxwZXIuYWdncmVnYXRlLWJvZHknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0ID0gV29ya0xpc3RNZXNzYWdlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9zaGFyZWQvd29ya2xpc3RtZXNzYWdlLnRzeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFrQkE7O0FBRUE7QUFDQTtBQUFBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7OztBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7O0FBQUE7QUFDQTs7QUFBQTtBQUFBO0FBQ0E7QUFNQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBT0E7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFLQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQU1BO0FBQ0E7QUFNQTtBQUpBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 533:
/* no static exports found */
/* all exports used */
/*!*******************************************************!*\
  !*** ./src/stores/qigselector/qigvalidationresult.ts ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar qigValidationResultBase = __webpack_require__(/*! ./qigvalidationresultbase */ 485);\r\nvar QigValidationResult = /** @class */ (function (_super) {\r\n    __extends(QigValidationResult, _super);\r\n    function QigValidationResult() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.isSimulationMode = false;\r\n        _this.isInStandardisationMode = false;\r\n        return _this;\r\n    }\r\n    return QigValidationResult;\r\n}(qigValidationResultBase));\r\nmodule.exports = QigValidationResult;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3Jlcy9xaWdzZWxlY3Rvci9xaWd2YWxpZGF0aW9ucmVzdWx0LnRzP2YzOTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHFpZ1ZhbGlkYXRpb25SZXN1bHRCYXNlID0gcmVxdWlyZSgnLi9xaWd2YWxpZGF0aW9ucmVzdWx0YmFzZScpO1xyXG5cclxuY2xhc3MgUWlnVmFsaWRhdGlvblJlc3VsdCBleHRlbmRzIHFpZ1ZhbGlkYXRpb25SZXN1bHRCYXNlIHtcclxuICAgIHB1YmxpYyBvcGVuUmVzcG9uc2VzQ291bnQ6IG51bWJlcjtcclxuICAgIHB1YmxpYyBzdGF0dXNDb2xvdXJDbGFzczogc3RyaW5nO1xyXG4gICAgcHVibGljIGlzU2ltdWxhdGlvbk1vZGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBpc0luU3RhbmRhcmRpc2F0aW9uTW9kZTogYm9vbGVhbiA9IGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgPSBRaWdWYWxpZGF0aW9uUmVzdWx0O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvc3RvcmVzL3FpZ3NlbGVjdG9yL3FpZ3ZhbGlkYXRpb25yZXN1bHQudHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7O0FBQ0E7QUFBQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 584:
/* no static exports found */
/* all exports used */
/*!*****************************************************************************************!*\
  !*** ./src/components/utility/responseallocation/responseallocationvalidationhelper.ts ***!
  \*****************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar enums = __webpack_require__(/*! ../enums */ 225);\r\nvar responseAllocationValidationParameter = __webpack_require__(/*! ./responseallocationvalidationparameter */ 522);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar localeHelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\n/**\r\n * Helper class for response allocation validation\r\n */\r\nvar ResponseAllocationValidationHelper = /** @class */ (function () {\r\n    function ResponseAllocationValidationHelper() {\r\n    }\r\n    /**\r\n     * Returns an entity representing the states to be set as a result of Response Allocation request failure\r\n     * @param responseAllocationValidationParameter\r\n     */\r\n    ResponseAllocationValidationHelper.Validate = function (responseAllocationErrorCode, allocatedResponseCount, examinerApprovalStatus) {\r\n        var errorDialogHeaderText = localeStore.instance.TranslateText('marking.worklist.response-allocation-error-dialog.response-allocation-error-header');\r\n        // get the response allocation error message based on AggregateQIGTargets CC value.\r\n        var errorDialogContentText = this.getResponseAllocationErrorMessage(responseAllocationErrorCode);\r\n        var currentWorklistType = worklistStore.instance.currentWorklistType;\r\n        // In simulation worklist examiner approval status is irrelevant\r\n        if (currentWorklistType !== enums.WorklistType.simulation &&\r\n            (examinerApprovalStatus === enums.ExaminerApproval.Suspended\r\n                || examinerApprovalStatus === enums.ExaminerApproval.NotApproved)) {\r\n            errorDialogContentText = localeStore.instance.TranslateText('marking.worklist.approval-status-changed-dialog.body');\r\n        }\r\n        else {\r\n            // if the error code 'noSeedAvailable', then changing the error code to 'noResponseAvailable'.\r\n            if (responseAllocationErrorCode === enums.ResponseAllocationErrorCode.noSeedAvailable) {\r\n                responseAllocationErrorCode = enums.ResponseAllocationErrorCode.noResponseAvailable;\r\n            }\r\n            switch (responseAllocationErrorCode) {\r\n                case enums.ResponseAllocationErrorCode.concurrentLimitNotMet:\r\n                case enums.ResponseAllocationErrorCode.markingLimitReached:\r\n                    errorDialogContentText = errorDialogContentText.replace('{0}', localeHelper.toLocaleString(allocatedResponseCount));\r\n                    break;\r\n                default:\r\n                    errorDialogContentText = localeStore.instance.TranslateText('marking.worklist.response-allocation-error-dialog.response-allocation-error-'\r\n                        + enums.ResponseAllocationErrorCode[responseAllocationErrorCode]);\r\n                    break;\r\n            }\r\n        }\r\n        return new responseAllocationValidationParameter(errorDialogHeaderText, errorDialogContentText, true);\r\n    };\r\n    /**\r\n     * Return coresponding response allocation error message based on AggregateQIGTargets CC value.\r\n     */\r\n    ResponseAllocationValidationHelper.getResponseAllocationErrorMessage = function (responseAllocationErrorCode) {\r\n        var isAggregateQIGTargetsON = qigStore.instance.isAggregatedQigCCEnabledForCurrentQig;\r\n        if (isAggregateQIGTargetsON && responseAllocationErrorCode === enums.ResponseAllocationErrorCode.markingLimitReached) {\r\n            return localeStore.instance.TranslateText('marking.worklist.response-allocation-error-dialog.response-allocation-error-aggregate-'\r\n                + enums.ResponseAllocationErrorCode[responseAllocationErrorCode]);\r\n        }\r\n        else {\r\n            return localeStore.instance.TranslateText('marking.worklist.response-allocation-error-dialog.response-allocation-error-'\r\n                + enums.ResponseAllocationErrorCode[responseAllocationErrorCode]);\r\n        }\r\n    };\r\n    return ResponseAllocationValidationHelper;\r\n}());\r\nmodule.exports = ResponseAllocationValidationHelper;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS9yZXNwb25zZWFsbG9jYXRpb24vcmVzcG9uc2VhbGxvY2F0aW9udmFsaWRhdGlvbmhlbHBlci50cz85Nzc1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uL2VudW1zJyk7XHJcbmltcG9ydCByZXNwb25zZUFsbG9jYXRpb25WYWxpZGF0aW9uUGFyYW1ldGVyID0gcmVxdWlyZSgnLi9yZXNwb25zZWFsbG9jYXRpb252YWxpZGF0aW9ucGFyYW1ldGVyJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IGxvY2FsZUhlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uL3V0aWxpdHkvbG9jYWxlL2xvY2FsZWhlbHBlcicpO1xyXG5pbXBvcnQgZXhhbWluZXJTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9tYXJrZXJpbmZvcm1hdGlvbi9leGFtaW5lcnN0b3JlJyk7XHJcbmltcG9ydCB3b3JrbGlzdFN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL3dvcmtsaXN0L3dvcmtsaXN0c3RvcmUnKTtcclxuaW1wb3J0IHFpZ1N0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL3FpZ3NlbGVjdG9yL3FpZ3N0b3JlJyk7XHJcblxyXG4vKipcclxuICogSGVscGVyIGNsYXNzIGZvciByZXNwb25zZSBhbGxvY2F0aW9uIHZhbGlkYXRpb25cclxuICovXHJcbmNsYXNzIFJlc3BvbnNlQWxsb2NhdGlvblZhbGlkYXRpb25IZWxwZXIge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhbiBlbnRpdHkgcmVwcmVzZW50aW5nIHRoZSBzdGF0ZXMgdG8gYmUgc2V0IGFzIGEgcmVzdWx0IG9mIFJlc3BvbnNlIEFsbG9jYXRpb24gcmVxdWVzdCBmYWlsdXJlXHJcbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VBbGxvY2F0aW9uVmFsaWRhdGlvblBhcmFtZXRlclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFZhbGlkYXRlKHJlc3BvbnNlQWxsb2NhdGlvbkVycm9yQ29kZTogZW51bXMuUmVzcG9uc2VBbGxvY2F0aW9uRXJyb3JDb2RlLFxyXG4gICAgICAgIGFsbG9jYXRlZFJlc3BvbnNlQ291bnQ6IG51bWJlcixcclxuICAgICAgICBleGFtaW5lckFwcHJvdmFsU3RhdHVzOiBlbnVtcy5FeGFtaW5lckFwcHJvdmFsKTogcmVzcG9uc2VBbGxvY2F0aW9uVmFsaWRhdGlvblBhcmFtZXRlciB7XHJcblxyXG4gICAgICAgIGxldCBlcnJvckRpYWxvZ0hlYWRlclRleHQ6IHN0cmluZyA9XHJcbiAgICAgICAgICAgIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtYWxsb2NhdGlvbi1lcnJvci1kaWFsb2cucmVzcG9uc2UtYWxsb2NhdGlvbi1lcnJvci1oZWFkZXInKTtcclxuICAgICAgICAvLyBnZXQgdGhlIHJlc3BvbnNlIGFsbG9jYXRpb24gZXJyb3IgbWVzc2FnZSBiYXNlZCBvbiBBZ2dyZWdhdGVRSUdUYXJnZXRzIENDIHZhbHVlLlxyXG4gICAgICAgIGxldCBlcnJvckRpYWxvZ0NvbnRlbnRUZXh0OiBzdHJpbmcgPSB0aGlzLmdldFJlc3BvbnNlQWxsb2NhdGlvbkVycm9yTWVzc2FnZShyZXNwb25zZUFsbG9jYXRpb25FcnJvckNvZGUpO1xyXG5cclxuICAgICAgICBsZXQgY3VycmVudFdvcmtsaXN0VHlwZSA9IHdvcmtsaXN0U3RvcmUuaW5zdGFuY2UuY3VycmVudFdvcmtsaXN0VHlwZTtcclxuXHJcbiAgICAgICAgLy8gSW4gc2ltdWxhdGlvbiB3b3JrbGlzdCBleGFtaW5lciBhcHByb3ZhbCBzdGF0dXMgaXMgaXJyZWxldmFudFxyXG4gICAgICAgIGlmIChjdXJyZW50V29ya2xpc3RUeXBlICE9PSBlbnVtcy5Xb3JrbGlzdFR5cGUuc2ltdWxhdGlvbiAmJlxyXG4gICAgICAgICAgICAoZXhhbWluZXJBcHByb3ZhbFN0YXR1cyA9PT0gZW51bXMuRXhhbWluZXJBcHByb3ZhbC5TdXNwZW5kZWRcclxuICAgICAgICAgICAgICAgIHx8IGV4YW1pbmVyQXBwcm92YWxTdGF0dXMgPT09IGVudW1zLkV4YW1pbmVyQXBwcm92YWwuTm90QXBwcm92ZWQpKSB7XHJcbiAgICAgICAgICAgIGVycm9yRGlhbG9nQ29udGVudFRleHQgPSBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0XHJcbiAgICAgICAgICAgICAgICAoJ21hcmtpbmcud29ya2xpc3QuYXBwcm92YWwtc3RhdHVzLWNoYW5nZWQtZGlhbG9nLmJvZHknKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBpZiB0aGUgZXJyb3IgY29kZSAnbm9TZWVkQXZhaWxhYmxlJywgdGhlbiBjaGFuZ2luZyB0aGUgZXJyb3IgY29kZSB0byAnbm9SZXNwb25zZUF2YWlsYWJsZScuXHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZUFsbG9jYXRpb25FcnJvckNvZGUgPT09IGVudW1zLlJlc3BvbnNlQWxsb2NhdGlvbkVycm9yQ29kZS5ub1NlZWRBdmFpbGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJlc3BvbnNlQWxsb2NhdGlvbkVycm9yQ29kZSA9IGVudW1zLlJlc3BvbnNlQWxsb2NhdGlvbkVycm9yQ29kZS5ub1Jlc3BvbnNlQXZhaWxhYmxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN3aXRjaCAocmVzcG9uc2VBbGxvY2F0aW9uRXJyb3JDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVudW1zLlJlc3BvbnNlQWxsb2NhdGlvbkVycm9yQ29kZS5jb25jdXJyZW50TGltaXROb3RNZXQ6XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVudW1zLlJlc3BvbnNlQWxsb2NhdGlvbkVycm9yQ29kZS5tYXJraW5nTGltaXRSZWFjaGVkOlxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yRGlhbG9nQ29udGVudFRleHQgPSBlcnJvckRpYWxvZ0NvbnRlbnRUZXh0LnJlcGxhY2UoJ3swfScsIGxvY2FsZUhlbHBlci50b0xvY2FsZVN0cmluZyhhbGxvY2F0ZWRSZXNwb25zZUNvdW50KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yRGlhbG9nQ29udGVudFRleHQgPSBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1hbGxvY2F0aW9uLWVycm9yLWRpYWxvZy5yZXNwb25zZS1hbGxvY2F0aW9uLWVycm9yLSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgKyBlbnVtcy5SZXNwb25zZUFsbG9jYXRpb25FcnJvckNvZGVbcmVzcG9uc2VBbGxvY2F0aW9uRXJyb3JDb2RlXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyByZXNwb25zZUFsbG9jYXRpb25WYWxpZGF0aW9uUGFyYW1ldGVyKGVycm9yRGlhbG9nSGVhZGVyVGV4dCwgZXJyb3JEaWFsb2dDb250ZW50VGV4dCwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gY29yZXNwb25kaW5nIHJlc3BvbnNlIGFsbG9jYXRpb24gZXJyb3IgbWVzc2FnZSBiYXNlZCBvbiBBZ2dyZWdhdGVRSUdUYXJnZXRzIENDIHZhbHVlLlxyXG4gICAgICovXHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0UmVzcG9uc2VBbGxvY2F0aW9uRXJyb3JNZXNzYWdlKHJlc3BvbnNlQWxsb2NhdGlvbkVycm9yQ29kZTogZW51bXMuUmVzcG9uc2VBbGxvY2F0aW9uRXJyb3JDb2RlKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgaXNBZ2dyZWdhdGVRSUdUYXJnZXRzT04gPSBxaWdTdG9yZS5pbnN0YW5jZS5pc0FnZ3JlZ2F0ZWRRaWdDQ0VuYWJsZWRGb3JDdXJyZW50UWlnO1xyXG4gICAgICAgIGlmIChpc0FnZ3JlZ2F0ZVFJR1RhcmdldHNPTiAmJiByZXNwb25zZUFsbG9jYXRpb25FcnJvckNvZGUgPT09IGVudW1zLlJlc3BvbnNlQWxsb2NhdGlvbkVycm9yQ29kZS5tYXJraW5nTGltaXRSZWFjaGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0XHJcbiAgICAgICAgICAgICAgICAoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtYWxsb2NhdGlvbi1lcnJvci1kaWFsb2cucmVzcG9uc2UtYWxsb2NhdGlvbi1lcnJvci1hZ2dyZWdhdGUtJ1xyXG4gICAgICAgICAgICAgICAgKyBlbnVtcy5SZXNwb25zZUFsbG9jYXRpb25FcnJvckNvZGVbcmVzcG9uc2VBbGxvY2F0aW9uRXJyb3JDb2RlXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtYWxsb2NhdGlvbi1lcnJvci1kaWFsb2cucmVzcG9uc2UtYWxsb2NhdGlvbi1lcnJvci0nXHJcbiAgICAgICAgICAgICAgICArIGVudW1zLlJlc3BvbnNlQWxsb2NhdGlvbkVycm9yQ29kZVtyZXNwb25zZUFsbG9jYXRpb25FcnJvckNvZGVdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCA9IFJlc3BvbnNlQWxsb2NhdGlvblZhbGlkYXRpb25IZWxwZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3V0aWxpdHkvcmVzcG9uc2VhbGxvY2F0aW9uL3Jlc3BvbnNlYWxsb2NhdGlvbnZhbGlkYXRpb25oZWxwZXIudHMiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQUE7QUEwREE7QUF4REE7OztBQUdBO0FBQ0E7QUFJQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 585:
/* no static exports found */
/* all exports used */
/*!******************************************************************!*\
  !*** ./src/components/worklist/banner/qualityfeedbackbanner.tsx ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar bannerBase = __webpack_require__(/*! ../../utility/banner/bannerbase */ 472);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\n/**\r\n *  Quality feedback banner\r\n */\r\nvar QualityFeedbackBanner = /** @class */ (function (_super) {\r\n    __extends(QualityFeedbackBanner, _super);\r\n    /**\r\n     * Constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function QualityFeedbackBanner(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * On quality feedback banner click\r\n         */\r\n        _this.onQualityFeedbackBannerClickHandler = function (event) {\r\n            event.stopPropagation();\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    QualityFeedbackBanner.prototype.render = function () {\r\n        var _this = this;\r\n        return (React.createElement(\"div\", { onClick: function (e) { return _this.onQualityFeedbackBannerClickHandler(e); }, className: 'message-box text-left float-msg dark-msg info-guide callout marking-approved-msg' },\r\n            React.createElement(\"p\", { className: 'message-body' }, localeStore.instance.TranslateText(this.props.message))));\r\n    };\r\n    return QualityFeedbackBanner;\r\n}(bannerBase));\r\nmodule.exports = QualityFeedbackBanner;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3QvYmFubmVyL3F1YWxpdHlmZWVkYmFja2Jhbm5lci50c3g/OWI0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuLyogdHNsaW50OmVuYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IGJhbm5lckJhc2UgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2Jhbm5lci9iYW5uZXJiYXNlJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9lbnVtcycpO1xyXG5sZXQgY2xhc3NOYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcclxuXHJcbi8qKlxyXG4gKiAgUXVhbGl0eSBmZWVkYmFjayBiYW5uZXJcclxuICovXHJcbmNsYXNzIFF1YWxpdHlGZWVkYmFja0Jhbm5lciBleHRlbmRzIGJhbm5lckJhc2Uge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICogQHBhcmFtIHN0YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBhbnksIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIGNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCk6IEpTWC5FbGVtZW50IHtcclxuXHJcbiAgICAgICAgcmV0dXJuICg8ZGl2IG9uQ2xpY2sgPSB7KGUpID0+IHRoaXMub25RdWFsaXR5RmVlZGJhY2tCYW5uZXJDbGlja0hhbmRsZXIoZSkgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9ICdtZXNzYWdlLWJveCB0ZXh0LWxlZnQgZmxvYXQtbXNnIGRhcmstbXNnIGluZm8tZ3VpZGUgY2FsbG91dCBtYXJraW5nLWFwcHJvdmVkLW1zZyc+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lID0gJ21lc3NhZ2UtYm9keSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCh0aGlzLnByb3BzLm1lc3NhZ2UpIH1cclxuICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj4pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT24gcXVhbGl0eSBmZWVkYmFjayBiYW5uZXIgY2xpY2tcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvblF1YWxpdHlGZWVkYmFja0Jhbm5lckNsaWNrSGFuZGxlciA9IChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9O1xyXG59XHJcblxyXG5leHBvcnQgPSBRdWFsaXR5RmVlZGJhY2tCYW5uZXI7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L2Jhbm5lci9xdWFsaXR5ZmVlZGJhY2tiYW5uZXIudHN4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUFBO0FBaUJBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQXBCQTtBQUVBOztBQUVBO0FBQ0E7QUFBQTtBQUVBO0FBRUE7QUFJQTtBQVFBO0FBQUE7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 586:
/* no static exports found */
/* all exports used */
/*!******************************************************************!*\
  !*** ./src/components/worklist/markcheck/markcheckexaminers.tsx ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar _this = this;\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar stringFormatHelper = __webpack_require__(/*! ../../../utility/stringformat/stringformathelper */ 250);\r\nvar markCheckExaminers = function (props) {\r\n    var that = _this;\r\n    var toRender = props.markCheckExaminers.map(function (examinerData) {\r\n        var examinerIndex = props.markCheckExaminers.indexOf(examinerData) + 1;\r\n        var roleText = 'examiner-roles.' + enums.ExaminerRole[examinerData.roleID];\r\n        var _className = 'profile-info';\r\n        if (examinerData.isSelected) {\r\n            _className = _className + ' active';\r\n        }\r\n        var formattedString = stringFormatHelper.getUserNameFormat().toLowerCase();\r\n        formattedString = formattedString.replace('{initials}', examinerData.toExaminer.initials);\r\n        formattedString = formattedString.replace('{surname}', examinerData.toExaminer.surname);\r\n        return (React.createElement(\"div\", { className: _className, id: 'markCheckRequestedExaminerInfo_' + examinerIndex, onClick: function () { props.onExaminerClick(examinerData.fromExaminerID); } },\r\n            React.createElement(\"a\", { className: 'examiner-info relative clearfix' },\r\n                React.createElement(\"div\", { className: 'user-photo-holder user-medium-icon sprite-icon' }),\r\n                React.createElement(\"div\", { className: 'user-details-holder' },\r\n                    React.createElement(\"div\", { className: 'user-name large-text' }, formattedString),\r\n                    React.createElement(\"div\", { className: 'designation small-text' }, localeStore.instance.TranslateText('generic.' + roleText))))));\r\n    });\r\n    return (React.createElement(\"div\", { className: 'column-left-inner' }, toRender));\r\n};\r\nmodule.exports = markCheckExaminers;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3QvbWFya2NoZWNrL21hcmtjaGVja2V4YW1pbmVycy50c3g/Y2ZlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG5pbXBvcnQgZW51bXMgPSByZXF1aXJlKCcuLi8uLi91dGlsaXR5L2VudW1zJyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuaW1wb3J0IHdvcmtsaXN0QWN0aW9uQ3JlYXRvciA9IHJlcXVpcmUoJy4uLy4uLy4uL2FjdGlvbnMvd29ya2xpc3Qvd29ya2xpc3RhY3Rpb25jcmVhdG9yJyk7XHJcbmltcG9ydCBxaWdTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9xaWdzZWxlY3Rvci9xaWdzdG9yZScpO1xyXG5pbXBvcnQgd29ya2xpc3RTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy93b3JrbGlzdC93b3JrbGlzdHN0b3JlJyk7XHJcbmltcG9ydCBzdHJpbmdGb3JtYXRIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L3N0cmluZ2Zvcm1hdC9zdHJpbmdmb3JtYXRoZWxwZXInKTtcclxuXHJcbmludGVyZmFjZSBNYXJrQ2hlY2tFeGFtaW5lcnNQcm9wcyBleHRlbmRzIExvY2FsZVNlbGVjdGlvbkJhc2UsIFByb3BzQmFzZSB7XHJcblxyXG4gICAgbWFya0NoZWNrRXhhbWluZXJzOiBJbW11dGFibGUuTGlzdDxNYXJraW5nQ2hlY2tFeGFtaW5lckluZm8+O1xyXG4gICAgb25FeGFtaW5lckNsaWNrIDogRnVuY3Rpb247XHJcbn1cclxuXHJcbmNvbnN0IG1hcmtDaGVja0V4YW1pbmVyczogUmVhY3QuU3RhdGVsZXNzQ29tcG9uZW50PE1hcmtDaGVja0V4YW1pbmVyc1Byb3BzPiA9IChwcm9wczogTWFya0NoZWNrRXhhbWluZXJzUHJvcHMpID0+IHtcclxuICAgIGxldCB0aGF0ID0gdGhpcztcclxuXHJcbiAgICBsZXQgdG9SZW5kZXIgPSBwcm9wcy5tYXJrQ2hlY2tFeGFtaW5lcnMubWFwKChleGFtaW5lckRhdGE6IE1hcmtpbmdDaGVja0V4YW1pbmVySW5mbykgPT4ge1xyXG4gICAgICAgIGxldCBleGFtaW5lckluZGV4OiBudW1iZXIgPSBwcm9wcy5tYXJrQ2hlY2tFeGFtaW5lcnMuaW5kZXhPZihleGFtaW5lckRhdGEpICsgMTtcclxuICAgICAgICBsZXQgcm9sZVRleHQgPSAnZXhhbWluZXItcm9sZXMuJyArIGVudW1zLkV4YW1pbmVyUm9sZVtleGFtaW5lckRhdGEucm9sZUlEXTtcclxuICAgICAgICBsZXQgX2NsYXNzTmFtZTogc3RyaW5nID0gJ3Byb2ZpbGUtaW5mbyc7XHJcbiAgICAgICAgaWYgKGV4YW1pbmVyRGF0YS5pc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgIF9jbGFzc05hbWUgPSBfY2xhc3NOYW1lICsgJyBhY3RpdmUnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGZvcm1hdHRlZFN0cmluZzogc3RyaW5nID0gc3RyaW5nRm9ybWF0SGVscGVyLmdldFVzZXJOYW1lRm9ybWF0KCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSBmb3JtYXR0ZWRTdHJpbmcucmVwbGFjZSgne2luaXRpYWxzfScsIGV4YW1pbmVyRGF0YS50b0V4YW1pbmVyLmluaXRpYWxzKTtcclxuICAgICAgICBmb3JtYXR0ZWRTdHJpbmcgPSBmb3JtYXR0ZWRTdHJpbmcucmVwbGFjZSgne3N1cm5hbWV9JywgZXhhbWluZXJEYXRhLnRvRXhhbWluZXIuc3VybmFtZSk7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtfY2xhc3NOYW1lfVxyXG4gICAgICAgICAgICAgICAgaWQ9eydtYXJrQ2hlY2tSZXF1ZXN0ZWRFeGFtaW5lckluZm9fJyArIGV4YW1pbmVySW5kZXh9XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7IHByb3BzLm9uRXhhbWluZXJDbGljayhleGFtaW5lckRhdGEuZnJvbUV4YW1pbmVySUQpOyB9fT5cclxuICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9J2V4YW1pbmVyLWluZm8gcmVsYXRpdmUgY2xlYXJmaXgnPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3VzZXItcGhvdG8taG9sZGVyIHVzZXItbWVkaXVtLWljb24gc3ByaXRlLWljb24nPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3VzZXItZGV0YWlscy1ob2xkZXInPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndXNlci1uYW1lIGxhcmdlLXRleHQnPntmb3JtYXR0ZWRTdHJpbmd9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdkZXNpZ25hdGlvbiBzbWFsbC10ZXh0Jz57bG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnZ2VuZXJpYy4nICsgcm9sZVRleHQpfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sdW1uLWxlZnQtaW5uZXInPlxyXG4gICAgICAgICAgICAgICAgeyB0b1JlbmRlciB9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuZXhwb3J0ID0gbWFya0NoZWNrRXhhbWluZXJzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy93b3JrbGlzdC9tYXJrY2hlY2svbWFya2NoZWNrZXhhbWluZXJzLnRzeCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBSUE7QUFRQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUVBO0FBS0E7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 588:
/* no static exports found */
/* all exports used */
/*!******************************************************************************!*\
  !*** ./src/components/worklist/markerinformation/markerinformationpanel.tsx ***!
  \******************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar SupervisorInformation = __webpack_require__(/*! ./supervisorinformation */ 1221);\r\nvar PersonalInformation = __webpack_require__(/*! ./personalinformation */ 1220);\r\nvar ExaminerStateChangeButton = __webpack_require__(/*! ./examinerstatechangebutton */ 1215);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar configurablecharacteristicshelper = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\nvar configurablecharacteristicsnames = __webpack_require__(/*! ../../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar targetsummarystore = __webpack_require__(/*! ../../../stores/worklist/targetsummarystore */ 305);\r\nvar MarkingCheckButton = __webpack_require__(/*! ./markingcheckbutton */ 1217);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar helpExaminersDataHelper = __webpack_require__(/*! ../../../utility/teammanagement/helpers/helpexaminersdatahelper */ 486);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar markingCheckActionCreator = __webpack_require__(/*! ../../../actions/markingcheck/markingcheckactioncreator */ 311);\r\nvar responseSearchHelper = __webpack_require__(/*! ../../../utility/responsesearch/responsesearchhelper */ 321);\r\nvar teamManagementStore = __webpack_require__(/*! ../../../stores/teammanagement/teammanagementstore */ 245);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar warningMessageStore = __webpack_require__(/*! ../../../stores/teammanagement/warningmessagestore */ 327);\r\nvar applicationStore = __webpack_require__(/*! ../../../stores/applicationoffline/applicationstore */ 247);\r\n/**\r\n * React class for marker information panel.\r\n */\r\nvar MarkerInformationPanel = /** @class */ (function (_super) {\r\n    __extends(MarkerInformationPanel, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function MarkerInformationPanel(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        /**\r\n         * Change Examiner Change Status Button In Progress Status\r\n         */\r\n        _this.resetExaminerChangeStatusButtonBusyStatus = function () {\r\n            _this.isExaminerChangeStatusInProgress = false;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Set the examiner state change button as busy\r\n         */\r\n        _this.setExaminerStateChangeButtonAsBusy = function () {\r\n            _this.isExaminerChangeStatusInProgress = true;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * Rerender the marking check button\r\n         */\r\n        _this.renderMarkingCheckDetails = function () {\r\n            _this.doDisableRequestMakingCheckButton = false;\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * getting mark check info\r\n         */\r\n        _this.getMarkCheckInfo = function () {\r\n            // fix to ensure the RequestMakingCheckButton doesn't stay disabled when going offline\r\n            _this.doDisableRequestMakingCheckButton = true;\r\n            markingCheckActionCreator.getMarkingCheckInfo(responseSearchHelper.isMarkingCheckAvailable(), qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId);\r\n        };\r\n        /**\r\n         * Actions to be done when marking check button is clicked\r\n         */\r\n        _this.onMarkingCheckButtonClick = function () {\r\n            markingCheckActionCreator.getMarkingCheckRecipients(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId);\r\n        };\r\n        /**\r\n         * Actions to be done when online status changed\r\n         */\r\n        _this.onOnlineStatusChanged = function () {\r\n            _this.isExaminerChangeStatusInProgress = false;\r\n        };\r\n        _this.helpExaminersDataHelper = new helpExaminersDataHelper();\r\n        _this.getMarkCheckInfo = _this.getMarkCheckInfo.bind(_this);\r\n        _this.renderMarkingCheckDetails = _this.renderMarkingCheckDetails.bind(_this);\r\n        _this.doDisableRequestMakingCheckButton = false;\r\n        _this.isExaminerChangeStatusInProgress = false;\r\n        _this.state = { renderedOn: Date.now() };\r\n        return _this;\r\n    }\r\n    /**\r\n     * This function gets invoked when the component is about to be mounted\r\n     */\r\n    MarkerInformationPanel.prototype.componentDidMount = function () {\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.MARKING_CHECK_STATUS_UPDATED, this.renderMarkingCheckDetails);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.DO_GET_MARKING_CHECK_INFO, this.getMarkCheckInfo);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.TOGGLE_REQUEST_MARKING_CHECK_BUTTON_EVENT, this.renderMarkingCheckDetails);\r\n        applicationStore.instance.addListener(applicationStore.ApplicationStore.ONLINE_STATUS_UPDATED_EVENT, this.onOnlineStatusChanged);\r\n        if (markerOperationModeFactory && markerOperationModeFactory.operationMode.isTeamManagementMode) {\r\n            teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.SET_EXAMINER_CHANGE_STATUS_BUTTON_AS_BUSY, this.setExaminerStateChangeButtonAsBusy);\r\n            teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.CHANGE_EXAMINER_STATUS_UPDATED, this.resetExaminerChangeStatusButtonBusyStatus);\r\n            teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.PROVIDE_SECOND_STANDARDISATION_UPDATED, this.resetExaminerChangeStatusButtonBusyStatus);\r\n            teamManagementStore.instance.addListener(teamManagementStore.TeamManagementStore.APPROVAL_MANAGEMENT_ACTION_EXECUTED, this.resetExaminerChangeStatusButtonBusyStatus);\r\n            warningMessageStore.instance.addListener(warningMessageStore.WarningMessageStore.WARNING_MESSAGE_EVENT, this.resetExaminerChangeStatusButtonBusyStatus);\r\n        }\r\n    };\r\n    /**\r\n     * This function gets invoked when the component is about to be unmounted\r\n     */\r\n    MarkerInformationPanel.prototype.componentWillUnmount = function () {\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.MARKING_CHECK_STATUS_UPDATED, this.renderMarkingCheckDetails);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.DO_GET_MARKING_CHECK_INFO, this.getMarkCheckInfo);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.TOGGLE_REQUEST_MARKING_CHECK_BUTTON_EVENT, this.renderMarkingCheckDetails);\r\n        applicationStore.instance.removeListener(applicationStore.ApplicationStore.ONLINE_STATUS_UPDATED_EVENT, this.onOnlineStatusChanged);\r\n        if (markerOperationModeFactory && markerOperationModeFactory.operationMode.isTeamManagementMode) {\r\n            teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.SET_EXAMINER_CHANGE_STATUS_BUTTON_AS_BUSY, this.setExaminerStateChangeButtonAsBusy);\r\n            teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.CHANGE_EXAMINER_STATUS_UPDATED, this.resetExaminerChangeStatusButtonBusyStatus);\r\n            teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.PROVIDE_SECOND_STANDARDISATION_UPDATED, this.resetExaminerChangeStatusButtonBusyStatus);\r\n            teamManagementStore.instance.removeListener(teamManagementStore.TeamManagementStore.APPROVAL_MANAGEMENT_ACTION_EXECUTED, this.resetExaminerChangeStatusButtonBusyStatus);\r\n            warningMessageStore.instance.removeListener(warningMessageStore.WarningMessageStore.WARNING_MESSAGE_EVENT, this.resetExaminerChangeStatusButtonBusyStatus);\r\n        }\r\n    };\r\n    /**\r\n     * Render component\r\n     */\r\n    MarkerInformationPanel.prototype.render = function () {\r\n        if (this.props.markerInformation == null) {\r\n            return (React.createElement(\"div\", null,\r\n                React.createElement(\"span\", { className: 'loader darker text-middle' },\r\n                    React.createElement(\"span\", { className: 'dot' }),\r\n                    React.createElement(\"span\", { className: 'dot' }),\r\n                    React.createElement(\"span\", { className: 'dot' }))));\r\n        }\r\n        var markSchemeGroupId = qigStore.instance.selectedQIGForMarkerOperation ?\r\n            qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId : 0;\r\n        this.isSeniorExaminerPoolEnabledCC = configurablecharacteristicshelper.getCharacteristicValue(configurablecharacteristicsnames.SeniorExaminerPool, markSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        var isChangeStatusButtonDisabled;\r\n        if (this.props.isTeamManagementMode && !this.isSeniorExaminerPoolEnabledCC) {\r\n            var isSubordinateApproved = (this.props.markerInformation.approvalStatus === enums.ExaminerApproval.Approved);\r\n            // Disable change status button if required targets are not met.\r\n            isChangeStatusButtonDisabled = !this.isRequiredTargetsMetForChangeStatus();\r\n            // If subordinate examiner is approved, the targets need not be considered for enabling the button\r\n            isChangeStatusButtonDisabled = isSubordinateApproved ? false : isChangeStatusButtonDisabled;\r\n        }\r\n        var examinerStateChangeButton;\r\n        if (!this.isSeniorExaminerPoolEnabledCC &&\r\n            this.props.isTeamManagementMode &&\r\n            this.props.markerInformation.currentExaminerApprovalStatus === enums.ExaminerApproval.Approved) {\r\n            examinerStateChangeButton = React.createElement(ExaminerStateChangeButton, { id: 'change_examiner_status', key: 'key_change_examiner_status', showExaminerStateChangePopup: this.props.showExaminerStateChangePopup, selectedLanguage: this.props.selectedLanguage, isDisabled: (this.isExaminerChangeStatusInProgress || isChangeStatusButtonDisabled) &&\r\n                    applicationStore.instance.isOnline });\r\n        }\r\n        // If senior examiner pool is enabled then invoke a method to get the SEP actions.\r\n        if (this.isSeniorExaminerPoolEnabledCC &&\r\n            this.props.isTeamManagementMode &&\r\n            qigStore.instance.selectedQIGForMarkerOperation) {\r\n            this.sepActions = this.helpExaminersDataHelper.\r\n                getSEPActions(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId);\r\n            if (this.sepActions) {\r\n                // We dont want to include the Message action to show the Change status button\r\n                var sendMessageIndex = this.sepActions.indexOf(enums.SEPAction.SendMessage);\r\n                if (sendMessageIndex > -1) {\r\n                    this.sepActions.splice(sendMessageIndex, 1);\r\n                }\r\n                if (this.sepActions.length > 0) {\r\n                    examinerStateChangeButton = React.createElement(ExaminerStateChangeButton, { id: 'change_examiner_status', key: 'key_change_examiner_status', showExaminerStateChangePopup: this.props.showExaminerStateChangePopup, selectedLanguage: this.props.selectedLanguage, isDisabled: this.isExaminerChangeStatusInProgress && applicationStore.instance.isOnline });\r\n                }\r\n            }\r\n        }\r\n        var markingCheckButton = this.isMarkingCheckAvialable ?\r\n            React.createElement(MarkingCheckButton, { id: 'marking_check_button', key: 'marking_check_button', disable: this.doDisableRequestMakingCheckButton, onMarkingCheckButtonClick: this.onMarkingCheckButtonClick, selectedLanguage: this.props.selectedLanguage }) : null;\r\n        var supervisor = null;\r\n        // Hide supervisor information from lefthand side if the current user is a Admin Remarker.\r\n        if (this.props.markerInformation.markerRoleID !== enums.ExaminerRole.adminRemarker) {\r\n            supervisor = (React.createElement(SupervisorInformation, { supervisorName: this.props.markerInformation.formattedSupervisorName, selectedLanguage: this.props.selectedLanguage, isSupervisorOnline: this.props.markerInformation.supervisorLoginStatus, supervisorLogoutDiffInMinutes: this.props.markerInformation.supervisorLogoutDiffInMinute, showMessagePopup: this.props.showMessagePopup, isTeamManagementMode: this.props.isTeamManagementMode, showMessageLink: this.props.showMessageLink }));\r\n        }\r\n        return (React.createElement(\"div\", { className: 'profile-info' },\r\n            supervisor,\r\n            React.createElement(PersonalInformation, { examinerName: this.props.markerInformation.formattedExaminerName, approvalStatus: this.props.markerInformation.approvalStatus, qualityFeedbackStatus: this.props.markerInformation.hasQualityFeedbackOutstanding, examinerRole: this.props.markerInformation.markerRoleID, selectedLanguage: this.props.selectedLanguage, isTeamManagementMode: this.props.isTeamManagementMode, showMessagePopup: this.props.showMessagePopup, markingCheckStatus: this.getMarkingCheckStatus() }),\r\n            examinerStateChangeButton,\r\n            markingCheckButton));\r\n    };\r\n    Object.defineProperty(MarkerInformationPanel.prototype, \"isMarkingCheckAvialable\", {\r\n        /**\r\n         * gets a value indicating whether marking check button is available\r\n         */\r\n        get: function () {\r\n            // worklistStore.instance.isMarkingCheckAvailable will be true\r\n            // only when all the required conditions are met and a gateway call\r\n            // from reponsearchhelper.ts : openQIGDetails() updates the worklist store.\r\n            // this value will be reset when a new QIG is selected.\r\n            return worklistStore.instance.isMarkingCheckAvailable;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a value indicating the examiner marking check status\r\n     */\r\n    MarkerInformationPanel.prototype.getMarkingCheckStatus = function () {\r\n        if (this.isMarkingCheckAvialable) {\r\n            return localeStore.instance.TranslateText('marking.worklist.marking-check-status.' +\r\n                enums.MarkingCheckStatus[worklistStore.instance.markingCheckStatus]);\r\n        }\r\n    };\r\n    /**\r\n     *  This will check whether the required targets are met so that the change status button will be enabled.\r\n     */\r\n    MarkerInformationPanel.prototype.isRequiredTargetsMetForChangeStatus = function () {\r\n        // All Standardisation / 2nd Standardisation / STM Standardisation (in Submitted-Closed)\r\n        // need to be 'Set as Reviewed' for 'Change status' button to be enabled.\r\n        var isMarkingTargetReviewed = true;\r\n        this.markingTargetsSummary = targetsummarystore.instance.getExaminerMarkingTargetProgress();\r\n        if (this.markingTargetsSummary) {\r\n            this.markingTargetsSummary.some(function (summary) {\r\n                if (summary.markingModeID === enums.MarkingMode.Approval ||\r\n                    summary.markingModeID === enums.MarkingMode.ES_TeamApproval) {\r\n                    isMarkingTargetReviewed =\r\n                        (summary.closedResponsesCount >= summary.maximumMarkingLimit &&\r\n                            summary.reviewedResponsesCount === summary.closedResponsesCount);\r\n                    // If atleast one target is not reviewed exit the loop.\r\n                    if (!isMarkingTargetReviewed) {\r\n                        return true;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        // Finally return the status.\r\n        return isMarkingTargetReviewed;\r\n    };\r\n    return MarkerInformationPanel;\r\n}(pureRenderComponent));\r\nmodule.exports = MarkerInformationPanel;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 589:
/* no static exports found */
/* all exports used */
/*!*************************************************************************!*\
  !*** ./src/components/worklist/markerinformation/markingcheckpopup.tsx ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar htmlUtilities = __webpack_require__(/*! ../../../utility/generic/htmlutilities */ 243);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../../actions/messaging/messagingactioncreator */ 268);\r\nvar markingCheckActionCreator = __webpack_require__(/*! ../../../actions/markingcheck/markingcheckactioncreator */ 311);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar popupDisplayActionCreator = __webpack_require__(/*! ../../../actions/popupdisplay/popupdisplayactioncreator */ 328);\r\nvar constants = __webpack_require__(/*! ../../utility/constants */ 241);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar applicationStore = __webpack_require__(/*! ../../../stores/applicationoffline/applicationstore */ 247);\r\nvar MarkingCheckPopup = /** @class */ (function (_super) {\r\n    __extends(MarkingCheckPopup, _super);\r\n    /**\r\n     * Constructor MarkingCheckPopup\r\n     * @param markingCheckProps\r\n     * @param markingCheckstate\r\n     */\r\n    function MarkingCheckPopup(markingCheckProps, markingCheckstate) {\r\n        var _this = _super.call(this, markingCheckProps, markingCheckstate) || this;\r\n        /**\r\n         * Gets the marker label to be shown in marking check popup\r\n         * @param marker\r\n         */\r\n        _this.getMarkerLabel = function (marker) {\r\n            var labelText = marker.fullname;\r\n            if (!marker.isEligibleForMarkingCheck) {\r\n                if (marker.approvalStatus === enums.ExaminerApproval.Suspended && marker.hasActiveMarkingCheck) {\r\n                    labelText += ' (' + localeStore.instance.TranslateText('marking.worklist.marking-check-status.Suspended') +\r\n                        '-' + localeStore.instance.TranslateText('marking.worklist.marking-check-status.CheckRequested') + ')';\r\n                }\r\n                else if (marker.approvalStatus === enums.ExaminerApproval.Suspended ||\r\n                    marker.approvalStatus === enums.ExaminerApproval.NotApproved) {\r\n                    labelText += ' (' + localeStore.instance.TranslateText('marking.worklist.marking-check-status.' +\r\n                        enums.ExaminerApproval[marker.approvalStatus]) + ')';\r\n                }\r\n            }\r\n            else if (marker.hasActiveMarkingCheck) {\r\n                labelText += ' (' + localeStore.instance.TranslateText('marking.worklist.marking-check-status.CheckRequested') + ')';\r\n            }\r\n            return labelText;\r\n        };\r\n        /**\r\n         * Toggles the marking check popup\r\n         */\r\n        _this.toggleMarkingCheckPopup = function () {\r\n            _this.setState({ isMarkingCheckPopupVisible: !_this.state.isMarkingCheckPopupVisible });\r\n        };\r\n        /**\r\n         * Initiates the popup with latest data\r\n         */\r\n        _this.markingCheckButtonClicked = function () {\r\n            _this.markingCheckToList = new Array();\r\n            _this.recipientList = worklistStore.instance.markingCheckRecipientList;\r\n            if (_this.recipientList && _this.recipientList.count() > 0) {\r\n                _this.toggleMarkingCheckPopup();\r\n            }\r\n            else {\r\n                markingCheckActionCreator.toggleRequestMarkingCheckButton(false);\r\n                if (applicationStore.instance.isOnline) {\r\n                    popupDisplayActionCreator.popUpDisplay(enums.PopUpType.NoMarkingCheckRequestPossible, enums.PopUpActionType.Show, enums.SaveAndNavigate.none, { popupContent: '' });\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Indicates whether the OK button is enabled\r\n         */\r\n        _this.isOkButtonEnabled = function () {\r\n            return _this.recipientList ?\r\n                _this.recipientList.some(function (marker) { return marker.isChecked; }) : false;\r\n        };\r\n        /**\r\n         * On Popup ok click\r\n         */\r\n        _this.onCheckBoxClick = function (examinerId, currentState) {\r\n            _this.recipientList.find(function (marker) {\r\n                return marker.examinerId === examinerId;\r\n            }).isChecked = !currentState;\r\n            _this.setState({ reRenderPopup: Date.now() });\r\n        };\r\n        /**\r\n         * On Popup ok click\r\n         */\r\n        _this.okClick = function () {\r\n            _this.toggleMarkingCheckPopup();\r\n            var that = _this;\r\n            var systemMessagePriority = constants.SYSTEM_MESSAGE;\r\n            _this.recipientList.map(function (marker) {\r\n                if (marker.isChecked) {\r\n                    that.markingCheckToList.push(marker.examinerId);\r\n                }\r\n            });\r\n            var questionPaperId = qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId;\r\n            var markSchemeGroupId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n            messagingActionCreator.sendExaminerMessage(_this.markingCheckToList, '', '', questionPaperId, null, enums.MessagePriority.Important, markSchemeGroupId, null, -1, -1, false, null, enums.SystemMessage.CheckMyMarks);\r\n            messagingActionCreator.sendExaminerMessage(_this.markingCheckToList, '', '', questionPaperId, null, systemMessagePriority, markSchemeGroupId, null, -1, -1, false, null, enums.SystemMessage.CheckMyMarks);\r\n        };\r\n        /**\r\n         * On Popup cancel click\r\n         */\r\n        _this.cancelClick = function () {\r\n            _this.toggleMarkingCheckPopup();\r\n            markingCheckActionCreator.toggleRequestMarkingCheckButton(false);\r\n        };\r\n        _this.state = {\r\n            isMarkingCheckPopupVisible: false,\r\n            isOkButtonEnabled: false,\r\n            reRenderPopup: 0\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Component did mount\r\n     */\r\n    MarkingCheckPopup.prototype.componentDidMount = function () {\r\n        this.addEventListeners();\r\n    };\r\n    /**\r\n     * Component will unmount\r\n     */\r\n    MarkingCheckPopup.prototype.componentWillUnmount = function () {\r\n        this.removeEventListeners();\r\n    };\r\n    /**\r\n     * Component render\r\n     */\r\n    MarkingCheckPopup.prototype.render = function () {\r\n        var that = this;\r\n        var markCheckButtonOffset;\r\n        var markingCheckButton = htmlUtilities.getElementById('marking_check_button_id');\r\n        if (markingCheckButton) {\r\n            markCheckButtonOffset = markingCheckButton.getBoundingClientRect().top;\r\n        }\r\n        var popupContentHeight = {\r\n            maxHeight: 'calc(100vh - ' + markCheckButtonOffset + 'px - 70px)' // 70px is the border padding\r\n        };\r\n        var popupWrapTop = {\r\n            top: markCheckButtonOffset + 'px'\r\n        };\r\n        var PE = null;\r\n        if (this.recipientList) {\r\n            var pe_1 = this.recipientList.filter(function (marker) { return marker.isPrincipalExaminer; }).toArray();\r\n            if (pe_1 && pe_1.length > 0) {\r\n                PE = (React.createElement(\"div\", { className: 'approval-options' },\r\n                    React.createElement(\"input\", { id: 'examiner_' + pe_1[0].examinerId, className: 'checkbox show-remark', type: 'checkbox', disabled: pe_1[0].hasActiveMarkingCheck || !pe_1[0].isEligibleForMarkingCheck, checked: pe_1[0].hasActiveMarkingCheck || pe_1[0].isChecked, onChange: function () { that.onCheckBoxClick(pe_1[0].examinerId, pe_1[0].isChecked); } }),\r\n                    React.createElement(\"label\", { className: 'remark-label', htmlFor: 'examiner_' + pe_1[0].examinerId }, that.getMarkerLabel(pe_1[0]))));\r\n            }\r\n        }\r\n        var MARKERS = this.recipientList ?\r\n            this.recipientList.map(function (marker) {\r\n                if (!marker.isPrincipalExaminer) {\r\n                    return (React.createElement(\"div\", { className: 'approval-options' },\r\n                        React.createElement(\"input\", { id: 'examiner_' + marker.examinerId, className: 'checkbox show-remark', type: 'checkbox', disabled: marker.hasActiveMarkingCheck || !marker.isEligibleForMarkingCheck, checked: marker.hasActiveMarkingCheck || marker.isChecked, onChange: function () { that.onCheckBoxClick(marker.examinerId, marker.isChecked); } }),\r\n                        React.createElement(\"label\", { className: 'remark-label', htmlFor: 'examiner_' + marker.examinerId }, that.getMarkerLabel(marker))));\r\n                }\r\n            }) : null;\r\n        return (React.createElement(\"div\", { id: 'RequestMarkingCheckPopupOverlay', className: classNames('popup small request-marking-check popup-overlay', { 'open': this.state.isMarkingCheckPopupVisible }), role: 'dialog' },\r\n            React.createElement(\"div\", { className: 'popup-wrap', id: 'RequestMarkingCheckPopupId', style: popupWrapTop },\r\n                React.createElement(\"div\", { id: 'popup1Desc', className: 'popup-content', style: popupContentHeight },\r\n                    React.createElement(\"p\", { id: 'despt_id', className: 'despt' }, localeStore.instance.TranslateText('marking.worklist.request-marking-check-menu.header')),\r\n                    PE,\r\n                    MARKERS),\r\n                React.createElement(\"div\", { className: 'popup-footer text-right' },\r\n                    React.createElement(\"button\", { className: 'button rounded close-button', title: 'Cancel', onClick: this.cancelClick }, localeStore.instance.TranslateText('generic.user-menu.profile-section.cancel-email-button')),\r\n                    React.createElement(\"button\", { className: 'button primary rounded', title: 'Ok', onClick: this.okClick, disabled: !this.isOkButtonEnabled() }, localeStore.instance.TranslateText('team-management.examiner-worklist.change-status.ok-button'))))));\r\n    };\r\n    /**\r\n     * Add all event listeners here\r\n     */\r\n    MarkingCheckPopup.prototype.addEventListeners = function () {\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.MARKING_CHECK_RECIPIENT_LIST_UPDATED, this.markingCheckButtonClicked);\r\n    };\r\n    /**\r\n     * Remove all event listeners here.\r\n     */\r\n    MarkingCheckPopup.prototype.removeEventListeners = function () {\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.MARKING_CHECK_RECIPIENT_LIST_UPDATED, this.markingCheckButtonClicked);\r\n    };\r\n    return MarkingCheckPopup;\r\n}(pureRenderComponent));\r\nmodule.exports = MarkingCheckPopup;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 590:
/* no static exports found */
/* all exports used */
/*!***********************************************************************!*\
  !*** ./src/components/worklist/markerinformation/sendmessagelink.tsx ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\n/**\r\n * Send Message Link and its click event.\r\n * @param props\r\n */\r\nvar sendMessageLink = function (props) {\r\n    return (React.createElement(\"div\", { className: 'send-message-holder small-text', id: 'sendMessage' },\r\n        React.createElement(\"a\", { href: 'javascript:void(0)', title: localeStore.instance.TranslateText('marking.worklist.left-panel.send-message'), className: 'dark-link', onClick: function () { props.onClick(); } },\r\n            React.createElement(\"span\", { className: 'sprite-icon message-small-icon' }),\r\n            React.createElement(\"span\", { id: 'supervisor_message', className: 'padding-left-5' }, localeStore.instance.TranslateText('marking.worklist.left-panel.send-message')))));\r\n};\r\nmodule.exports = sendMessageLink;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3QvbWFya2VyaW5mb3JtYXRpb24vc2VuZG1lc3NhZ2VsaW5rLnRzeD84ZTY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbmltcG9ydCBsb2NhbGVTdG9yZSA9IHJlcXVpcmUoJy4uLy4uLy4uL3N0b3Jlcy9sb2NhbGUvbG9jYWxlc3RvcmUnKTtcclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOmNsYXNzLW5hbWUgKi9cclxuaW50ZXJmYWNlIHNlbmRNZXNzYWdlTGlua1Byb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIG9uQ2xpY2s6IEZ1bmN0aW9uO1xyXG59XHJcblxyXG4vKipcclxuICogU2VuZCBNZXNzYWdlIExpbmsgYW5kIGl0cyBjbGljayBldmVudC5cclxuICogQHBhcmFtIHByb3BzXHJcbiAqL1xyXG5jb25zdCBzZW5kTWVzc2FnZUxpbms6IFJlYWN0LlN0YXRlbGVzc0NvbXBvbmVudDxzZW5kTWVzc2FnZUxpbmtQcm9wcz4gPSAocHJvcHM6IHNlbmRNZXNzYWdlTGlua1Byb3BzKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdzZW5kLW1lc3NhZ2UtaG9sZGVyIHNtYWxsLXRleHQnIGlkPSdzZW5kTWVzc2FnZSc+XHJcbiAgICAgICAgICAgIDxhIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKScgdGl0bGU9e2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QubGVmdC1wYW5lbC5zZW5kLW1lc3NhZ2UnKVxyXG4gICAgICAgICAgICB9IGNsYXNzTmFtZT0nZGFyay1saW5rJyBvbkNsaWNrPXsoKSA9PiB7IHByb3BzLm9uQ2xpY2soKTsgfX0+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J3Nwcml0ZS1pY29uIG1lc3NhZ2Utc21hbGwtaWNvbicgLz5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGlkPSdzdXBlcnZpc29yX21lc3NhZ2UnIGNsYXNzTmFtZT0ncGFkZGluZy1sZWZ0LTUnPlxyXG4gICAgICAgICAgICAgICAgICAgIHtsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KCdtYXJraW5nLndvcmtsaXN0LmxlZnQtcGFuZWwuc2VuZC1tZXNzYWdlJyl9XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgPSBzZW5kTWVzc2FnZUxpbms7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9zb3VyY2UtbWFwLWxvYWRlciEuL3NyYy9jb21wb25lbnRzL3dvcmtsaXN0L21hcmtlcmluZm9ybWF0aW9uL3NlbmRtZXNzYWdlbGluay50c3giXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBT0E7OztBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQU1BO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 591:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/worklist/shared/graceperiodtime.tsx ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n    React component for time to end the grace period\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar localeHelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\nvar stringHelper = __webpack_require__(/*! ../../../utility/generic/stringhelper */ 254);\r\n/**\r\n * React component class for time to end the grace period\r\n */\r\nvar GracePeriodTime = /** @class */ (function (_super) {\r\n    __extends(GracePeriodTime, _super);\r\n    /**\r\n     * Constructor for Grace period time\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function GracePeriodTime(props, state) {\r\n        return _super.call(this, props, state) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    GracePeriodTime.prototype.render = function () {\r\n        var elementId = 'dtGrace_' + this.props.id;\r\n        var resourceString = this.props.timeToEndOfGracePeriod === 1 ? 'marking.worklist.response-data.hour-to-end-of-grace' :\r\n            'marking.worklist.response-data.hours-to-end-of-grace';\r\n        var remaingPeriod = stringHelper.format(localeStore.instance.TranslateText(resourceString), [localeHelper.toLocaleString(this.props.timeToEndOfGracePeriod)]);\r\n        remaingPeriod = (this.props.isTileView) ? remaingPeriod +\r\n            localeStore.instance.TranslateText('marking.worklist.tile-view-labels.to-end-of-grace-period') : remaingPeriod;\r\n        return ((this.props.isTileView) ?\r\n            React.createElement(\"div\", { id: elementId, className: 'small-text ' }, remaingPeriod)\r\n            :\r\n                React.createElement(\"div\", { className: ' wl-grace-period' },\r\n                    React.createElement(\"span\", { id: elementId, className: 'small-text' }, remaingPeriod)));\r\n    };\r\n    return GracePeriodTime;\r\n}(pureRenderComponent));\r\nmodule.exports = GracePeriodTime;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2dyYWNlcGVyaW9kdGltZS50c3g/NmU5MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gICAgUmVhY3QgY29tcG9uZW50IGZvciB0aW1lIHRvIGVuZCB0aGUgZ3JhY2UgcGVyaW9kXHJcbiovXHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgbG9jYWxlSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9sb2NhbGUvbG9jYWxlaGVscGVyJyk7XHJcbmltcG9ydCBzdHJpbmdIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2dlbmVyaWMvc3RyaW5naGVscGVyJyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiB0aW1lIHRvIGVuZCB0aGUgZ3JhY2UgcGVyaW9kXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgdGltZVRvRW5kT2ZHcmFjZVBlcmlvZDogbnVtYmVyO1xyXG4gICAgaXNUaWxlVmlldz86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWFjdCBjb21wb25lbnQgY2xhc3MgZm9yIHRpbWUgdG8gZW5kIHRoZSBncmFjZSBwZXJpb2RcclxuICovXHJcbmNsYXNzIEdyYWNlUGVyaW9kVGltZSBleHRlbmRzIHB1cmVSZW5kZXJDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3IgZm9yIEdyYWNlIHBlcmlvZCB0aW1lXHJcbiAgICAgKiBAcGFyYW0gcHJvcHNcclxuICAgICAqIEBwYXJhbSBzdGF0ZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMsIHN0YXRlOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIGNvbXBvbmVudFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVuZGVyKCkge1xyXG4gICAgICAgIGxldCBlbGVtZW50SWQgPSAnZHRHcmFjZV8nICsgdGhpcy5wcm9wcy5pZDtcclxuICAgICAgICBsZXQgcmVzb3VyY2VTdHJpbmc6IHN0cmluZyA9IHRoaXMucHJvcHMudGltZVRvRW5kT2ZHcmFjZVBlcmlvZCA9PT0gMSA/ICdtYXJraW5nLndvcmtsaXN0LnJlc3BvbnNlLWRhdGEuaG91ci10by1lbmQtb2YtZ3JhY2UnIDpcclxuICAgICAgICAgICAgJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5ob3Vycy10by1lbmQtb2YtZ3JhY2UnO1xyXG5cclxuICAgICAgICBsZXQgcmVtYWluZ1BlcmlvZCA9IHN0cmluZ0hlbHBlci5mb3JtYXQoXHJcbiAgICAgICAgICAgIGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQocmVzb3VyY2VTdHJpbmcpLFxyXG4gICAgICAgICAgICBbbG9jYWxlSGVscGVyLnRvTG9jYWxlU3RyaW5nKHRoaXMucHJvcHMudGltZVRvRW5kT2ZHcmFjZVBlcmlvZCldXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZW1haW5nUGVyaW9kID0gKHRoaXMucHJvcHMuaXNUaWxlVmlldykgPyByZW1haW5nUGVyaW9kICtcclxuICAgICAgICAgICAgbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC50aWxlLXZpZXctbGFiZWxzLnRvLWVuZC1vZi1ncmFjZS1wZXJpb2QnKSA6IHJlbWFpbmdQZXJpb2Q7XHJcbiAgICAgICAgcmV0dXJuIChcclxuXHJcbiAgICAgICAgICAgICh0aGlzLnByb3BzLmlzVGlsZVZpZXcpID9cclxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9IHsgZWxlbWVudElkIH0gY2xhc3NOYW1lPSdzbWFsbC10ZXh0ICc+e3JlbWFpbmdQZXJpb2R9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nIHdsLWdyYWNlLXBlcmlvZCc+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9IHsgZWxlbWVudElkIH0gY2xhc3NOYW1lPSdzbWFsbC10ZXh0Jz57cmVtYWluZ1BlcmlvZH08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCA9IEdyYWNlUGVyaW9kVGltZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL2dyYWNlcGVyaW9kdGltZS50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVBOztBQUVBO0FBQ0E7QUFBQTtBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),

/***/ 592:
/* no static exports found */
/* all exports used */
/*!************************************************************!*\
  !*** ./src/components/worklist/shared/marksdifference.tsx ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar PureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar constants = __webpack_require__(/*! ../../utility/constants */ 241);\r\nvar MarksDifference = /** @class */ (function (_super) {\r\n    __extends(MarksDifference, _super);\r\n    /**\r\n     * Constructor for MarksDifference\r\n     * @param props\r\n     */\r\n    function MarksDifference(props) {\r\n        return _super.call(this, props, null) || this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    MarksDifference.prototype.render = function () {\r\n        if (this.props.isTileView === false) {\r\n            return (React.createElement(\"div\", { id: this.props.id, className: this.props.className, title: localeStore.instance.TranslateText(this.props.title) },\r\n                React.createElement(\"span\", { className: 'dim-text txt-val' }, this.getMarkDifferenceValueInStringFormat())));\r\n        }\r\n        else {\r\n            return (React.createElement(\"div\", { id: this.props.id, className: this.props.className, title: localeStore.instance.TranslateText(this.props.title) },\r\n                React.createElement(\"span\", { className: 'ex-dim-text txt-label' },\r\n                    localeStore.instance.TranslateText(this.props.marksDifferenceText),\r\n                    \" \"),\r\n                React.createElement(\"span\", { className: 'dim-text txt-val' }, this.getMarkDifferenceValueInStringFormat())));\r\n        }\r\n    };\r\n    /**\r\n     * Get mark difference value in string format.\r\n     */\r\n    MarksDifference.prototype.getMarkDifferenceValueInStringFormat = function () {\r\n        var displayMarkDifferenceValue = '';\r\n        var markDifferenceValue = this.props.marksDifference !== undefined ? this.props.marksDifference : 0;\r\n        switch (this.props.marksDifferenceType) {\r\n            case enums.MarksDifferenceType.TotalMarksDifference:\r\n                displayMarkDifferenceValue = this.props.marksDifference > 0\r\n                    ? (constants.PLUS_SIGN + this.props.marksDifference) : markDifferenceValue.toString();\r\n                break;\r\n            default:\r\n                displayMarkDifferenceValue = markDifferenceValue.toString();\r\n        }\r\n        return displayMarkDifferenceValue;\r\n    };\r\n    return MarksDifference;\r\n}(PureRenderComponent));\r\nmodule.exports = MarksDifference;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL21hcmtzZGlmZmVyZW5jZS50c3g/MzlhMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcclxuLyogdHNsaW50OmVuYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IFB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgbG9jYWxlSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9sb2NhbGUvbG9jYWxlaGVscGVyJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvY29uc3RhbnRzJyk7XHJcblxyXG4vKipcclxuICogUHJvcGVydGllcyBvZiBjb21wb25lbnQuXHJcbiAqIEBwYXJhbSB7UHJvcHN9IHByb3BzXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gICAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgICBtYXJrc0RpZmZlcmVuY2U/OiBudW1iZXI7XHJcbiAgICBtYXJrc0RpZmZlcmVuY2VUZXh0Pzogc3RyaW5nO1xyXG4gICAgbWFya3NEaWZmZXJlbmNlVHlwZTogZW51bXMuTWFya3NEaWZmZXJlbmNlVHlwZTtcclxuICAgIGlzVGlsZVZpZXc/OiBib29sZWFuO1xyXG59XHJcblxyXG5jbGFzcyBNYXJrc0RpZmZlcmVuY2UgZXh0ZW5kcyBQdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIGZvciBNYXJrc0RpZmZlcmVuY2VcclxuICAgICAqIEBwYXJhbSBwcm9wc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcywgbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgY29tcG9uZW50XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzVGlsZVZpZXcgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoPGRpdiBpZD17dGhpcy5wcm9wcy5pZH0gY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX0gdGl0bGU9e2xvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQodGhpcy5wcm9wcy50aXRsZSkgfT5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nZGltLXRleHQgdHh0LXZhbCc+eyB0aGlzLmdldE1hcmtEaWZmZXJlbmNlVmFsdWVJblN0cmluZ0Zvcm1hdCgpIH08L3NwYW4+XHJcbiAgICAgICAgICAgIDwvZGl2Pik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICg8ZGl2IGlkPXt0aGlzLnByb3BzLmlkfSBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfSB0aXRsZT17bG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCh0aGlzLnByb3BzLnRpdGxlKSB9PlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdleC1kaW0tdGV4dCB0eHQtbGFiZWwnPntsb2NhbGVTdG9yZS5pbnN0YW5jZS5UcmFuc2xhdGVUZXh0KHRoaXMucHJvcHMubWFya3NEaWZmZXJlbmNlVGV4dCkgfSA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2RpbS10ZXh0IHR4dC12YWwnPnsgdGhpcy5nZXRNYXJrRGlmZmVyZW5jZVZhbHVlSW5TdHJpbmdGb3JtYXQoKSB9PC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBtYXJrIGRpZmZlcmVuY2UgdmFsdWUgaW4gc3RyaW5nIGZvcm1hdC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRNYXJrRGlmZmVyZW5jZVZhbHVlSW5TdHJpbmdGb3JtYXQoKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgZGlzcGxheU1hcmtEaWZmZXJlbmNlVmFsdWU6IHN0cmluZyA9ICcnO1xyXG4gICAgICAgIGxldCBtYXJrRGlmZmVyZW5jZVZhbHVlOiBudW1iZXIgPSB0aGlzLnByb3BzLm1hcmtzRGlmZmVyZW5jZSAhPT0gdW5kZWZpbmVkID8gdGhpcy5wcm9wcy5tYXJrc0RpZmZlcmVuY2UgOiAwO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMucHJvcHMubWFya3NEaWZmZXJlbmNlVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVudW1zLk1hcmtzRGlmZmVyZW5jZVR5cGUuVG90YWxNYXJrc0RpZmZlcmVuY2U6XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5TWFya0RpZmZlcmVuY2VWYWx1ZSA9IHRoaXMucHJvcHMubWFya3NEaWZmZXJlbmNlID4gMFxyXG4gICAgICAgICAgICAgICAgICAgID8gKGNvbnN0YW50cy5QTFVTX1NJR04gKyB0aGlzLnByb3BzLm1hcmtzRGlmZmVyZW5jZSkgOiBtYXJrRGlmZmVyZW5jZVZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlNYXJrRGlmZmVyZW5jZVZhbHVlID0gbWFya0RpZmZlcmVuY2VWYWx1ZS50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGRpc3BsYXlNYXJrRGlmZmVyZW5jZVZhbHVlO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgPSBNYXJrc0RpZmZlcmVuY2U7XHJcblxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL21hcmtzZGlmZmVyZW5jZS50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFlQTtBQUFBO0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),

/***/ 593:
/* no static exports found */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/components/worklist/shared/responsetypelabel.tsx ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\n/**\r\n * Stateless seed label component\r\n * @param props\r\n */\r\n/* tslint:disable:variable-name */\r\nvar ResponseTypeLabel = function (props) {\r\n    /* tslint:enable:variable-name */\r\n    var responseTypeLabel;\r\n    switch (props.responseType) {\r\n        case enums.ResponseType.Seed:\r\n            responseTypeLabel = localeStore.instance.TranslateText('marking.worklist.response-data.seed-indicator');\r\n            break;\r\n        case enums.ResponseType.PromotedSeed:\r\n            responseTypeLabel = localeStore.instance.TranslateText('marking.worklist.response-data.promoted-seed-indicator');\r\n            break;\r\n        case enums.ResponseType.Definitive:\r\n            responseTypeLabel = localeStore.instance.TranslateText('marking.worklist.response-data.definitive-indicator');\r\n            break;\r\n        case enums.ResponseType.WholeResponse:\r\n            responseTypeLabel = localeStore.instance.TranslateText('marking.worklist.response-data.wholeresponse-indicator');\r\n    }\r\n    if (!props.isResponseTypeLabelVisible) {\r\n        return null;\r\n    }\r\n    else {\r\n        return (React.createElement(\"div\", { className: 'response-type-label small-text' },\r\n            React.createElement(\"span\", { className: 'response-type-text' }, responseTypeLabel)));\r\n    }\r\n};\r\nmodule.exports = ResponseTypeLabel;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3Jlc3BvbnNldHlwZWxhYmVsLnRzeD8zMjNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZW5hYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUHVyZVJlbmRlckNvbXBvbmVudCA9IHJlcXVpcmUoJy4uLy4uL2Jhc2UvcHVyZXJlbmRlcmNvbXBvbmVudCcpO1xyXG5pbXBvcnQgbG9jYWxlU3RvcmUgPSByZXF1aXJlKCcuLi8uLi8uLi9zdG9yZXMvbG9jYWxlL2xvY2FsZXN0b3JlJyk7XHJcbmltcG9ydCBsb2NhbGVIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi8uLi91dGlsaXR5L2xvY2FsZS9sb2NhbGVoZWxwZXInKTtcclxuaW1wb3J0IGVudW1zID0gcmVxdWlyZSgnLi4vLi4vdXRpbGl0eS9lbnVtcycpO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgTG9jYWxlU2VsZWN0aW9uQmFzZSwgUHJvcHNCYXNlIHtcclxuICAgIGlzUmVzcG9uc2VUeXBlTGFiZWxWaXNpYmxlOiBib29sZWFuO1xyXG4gICAgcmVzcG9uc2VUeXBlPzogZW51bXMuUmVzcG9uc2VUeXBlO1xyXG59XHJcblxyXG4vKipcclxuICogU3RhdGVsZXNzIHNlZWQgbGFiZWwgY29tcG9uZW50XHJcbiAqIEBwYXJhbSBwcm9wc1xyXG4gKi9cclxuIC8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuY29uc3QgUmVzcG9uc2VUeXBlTGFiZWwgPSAocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQgPT4ge1xyXG4gICAgLyogdHNsaW50OmVuYWJsZTp2YXJpYWJsZS1uYW1lICovXHJcblxyXG4gICAgbGV0IHJlc3BvbnNlVHlwZUxhYmVsO1xyXG4gICAgc3dpdGNoIChwcm9wcy5yZXNwb25zZVR5cGUpIHtcclxuICAgICAgICBjYXNlIGVudW1zLlJlc3BvbnNlVHlwZS5TZWVkOlxyXG4gICAgICAgICAgICByZXNwb25zZVR5cGVMYWJlbCA9IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5zZWVkLWluZGljYXRvcicpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIGVudW1zLlJlc3BvbnNlVHlwZS5Qcm9tb3RlZFNlZWQ6XHJcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZUxhYmVsID0gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLnByb21vdGVkLXNlZWQtaW5kaWNhdG9yJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgZW51bXMuUmVzcG9uc2VUeXBlLkRlZmluaXRpdmU6XHJcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZUxhYmVsID0gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLmRlZmluaXRpdmUtaW5kaWNhdG9yJyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgZW51bXMuUmVzcG9uc2VUeXBlLldob2xlUmVzcG9uc2U6XHJcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZUxhYmVsID0gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLndob2xlcmVzcG9uc2UtaW5kaWNhdG9yJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFwcm9wcy5pc1Jlc3BvbnNlVHlwZUxhYmVsVmlzaWJsZSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgcmV0dXJuICg8ZGl2IGNsYXNzTmFtZT0ncmVzcG9uc2UtdHlwZS1sYWJlbCBzbWFsbC10ZXh0Jz5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdyZXNwb25zZS10eXBlLXRleHQnPlxyXG4gICAgICAgICAgICAgICAgeyByZXNwb25zZVR5cGVMYWJlbCAgfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2Pik7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgPSBSZXNwb25zZVR5cGVMYWJlbDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3Jlc3BvbnNldHlwZWxhYmVsLnRzeCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFHQTtBQUVBO0FBT0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUlBO0FBQ0E7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 594:
/* no static exports found */
/* all exports used */
/*!*********************************************************!*\
  !*** ./src/components/worklist/shared/worklistdate.tsx ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/*\r\n  React component for login header\r\n*/\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:disable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar GenericDate = __webpack_require__(/*! ./genericdate */ 315);\r\n/**\r\n * React component class for submit button\r\n */\r\nvar WorkListDate = /** @class */ (function (_super) {\r\n    __extends(WorkListDate, _super);\r\n    /**\r\n     * Constructor for worklistdate\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function WorkListDate(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.dateText = '';\r\n        _this.dateValue = '';\r\n        _this.elementId = '';\r\n        _this.elementKey = '';\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     * @returns\r\n     */\r\n    WorkListDate.prototype.render = function () {\r\n        var cName;\r\n        this.elementId = 'dtup_' + this.props.id;\r\n        this.elementKey = 'dtup_key_' + this.props.id;\r\n        if (!this.props.dateValue) {\r\n            this.dateValue = localeStore.instance.TranslateText('marking.worklist.response-data.marking-not-started');\r\n            return (React.createElement(\"p\", { className: 'resp-mark small-text' },\r\n                React.createElement(GenericDate, { id: 'dtup_' + this.props.id, key: 'dtup_key_' + this.props.id, className: 'dim-text txt-val', displayText: localeStore.instance.TranslateText('marking.worklist.response-data.marking-not-started') })));\r\n        }\r\n        else if (this.props.dateType === enums.WorkListDateType.allocatedDate) {\r\n            this.dateText = localeStore.instance.TranslateText('marking.worklist.tile-view-labels.allocated');\r\n            this.elementId = 'dtalloc_' + this.props.id;\r\n            this.elementKey = 'dtalloc_key_' + this.props.id;\r\n            return (React.createElement(\"div\", { className: 'resp-allocated-date small-text' },\r\n                React.createElement(GenericDate, { dateValue: this.props.dateValue, id: this.elementId, key: this.elementId, className: 'dim-text txt-val small-text' })));\r\n        }\r\n        else if (this.props.dateType === enums.WorkListDateType.submittedDate) {\r\n            this.dateText = localeStore.instance.TranslateText('marking.worklist.tile-view-labels.submitted');\r\n            this.elementId = 'dtsubmit_' + this.props.id;\r\n            this.elementKey = 'dtsubmit_key_' + this.props.id;\r\n            return ((React.createElement(\"div\", { className: 'resp-allocated-date small-text' },\r\n                React.createElement(\"span\", { className: 'ex-dim-text txt-label' },\r\n                    this.dateText,\r\n                    \": \"),\r\n                React.createElement(GenericDate, { dateValue: this.props.dateValue, id: this.elementId, key: this.elementId, className: 'dim-text txt-val' }))));\r\n        }\r\n        return null;\r\n    };\r\n    return WorkListDate;\r\n}(pureRenderComponent));\r\nmodule.exports = WorkListDate;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTk0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3dvcmtsaXN0ZGF0ZS50c3g/ZGE5NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gIFJlYWN0IGNvbXBvbmVudCBmb3IgbG9naW4gaGVhZGVyXHJcbiovXHJcbi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSAqL1xyXG5pbXBvcnQgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xyXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgKi9cclxuaW1wb3J0IHB1cmVSZW5kZXJDb21wb25lbnQgPSByZXF1aXJlKCcuLi8uLi9iYXNlL3B1cmVyZW5kZXJjb21wb25lbnQnKTtcclxuaW1wb3J0IGxvY2FsZVN0b3JlID0gcmVxdWlyZSgnLi4vLi4vLi4vc3RvcmVzL2xvY2FsZS9sb2NhbGVzdG9yZScpO1xyXG5pbXBvcnQgbG9jYWxlSGVscGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbGl0eS9sb2NhbGUvbG9jYWxlaGVscGVyJyk7XHJcbmltcG9ydCBlbnVtcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxpdHkvZW51bXMnKTtcclxuaW1wb3J0IEdlbmVyaWNEYXRlID0gcmVxdWlyZSgnLi9nZW5lcmljZGF0ZScpO1xyXG5cclxuLyoqXHJcbiAqIFByb3BlcnRpZXMgb2YgYWxsb2NhdGUgZGFuZCBsYXN0IHVwZGF0ZWQgY29sdW1uXHJcbiAqL1xyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBMb2NhbGVTZWxlY3Rpb25CYXNlLCBQcm9wc0Jhc2Uge1xyXG4gICAgZGF0ZVZhbHVlPzogRGF0ZTtcclxuICAgIGRhdGVUeXBlOiBlbnVtcy5Xb3JrTGlzdERhdGVUeXBlO1xyXG4gICAgaXNUaWxlVmlldz86IGJvb2xlYW47XHJcbiAgICByZW5kZXJlZE9uPzogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogUmVhY3QgY29tcG9uZW50IGNsYXNzIGZvciBzdWJtaXQgYnV0dG9uXHJcbiAqL1xyXG5jbGFzcyBXb3JrTGlzdERhdGUgZXh0ZW5kcyBwdXJlUmVuZGVyQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcclxuXHJcbiAgICBwcml2YXRlIGRhdGVUZXh0OiBzdHJpbmcgPSAnJztcclxuICAgIHByaXZhdGUgZGF0ZVZhbHVlOiBzdHJpbmcgPSAnJztcclxuICAgIHByaXZhdGUgZWxlbWVudElkOiBzdHJpbmcgPSAnJztcclxuICAgIHByaXZhdGUgZWxlbWVudEtleTogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciBmb3Igd29ya2xpc3RkYXRlIFxyXG4gICAgICogQHBhcmFtIHByb3BzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzLCBzdGF0ZTogYW55KSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMsIHN0YXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciBjb21wb25lbnQgXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcblx0cHVibGljIHJlbmRlcigpIHtcclxuXHJcblx0XHRsZXQgY05hbWU6IHN0cmluZztcclxuXHRcdHRoaXMuZWxlbWVudElkID0gJ2R0dXBfJyArIHRoaXMucHJvcHMuaWQ7XHJcblx0XHR0aGlzLmVsZW1lbnRLZXkgPSAnZHR1cF9rZXlfJyArIHRoaXMucHJvcHMuaWQ7XHJcblxyXG5cdFx0aWYgKCF0aGlzLnByb3BzLmRhdGVWYWx1ZSkge1xyXG5cdFx0XHR0aGlzLmRhdGVWYWx1ZSA9IGxvY2FsZVN0b3JlLmluc3RhbmNlLlRyYW5zbGF0ZVRleHQoJ21hcmtpbmcud29ya2xpc3QucmVzcG9uc2UtZGF0YS5tYXJraW5nLW5vdC1zdGFydGVkJyk7XHJcblxyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdDxwIGNsYXNzTmFtZT0ncmVzcC1tYXJrIHNtYWxsLXRleHQnPlxyXG5cdFx0XHRcdFx0ICAgIDxHZW5lcmljRGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXsnZHR1cF8nICsgdGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9eydkdHVwX2tleV8nICsgdGhpcy5wcm9wcy5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9eydkaW0tdGV4dCB0eHQtdmFsJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5VGV4dD17bG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC5yZXNwb25zZS1kYXRhLm1hcmtpbmctbm90LXN0YXJ0ZWQnKX0vPlxyXG5cdFx0XHRcdDwvcD5cclxuXHRcdFx0KTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKHRoaXMucHJvcHMuZGF0ZVR5cGUgPT09IGVudW1zLldvcmtMaXN0RGF0ZVR5cGUuYWxsb2NhdGVkRGF0ZSkge1xyXG5cdFx0XHR0aGlzLmRhdGVUZXh0ID0gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC50aWxlLXZpZXctbGFiZWxzLmFsbG9jYXRlZCcpO1xyXG5cdFx0XHR0aGlzLmVsZW1lbnRJZCA9ICdkdGFsbG9jXycgKyB0aGlzLnByb3BzLmlkO1xyXG5cdFx0XHR0aGlzLmVsZW1lbnRLZXkgPSAnZHRhbGxvY19rZXlfJyArIHRoaXMucHJvcHMuaWQ7XHJcblxyXG5cdFx0XHRyZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3AtYWxsb2NhdGVkLWRhdGUgc21hbGwtdGV4dCc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxHZW5lcmljRGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVWYWx1ZT17dGhpcy5wcm9wcy5kYXRlVmFsdWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e3RoaXMuZWxlbWVudElkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17dGhpcy5lbGVtZW50SWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXsnZGltLXRleHQgdHh0LXZhbCBzbWFsbC10ZXh0J30vPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2Pik7XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMucHJvcHMuZGF0ZVR5cGUgPT09IGVudW1zLldvcmtMaXN0RGF0ZVR5cGUuc3VibWl0dGVkRGF0ZSkge1xyXG5cdFx0XHR0aGlzLmRhdGVUZXh0ID0gbG9jYWxlU3RvcmUuaW5zdGFuY2UuVHJhbnNsYXRlVGV4dCgnbWFya2luZy53b3JrbGlzdC50aWxlLXZpZXctbGFiZWxzLnN1Ym1pdHRlZCcpO1xyXG5cdFx0XHR0aGlzLmVsZW1lbnRJZCA9ICdkdHN1Ym1pdF8nICsgdGhpcy5wcm9wcy5pZDtcclxuXHRcdFx0dGhpcy5lbGVtZW50S2V5ID0gJ2R0c3VibWl0X2tleV8nICsgdGhpcy5wcm9wcy5pZDtcclxuXHJcblx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0KDxkaXYgY2xhc3NOYW1lPSdyZXNwLWFsbG9jYXRlZC1kYXRlIHNtYWxsLXRleHQnPlxyXG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPSdleC1kaW0tdGV4dCB0eHQtbGFiZWwnPnt0aGlzLmRhdGVUZXh0fTogPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8R2VuZXJpY0RhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlVmFsdWU9e3RoaXMucHJvcHMuZGF0ZVZhbHVlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPXt0aGlzLmVsZW1lbnRJZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3RoaXMuZWxlbWVudElkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17J2RpbS10ZXh0IHR4dC12YWwnfS8+XHJcblx0XHRcdFx0PC9kaXY+KVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG51bGw7XHJcblx0fVxyXG59XHJcbmV4cG9ydCA9IFdvcmtMaXN0RGF0ZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2NvbXBvbmVudHMvd29ya2xpc3Qvc2hhcmVkL3dvcmtsaXN0ZGF0ZS50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQVlBOztBQUVBO0FBQ0E7QUFBQTtBQU9BOzs7O0FBSUE7QUFDQTtBQUFBO0FBVkE7QUFDQTtBQUNBO0FBQ0E7O0FBU0E7QUFFQTs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBUUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFNQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 595:
/* no static exports found */
/* all exports used */
/*!**************************************************************!*\
  !*** ./src/components/worklist/targetsummary/targetitem.tsx ***!
  \**************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar localeStore = __webpack_require__(/*! ../../../stores/locale/localestore */ 226);\r\nvar localeHelper = __webpack_require__(/*! ../../../utility/locale/localehelper */ 281);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar qiqStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar targetSummaryStore = __webpack_require__(/*! ../../../stores/worklist/targetsummarystore */ 305);\r\nvar TargetItem = /** @class */ (function (_super) {\r\n    __extends(TargetItem, _super);\r\n    /**\r\n     * constructor\r\n     * @param props\r\n     * @param state\r\n     */\r\n    function TargetItem(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.onTargetClickFn = _this.onTargetClick.bind(_this, _this.props.target.markingModeID, _this.props.remarkRequestTypeID, _this.props.isDirectedRemark);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render component\r\n     */\r\n    TargetItem.prototype.render = function () {\r\n        var markingModeName;\r\n        if (this.props.target.markingModeID === enums.MarkingMode.Remarking) {\r\n            markingModeName = enums.RemarkRequestType[this.props.remarkRequestTypeID];\r\n        }\r\n        else {\r\n            markingModeName = enums.MarkingMode[this.props.target.markingModeID];\r\n        }\r\n        if (this.props.target.markingModeID === enums.MarkingMode.ES_TeamApproval &&\r\n            qiqStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember === false) {\r\n            markingModeName = 'SecondStandardisation';\r\n        }\r\n        return (React.createElement(\"li\", { id: 'target_' + markingModeName, className: classNames('panel', {\r\n                'completed': (this.props.target.isTargetCompleted\r\n                    || this.props.isOverAllTargetCompleted), 'disabled': this.props.isDisabled, 'open': this.props.isSelected,\r\n                'active': markingModeName === 'Simulation'\r\n            }), onClick: this.onTargetClickFn },\r\n            React.createElement(\"span\", { id: markingModeName + '_status', className: this.determineMenuClass() },\r\n                React.createElement(\"span\", { id: markingModeName + '_indicator', className: this.determineStatusClass() }),\r\n                this.getOpenResponsesCount()),\r\n            React.createElement(\"a\", { href: 'javascript:void(0)', id: markingModeName + '_title', title: markingModeName === enums.getEnumString(enums.MarkingMode, enums.MarkingMode.LiveMarking) ?\r\n                    localeStore.instance.TranslateText('generic.marking-modes.Marking') :\r\n                    localeStore.instance.TranslateText('generic.marking-modes.' + markingModeName), className: 'left-menu-link panel-link' },\r\n                React.createElement(\"span\", { id: markingModeName + '_menutext', className: 'menu-text large-text' }, markingModeName === enums.getEnumString(enums.MarkingMode, enums.MarkingMode.LiveMarking) ?\r\n                    localeStore.instance.TranslateText('generic.marking-modes.Marking') :\r\n                    localeStore.instance.TranslateText('generic.marking-modes.' + markingModeName)),\r\n                this.renderHighlightedCompletedText(),\r\n                this.renderRemainingDaysSection(),\r\n                this.renderMarkingCompletionDate(markingModeName))));\r\n    };\r\n    /**\r\n     * Handle the click event in the Target.\r\n     * @param selectedMarkingModeID\r\n     */\r\n    TargetItem.prototype.onTargetClick = function (selectedMarkingModeID, remarkRequestTypeId, isDirectedRemark) {\r\n        if (!this.props.isDisabled && !this.props.isSelected) {\r\n            this.props.onClickCallback(selectedMarkingModeID, remarkRequestTypeId, isDirectedRemark);\r\n        }\r\n    };\r\n    /**\r\n     * Method which gets the formatted date to be shown in the UI\r\n     * @param markingCompletionDate\r\n     */\r\n    TargetItem.prototype.getFormattedMarkingCompletionDate = function () {\r\n        var targetCompletedDateString = (this.props.target.isTargetCompleted\r\n            || this.props.isOverAllTargetCompleted) ? this.props.target.targetCompletedDate.toString() :\r\n            this.props.target.markingTargetDate.toString();\r\n        var targetCompletedDate = new Date(targetCompletedDateString);\r\n        return localeHelper.toLocaleDateString(targetCompletedDate);\r\n    };\r\n    /**\r\n     * Get the remaining days for the completion date. Shouldn't be negetive.\r\n     * If target is met return the value as 0.\r\n     * @param markingCompletionDate\r\n     */\r\n    TargetItem.prototype.remainingDaysForMarkingCompletion = function () {\r\n        var today = new Date();\r\n        var markingDate = new Date(this.props.target.markingTargetDate.toString());\r\n        // Converting milli seconds to 1 day.\r\n        var oneDay = 1000 * 60 * 60 * 24;\r\n        var noOfDays = (Math.ceil((markingDate.getTime() - today.getTime()) / (oneDay)));\r\n        if (noOfDays < 0) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return noOfDays;\r\n        }\r\n    };\r\n    /**\r\n     * Deteremines the menu class\r\n     */\r\n    TargetItem.prototype.determineMenuClass = function () {\r\n        return (this.props.target.isTargetCompleted || this.props.isOverAllTargetCompleted) ? 'menu-count-completed' : 'menu-count';\r\n    };\r\n    /**\r\n     * Renders the highlighted completed text\r\n     * @returns\r\n     */\r\n    TargetItem.prototype.renderHighlightedCompletedText = function () {\r\n        if (this.props.target.isTargetCompleted || this.props.isOverAllTargetCompleted) {\r\n            return (React.createElement(\"span\", { className: 'menu-highlight-text' }, localeStore.instance.TranslateText('marking.worklist.left-panel.target-completed')));\r\n        }\r\n    };\r\n    /**\r\n     * Renders the remaining day section\r\n     */\r\n    TargetItem.prototype.renderRemainingDaysSection = function () {\r\n        if (this.props.target.markingModeID === enums.MarkingMode.Simulation) {\r\n            return null;\r\n        }\r\n        if (!this.props.target.isCurrentTarget || this.props.target.isTargetCompleted || this.props.isOverAllTargetCompleted) {\r\n            return null;\r\n        }\r\n        var style = {\r\n            'display': 'block'\r\n        };\r\n        return (React.createElement(\"span\", { className: 'menu-highlight-text', style: style },\r\n            React.createElement(\"span\", { id: enums.MarkingMode[this.props.target.markingModeID] + '_days_until_target_date', className: 'remaining-date' },\r\n                this.remainingDaysForMarkingCompletion(),\r\n                \" \"),\r\n            localeStore.instance.TranslateText('marking.worklist.left-panel.days-until-target')));\r\n    };\r\n    /**\r\n     * Method to render marking completion date.\r\n     * @param markingModeName\r\n     */\r\n    TargetItem.prototype.renderMarkingCompletionDate = function (markingModeName) {\r\n        if (this.props.target.markingModeID === enums.MarkingMode.Simulation) {\r\n            return null;\r\n        }\r\n        return (React.createElement(\"div\", { id: markingModeName + '_target_date', className: 'menu-text-small small-text' },\r\n            React.createElement(\"span\", { className: 'menu-label' }, localeStore.instance.TranslateText('marking.worklist.left-panel.target' +\r\n                ((this.props.target.isTargetCompleted\r\n                    || this.props.isOverAllTargetCompleted) ? '-completed-date-label' : '-date-label'))),\r\n            React.createElement(\"span\", { id: markingModeName + '_datetext', className: 'date-text' }, this.getFormattedMarkingCompletionDate())));\r\n    };\r\n    /**\r\n     * Method to determine the status class to apply for the item.\r\n     */\r\n    TargetItem.prototype.determineStatusClass = function () {\r\n        // Determine the Status of the target item. tick/dots/pencil.\r\n        // TargetComplete = tick, Current = pencil, Future = dots.\r\n        if (this.props.target.isTargetCompleted || this.props.isOverAllTargetCompleted) {\r\n            return 'sprite-icon tick-circle-icon menu-count-completed';\r\n        }\r\n        else if (this.props.target.isCurrentTarget && this.props.target.markingModeID === enums.MarkingMode.Simulation) {\r\n            return '';\r\n        }\r\n        else if (this.props.target.isCurrentTarget || this.props.target.markingModeID === enums.MarkingMode.Remarking\r\n            && targetSummaryStore.instance.getCurrentTarget().markingModeID === enums.MarkingMode.LiveMarking) {\r\n            return this.props.target.markingModeID === enums.MarkingMode.LiveMarking\r\n                || this.props.target.markingModeID === enums.MarkingMode.Remarking ? '' : 'sprite-icon pencil-icon';\r\n        }\r\n        else {\r\n            return 'sprite-icon dot-dot-dot-icon';\r\n        }\r\n    };\r\n    /**\r\n     * This method will return the open responses count\r\n     */\r\n    TargetItem.prototype.getOpenResponsesCount = function () {\r\n        if (this.props.target.isCurrentTarget &&\r\n            this.props.target.markingModeID === enums.MarkingMode.LiveMarking && !this.props.target.isTargetCompleted\r\n            || (this.props.target.markingModeID === enums.MarkingMode.Remarking && !this.props.target.isTargetCompleted\r\n                && targetSummaryStore.instance.getCurrentTarget().markingModeID === enums.MarkingMode.LiveMarking)\r\n            || this.props.target.isCurrentTarget && this.props.target.markingModeID === enums.MarkingMode.Simulation) {\r\n            return this.props.target.examinerProgress.openResponsesCount;\r\n        }\r\n    };\r\n    return TargetItem;\r\n}(pureRenderComponent));\r\nmodule.exports = TargetItem;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 596:
/* no static exports found */
/* all exports used */
/*!***********************************************************!*\
  !*** ./src/components/worklist/targetsummary/targets.tsx ***!
  \***********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../../base/purerendercomponent */ 227);\r\nvar enums = __webpack_require__(/*! ../../utility/enums */ 225);\r\nvar TargetItem = __webpack_require__(/*! ./targetitem */ 595);\r\nvar LiveOrPooledRemarkTargetItem = __webpack_require__(/*! ./liveorpooledremarktargetitem */ 1238);\r\nvar qigStore = __webpack_require__(/*! ../../../stores/qigselector/qigstore */ 230);\r\nvar worklistActionCreator = __webpack_require__(/*! ../../../actions/worklist/worklistactioncreator */ 261);\r\nvar targetHelper = __webpack_require__(/*! ../../../utility/target/targethelper */ 300);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar worklistStore = __webpack_require__(/*! ../../../stores/worklist/workliststore */ 231);\r\nvar applicationStore = __webpack_require__(/*! ../../../stores/applicationoffline/applicationstore */ 247);\r\nvar applicationActionCreator = __webpack_require__(/*! ../../../actions/applicationoffline/applicationactioncreator */ 256);\r\n/**\r\n * Class for the Targts in the worklist.\r\n */\r\nvar Targets = /** @class */ (function (_super) {\r\n    __extends(Targets, _super);\r\n    /**\r\n     * The constructor for the target component.\r\n     * @param props\r\n     */\r\n    function Targets(props) {\r\n        var _this = _super.call(this, props, null) || this;\r\n        /**\r\n         * render the targetItemElement\r\n         */\r\n        _this.renderTargetItem = function (markingTarget, isTargetDisabled, idString) {\r\n            return (React.createElement(TargetItem, { target: markingTarget, isDisabled: isTargetDisabled, isOverAllTargetCompleted: (targetHelper.getExaminerQigStatus()\r\n                    === enums.ExaminerQIGStatus.OverAllTargetCompleted) ? true : false, isSelected: _this.isSelectedTarget(markingTarget.markingModeID, undefined), onClickCallback: _this.onTargetClick, selectedLanguage: _this.props.selectedLanguage, id: 'target_id' + idString, key: 'target_key' + idString, renderedOn: _this.props.liveTargetRenderedOn, remarkRequestTypeID: undefined, isDirectedRemark: false, isTeamManagementMode: _this.props.isTeamManagementMode }));\r\n        };\r\n        /**\r\n         * Get selected worklist type disabled.\r\n         */\r\n        _this.isSelectedWorklistTypeDisabled = function () {\r\n            var isDisabledtarget = false;\r\n            var markingModeByWorklistType = targetHelper.getMarkingModeByWorklistType(worklistStore.instance.currentWorklistType);\r\n            if (markingModeByWorklistType) {\r\n                var targetByWorklistType = _this.props.markingTargetsSummary.filter(function (target) { return target.markingModeID === markingModeByWorklistType; }).first();\r\n                // The markingTargetsSummary will not be get refreshed soon when we switching through recent history link.\r\n                if (targetByWorklistType) {\r\n                    isDisabledtarget = markerOperationModeFactory.operationMode.isTargetDisabled(targetByWorklistType, undefined);\r\n                }\r\n            }\r\n            return isDisabledtarget;\r\n        };\r\n        _this.selectedMarkingMode = enums.MarkingMode.None;\r\n        _this.state = {\r\n            currentlySelectedMarkingMode: undefined,\r\n            currentlySelectedremarkRequestTypeId: undefined\r\n        };\r\n        _this.onTargetClick = _this.onTargetClick.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Renders component\r\n     * @returns\r\n     */\r\n    Targets.prototype.render = function () {\r\n        var _this = this;\r\n        if (this.props.markingTargetsSummary === undefined || this.props.markingTargetsSummary.count() === 0) {\r\n            return null;\r\n        }\r\n        this.selectedMarkingMode = targetHelper.getWorklistTargetToBeSelected(undefined, this.isSelectedWorklistTypeDisabled());\r\n        var that = this;\r\n        var previousTarget;\r\n        var standardisationSetupComplete = qigStore.instance.selectedQIGForMarkerOperation ?\r\n            qigStore.instance.selectedQIGForMarkerOperation.standardisationSetupComplete : false;\r\n        // Loop through the marking targets\r\n        var torender = this.props.markingTargetsSummary.map(function (markingTarget) {\r\n            var idString = '_' + markingTarget.markingModeID;\r\n            var isAggregateQIGTargetsON = qigStore.instance.isAggregatedQigCCEnabledForCurrentQig;\r\n            var isTargetDisabled = that.isTargetDisabled(markingTarget, previousTarget);\r\n            switch (markingTarget.markingModeID) {\r\n                case enums.MarkingMode.LiveMarking:\r\n                    previousTarget = markingTarget;\r\n                    // Only closed tab is displaying in help examiners,\r\n                    // update the open count with closed closed count, Also should not render progress bar component.\r\n                    if (markerOperationModeFactory.operationMode.isHelpExaminersView) {\r\n                        markingTarget.examinerProgress.openResponsesCount = markingTarget.examinerProgress.closedResponsesCount;\r\n                        return that.renderTargetItem(markingTarget, isTargetDisabled, idString);\r\n                    }\r\n                    return (React.createElement(LiveOrPooledRemarkTargetItem, { target: markingTarget, isOverAllTargetCompleted: (targetHelper.getExaminerQigStatus()\r\n                            === enums.ExaminerQIGStatus.OverAllTargetCompleted) ? true : false, isDisabled: isTargetDisabled, isSelected: that.isSelectedTarget(markingTarget.markingModeID, undefined), onClickCallback: that.onTargetClick, id: 'target_id' + idString, key: 'target_key' + idString, selectedLanguage: _this.props.selectedLanguage, renderedOn: _this.props.liveTargetRenderedOn, directedRemarkTarget: _this.getDirectedRemarkTargets(), remarkRequestTypeID: undefined, isDirectedRemark: false, isTeamManagementMode: _this.props.isTeamManagementMode, isAggregatedTargetsCCEnabled: isAggregateQIGTargetsON }));\r\n                case enums.MarkingMode.Practice:\r\n                case enums.MarkingMode.Approval:\r\n                case enums.MarkingMode.ES_TeamApproval:\r\n                    previousTarget = markingTarget;\r\n                    if (markingTarget.maximumMarkingLimit > 0) {\r\n                        return that.renderTargetItem(markingTarget, isTargetDisabled, idString);\r\n                    }\r\n                    break;\r\n                case enums.MarkingMode.Remarking:\r\n                    previousTarget = markingTarget;\r\n                    if (markingTarget.examinerProgress.isDirectedRemark === false) {\r\n                        return (React.createElement(LiveOrPooledRemarkTargetItem, { target: markingTarget, isDisabled: isTargetDisabled, \r\n                            //Passing false since overall target completed is not applicable for pooled remark targets\r\n                            isOverAllTargetCompleted: false, isSelected: that.isSelectedTarget(markingTarget.markingModeID, markingTarget.remarkRequestTypeID), onClickCallback: that.onTargetClick, selectedLanguage: _this.props.selectedLanguage, id: 'target_id' + idString + enums.RemarkRequestType[markingTarget.remarkRequestTypeID], key: 'target_key' + idString + enums.RemarkRequestType[markingTarget.remarkRequestTypeID], renderedOn: _this.props.liveTargetRenderedOn, remarkRequestTypeID: markingTarget.remarkRequestTypeID, isDirectedRemark: markingTarget.examinerProgress.isDirectedRemark, isTeamManagementMode: _this.props.isTeamManagementMode, isAggregatedTargetsCCEnabled: isAggregateQIGTargetsON }));\r\n                    }\r\n                    break;\r\n                case enums.MarkingMode.Simulation:\r\n                    previousTarget = markingTarget;\r\n                    if (!standardisationSetupComplete) {\r\n                        return that.renderTargetItem(markingTarget, false, idString);\r\n                    }\r\n                    break;\r\n                default: return null;\r\n            }\r\n        });\r\n        // Render the marking targets to the wrapper\r\n        return (React.createElement(\"div\", { className: 'left-menu-holder' },\r\n            React.createElement(\"ul\", { id: 'left_menu_panel_group', className: 'left-menu panel-group' }, torender)));\r\n    };\r\n    /**\r\n     * This will set state currently selected marking mode\r\n     * @param nxtProps\r\n     */\r\n    Targets.prototype.componentWillReceiveProps = function (nxtProps) {\r\n        if (this.props.markingTargetsSummary === undefined || this.props.markingTargetsSummary.count() === 0) {\r\n            return;\r\n        }\r\n        this.setState({ currentlySelectedMarkingMode: undefined, currentlySelectedremarkRequestTypeId: undefined });\r\n    };\r\n    /**\r\n     * This will return the selection status.\r\n     * @param markingModeId\r\n     */\r\n    Targets.prototype.isSelectedTarget = function (markingModeId, remarkRequestTypeId) {\r\n        if (this.state.currentlySelectedMarkingMode === undefined) {\r\n            if (this.selectedMarkingMode === enums.MarkingMode.Remarking) {\r\n                return targetHelper.getCurrentRemarkRequestType() === remarkRequestTypeId;\r\n            }\r\n            else {\r\n                return this.selectedMarkingMode === markingModeId;\r\n            }\r\n        }\r\n        else if (remarkRequestTypeId !== undefined) {\r\n            return this.state.currentlySelectedremarkRequestTypeId === remarkRequestTypeId;\r\n        }\r\n        else {\r\n            return this.state.currentlySelectedMarkingMode === markingModeId;\r\n        }\r\n    };\r\n    /**\r\n     * On target clicked\r\n     * @param markingModeId\r\n     */\r\n    Targets.prototype.onTargetClick = function (markingModeId, remarkRequestTypeId, isDirectedRemark) {\r\n        if (!applicationStore.instance.isOnline) {\r\n            applicationActionCreator.checkActionInterrupted();\r\n        }\r\n        else {\r\n            var worklistType = void 0;\r\n            switch (markingModeId) {\r\n                case enums.MarkingMode.Practice:\r\n                    worklistType = enums.WorklistType.practice;\r\n                    break;\r\n                case enums.MarkingMode.LiveMarking:\r\n                    worklistType = enums.WorklistType.live;\r\n                    break;\r\n                case enums.MarkingMode.Approval:\r\n                    worklistType = enums.WorklistType.standardisation;\r\n                    break;\r\n                case enums.MarkingMode.ES_TeamApproval:\r\n                    worklistType = enums.WorklistType.secondstandardisation;\r\n                    break;\r\n                case enums.MarkingMode.Remarking:\r\n                    worklistType = enums.WorklistType.pooledRemark;\r\n                    break;\r\n                case enums.MarkingMode.Simulation:\r\n                    worklistType = enums.WorklistType.simulation;\r\n                    break;\r\n            }\r\n            var isTargetCompleted_1;\r\n            isTargetCompleted_1 = false;\r\n            var responseMode = void 0;\r\n            responseMode = enums.ResponseMode.open;\r\n            if (markingModeId === enums.MarkingMode.Practice || markingModeId === enums.MarkingMode.Remarking) {\r\n                this.props.markingTargetsSummary.map(function (markingTarget) {\r\n                    if (markingTarget.markingModeID === markingModeId) {\r\n                        if (markingTarget.isTargetCompleted) {\r\n                            isTargetCompleted_1 = true;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else if (markingModeId === enums.MarkingMode.Approval ||\r\n                markingModeId === enums.MarkingMode.ES_TeamApproval) {\r\n                isTargetCompleted_1 = targetHelper.isESTargetCompleted(markingModeId);\r\n            }\r\n            if (isTargetCompleted_1) {\r\n                responseMode = enums.ResponseMode.closed;\r\n            }\r\n            if (qigStore.instance.selectedQIGForMarkerOperation) {\r\n                responseMode = markerOperationModeFactory.operationMode.responseModeBasedOnQualityFeedback(responseMode, markingModeId, remarkRequestTypeId);\r\n                worklistActionCreator.notifyWorklistTypeChange(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId, worklistType, responseMode, remarkRequestTypeId, isDirectedRemark, qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember);\r\n            }\r\n            this.setState({ currentlySelectedMarkingMode: markingModeId, currentlySelectedremarkRequestTypeId: remarkRequestTypeId });\r\n        }\r\n    };\r\n    /**\r\n     * This method will determine whether a target in disabled state or not\r\n     * @param target - target\r\n     * @param previousTarget - previous target\r\n     */\r\n    Targets.prototype.isTargetDisabled = function (target, previousTarget) {\r\n        // Determine if the item is shown in a disabled status here.\r\n        // In the future state the item is disabled.\r\n        //When the marker has quality feedback outstanding, the remarking tab should be disabled\r\n        return markerOperationModeFactory.operationMode.isTargetDisabled(target, previousTarget);\r\n    };\r\n    /**\r\n     * Check is ES Team Approval Status\r\n     */\r\n    Targets.prototype.isESTeamApprovalStatus = function () {\r\n        if (qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember === true\r\n            || (qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember === false\r\n                && this.isSecondStandardisation() === true)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Check if Second Standardisation\r\n     */\r\n    Targets.prototype.isSecondStandardisation = function () {\r\n        var secondStandardisationTarget = this.props.markingTargetsSummary.filter(function (target) {\r\n            return target.markingModeID === enums.MarkingMode.ES_TeamApproval;\r\n        }).first();\r\n        if (secondStandardisationTarget !== undefined) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Get directed remark targets\r\n     */\r\n    Targets.prototype.getDirectedRemarkTargets = function () {\r\n        var filteredDirectedRemarkTargets = this.props.markingTargetsSummary.filter(function (markingTarget) {\r\n            return markingTarget.examinerProgress.isDirectedRemark === true;\r\n        });\r\n        return Immutable.List(filteredDirectedRemarkTargets);\r\n    };\r\n    return Targets;\r\n}(pureRenderComponent));\r\nmodule.exports = Targets;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 598:
/* no static exports found */
/* all exports used */
/*!*******************************************************!*\
  !*** ./src/components/worklist/worklistcontainer.tsx ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n/* tslint:disable:no-unused-variable */\r\nvar React = __webpack_require__(/*! react */ 0);\r\n/* tslint:enable:no-unused-variable */\r\nvar pureRenderComponent = __webpack_require__(/*! ../base/purerendercomponent */ 227);\r\nvar WorkListMessage = __webpack_require__(/*! ./shared/worklistmessage */ 530);\r\nvar AllocateResponseButton = __webpack_require__(/*! ./shared/allocateresponsebutton */ 1225);\r\nvar GridControl = __webpack_require__(/*! ../utility/grid/gridcontrol */ 1177);\r\n//import liveWorkListHelper = require('../../utility/grid/worklisthelpers/liveworklisthelper');\r\nvar enums = __webpack_require__(/*! ../utility/enums */ 225);\r\nvar GridToggleButton = __webpack_require__(/*! ./shared/gridtogglebutton */ 529);\r\nvar TabControl = __webpack_require__(/*! ../utility/tab/tabcontrol */ 526);\r\nvar TabContentContainer = __webpack_require__(/*! ../utility/tab/tabcontentcontainer */ 1209);\r\nvar classNames = __webpack_require__(/*! classnames */ 39);\r\nvar userOptionsHelper = __webpack_require__(/*! ../../utility/useroption/useroptionshelper */ 265);\r\nvar userOptionKeys = __webpack_require__(/*! ../../utility/useroption/useroptionkeys */ 264);\r\nvar targetSummaryStore = __webpack_require__(/*! ../../stores/worklist/targetsummarystore */ 305);\r\nvar localeStore = __webpack_require__(/*! ../../stores/locale/localestore */ 226);\r\nvar qigStore = __webpack_require__(/*! ../../stores/qigselector/qigstore */ 230);\r\nvar worklistStore = __webpack_require__(/*! ../../stores/worklist/workliststore */ 231);\r\nvar responseStore = __webpack_require__(/*! ../../stores/response/responsestore */ 235);\r\nvar responseAllocationButtonValidationHelper = __webpack_require__(/*! ../utility/responseallocation/responseallocationbuttonvalidationhelper */ 1199);\r\nvar worklistActionCreator = __webpack_require__(/*! ../../actions/worklist/worklistactioncreator */ 261);\r\nvar SubmitResponse = __webpack_require__(/*! ./shared/submitresponse */ 372);\r\nvar tabHelper = __webpack_require__(/*! ../utility/tab/tabhelper */ 1210);\r\nvar targetHelper = __webpack_require__(/*! ../../utility/target/targethelper */ 300);\r\nvar markingStore = __webpack_require__(/*! ../../stores/marking/markingstore */ 236);\r\nvar markSchemeHelper = __webpack_require__(/*! ../../utility/markscheme/markschemehelper */ 276);\r\nvar examinerStore = __webpack_require__(/*! ../../stores/markerinformation/examinerstore */ 259);\r\nvar qualityFeedbackHelper = __webpack_require__(/*! ../../utility/qualityfeedback/qualityfeedbackhelper */ 309);\r\nvar worklistFactory = __webpack_require__(/*! ../../utility/worklist/worklistfactory */ 1446);\r\nvar StandardisationWorklistMessage = __webpack_require__(/*! ./shared/standardisationworklistmessage */ 1235);\r\nvar WorklistTableWrapper = __webpack_require__(/*! ./worklisttablewrapper */ 1243);\r\nvar LoadingIndicator = __webpack_require__(/*! ../utility/loadingindicator/loadingindicator */ 303);\r\nvar messageStore = __webpack_require__(/*! ../../stores/message/messagestore */ 240);\r\nvar messagingActionCreator = __webpack_require__(/*! ../../actions/messaging/messagingactioncreator */ 268);\r\nvar applicationStore = __webpack_require__(/*! ../../stores/applicationoffline/applicationstore */ 247);\r\nvar sortHelper = __webpack_require__(/*! ../../utility/sorting/sorthelper */ 272);\r\nvar comparerList = __webpack_require__(/*! ../../utility/sorting/sortbase/comparerlist */ 262);\r\nvar Immutable = __webpack_require__(/*! immutable */ 40);\r\nvar AtypicalSearchBar = __webpack_require__(/*! ./atypicalsearchbar */ 1214);\r\nvar userInfoActionCreator = __webpack_require__(/*! ../../actions/userinfo/userinfoactioncreator */ 255);\r\nvar responseHelper = __webpack_require__(/*! ../utility/responsehelper/responsehelper */ 249);\r\nvar markerOperationModeFactory = __webpack_require__(/*! ../utility/markeroperationmode/markeroperationmodefactory */ 232);\r\nvar MarkingCheckIndicator = __webpack_require__(/*! ./markingcheckindicator */ 1222);\r\nvar WorklistFilter = __webpack_require__(/*! ./worklistfilter */ 1242);\r\nvar stringFormatHelper = __webpack_require__(/*! ../../utility/stringformat/stringformathelper */ 250);\r\nvar teamManagementStore = __webpack_require__(/*! ../../stores/teammanagement/teammanagementstore */ 245);\r\nvar htmlUtilities = __webpack_require__(/*! ../../utility/generic/htmlutilities */ 243);\r\nvar markingCheckActionCreator = __webpack_require__(/*! ../../actions/markingcheck/markingcheckactioncreator */ 311);\r\nvar eCourseworkHelper = __webpack_require__(/*! ../utility/ecoursework/ecourseworkhelper */ 238);\r\nvar PendingWorklistBanner = __webpack_require__(/*! ./shared/pendingworklistbanner */ 1231);\r\nvar constants = __webpack_require__(/*! ../utility/constants */ 241);\r\nvar stringHelper = __webpack_require__(/*! ../../utility/generic/stringhelper */ 254);\r\nvar applicationActionCreator = __webpack_require__(/*! ../../actions/applicationoffline/applicationactioncreator */ 256);\r\nvar configurableCharacteristicsNames = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicsnames */ 234);\r\nvar configurableCharacteristicsHelper = __webpack_require__(/*! ../../utility/configurablecharacteristic/configurablecharacteristicshelper */ 233);\r\n/**\r\n * React component for live worklist\r\n */\r\nvar WorkListContainer = /** @class */ (function (_super) {\r\n    __extends(WorkListContainer, _super);\r\n    /**\r\n     * @constructor\r\n     */\r\n    function WorkListContainer(props, state) {\r\n        var _this = _super.call(this, props, state) || this;\r\n        _this.isGraceTabVisible = true;\r\n        _this.gridStyle = '';\r\n        _this.isAtypicalCenterNumber = false;\r\n        _this.isAtypicalCandidateNumber = false;\r\n        _this.isSubmitDisabled = false;\r\n        _this.isErrorOccuredInWholeResponseAllocation = false;\r\n        _this.doSetMinWidth = true;\r\n        /*\r\n        * This function will pass to grid control as a callback function\r\n        */\r\n        _this.handleTileClick = function (responseId) {\r\n            if (!applicationStore.instance.isOnline) {\r\n                applicationActionCreator.checkActionInterrupted();\r\n            }\r\n            else {\r\n                var isTileView = userOptionsHelper.getUserOptionByName(userOptionKeys.SELECTED_GRID_TYPE) === 'true' ? true : false;\r\n                _this.messageNavigationArguments = {\r\n                    responseId: responseId,\r\n                    canNavigate: true,\r\n                    navigateTo: enums.MessageNavigation.toResponse,\r\n                    navigationConfirmed: false,\r\n                    hasMessageContainsDirtyValue: undefined,\r\n                    triggerPoint: enums.TriggerPoint.None\r\n                };\r\n                if (isTileView) {\r\n                    if (!messageStore.instance.isMessagePanelActive) {\r\n                        _this.onNavigatetoResponse(_this.messageNavigationArguments);\r\n                    }\r\n                    else {\r\n                        //if message panel is active call the navigation actions\r\n                        _this.messageNavigationArguments.canNavigate = false;\r\n                        _this.messageNavigationArguments.navigationConfirmed = false;\r\n                        messagingActionCreator.canMessageNavigate(_this.messageNavigationArguments);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Get the grid control id\r\n         */\r\n        _this.getGridControlId = function () {\r\n            var gridId = enums.WorklistType[_this.props.worklistType] + '_'\r\n                + enums.ResponseMode[_this.props.responseMode] + '_grid_' + _this.props.id;\r\n            return gridId;\r\n        };\r\n        // update worklist on changing marking check worklist\r\n        _this.reRender = function () {\r\n            var rightSpacer = htmlUtilities.getElementsByClassName('right-spacer');\r\n            if (rightSpacer.length > 0) {\r\n                rightSpacer.style.paddingLeft = '';\r\n            }\r\n            _this.setState({\r\n                renderedOn: Date.now(),\r\n                isTileView: false\r\n            });\r\n        };\r\n        /**\r\n         *\r\n         */\r\n        _this.updateMarkCheckWorklistAccessMessage = function () {\r\n            _this.setState({\r\n                isMarkingCheckWorklistAccessPresent: _this.props.isTeamManagementMode ? false : worklistStore.instance.isMarkingCheckWorklistAccessPresent\r\n            });\r\n        };\r\n        _this.updateMarkerInformationPanel = function () {\r\n            _this.setState({ renderedOn: Date.now() });\r\n        };\r\n        /**\r\n         * returns the worklist component based on the view (tile/list)\r\n         * @param worklistType\r\n         */\r\n        _this.getWorklistComponent = function (worklistType) {\r\n            var isQualityFeedbackMessageToBeDisplayed = qualityFeedbackHelper.isQualtiyHelperMessageNeededToBeDisplayed(_this.props.worklistType);\r\n            var grid;\r\n            if (_this.state.isTileView) {\r\n                grid = (React.createElement(GridControl, { gridRows: _this._gridRows, gridStyle: _this.gridStyle, onClickCallBack: _this.handleTileClick, id: _this.getGridControlId(), key: 'key_' + _this.props.id, worklistType: worklistType, selectedLanguage: _this.props.selectedLanguage }));\r\n            }\r\n            else {\r\n                grid = (React.createElement(\"div\", { className: classNames('grid-wrapper', { 'show-seed-message': isQualityFeedbackMessageToBeDisplayed }) },\r\n                    React.createElement(WorklistTableWrapper, { columnHeaderRows: _this._gridColumnHeaderRows, frozenHeaderRows: _this._gridFrozenHeaderRows, frozenBodyRows: _this._gridFrozenBodyRows, gridRows: _this._gridRows, getGridControlId: _this.getGridControlId, id: _this.props.id, key: 'worklistcontainer_key_' + _this.props.id, selectedLanguage: _this.props.selectedLanguage, worklistType: _this.props.worklistType, onSortClick: _this.onSortClick, doSetMinWidth: _this.doSetMinWidth, renderedOn: _this.state.renderedOn })));\r\n            }\r\n            return grid;\r\n        };\r\n        /**\r\n         * Invoked while clicking the filter\r\n         */\r\n        _this.onWorklistFilterSelected = function (selectedFilter) {\r\n            // FIre action for filter the data\r\n            worklistActionCreator.setFilteredWorklistData(qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId, selectedFilter);\r\n        };\r\n        /**\r\n         * Invoked while filtered data in the store\r\n         */\r\n        _this.onWorklistFilterChanged = function (selectedFilter) {\r\n            if (_this.state.selectedFilterType !== selectedFilter) {\r\n                var examinerRoleID = qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId;\r\n                var worklistType = _this.props.worklistType;\r\n                var remarkRequestType = _this.props.remarkRequestType;\r\n                var isDirectedRemark = _this.props.isDirectedRemark;\r\n                if (_this.props.isMarkingCheckMode) {\r\n                    examinerRoleID = worklistStore.instance.selectedMarkingCheckExaminer.examinerRoleID;\r\n                    worklistType = enums.WorklistType.live;\r\n                    remarkRequestType = enums.RemarkRequestType.Unknown;\r\n                    isDirectedRemark = false;\r\n                }\r\n                // Get script images from cache once the filter change.\r\n                worklistActionCreator.notifyWorklistTypeChange(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, examinerRoleID, qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId, worklistType, enums.ResponseMode.closed, remarkRequestType, isDirectedRemark, qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember, true, _this.props.isMarkingCheckMode);\r\n                _this.setState({\r\n                    selectedFilterType: selectedFilter,\r\n                    renderedOn: Date.now()\r\n                });\r\n            }\r\n        };\r\n        /**\r\n         * returns the header element of worklist.\r\n         */\r\n        _this.getWorklistHeader = function () {\r\n            var headingText;\r\n            if (_this.props.isMarkingCheckMode) {\r\n                var formattedString = stringFormatHelper.getUserNameFormat().toLowerCase();\r\n                formattedString = formattedString.replace('{initials}', worklistStore.instance.selectedMarkingCheckExaminer.toExaminer.initials);\r\n                formattedString = formattedString.replace('{surname}', worklistStore.instance.selectedMarkingCheckExaminer.toExaminer.surname);\r\n                headingText = localeStore.instance.TranslateText('marking.worklist.worklist-headers.live')\r\n                    + ' ' + localeStore.instance.TranslateText('marking.worklist.perform-marking-check.worklist-of-examiner')\r\n                    + ' ' + formattedString;\r\n            }\r\n            else {\r\n                switch (_this.props.worklistType) {\r\n                    case enums.WorklistType.live:\r\n                        headingText = localeStore.instance.TranslateText('marking.worklist.worklist-headers.live');\r\n                        break;\r\n                    case enums.WorklistType.atypical:\r\n                        headingText = localeStore.instance.TranslateText('marking.worklist.worklist-headers.atypical');\r\n                        break;\r\n                    case enums.WorklistType.practice:\r\n                        headingText = localeStore.instance.TranslateText('marking.worklist.worklist-headers.practice');\r\n                        break;\r\n                    case enums.WorklistType.standardisation:\r\n                        headingText = localeStore.instance.TranslateText('marking.worklist.worklist-headers.standardisation');\r\n                        break;\r\n                    case enums.WorklistType.secondstandardisation:\r\n                        headingText = (qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember === false ?\r\n                            localeStore.instance.TranslateText('marking.worklist.worklist-headers.secondstandardisation')\r\n                            : localeStore.instance.TranslateText('marking.worklist.worklist-headers.stm-standardisation'));\r\n                        break;\r\n                    case enums.WorklistType.directedRemark:\r\n                        headingText = stringHelper.format(localeStore.instance.TranslateText('generic.remark-types.long-names.' +\r\n                            enums.RemarkRequestType[_this.props.remarkRequestType]), [constants.NONBREAKING_HYPHEN_UNICODE]);\r\n                        break;\r\n                    case enums.WorklistType.pooledRemark:\r\n                        headingText = stringHelper.format(localeStore.instance.TranslateText('generic.remark-types.long-names.' +\r\n                            enums.RemarkRequestType[_this.props.remarkRequestType]), [constants.NONBREAKING_HYPHEN_UNICODE]);\r\n                        break;\r\n                    case enums.WorklistType.simulation:\r\n                        headingText = localeStore.instance.TranslateText('marking.worklist.worklist-headers.simulation');\r\n                        break;\r\n                }\r\n            }\r\n            var element = (React.createElement(\"h3\", { className: 'shift-left page-title', id: 'worklistTitle' },\r\n                React.createElement(\"span\", { className: 'page-title-text' }, headingText),\r\n                React.createElement(\"span\", { className: 'right-spacer' })));\r\n            return element;\r\n        };\r\n        /**\r\n         * returns the Atypical search bar for atypical worklist\r\n         */\r\n        _this.getAtypicalSearchBar = function () {\r\n            var atypicalSearchBarElement = null;\r\n            if (_this.props.selectedTab === enums.ResponseMode.open) {\r\n                atypicalSearchBarElement = React.createElement(AtypicalSearchBar, { id: 'atypicalSearchBar', key: 'atypicalSearchBar', disableControls: !qigStore.instance.isAtypicalAvailable, selectedLanguage: _this.props.selectedLanguage });\r\n            }\r\n            else {\r\n                atypicalSearchBarElement = (React.createElement(\"div\", { className: 'atypical-search-wrap middle-content' }));\r\n            }\r\n            return atypicalSearchBarElement;\r\n        };\r\n        /**\r\n         * Method called when response allocated\r\n         * @param responseAllocationErrorCode\r\n         */\r\n        _this.onResponseAllocated = function (responseAllocationErrorCode) {\r\n            if (responseStore.instance.isWholeResponseAllocation &&\r\n                (responseAllocationErrorCode === enums.ResponseAllocationErrorCode.suspendedMarker ||\r\n                    responseAllocationErrorCode === enums.ResponseAllocationErrorCode.unApprovedMarker)) {\r\n                // Visibility of whole response button handled for this particular error code\r\n                _this.isErrorOccuredInWholeResponseAllocation = true;\r\n            }\r\n        };\r\n        /**\r\n         * Function to bypass sorting for a specific requirment.\r\n         */\r\n        _this.isSortRequired = function () {\r\n            var isSortRequired = true;\r\n            // To bypass sorting in closed response, if any quality feedback is pending\r\n            if (_this.props.responseMode === enums.ResponseMode.closed\r\n                && qualityFeedbackHelper.isQualtiyHelperMessageNeededToBeDisplayed(_this.props.worklistType) === true) {\r\n                isSortRequired = false;\r\n                // setting the default sort order for closed response, if any quality feedback is pending.\r\n                _this.comparerName = comparerList[comparerList.submittedDateComparer];\r\n                _this.sortDirection = enums.SortDirection.Descending;\r\n            }\r\n            return isSortRequired;\r\n        };\r\n        _this.setLoadingindicator();\r\n        /* getting user preference for the grid view */\r\n        _this.state = {\r\n            isTileView: _this.props.isTeamManagementMode || _this.props.isMarkingCheckMode ? false :\r\n                userOptionsHelper.getUserOptionByName(userOptionKeys.SELECTED_GRID_TYPE) === 'true' ? true : false,\r\n            isGridviewChanged: false,\r\n            isMarkingCheckWorklistAccessPresent: false,\r\n            selectedFilterType: worklistStore.instance.getSelectedFilterDetails.get(teamManagementStore.instance.examinerDrillDownData ?\r\n                teamManagementStore.instance.examinerDrillDownData.examinerRoleId : 0, enums.WorklistSeedFilter.All)\r\n        };\r\n        // resetting the comparer at start\r\n        _this.resetSortAttributes();\r\n        _this.toggleLeftPanel = _this.toggleLeftPanel.bind(_this);\r\n        _this.selectTab = _this.selectTab.bind(_this);\r\n        _this.toggleGridView = _this.toggleGridView.bind(_this);\r\n        _this.onSortClick = _this.onSortClick.bind(_this);\r\n        _this.resetSortAttributes = _this.resetSortAttributes.bind(_this);\r\n        _this.onResponseAllocated = _this.onResponseAllocated.bind(_this);\r\n        return _this;\r\n    }\r\n    /**\r\n     * Render method\r\n     */\r\n    WorkListContainer.prototype.render = function () {\r\n        this.setLoadingindicator();\r\n        /* if there are no match and the data has not been loaded, show busy indicator */\r\n        if (this.props.worklistType === undefined || this.props.worklistType === enums.WorklistType.none) {\r\n            return this.loading;\r\n        }\r\n        else {\r\n            this.worklistHelper = worklistFactory.getWorklistHelper(this.props.worklistType);\r\n            this.setWorklistData();\r\n            var validationResponseAllocationButtonValidationParam = responseAllocationButtonValidationHelper.validate(this.openWorklist, targetHelper.getExaminerQigStatus(), targetHelper.getExaminerApproval(), this.props.worklistType, this.props.remarkRequestType, this.props.isTeamManagementMode || this.props.isMarkingCheckMode);\r\n            this.showHideAllocateNewResponseButton(validationResponseAllocationButtonValidationParam);\r\n            this.isSubmitDisabled = markerOperationModeFactory.operationMode.isSubmitDisabled(this.props.worklistType);\r\n            var currentTarget = targetSummaryStore.instance.getCurrentTarget();\r\n            var atypicalSearchVisible = this.props.worklistType === enums.WorklistType.atypical\r\n                && !this.props.isTeamManagementMode;\r\n            var responseDownloadButton = atypicalSearchVisible ?\r\n                this.getAtypicalSearchBar() :\r\n                (React.createElement(\"div\", { className: 'get-response-wrapper' },\r\n                    this.getNewResponseButton,\r\n                    this.markingCheckCompleteButton()));\r\n            var stylePanel = {\r\n                minWidth: 0\r\n            };\r\n            var element = htmlUtilities.getElementsByClassName('get-response-wrapper');\r\n            // Added for styling the worklist when there is no get new response button.\r\n            if (this.getNewResponseButton === undefined) {\r\n                stylePanel = { minWidth: 0 };\r\n            }\r\n            else if (element.length > 0 && this.props.responseMode === enums.ResponseMode.open) {\r\n                var minwidth = element[0].clientWidth;\r\n                stylePanel = { minWidth: minwidth };\r\n            }\r\n            return (React.createElement(\"div\", { className: 'column-right tab-holder horizontal response-tabs' },\r\n                React.createElement(\"a\", { href: 'javascript:void(0);', className: 'toggle-left-panel', id: 'togglePanel', title: this.props.isMarkingCheckMode ?\r\n                        localeStore.instance.TranslateText('marking.worklist.perform-marking-check.show-hide-left-panel-tooltip') :\r\n                        localeStore.instance.TranslateText('marking.worklist.left-panel.show-hide-panel-tooltip'), onClick: this.toggleLeftPanel },\r\n                    React.createElement(\"span\", { className: 'sprite-icon panel-toggle-icon' }, \"panel toggle\")),\r\n                React.createElement(\"div\", { className: 'wrapper' },\r\n                    React.createElement(MarkingCheckIndicator, { id: 'marking_Check_Worklist_Access_Indicator', key: 'marking_Check_Worklist_Access_Indicator', isMarkingCheckAvailable: worklistStore.instance.isMarkingCheckWorklistAccessPresent, isMarkCheckWorklist: this.props.isMarkingCheckMode }),\r\n                    React.createElement(\"div\", { className: classNames('clearfix wl-page-header', {\r\n                            'header-search ': atypicalSearchVisible,\r\n                            'tabs-2': (qigStore.instance.selectedQIGForMarkerOperation &&\r\n                                !qigStore.instance.selectedQIGForMarkerOperation.hasGracePeriod &&\r\n                                !(currentTarget.examinerProgress.atypicalPendingResponsesCount > 0) &&\r\n                                atypicalSearchVisible) ? true : false\r\n                        }) },\r\n                        this.getWorklistHeader(),\r\n                        React.createElement(\"div\", { className: 'tab-nav-holder' },\r\n                            React.createElement(TabControl, { tabHeaders: tabHelper.getTabHeaderData(this.props.worklistTabDetails, this.props.selectedTab), selectTab: this.selectTab })),\r\n                        React.createElement(\"div\", { className: classNames('response-button-holder arrow-tab ', {\r\n                                'atypical-search ': atypicalSearchVisible\r\n                            }), style: stylePanel },\r\n                            React.createElement(\"div\", { className: classNames('arrow-link', {\r\n                                    'vertical-middle': atypicalSearchVisible\r\n                                }) },\r\n                                responseDownloadButton,\r\n                                \" \")),\r\n                        React.createElement(\"div\", { className: 'tab-right-end arrow-tab' },\r\n                            React.createElement(\"div\", { className: 'arrow-link' }, \" \"))),\r\n                    React.createElement(TabContentContainer, { renderedOn: this.state.renderedOn, tabContents: this.getTabData(validationResponseAllocationButtonValidationParam) }))));\r\n        }\r\n    };\r\n    /**\r\n     * Unsubscribe events\r\n     */\r\n    WorkListContainer.prototype.componentWillUnmount = function () {\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.MARKING_CHECK_WORKLIST_ACCESS_STATUS_UPDATED, this.updateMarkCheckWorklistAccessMessage);\r\n        examinerStore.instance.removeListener(examinerStore.ExaminerStore.MARKER_INFO_UPDATED_EVENT, this.updateMarkerInformationPanel);\r\n        messageStore.instance.removeListener(messageStore.MessageStore.MESSAGE_NAVIGATION_EVENT, this.onNavigatetoResponse);\r\n        qigStore.instance.removeListener(qigStore.QigStore.QIG_SELECTED_EVENT, this.resetSortAttributes);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.WORKLIST_FILTER_CHANGED, this.onWorklistFilterChanged);\r\n        worklistStore.instance.removeListener(worklistStore.WorkListStore.MARK_CHECK_EXAMINERS_DATA_RETRIVED, this.reRender);\r\n        responseStore.instance.removeListener(responseStore.ResponseStore.RESPONSE_ALLOCATED_EVENT, this.onResponseAllocated);\r\n    };\r\n    /**\r\n     * Comparing the props to check the updats are made by self\r\n     * @param {Props} nextProps\r\n     */\r\n    WorkListContainer.prototype.componentWillReceiveProps = function (nextProps) {\r\n        if (this.props.worklistType !== nextProps.worklistType || this.props.responseMode !== nextProps.responseMode\r\n            || this.props.remarkRequestType !== nextProps.remarkRequestType) {\r\n            this.resetSortAttributes();\r\n        }\r\n        if (markerOperationModeFactory.operationMode.isTeamManagementMode ||\r\n            this.props.isMarkingCheckMode) {\r\n            this.setState({\r\n                isTileView: false\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                isTileView: userOptionsHelper.getUserOptionByName(userOptionKeys.SELECTED_GRID_TYPE) === 'true' ? true : false\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Marking check Complete button details\r\n     */\r\n    WorkListContainer.prototype.markingCheckCompleteButton = function () {\r\n        if (!this.props.isRefreshing && this.props.isMarkingCheckMode) {\r\n            return (React.createElement(\"button\", { className: 'primary rounded large download-rsp-btn split-btn popup-nav', id: 'marking_check_Complete_button_id', key: 'marking_check_Complete_button_key', onClick: this.OnMarkCheckCompleteCLick, disabled: false }, localeStore.instance.TranslateText('marking.worklist.perform-marking-check.set-marking-as-checked-button')));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Show/Hide allocate new response button\r\n     * @param validationResponseAllocationButtonParam\r\n     */\r\n    WorkListContainer.prototype.showHideAllocateNewResponseButton = function (validationResponseAllocationButtonParam) {\r\n        if ((this.props.worklistType === enums.WorklistType.live || this.props.worklistType === enums.WorklistType.pooledRemark\r\n            || this.props.worklistType === enums.WorklistType.simulation)\r\n            && this.props.selectedTab === enums.ResponseMode.open\r\n            && this.props.responseMode === enums.ResponseMode.open\r\n            && !this.props.isRefreshing\r\n            && !this.props.isMarkingCheckMode) {\r\n            this.getNewResponseButton = validationResponseAllocationButtonParam.IsResponseAllocateButtonVisible ?\r\n                (React.createElement(AllocateResponseButton, { id: 'getNewResponseButton', key: 'getNewResponseButton', selectedLanguage: this.props.selectedLanguage, title: validationResponseAllocationButtonParam.ResponseAllocationButtonTitle, isEnabled: validationResponseAllocationButtonParam.IsResponseAllocateButtonEnabled, worklistType: this.props.worklistType, buttonMainText: validationResponseAllocationButtonParam.ResponseAllocationButtonMainText, buttonSubText: validationResponseAllocationButtonParam.ResponseAllocationButtonSubText, buttonSingleResponseText: validationResponseAllocationButtonParam.\r\n                        ResponseAllocationButtonSingleResponseText, buttonUpToOpenResponseLimitText: validationResponseAllocationButtonParam.\r\n                        ResponseAllocationButtonUpToOpenResponseText, isWholeResponseButtonAvailable: validationResponseAllocationButtonParam.\r\n                        IsWholeResponseResponseAllocationButtonAvailable && !this.isErrorOccuredInWholeResponseAllocation })) : null;\r\n        }\r\n        else {\r\n            this.getNewResponseButton = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * When the markcheck Complete button is clicked\r\n     */\r\n    WorkListContainer.prototype.OnMarkCheckCompleteCLick = function () {\r\n        worklistActionCreator.markingCheckComplete();\r\n    };\r\n    /**\r\n     * This will returns the tab contents\r\n     * @param validationResponseAllocationButtonValidationParam\r\n     */\r\n    WorkListContainer.prototype.getTabData = function (validationResponseAllocationButtonValidationParam) {\r\n        var tabContents = [];\r\n        var tabToBeSelected = markerOperationModeFactory.operationMode.tabToBeSelected(this.props.selectedTab);\r\n        tabContents.push({\r\n            index: enums.ResponseMode.open,\r\n            class: 'tab-content resp-open',\r\n            isSelected: tabToBeSelected === enums.ResponseMode.open,\r\n            id: 'responseTab_Open',\r\n            content: this.showOpenGridContent(validationResponseAllocationButtonValidationParam)\r\n        });\r\n        if (this.isGraceTabVisible) {\r\n            tabContents.push({\r\n                index: enums.ResponseMode.pending,\r\n                class: 'wrapper tab-content resp-grace',\r\n                isSelected: tabToBeSelected === enums.ResponseMode.pending,\r\n                id: 'responseTab_Pending',\r\n                content: this.showPendingGridContent()\r\n            });\r\n        }\r\n        tabContents.push({\r\n            index: enums.ResponseMode.closed,\r\n            class: 'wrapper tab-content resp-closed',\r\n            isSelected: tabToBeSelected === enums.ResponseMode.closed,\r\n            id: 'responseTab_Closed',\r\n            content: this.showClosedGridContent()\r\n        });\r\n        return tabContents;\r\n    };\r\n    /**\r\n     * Resets the comparer and sort order\r\n     */\r\n    WorkListContainer.prototype.resetSortAttributes = function () {\r\n        this.comparerName = undefined;\r\n        this.sortDirection = undefined;\r\n    };\r\n    /**\r\n     * This method will update the selected tab.\r\n     * @param selectedTabIndex\r\n     */\r\n    WorkListContainer.prototype.selectTab = function (selectedTabIndex) {\r\n        if (!applicationStore.instance.isOnline) {\r\n            applicationActionCreator.checkActionInterrupted();\r\n        }\r\n        else {\r\n            if (selectedTabIndex !== this.props.selectedTab) {\r\n                this.props.switchTab(selectedTabIndex);\r\n                this.setState({\r\n                    isTileView: this.state.isTileView\r\n                });\r\n                this.getWorklistDataOnTabSwitch(selectedTabIndex);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Get worklist data on tab switch\r\n     * @param selectedTabIndex\r\n     */\r\n    WorkListContainer.prototype.getWorklistDataOnTabSwitch = function (selectedTabIndex) {\r\n        var examinerRoleID = qigStore.instance.selectedQIGForMarkerOperation.examinerRoleId;\r\n        var worklistType = this.props.worklistType;\r\n        var remarkRequestType = this.props.remarkRequestType;\r\n        var isDirectedRemark = this.props.isDirectedRemark;\r\n        if (this.props.isMarkingCheckMode) {\r\n            examinerRoleID = worklistStore.instance.selectedMarkingCheckExaminer.examinerRoleID;\r\n            worklistType = enums.WorklistType.live;\r\n            remarkRequestType = enums.RemarkRequestType.Unknown;\r\n            isDirectedRemark = false;\r\n        }\r\n        var hasComplexOptionality = configurableCharacteristicsHelper.getCharacteristicValue(configurableCharacteristicsNames.ComplexOptionality, markingStore.instance.selectedQIGMarkSchemeGroupId).toLowerCase() === 'true' ? true : false;\r\n        worklistActionCreator.notifyWorklistTypeChange(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId, examinerRoleID, qigStore.instance.selectedQIGForMarkerOperation.questionPaperPartId, worklistType, selectedTabIndex, remarkRequestType, isDirectedRemark, qigStore.instance.selectedQIGForMarkerOperation.isElectronicStandardisationTeamMember, false, this.props.isMarkingCheckMode, hasComplexOptionality);\r\n    };\r\n    /**\r\n     * Set the corresponding worklist data\r\n     */\r\n    WorkListContainer.prototype.setWorklistData = function () {\r\n        var worklistDetails = this.props.isRefreshing ? undefined :\r\n            worklistStore.instance.getWorklistDetails(this.props.worklistType, this.props.responseMode);\r\n        switch (this.props.responseMode) {\r\n            case enums.ResponseMode.open:\r\n                this.gridStyle = 'data-grid work-list-grid padding-top-15';\r\n                /** if the view is being refreshed on tab switch, clear the collection so that the view shows a loading indicator */\r\n                this.openWorklist = worklistDetails;\r\n                break;\r\n            case enums.ResponseMode.closed:\r\n                this.gridStyle = 'data-grid work-list-grid padding-top-15';\r\n                this.closedWorklist = worklistDetails;\r\n                break;\r\n            case enums.ResponseMode.pending:\r\n                this.gridStyle = 'data-grid work-list-grid';\r\n                this.pendingWorklist = worklistDetails;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * switch content in grid container according to response mode.\r\n     * @param responseMode\r\n     */\r\n    WorkListContainer.prototype.switchWorklistResponseMode = function (worklist) {\r\n        var gridTypeSelected;\r\n        gridTypeSelected = enums.GridType.tiled;\r\n        /* On switching grid view the style is updating twice for the animation to work.\r\n         * This checking will avoid duplicate calls on switching the grid view.  */\r\n        if (!this.state.isGridviewChanged) {\r\n            /* this will check which view(tiled/detailed) should be rendered */\r\n            if (this.state.isTileView) {\r\n                gridTypeSelected = enums.GridType.tiled;\r\n            }\r\n            else {\r\n                gridTypeSelected = enums.GridType.detailed;\r\n            }\r\n        }\r\n        //Sets the local variables with row data collection\r\n        this.setRowDefinitionCollections(gridTypeSelected, worklist);\r\n        var result;\r\n        var grid;\r\n        var gridTopArea;\r\n        var hasResponsesInWorklist = worklist.responses.count() > 0;\r\n        if (hasResponsesInWorklist || this.state.isGridviewChanged) {\r\n            grid = this.getWorklistComponent(this.props.worklistType);\r\n        }\r\n        // This section is not requred if filter is displayed\r\n        if (hasResponsesInWorklist && !markerOperationModeFactory.operationMode.isWorklistFilterShouldbeVisible\r\n            && !markerOperationModeFactory.operationMode.isTeamManagementMode) {\r\n            gridTopArea = this.gridTopArea;\r\n        }\r\n        result = (React.createElement(\"div\", { className: classNames({\r\n                'grid-holder tile-view': this.state.isGridviewChanged ? false : this.state.isTileView ? true : false,\r\n                'grid-holder grid-view': this.state.isGridviewChanged ? false : !this.state.isTileView ? true : false,\r\n                'grid-holder': this.state.isGridviewChanged\r\n            }) },\r\n            React.createElement(PendingWorklistBanner, { id: 'pendingworklistbannermessage', key: 'pendingworklistbanner', selectedLanguage: this.props.selectedLanguage, isVisible: markerOperationModeFactory.operationMode.shouldDisplayPendingWorklistBanner }),\r\n            React.createElement(WorklistFilter, { id: 'worklistFilter', key: 'worklistFilter', isVisible: markerOperationModeFactory.operationMode.isWorklistFilterShouldbeVisible, selectedFilter: this.state.selectedFilterType, onFilterChanged: this.onWorklistFilterSelected, markSchemeGroupId: qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId }),\r\n            gridTopArea,\r\n            grid));\r\n        return result;\r\n    };\r\n    Object.defineProperty(WorkListContainer.prototype, \"gridTopArea\", {\r\n        /**\r\n         * Get the top Area in the worklist\r\n         */\r\n        get: function () {\r\n            return (React.createElement(\"div\", { className: 'col-wrap grid-nav padding-bottom-15' },\r\n                React.createElement(\"div\", { className: 'col-3-of-12' }, (this.isSubmittButtonVisible()) ?\r\n                    (React.createElement(SubmitResponse, { id: this.props.id, key: 'key_' + this.props.id, isDisabled: this.isSubmitDisabled, selectedLanguage: this.props.selectedLanguage, isSubmitAll: true })) :\r\n                    '\\u00a0'),\r\n                React.createElement(\"div\", { className: 'col-9-of-12' }, this.getGridToggleButtons())));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     *  This method will returns the grid toggle buttons if the current marker operation mode is marking.\r\n     */\r\n    WorkListContainer.prototype.getGridToggleButtons = function () {\r\n        if (!(this.props.isTeamManagementMode || this.props.isMarkingCheckMode)) {\r\n            return (React.createElement(\"div\", { className: 'shift-right' },\r\n                React.createElement(\"ul\", { className: 'filter-menu' },\r\n                    React.createElement(\"li\", { className: 'switch-view-btn' },\r\n                        React.createElement(GridToggleButton, { key: 'gridtogglebuttonTile_key_' + this.props.id, id: 'gridtogglebuttonTile_' + this.props.id, toggleGridView: this.toggleGridView, isSelected: this.state.isTileView, buttonType: enums.GridType.tiled, selectedLanguage: this.props.selectedLanguage }),\r\n                        React.createElement(GridToggleButton, { key: 'gridtogglebuttonDetail_key_' + this.props.id, id: 'gridtogglebuttonDetail_' + this.props.id, toggleGridView: this.toggleGridView, isSelected: !this.state.isTileView, buttonType: enums.GridType.detailed, selectedLanguage: this.props.selectedLanguage })))));\r\n        }\r\n    };\r\n    /**\r\n     * Show live closed response list grid\r\n     */\r\n    WorkListContainer.prototype.showClosedGridContent = function () {\r\n        var result;\r\n        if (this.props.responseMode === enums.ResponseMode.closed) {\r\n            /** if live closed response list is filled show grid content */\r\n            if (this.closedWorklist) {\r\n                result = this.switchWorklistResponseMode(this.closedWorklist);\r\n            }\r\n            else {\r\n                result = this.props.isRefreshing ? this.loading : undefined;\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n    /**\r\n     * Show live closed response list grid\r\n     */\r\n    WorkListContainer.prototype.showPendingGridContent = function () {\r\n        var result;\r\n        if (this.props.responseMode === enums.ResponseMode.pending) {\r\n            /** if live pending response list is filled show grid content */\r\n            if (this.pendingWorklist && this.pendingWorklist.responses.count() > 0) {\r\n                result = this.switchWorklistResponseMode(this.pendingWorklist);\r\n            }\r\n            else {\r\n                result = this.props.isRefreshing ? this.loading : undefined;\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n    /**\r\n     * Show live open response list grid\r\n     */\r\n    WorkListContainer.prototype.showOpenGridContent = function (validationResponseAllocationButtonParam) {\r\n        var result;\r\n        var examinerQigStatus = targetHelper.getExaminerQigStatus();\r\n        var currentTarget = targetSummaryStore.instance.getCurrentTarget();\r\n        var isAggregateQIGTargetsON = qigStore.instance.isAggregatedQigCCEnabledForCurrentQig;\r\n        if (this.openWorklist && this.props.responseMode === enums.ResponseMode.open) {\r\n            /** if live open response is filled show grid content */\r\n            if (this.props.worklistType === enums.WorklistType.live ?\r\n                (this.openWorklist.concurrentLimit <= currentTarget.examinerProgress.atypicalOpenResponsesCount\r\n                    || this.openWorklist.responses.count() > 0)\r\n                : this.openWorklist.responses.count() > 0) {\r\n                result = this.switchWorklistResponseMode(this.openWorklist);\r\n            }\r\n            else if (markerOperationModeFactory.operationMode.shouldDisplayHelperMessage) {\r\n                if ((this.props.worklistType === enums.WorklistType.live) &&\r\n                    (examinerQigStatus === enums.ExaminerQIGStatus.LiveComplete\r\n                        || examinerQigStatus === enums.ExaminerQIGStatus.OverAllTargetCompleted)) {\r\n                    // Target reached worklist messages\r\n                    result = React.createElement(WorkListMessage, { id: 'workListMessage', key: 'workListMessage', selectedLanguage: this.props.selectedLanguage, hasTargetCompleted: true, hasResponsesAvailableInPool: false, isAggregateQIGTargetsON: isAggregateQIGTargetsON });\r\n                }\r\n                else if ((this.props.worklistType === enums.WorklistType.live) && this.openWorklist.unallocatedResponsesCount > 0\r\n                    && validationResponseAllocationButtonParam.IsWorklistInformationBannerVisible && !this.doShowBannerForOnDemand) {\r\n                    var concurrentLimit = isAggregateQIGTargetsON ?\r\n                        currentTarget.aggregatedMaximumConcurrentLimit - currentTarget.examinerProgress.atypicalOpenResponsesCount :\r\n                        currentTarget.maximumConcurrentLimit - currentTarget.examinerProgress.atypicalOpenResponsesCount;\r\n                    // live worklist messages\r\n                    result = React.createElement(WorkListMessage, { id: 'workListMessage', key: 'workListMessage', selectedLanguage: this.props.selectedLanguage, hasResponsesAvailableInPool: true, responseConcurrentLimit: concurrentLimit, isAggregateQIGTargetsON: isAggregateQIGTargetsON });\r\n                }\r\n                else if ((this.props.worklistType === enums.WorklistType.live) &&\r\n                    validationResponseAllocationButtonParam.IsWorklistInformationBannerVisible && !this.doShowBannerForOnDemand) {\r\n                    // live worklist messages\r\n                    result = React.createElement(WorkListMessage, { id: 'workListMessage', key: 'workListMessage', selectedLanguage: this.props.selectedLanguage, hasResponsesAvailableInPool: false });\r\n                }\r\n                else if (this.props.worklistType === enums.WorklistType.standardisation ||\r\n                    this.props.worklistType === enums.WorklistType.secondstandardisation) {\r\n                    // standardisation worklist awaiting approval message\r\n                    result = React.createElement(StandardisationWorklistMessage, { id: this.props.id, key: 'key_' + this.props.id, selectedLanguage: this.props.selectedLanguage });\r\n                }\r\n                else if (this.props.worklistType === enums.WorklistType.simulation &&\r\n                    validationResponseAllocationButtonParam.IsWorklistInformationBannerVisible) {\r\n                    var showResponseAvailableHelperMessage = (this.openWorklist.unallocatedResponsesCount > 0 && this.openWorklist.responses.count() === 0);\r\n                    result = React.createElement(WorkListMessage, { id: 'workListMessage', key: 'workListMessage', selectedLanguage: this.props.selectedLanguage, hasResponsesAvailableInPool: showResponseAvailableHelperMessage, isSimulation: true });\r\n                }\r\n                else {\r\n                    result = null;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            result = this.props.isRefreshing ? this.loading : undefined;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * This method will call parent component function to toggle left panel\r\n     */\r\n    WorkListContainer.prototype.toggleLeftPanel = function () {\r\n        this.props.toggleLeftPanel();\r\n    };\r\n    /**\r\n     * Generating Grid Rows\r\n     */\r\n    WorkListContainer.prototype.getGridRows = function (liveOpenResponseList, worklistType, responseType, gridType, comparerName, sortDirection) {\r\n        return this.worklistHelper.generateRowDefinion(liveOpenResponseList, responseType, gridType);\r\n    };\r\n    /**\r\n     * Generating Grid Rows\r\n     */\r\n    WorkListContainer.prototype.getGridColumnHeaderRows = function (worklistType, responseType, comparerName, sortDirection) {\r\n        return this.worklistHelper.generateTableHeader(responseType, worklistType, comparerName, sortDirection);\r\n    };\r\n    /**\r\n     * Generating Grid Rows\r\n     */\r\n    WorkListContainer.prototype.getFrozenTableBodyRows = function (responseList, worklistType, responseType, comparerName, sortDirection) {\r\n        return this.worklistHelper.generateFrozenRowBody(responseList, responseType, worklistType);\r\n    };\r\n    /**\r\n     * Generating Grid Rows\r\n     */\r\n    WorkListContainer.prototype.getFrozenTableHeaderRow = function (responseList, worklistType, responseType, comparerName, sortDirection) {\r\n        return this.worklistHelper.generateFrozenRowHeader(responseList, responseType, worklistType, comparerName, sortDirection);\r\n    };\r\n    /**\r\n     * Handle animation of grid view toggle on componentDidUpdate\r\n     */\r\n    WorkListContainer.prototype.componentDidUpdate = function () {\r\n        this.triggerAnimation();\r\n        var buttonHolder = htmlUtilities.getElementsByClassName('response-button-holder');\r\n        var rightSpacer = htmlUtilities.getElementsByClassName('right-spacer');\r\n        if (buttonHolder.length > 0 && rightSpacer.length > 0) {\r\n            if (buttonHolder.length > 0) {\r\n                rightSpacer[0].style.paddingLeft = buttonHolder[0].clientWidth + 'px';\r\n            }\r\n            else {\r\n                rightSpacer[0].style.paddingLeft = '';\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Handle animation of grid view toggle on componentDidMount\r\n     */\r\n    WorkListContainer.prototype.componentDidMount = function () {\r\n        examinerStore.instance.addListener(examinerStore.ExaminerStore.MARKER_INFO_UPDATED_EVENT, this.updateMarkerInformationPanel);\r\n        messageStore.instance.addListener(messageStore.MessageStore.MESSAGE_NAVIGATION_EVENT, this.onNavigatetoResponse);\r\n        qigStore.instance.addListener(qigStore.QigStore.QIG_SELECTED_EVENT, this.resetSortAttributes);\r\n        this.triggerAnimation();\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.MARKING_CHECK_WORKLIST_ACCESS_STATUS_UPDATED, this.updateMarkCheckWorklistAccessMessage);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.WORKLIST_FILTER_CHANGED, this.onWorklistFilterChanged);\r\n        worklistStore.instance.addListener(worklistStore.WorkListStore.MARK_CHECK_EXAMINERS_DATA_RETRIVED, this.reRender);\r\n        responseStore.instance.addListener(responseStore.ResponseStore.RESPONSE_ALLOCATED_EVENT, this.onResponseAllocated);\r\n    };\r\n    /**\r\n     * this will trigger the animation on grid view toggle.\r\n     */\r\n    WorkListContainer.prototype.triggerAnimation = function () {\r\n        if (this.state.isGridviewChanged) {\r\n            var that_1 = this;\r\n            /* setTimeout is used with delay 0 to work animation in Firefox and Chrome */\r\n            setTimeout(function () {\r\n                that_1.setState({\r\n                    isTileView: that_1.state.isTileView,\r\n                    isGridviewChanged: false\r\n                });\r\n                worklistActionCreator.setScrollWorklistColumns();\r\n            }, 0);\r\n        }\r\n    };\r\n    /**\r\n     * this will change the grid view (tile/detail).\r\n     */\r\n    WorkListContainer.prototype.toggleGridView = function () {\r\n        var isTileViewSelected = !this.state.isTileView;\r\n        /* Saving the selected grid view in user options */\r\n        userOptionsHelper.save(userOptionKeys.SELECTED_GRID_TYPE, String(isTileViewSelected), true);\r\n        this.setState({\r\n            isTileView: isTileViewSelected,\r\n            isGridviewChanged: true\r\n        });\r\n    };\r\n    /**\r\n     * returns whether the submitt all response button is visible or not.\r\n     */\r\n    WorkListContainer.prototype.isSubmittButtonVisible = function () {\r\n        // we don't need to display the submit button when the marker operation mode is TeamManagement or marking check\r\n        if (this.props.isTeamManagementMode || this.props.isMarkingCheckMode) {\r\n            return false;\r\n        }\r\n        else {\r\n            /* For an ecoursework component we have consider both allfilesviewed and submitenabled statuses\r\n               for showing submit button in open response */\r\n            var isSubmitEnabled = false;\r\n            if (this.props.responseMode === enums.ResponseMode.open) {\r\n                if (eCourseworkHelper.isECourseworkComponent) {\r\n                    isSubmitEnabled = this.openWorklist.responses.\r\n                        filter(function (x) { return x.isSubmitEnabled === true\r\n                        && x.allFilesViewed === true; }).count() > 0;\r\n                }\r\n                else {\r\n                    isSubmitEnabled = this.openWorklist.responses.\r\n                        filter(function (x) { return x.isSubmitEnabled === true; }).count() > 0;\r\n                }\r\n            }\r\n            if (!qigStore.instance.isAtypicalAvailable && this.props.responseMode === enums.ResponseMode.open\r\n                && this.props.worklistType === enums.WorklistType.atypical) {\r\n                isSubmitEnabled = false;\r\n            }\r\n            return isSubmitEnabled;\r\n        }\r\n    };\r\n    /**\r\n     *  Get grid rows and associated table rows ans ets associated local variables\r\n     */\r\n    WorkListContainer.prototype.setRowDefinitionCollections = function (gridTypeSelected, worklist) {\r\n        this.worklistHelper = worklistFactory.getWorklistHelper(this.props.worklistType);\r\n        if (!this.comparerName) {\r\n            this.setDefaultComparer();\r\n        }\r\n        if (this.isSortRequired() === true) {\r\n            // if the direction is descending the text 'Desc' is appending to the comparer name since all\r\n            // descending comparere has the same name followed by text 'Desc'\r\n            var _comparerName = (this.sortDirection === enums.SortDirection.Ascending) ? this.comparerName : this.comparerName + 'Desc';\r\n            worklist.responses = Immutable.List(sortHelper.sort(worklist.responses.toArray(), comparerList[_comparerName]));\r\n        }\r\n        // the below order of fecthing the grid data should be maintained.\r\n        this._gridRows = this.getGridRows(worklist, this.props.worklistType, this.props.responseMode, gridTypeSelected, this.comparerName, this.sortDirection);\r\n        this._gridColumnHeaderRows = this.getGridColumnHeaderRows(this.props.worklistType, this.props.responseMode, this.comparerName, this.sortDirection);\r\n        this._gridFrozenBodyRows = this.getFrozenTableBodyRows(worklist, this.props.worklistType, this.props.responseMode, this.comparerName, this.sortDirection);\r\n        this._gridFrozenHeaderRows = this.getFrozenTableHeaderRow(worklist, this.props.worklistType, this.props.responseMode, this.comparerName, this.sortDirection);\r\n    };\r\n    /**\r\n     * Set the comparer for the current worklist based on the worklisttype,qigId and responseMode\r\n     */\r\n    WorkListContainer.prototype.setDefaultComparer = function () {\r\n        var _this = this;\r\n        var defaultComparers = worklistStore.instance.responseSortDetails;\r\n        var qigId = qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId;\r\n        var worklistType = this.props.worklistType;\r\n        var responseMode = this.props.responseMode;\r\n        var entry = defaultComparers.filter(function (x) {\r\n            return x.worklistType === worklistType && x.responseMode === responseMode\r\n                && x.qig === qigId && x.remarkRequestType === _this.props.remarkRequestType;\r\n        });\r\n        if (entry.length > 0) {\r\n            this.comparerName = comparerList[entry[0].comparerName];\r\n            this.sortDirection = entry[0].sortDirection;\r\n        }\r\n    };\r\n    /**\r\n     * Set the loading indicator\r\n     */\r\n    WorkListContainer.prototype.setLoadingindicator = function () {\r\n        if (this.props.hasTargetFound) {\r\n            this.loading = React.createElement(LoadingIndicator, { id: 'loading', key: 'loading', selectedLanguage: localeStore.instance.Locale, isOnline: applicationStore.instance.isOnline, cssClass: 'section-loader loading' });\r\n        }\r\n        else {\r\n            this.loading = null;\r\n        }\r\n    };\r\n    /**\r\n     * Method called when the user confirms navigation from message panel\r\n     */\r\n    WorkListContainer.prototype.onNavigatetoResponse = function (messageNavigationArguments) {\r\n        if (messageNavigationArguments.canNavigate && messageNavigationArguments.navigateTo === enums.MessageNavigation.toResponse) {\r\n            var openedResponseDetails = worklistStore.instance.getResponseDetails(messageNavigationArguments.responseId.toString());\r\n            responseHelper.openResponse(messageNavigationArguments.responseId, enums.ResponseNavigation.specific, worklistStore.instance.getResponseMode, openedResponseDetails.markGroupId, enums.ResponseViewMode.zoneView, messageNavigationArguments.triggerPoint);\r\n            // Ideally marking mode should be read from the opened response,\r\n            // since multiple marking modes won't come in the same worklist now this will work.\r\n            var selectedMarkingMode = worklistStore.instance.getMarkingModeByWorkListType(worklistStore.instance.currentWorklistType);\r\n            markSchemeHelper.getMarks(messageNavigationArguments.responseId, selectedMarkingMode);\r\n            eCourseworkHelper.fetchECourseWorkCandidateScriptMetadata(messageNavigationArguments.responseId);\r\n        }\r\n        else if (messageNavigationArguments.canNavigate && messageNavigationArguments.navigateTo === enums.SaveAndNavigate.toMenu) {\r\n            userInfoActionCreator.changeMenuVisibility();\r\n        }\r\n        else if (messageNavigationArguments.canNavigate &&\r\n            messageNavigationArguments.navigateTo === enums.SaveAndNavigate.toMarkingCheckWorklist) {\r\n            markingCheckActionCreator.getMarkCheckExaminers(qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId);\r\n        }\r\n    };\r\n    /**\r\n     * Call back function from table wrapper on sorting\r\n     */\r\n    WorkListContainer.prototype.onSortClick = function (comparerName, sortDirection) {\r\n        if (this.isSortRequired() === true) {\r\n            this.comparerName = comparerName;\r\n            this.sortDirection = sortDirection;\r\n            var sortDetails = {\r\n                worklistType: this.props.worklistType,\r\n                responseMode: this.props.responseMode,\r\n                qig: qigStore.instance.selectedQIGForMarkerOperation.markSchemeGroupId,\r\n                comparerName: comparerList[this.comparerName],\r\n                sortDirection: this.sortDirection,\r\n                remarkRequestType: this.props.remarkRequestType\r\n            };\r\n            /* update the current sort order */\r\n            worklistActionCreator.onSortedClick(sortDetails);\r\n            // value is to prevent to set the min width of the grid columns\r\n            this.doSetMinWidth = false;\r\n            this.setState({ renderedOn: Date.now() });\r\n        }\r\n    };\r\n    Object.defineProperty(WorkListContainer.prototype, \"doShowBannerForOnDemand\", {\r\n        /**\r\n         * return boolean value  which showing the worklist message banner for on demand component.\r\n         */\r\n        get: function () {\r\n            var isAggregateQIGTargetsON = qigStore.instance.isAggregatedQigCCEnabledForCurrentQig;\r\n            var currentTarget = targetSummaryStore.instance.getCurrentTarget();\r\n            return isAggregateQIGTargetsON\r\n                && currentTarget.aggregatedOpenResponsesCount > 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return WorkListContainer;\r\n}(pureRenderComponent));\r\nmodule.exports = WorkListContainer;\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),

/***/ 606:
/* no static exports found */
/* all exports used */
/*!*********************************************************!*\
  !*** ./src/stores/qigselector/typings/markingtarget.ts ***!
  \*********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA2LmpzIiwic291cmNlcyI6W10sIm1hcHBpbmdzIjoiOzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 607:
/* no static exports found */
/* all exports used */
/*!********************************************************!*\
  !*** ./src/stores/qigselector/typings/overviewdata.ts ***!
  \********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA3LmpzIiwic291cmNlcyI6W10sIm1hcHBpbmdzIjoiOzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 608:
/* no static exports found */
/* all exports used */
/*!******************************************************!*\
  !*** ./src/stores/qigselector/typings/qigsummary.ts ***!
  \******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA4LmpzIiwic291cmNlcyI6W10sIm1hcHBpbmdzIjoiOzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),

/***/ 611:
/* no static exports found */
/* all exports used */
/*!*************************************************************!*\
  !*** ./src/stores/worklist/typings/markingtargetsummary.ts ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjExLmpzIiwic291cmNlcyI6W10sIm1hcHBpbmdzIjoiOzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ })

});